2025-07-01 04:05:31 - Thread-106 (execute) - INFO - [Exploration]
Sure! Here's how we can gradually build up a series of focused Snowflake SQL queries to retrieve the required data while exploring the dataset step-by-step:

```sql
-- Query 1: Retrieve specific details from the "PATENT" table including patent_id, title, abstract, and date of patents belonging to 'US'.
SELECT "id", "title", "date", "abstract" 
FROM PATENTSVIEW.PATENTSVIEW.PATENT 
WHERE "country" = 'US' 
ORDER BY "date" 
LIMIT 20;
```

```sql
-- Query 2: Get the patents and CPC categories that belong to subsection 'C05' or group 'A01G' from the "CPC_CURRENT" table.
SELECT "patent_id", "section_id", "subsection_id", "group_id" 
FROM PATENTSVIEW.PATENTSVIEW.CPC_CURRENT 
WHERE "subsection_id" = 'C05' OR "group_id" = 'A01G' 
LIMIT 20;
```

```sql
-- Query 3: Join "PATENT" and "CPC_CURRENT" to list patent details (id, title, date, abstract) for patents in CPC subsection 'C05' or group 'A01G'.
SELECT p."id", p."title", p."date", p."abstract" 
FROM PATENTSVIEW.PATENTSVIEW.PATENT p 
JOIN PATENTSVIEW.PATENTSVIEW.CPC_CURRENT c 
ON p."id" = c."patent_id" 
WHERE (c."subsection_id" = 'C05' OR c."group_id" = 'A01G') 
AND p."country" = 'US' 
ORDER BY p."date" 
LIMIT 20;
```

```sql
-- Query 4: Get all backward citations within the "USPATENTCITATION" table where the citation falls within one month before patent application date.
SELECT c."patent_id", COUNT(c."citation_id") AS "backward_citations" 
FROM PATENTSVIEW.PATENTSVIEW.USPATENTCITATION c 
JOIN PATENTSVIEW.PATENTSVIEW.PATENT p 
ON c."citation_id" = p."id"
WHERE p."date" > DATEADD(month, -1, c."date") 
AND p."country" = 'US' 
GROUP BY c."patent_id" 
ORDER BY p."date" 
LIMIT 20;
```

```sql
-- Query 5: Get forward citations where the patent is cited by other patents within one month after its application date.
SELECT c."citation_id", COUNT(c."patent_id") AS "forward_citations" 
FROM PATENTSVIEW.PATENTSVIEW.USPATENTCITATION c 
JOIN PATENTSVIEW.PATENTSVIEW.PATENT p 
ON c."patent_id" = p."id"
WHERE c."date" BETWEEN p."date" AND DATEADD(month, 1, p."date") 
AND p."country" = 'US' 
GROUP BY c."citation_id" 
ORDER BY p."date" 
LIMIT 20;
```

```sql
-- Query 6: Combine backward and forward citation counts with patent details for U.S. patents in CPC subsection 'C05' or group 'A01G'. This query aggregates citation data.
SELECT p."id", p."title", p."date", p."abstract", 
       COALESCE(b."backward_citations", 0) AS "backward_citations",
       COALESCE(f."forward_citations", 0) AS "forward_citations"
FROM PATENTSVIEW.PATENTSVIEW.PATENT p
LEFT JOIN (
    SELECT c."patent_id", COUNT(c."citation_id") AS "backward_citations" 
    FROM PATENTSVIEW.PATENTSVIEW.USPATENTCITATION c 
    JOIN PATENTSVIEW.PATENTSVIEW.PATENT p 
    ON c."citation_id" = p."id"
    WHERE p."date" > DATEADD(month, -1, c."date") 
    GROUP BY c."patent_id"
) b ON p."id" = b."patent_id"
LEFT JOIN (
    SELECT c."citation_id", COUNT(c."patent_id") AS "forward_citations" 
    FROM PATENTSVIEW.PATENTSVIEW.USPATENTCITATION c 
    JOIN PATENTSVIEW.PATENTSVIEW.PATENT p 
    ON c."patent_id" = p."id"
    WHERE c."date" BETWEEN p."date" AND DATEADD(month, 1, p."date") 
    GROUP BY c."citation_id"
) f ON p."id" = f."citation_id"
WHERE p."country" = 'US'
ORDER BY p."date"
LIMIT 20;
```

```sql
-- Query 7: Retrieve only the patents with at least one forward or backward citation in the relevant timeframes (1-month pre/post application date).
SELECT p."id", p."title", p."date", p."abstract", 
       COALESCE(b."backward_citations", 0) AS "backward_citations",
       COALESCE(f."forward_citations", 0) AS "forward_citations"
FROM PATENTSVIEW.PATENTSVIEW.PATENT p
LEFT JOIN (
    SELECT c."patent_id", COUNT(c."citation_id") AS "backward_citations" 
    FROM PATENTSVIEW.PATENTSVIEW.USPATENTCITATION c 
    JOIN PATENTSVIEW.PATENTSVIEW.PATENT p 
    ON c."citation_id" = p."id"
    WHERE p."date" > DATEADD(month, -1, c."date") 
    GROUP BY c."patent_id"
) b ON p."id" = b."patent_id"
LEFT JOIN (
    SELECT c."citation_id", COUNT(c."patent_id") AS "forward_citations" 
    FROM PATENTSVIEW.PATENTSVIEW.USPATENTCITATION c 
    JOIN PATENTSVIEW.PATENTSVIEW.PATENT p 
    ON c."patent_id" = p."id"
    WHERE c."date" BETWEEN p."date" AND DATEADD(month, 1, p."date") 
    GROUP BY c."citation_id"
) f ON p."id" = f."citation_id"
WHERE p."country" = 'US'
AND (b."backward_citations" > 0 OR f."forward_citations" > 0)
ORDER BY p."date"
LIMIT 20;
```

```sql
-- Query 8: Filter the above query to include only patents in CPC subsection 'C05' or group 'A01G'.
SELECT p."id", p."title", p."date", p."abstract",
       COALESCE(b."backward_citations", 0) AS "backward_citations",
       COALESCE(f."forward_citations", 0) AS "forward_citations"
FROM PATENTSVIEW.PATENTSVIEW.PATENT p
JOIN PATENTSVIEW.PATENTSVIEW.CPC_CURRENT c 
ON p."id" = c."patent_id" 
LEFT JOIN (
    SELECT c."patent_id", COUNT(c."citation_id") AS "backward_citations" 
    FROM PATENTSVIEW.PATENTSVIEW.USPATENTCITATION c 
    JOIN PATENTSVIEW.PATENTSVIEW.PATENT p 
    ON c."citation_id" = p."id"
    WHERE p."date" > DATEADD(month, -1, c."date") 
    GROUP BY c."patent_id"
) b ON p."id" = b."patent_id"
LEFT JOIN (
    SELECT c."citation_id", COUNT(c."patent_id") AS "forward_citations" 
    FROM PATENTSVIEW.PATENTSVIEW.USPATENTCITATION c 
    JOIN PATENTSVIEW.PATENTSVIEW.PATENT p 
    ON c."patent_id" = p."id"
    WHERE c."date" BETWEEN p."date" AND DATEADD(month, 1, p."date") 
    GROUP BY c."citation_id"
) f ON p."id" = f."citation_id"
WHERE (c."subsection_id" = 'C05' OR c."group_id" = 'A01G') 
AND p."country" = 'US'
AND (b."backward_citations" > 0 OR f."forward_citations" > 0)
ORDER BY p."date"
LIMIT 20;
```

```sql
-- Query 9: Add the total number of claims (num_claims) to the final filtered data set from the "PATENT" table.
SELECT p."id", p."title", p."date", p."abstract", p."num_claims",
       COALESCE(b."backward_citations", 0) AS "backward_citations",
       COALESCE(f."forward_citations", 0) AS "forward_citations"
FROM PATENTSVIEW.PATENTSVIEW.PATENT p
JOIN PATENTSVIEW.PATENTSVIEW.CPC_CURRENT c 
ON p."id" = c."patent_id" 
LEFT JOIN (
    SELECT c."patent_id", COUNT(c."citation_id") AS "backward_citations" 
    FROM PATENTSVIEW.PATENTSVIEW.USPATENTCITATION c 
    JOIN PATENTSVIEW.PATENTSVIEW.PATENT p 
    ON c."citation_id" = p."id"
    WHERE p."date" > DATEADD(month, -1, c."date") 
    GROUP BY c."patent_id"
) b ON p."id" = b."patent_id"
LEFT JOIN (
    SELECT c."citation_id", COUNT(c."patent_id") AS "forward_citations" 
    FROM PATENTSVIEW.PATENTSVIEW.USPATENTCITATION c 
    JOIN PATENTSVIEW.PATENTSVIEW.PATENT p 
    ON c."patent_id" = p."id"
    WHERE c."date" BETWEEN p."date" AND DATEADD(month, 1, p."date") 
    GROUP BY c."citation_id"
) f ON p."id" = f."citation_id"
WHERE (c."subsection_id" = 'C05' OR c."group_id" = 'A01G') 
AND p."country" = 'US'
AND (b."backward_citations" > 0 OR f."forward_citations" > 0)
ORDER BY p."date"
LIMIT 20;
```

Each query incrementally builds toward the final result. Let me know if additional refinement is needed!
[Exploration]
2025-07-01 04:05:31 - Thread-106 (execute) - INFO - [Try to execute]
-- Query 1: Retrieve specific details from the "PATENT" table including patent_id, title, abstract, and date of patents belonging to 'US'.
SELECT "id", "title", "date", "abstract" 
FROM PATENTSVIEW.PATENTSVIEW.PATENT 
WHERE "country" = 'US' 
ORDER BY "date" 
LIMIT 20;
[Try to execute]
2025-07-01 04:05:35 - Thread-106 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
-- Query 1: Retrieve specific details from the "PATENT" table including patent_id, title, abstract, and date of patents belonging to 'US'.
SELECT "id", "title", "date", "abstract" 
FROM PATENTSVIEW.PATENTSVIEW.PATENT 
WHERE "country" = 'US' 
ORDER BY "date" 
LIMIT 20;
Results:
id,title,date,abstract
3931110,Rapid curing adhesive compositions comprising the reaction product of a ketone aldehyde condensation polymer and a primary aromatic amine,1976-01-06," This invention describes resin products having particular utility as rapid curing adhesives for wood and other materials, and processes for making the resin compositions. The reaction products are made by reacting an aldehyde condensation polymer, such as a phenol-formaldehyde condensation polymer, with a primary ar

[Successfully executed]
2025-07-01 04:05:35 - Thread-106 (execute) - INFO - [Try to execute]
-- Query 2: Get the patents and CPC categories that belong to subsection 'C05' or group 'A01G' from the "CPC_CURRENT" table.
SELECT "patent_id", "section_id", "subsection_id", "group_id" 
FROM PATENTSVIEW.PATENTSVIEW.CPC_CURRENT 
WHERE "subsection_id" = 'C05' OR "group_id" = 'A01G' 
LIMIT 20;
[Try to execute]
2025-07-01 04:05:38 - Thread-106 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
-- Query 2: Get the patents and CPC categories that belong to subsection 'C05' or group 'A01G' from the "CPC_CURRENT" table.
SELECT "patent_id", "section_id", "subsection_id", "group_id" 
FROM PATENTSVIEW.PATENTSVIEW.CPC_CURRENT 
WHERE "subsection_id" = 'C05' OR "group_id" = 'A01G' 
LIMIT 20;
Results:
patent_id,section_id,subsection_id,group_id
6516564,A,A01,A01G
11076534,A,A01,A01G
5408803,A,A01,A01G
4381623,A,A01,A01G
8478003,A,A01,A01G
10849278,A,A01,A01G
7634870,A,A01,A01G
9241446,A,A01,A01G
6550183,A,A01,A01G
10966377,A,A01,A01G
4955499,A,A01,A01G
3930334,A,A01,A01G
5581937,A,A01,A01G
4190984,A,A01,A01G
5056259,A,A01,A01G
9615657,A,A01,A01G
6038811,A,A01,A01G

[Successfully executed]
2025-07-01 04:05:38 - Thread-106 (execute) - INFO - [Try to execute]
-- Query 3: Join "PATENT" and "CPC_CURRENT" to list patent details (id, title, date, abstract) for patents in CPC subsection 'C05' or group 'A01G'.
SELECT p."id", p."title", p."date", p."abstract" 
FROM PATENTSVIEW.PATENTSVIEW.PATENT p 
JOIN PATENTSVIEW.PATENTSVIEW.CPC_CURRENT c 
ON p."id" = c."patent_id" 
WHERE (c."subsection_id" = 'C05' OR c."group_id" = 'A01G') 
AND p."country" = 'US' 
ORDER BY p."date" 
LIMIT 20;
[Try to execute]
2025-07-01 04:05:55 - Thread-106 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
-- Query 3: Join "PATENT" and "CPC_CURRENT" to list patent details (id, title, date, abstract) for patents in CPC subsection 'C05' or group 'A01G'.
SELECT p."id", p."title", p."date", p."abstract" 
FROM PATENTSVIEW.PATENTSVIEW.PATENT p 
JOIN PATENTSVIEW.PATENTSVIEW.CPC_CURRENT c 
ON p."id" = c."patent_id" 
WHERE (c."subsection_id" = 'C05' OR c."group_id" = 'A01G') 
AND p."country" = 'US' 
ORDER BY p."date" 
LIMIT 20;
Results:
id,title,date,abstract
3930334,Hanging apparatus for falls and hanging plant,1976-01-06," A hanging apparatus for falls and hanging plant which includes a pair of liquid receptacles which are supported in respective top and bottom positions with the top liquid receptacle being substantially directly above the bottom receptacle. The top liquid receptacle is capable of dropping liquid from a plurality of locations to the bottom liquid receptacle, and the bottom liquid receptacle is positioned for

[Successfully executed]
2025-07-01 04:05:55 - Thread-106 (execute) - INFO - [Try to execute]
-- Query 4: Get all backward citations within the "USPATENTCITATION" table where the citation falls within one month before patent application date.
SELECT c."patent_id", COUNT(c."citation_id") AS "backward_citations" 
FROM PATENTSVIEW.PATENTSVIEW.USPATENTCITATION c 
JOIN PATENTSVIEW.PATENTSVIEW.PATENT p 
ON c."citation_id" = p."id"
WHERE p."date" > DATEADD(month, -1, c."date") 
AND p."country" = 'US' 
GROUP BY c."patent_id" 
ORDER BY p."date" 
LIMIT 20;
[Try to execute]
2025-07-01 04:05:56 - Thread-106 (execute) - INFO - [Error occurred]
{'status': 'error', 'error_msg': '##ERROR##002024 (42601): SQL compilation error:\n[P."date"] is not a valid order by expression'}
[Error occurred]
2025-07-01 04:06:27 - Thread-106 (execute) - INFO - [Corrected SQL]
```sql
--Description: The error occurs because we attempted to order the results by "p.\"date\"" without including it in the SELECT clause. In SQL, any column referenced in the ORDER BY clause must also be part of the SELECT clause. The solution is to add "p.\"date\"" to the SELECT statement and also include it in the GROUP BY clause since it is not part of an aggregate function like COUNT(). This ensures the query is logically consistent and error-free. Here's the corrected SQL query:

SELECT c."patent_id", COUNT(c."citation_id") AS "backward_citations", p."date" 
FROM PATENTSVIEW.PATENTSVIEW.USPATENTCITATION c 
JOIN PATENTSVIEW.PATENTSVIEW.PATENT p 
ON c."citation_id" = p."id"
WHERE p."date" > DATEADD(month, -1, c."date") 
AND p."country" = 'US' 
GROUP BY c."patent_id", p."date" 
ORDER BY p."date" 
LIMIT 20;
```
[Corrected SQL]
2025-07-01 04:06:54 - Thread-106 (execute) - INFO - [Results for corrected sql]
{'status': 'error', 'error_msg': "##ERROR##100035 (22007): Timestamp '1994-06-00' is not recognized"}
[Results for corrected sql]
2025-07-01 04:07:38 - Thread-106 (execute) - INFO - [Corrected SQL]
```sql
--Description: The error occurs because of invalid date formats like '1994-06-00', which the SQL engine cannot process. To prevent the issue, we must ensure that the "c.\"date\"" and "p.\"date\"" fields are valid dates before performing any operations. By using `TRY_TO_DATE`, we can attempt to safely convert the values to valid dates, with rows failing the conversion being excluded. This way, we avoid crashing the query while still implementing the necessary logic for finding backward citations. Below is the corrected SQL query that safely handles date conversion:

SELECT c."patent_id", COUNT(c."citation_id") AS "backward_citations", p."date" 
FROM PATENTSVIEW.PATENTSVIEW.USPATENTCITATION c 
JOIN PATENTSVIEW.PATENTSVIEW.PATENT p 
ON c."citation_id" = p."id"
WHERE TRY_TO_DATE(c."date") IS NOT NULL  -- Ensure "c.date" has a valid date
AND TRY_TO_DATE(p."date") IS NOT NULL    -- Ensure "p.date" has a valid date
AND p."date" > DATEADD(month, -1, c."date") -- Apply the date range condition
AND p."country" = 'US'                  -- Filter for U.S. patents
GROUP BY c."patent_id", p."date" 
ORDER BY p."date" 
LIMIT 20;
```
[Corrected SQL]
2025-07-01 04:09:14 - Thread-106 (execute) - INFO - [Results for corrected sql]
patent_id,backward_citations,date
7585493,1,1976-01-06
6759904,1,1976-01-06
5650219,1,1976-01-06
4443164,1,1976-01-06
6560892,1,1976-01-06
D718400,1,1976-01-06
7398636,1,1976-01-06
4806392,1,1976-01-06
4029428,1,1976-01-06
4222340,1,1976-01-06
4271988,1,1976-01-06
6323534,1,1976-01-06
4428020,1,1976-01-06
10844636,1,1976-01-06
7276970,1,1976-01-06
9382182,1,1976-01-06
6381334,1,1976-01-06
9103144,1,1976-01-06

[Results for corrected sql]
2025-07-01 04:10:33 - Thread-106 (execute) - INFO - [Corrected other sqls]
```sql
--Description: For Query 5, the issue with invalid date formats can be addressed by ensuring that dates are valid before performing operations. Adding `TRY_TO_DATE` ensures only valid dates are considered during comparison. The corrected query is as follows:

SELECT c."citation_id", COUNT(c."patent_id") AS "forward_citations" 
FROM PATENTSVIEW.PATENTSVIEW.USPATENTCITATION c 
JOIN PATENTSVIEW.PATENTSVIEW.PATENT p 
ON c."patent_id" = p."id"
WHERE TRY_TO_DATE(c."date") IS NOT NULL  -- Ensure "c.date" has a valid date
AND TRY_TO_DATE(p."date") IS NOT NULL    -- Ensure "p.date" has a valid date
AND c."date" BETWEEN p."date" AND DATEADD(month, 1, p."date") 
AND p."country" = 'US' 
GROUP BY c."citation_id" 
ORDER BY p."date" 
LIMIT 20;
```

```sql
--Description: For Query 6, the logic involves aggregating backward and forward citations and combining them with patent details. Invalid date handling is added for both backward and forward citation subqueries using `TRY_TO_DATE` to ensure dates are valid before applying filters. Here's the corrected SQL:

SELECT p."id", p."title", p."date", p."abstract", 
       COALESCE(b."backward_citations", 0) AS "backward_citations",
       COALESCE(f."forward_citations", 0) AS "forward_citations"
FROM PATENTSVIEW.PATENTSVIEW.PATENT p
LEFT JOIN (
    SELECT c."patent_id", COUNT(c."citation_id") AS "backward_citations" 
    FROM PATENTSVIEW.PATENTSVIEW.USPATENTCITATION c 
    JOIN PATENTSVIEW.PATENTSVIEW.PATENT p 
    ON c."citation_id" = p."id"
    WHERE TRY_TO_DATE(c."date") IS NOT NULL 
    AND TRY_TO_DATE(p."date") IS NOT NULL 
    AND p."date" > DATEADD(month, -1, c."date") 
    GROUP BY c."patent_id"
) b ON p."id" = b."patent_id"
LEFT JOIN (
    SELECT c."citation_id", COUNT(c."patent_id") AS "forward_citations" 
    FROM PATENTSVIEW.PATENTSVIEW.USPATENTCITATION c 
    JOIN PATENTSVIEW.PATENTSVIEW.PATENT p 
    ON c."patent_id" = p."id"
    WHERE TRY_TO_DATE(c."date") IS NOT NULL 
    AND TRY_TO_DATE(p."date") IS NOT NULL 
    AND c."date" BETWEEN p."date" AND DATEADD(month, 1, p."date") 
    GROUP BY c."citation_id"
) f ON p."id" = f."citation_id"
WHERE p."country" = 'US'
ORDER BY p."date"
LIMIT 20;
```

```sql
--Description: For Query 7, filtering patents with at least one forward or backward citation within 1 month of their application dates also requires validating dates using `TRY_TO_DATE` in both the forward and backward subqueries. Here's the corrected SQL:

SELECT p."id", p."title", p."date", p."abstract", 
       COALESCE(b."backward_citations", 0) AS "backward_citations",
       COALESCE(f."forward_citations", 0) AS "forward_citations"
FROM PATENTSVIEW.PATENTSVIEW.PATENT p
LEFT JOIN (
    SELECT c."patent_id", COUNT(c."citation_id") AS "backward_citations" 
    FROM PATENTSVIEW.PATENTSVIEW.USPATENTCITATION c 
    JOIN PATENTSVIEW.PATENTSVIEW.PATENT p 
    ON c."citation_id" = p."id"
    WHERE TRY_TO_DATE(c."date") IS NOT NULL 
    AND TRY_TO_DATE(p."date") IS NOT NULL 
    AND p."date" > DATEADD(month, -1, c."date") 
    GROUP BY c."patent_id"
) b ON p."id" = b."patent_id"
LEFT JOIN (
    SELECT c."citation_id", COUNT(c."patent_id") AS "forward_citations" 
    FROM PATENTSVIEW.PATENTSVIEW.USPATENTCITATION c 
    JOIN PATENTSVIEW.PATENTSVIEW.PATENT p 
    ON c."patent_id" = p."id"
    WHERE TRY_TO_DATE(c."date") IS NOT NULL 
    AND TRY_TO_DATE(p."date") IS NOT NULL 
    AND c."date" BETWEEN p."date" AND DATEADD(month, 1, p."date") 
    GROUP BY c."citation_id"
) f ON p."id" = f."citation_id"
WHERE p."country" = 'US'
AND (b."backward_citations" > 0 OR f."forward_citations" > 0)
ORDER BY p."date"
LIMIT 20;
```

```sql
--Description: For Query 8, which filters patents in CPC subsection 'C05' or group 'A01G', handling invalid dates in both forward and backward citation subqueries is necessary. Here is the corrected SQL:

SELECT p."id", p."title", p."date", p."abstract",
       COALESCE(b."backward_citations", 0) AS "backward_citations",
       COALESCE(f."forward_citations", 0) AS "forward_citations"
FROM PATENTSVIEW.PATENTSVIEW.PATENT p
JOIN PATENTSVIEW.PATENTSVIEW.CPC_CURRENT c 
ON p."id" = c."patent_id" 
LEFT JOIN (
    SELECT c."patent_id", COUNT(c."citation_id") AS "backward_citations" 
    FROM PATENTSVIEW.PATENTSVIEW.USPATENTCITATION c 
    JOIN PATENTSVIEW.PATENTSVIEW.PATENT p 
    ON c."citation_id" = p."id"
    WHERE TRY_TO_DATE(c."date") IS NOT NULL 
    AND TRY_TO_DATE(p."date") IS NOT NULL 
    AND p."date" > DATEADD(month, -1, c."date") 
    GROUP BY c."patent_id"
) b ON p."id" = b."patent_id"
LEFT JOIN (
    SELECT c."citation_id", COUNT(c."patent_id") AS "forward_citations" 
    FROM PATENTSVIEW.PATENTSVIEW.USPATENTCITATION c 
    JOIN PATENTSVIEW.PATENTSVIEW.PATENT p 
    ON c."patent_id" = p."id"
    WHERE TRY_TO_DATE(c."date") IS NOT NULL 
    AND TRY_TO_DATE(p."date") IS NOT NULL 
    AND c."date" BETWEEN p."date" AND DATEADD(month, 1, p."date") 
    GROUP BY c."citation_id"
) f ON p."id" = f."citation_id"
WHERE (c."subsection_id" = 'C05' OR c."group_id" = 'A01G') 
AND p."country" = 'US'
AND (b."backward_citations" > 0 OR f."forward_citations" > 0)
ORDER BY p."date"
LIMIT 20;
```

```sql
--Description: For Query 9, adding the total number of claims alongside forward and backward citations, the invalid date issue is resolved as in the previous queries by using `TRY_TO_DATE`. Here's the corrected SQL:

SELECT p."id", p."title", p."date", p."abstract", p."num_claims",
       COALESCE(b."backward_citations", 0) AS "backward_citations",
       COALESCE(f."forward_citations", 0) AS "forward_citations"
FROM PATENTSVIEW.PATENTSVIEW.PATENT p
JOIN PATENTSVIEW.PATENTSVIEW.CPC_CURRENT c 
ON p."id" = c."patent_id" 
LEFT JOIN (
    SELECT c."patent_id", COUNT(c."citation_id") AS "backward_citations" 
    FROM PATENTSVIEW.PATENTSVIEW.USPATENTCITATION c 
    JOIN PATENTSVIEW.PATENTSVIEW.PATENT p 
    ON c."citation_id" = p."id"
    WHERE TRY_TO_DATE(c."date") IS NOT NULL 
    AND TRY_TO_DATE(p."date") IS NOT NULL 
    AND p."date" > DATEADD(month, -1, c."date") 
    GROUP BY c."patent_id"
) b ON p."id" = b."patent_id"
LEFT JOIN (
    SELECT c."citation_id", COUNT(c."patent_id") AS "forward_citations" 
    FROM PATENTSVIEW.PATENTSVIEW.USPATENTCITATION c 
    JOIN PATENTSVIEW.PATENTSVIEW.PATENT p 
    ON c."patent_id" = p."id"
    WHERE TRY_TO_DATE(c."date") IS NOT NULL 
    AND TRY_TO_DATE(p."date") IS NOT NULL 
    AND c."date" BETWEEN p."date" AND DATEADD(month, 1, p."date") 
    GROUP BY c."citation_id"
) f ON p."id" = f."citation_id"
WHERE (c."subsection_id" = 'C05' OR c."group_id" = 'A01G') 
AND p."country" = 'US'
AND (b."backward_citations" > 0 OR f."forward_citations" > 0)
ORDER BY p."date"
LIMIT 20;
```
[Corrected other sqls]
2025-07-01 04:10:33 - Thread-106 (execute) - INFO - [Successfully corrected]
Successfully executed. SQL:
-- Query 4: Get all backward citations within the "USPATENTCITATION" table where the citation falls within one month before patent application date.
SELECT c."patent_id", COUNT(c."citation_id") AS "backward_citations" 
FROM PATENTSVIEW.PATENTSVIEW.USPATENTCITATION c 
JOIN PATENTSVIEW.PATENTSVIEW.PATENT p 
ON c."citation_id" = p."id"
WHERE p."date" > DATEADD(month, -1, c."date") 
AND p."country" = 'US' 
GROUP BY c."patent_id" 
ORDER BY p."date" 
LIMIT 20;
Results:
patent_id,backward_citations,date
7585493,1,1976-01-06
6759904,1,1976-01-06
5650219,1,1976-01-06
4443164,1,1976-01-06
6560892,1,1976-01-06
D718400,1,1976-01-06
7398636,1,1976-01-06
4806392,1,1976-01-06
4029428,1,1976-01-06
4222340,1,1976-01-06
4271988,1,1976-01-06
6323534,1,1976-01-06
4428020,1,1976-01-06
10844636,1,1976-01-06
7276970,1,1976-01-06
9382182,1,1976-01-06
6381334,1,1976-01-06
9103144,1,1976-01-06

[Successfully corrected]
2025-07-01 04:10:33 - Thread-106 (execute) - INFO - [Try to execute]
--Description: For Query 5, the issue with invalid date formats can be addressed by ensuring that dates are valid before performing operations. Adding `TRY_TO_DATE` ensures only valid dates are considered during comparison. The corrected query is as follows:

SELECT c."citation_id", COUNT(c."patent_id") AS "forward_citations" 
FROM PATENTSVIEW.PATENTSVIEW.USPATENTCITATION c 
JOIN PATENTSVIEW.PATENTSVIEW.PATENT p 
ON c."patent_id" = p."id"
WHERE TRY_TO_DATE(c."date") IS NOT NULL  -- Ensure "c.date" has a valid date
AND TRY_TO_DATE(p."date") IS NOT NULL    -- Ensure "p.date" has a valid date
AND c."date" BETWEEN p."date" AND DATEADD(month, 1, p."date") 
AND p."country" = 'US' 
GROUP BY c."citation_id" 
ORDER BY p."date" 
LIMIT 20;
[Try to execute]
2025-07-01 04:10:33 - Thread-106 (execute) - INFO - [Error occurred]
{'status': 'error', 'error_msg': '##ERROR##002024 (42601): SQL compilation error:\n[P."date"] is not a valid order by expression'}
[Error occurred]
2025-07-01 04:11:21 - Thread-106 (execute) - INFO - [Corrected SQL]
```sql
--Description: The error occurs because "p.\"date\"" is referenced in the ORDER BY clause but is not included in the SELECT statement, which violates SQL syntax rules. This happens because SQL requires any column used in the ORDER BY clause to be part of the SELECT clause. To fix this, I add "p.\"date\"" to the SELECT clause. Additionally, since "p.\"date\"" is not an aggregated column, it must also be included in the GROUP BY clause to ensure that the query is logically consistent when grouping the data. This resolves the issue while maintaining the query's intent of counting forward citations and ordering by application date. Below is the corrected SQL:

SELECT c."citation_id", COUNT(c."patent_id") AS "forward_citations", p."date" 
FROM PATENTSVIEW.PATENTSVIEW.USPATENTCITATION c 
JOIN PATENTSVIEW.PATENTSVIEW.PATENT p 
ON c."patent_id" = p."id"
WHERE TRY_TO_DATE(c."date") IS NOT NULL  -- Ensure "c.date" is valid
AND TRY_TO_DATE(p."date") IS NOT NULL    -- Ensure "p.date" is valid
AND c."date" BETWEEN p."date" AND DATEADD(month, 1, p."date") 
AND p."country" = 'US' 
GROUP BY c."citation_id", p."date"       -- Include "p.date" in GROUP BY
ORDER BY p."date"                        -- Use "p.date" for ordering
LIMIT 20;
```
[Corrected SQL]
2025-07-01 04:12:49 - Thread-106 (execute) - INFO - [Results for corrected sql]
citation_id,forward_citations,date
4469402,1,1984-08-28
4238423,1,1986-11-18
4234555,1,1989-10-03
4853376,1,1992-10-27

[Results for corrected sql]
2025-07-01 04:14:13 - Thread-106 (execute) - INFO - [Corrected other sqls]
```sql
--Description: For Query 6, the invalid date issue can be addressed in both backward and forward citation subqueries using `TRY_TO_DATE` to ensure only valid dates are processed. Additionally, each subquery needs to ensure that columns used in the ORDER BY clause (if applicable) or SELECT statements are properly included in the GROUP BY clause to maintain syntactical correctness. Below is the corrected SQL:

SELECT p."id", p."title", p."date", p."abstract", 
       COALESCE(b."backward_citations", 0) AS "backward_citations",
       COALESCE(f."forward_citations", 0) AS "forward_citations"
FROM PATENTSVIEW.PATENTSVIEW.PATENT p
LEFT JOIN (
    SELECT c."patent_id", COUNT(c."citation_id") AS "backward_citations", p."date" 
    FROM PATENTSVIEW.PATENTSVIEW.USPATENTCITATION c 
    JOIN PATENTSVIEW.PATENTSVIEW.PATENT p 
    ON c."citation_id" = p."id"
    WHERE TRY_TO_DATE(c."date") IS NOT NULL 
    AND TRY_TO_DATE(p."date") IS NOT NULL 
    AND p."date" > DATEADD(month, -1, c."date") 
    GROUP BY c."patent_id", p."date"
) b ON p."id" = b."patent_id"
LEFT JOIN (
    SELECT c."citation_id", COUNT(c."patent_id") AS "forward_citations", p."date"
    FROM PATENTSVIEW.PATENTSVIEW.USPATENTCITATION c 
    JOIN PATENTSVIEW.PATENTSVIEW.PATENT p 
    ON c."patent_id" = p."id"
    WHERE TRY_TO_DATE(c."date") IS NOT NULL 
    AND TRY_TO_DATE(p."date") IS NOT NULL 
    AND c."date" BETWEEN p."date" AND DATEADD(month, 1, p."date") 
    GROUP BY c."citation_id", p."date"
) f ON p."id" = f."citation_id"
WHERE p."country" = 'US'
ORDER BY p."date"
LIMIT 20;
```

```sql
--Description: For Query 7, which filters patents with at least one forward or backward citation within 1 month of their application dates, handling invalid dates is essential. Using `TRY_TO_DATE` ensures only valid dates are compared. Additionally, to avoid ORDER BY clause errors, columns used in SELECT and GROUP BY statements must be consistent. Here's the corrected SQL:

SELECT p."id", p."title", p."date", p."abstract", 
       COALESCE(b."backward_citations", 0) AS "backward_citations",
       COALESCE(f."forward_citations", 0) AS "forward_citations"
FROM PATENTSVIEW.PATENTSVIEW.PATENT p
LEFT JOIN (
    SELECT c."patent_id", COUNT(c."citation_id") AS "backward_citations", p."date"
    FROM PATENTSVIEW.PATENTSVIEW.USPATENTCITATION c 
    JOIN PATENTSVIEW.PATENTSVIEW.PATENT p 
    ON c."citation_id" = p."id"
    WHERE TRY_TO_DATE(c."date") IS NOT NULL 
    AND TRY_TO_DATE(p."date") IS NOT NULL 
    AND p."date" > DATEADD(month, -1, c."date") 
    GROUP BY c."patent_id", p."date"
) b ON p."id" = b."patent_id"
LEFT JOIN (
    SELECT c."citation_id", COUNT(c."patent_id") AS "forward_citations", p."date"
    FROM PATENTSVIEW.PATENTSVIEW.USPATENTCITATION c 
    JOIN PATENTSVIEW.PATENTSVIEW.PATENT p 
    ON c."patent_id" = p."id"
    WHERE TRY_TO_DATE(c."date") IS NOT NULL 
    AND TRY_TO_DATE(p."date") IS NOT NULL 
    AND c."date" BETWEEN p."date" AND DATEADD(month, 1, p."date") 
    GROUP BY c."citation_id", p."date"
) f ON p."id" = f."citation_id"
WHERE p."country" = 'US'
AND (b."backward_citations" > 0 OR f."forward_citations" > 0)
ORDER BY p."date"
LIMIT 20;
```

```sql
--Description: For Query 8, which filters patents in CPC subsection 'C05' or group 'A01G', handling invalid dates in both forward and backward citation subqueries is critical. Additionally, ensuring proper inclusion of columns in the GROUP BY clause is necessary for syntactical correctness. Here’s the corrected SQL:

SELECT p."id", p."title", p."date", p."abstract",
       COALESCE(b."backward_citations", 0) AS "backward_citations",
       COALESCE(f."forward_citations", 0) AS "forward_citations"
FROM PATENTSVIEW.PATENTSVIEW.PATENT p
JOIN PATENTSVIEW.PATENTSVIEW.CPC_CURRENT c 
ON p."id" = c."patent_id" 
LEFT JOIN (
    SELECT c."patent_id", COUNT(c."citation_id") AS "backward_citations", p."date"
    FROM PATENTSVIEW.PATENTSVIEW.USPATENTCITATION c 
    JOIN PATENTSVIEW.PATENTSVIEW.PATENT p 
    ON c."citation_id" = p."id"
    WHERE TRY_TO_DATE(c."date") IS NOT NULL 
    AND TRY_TO_DATE(p."date") IS NOT NULL 
    AND p."date" > DATEADD(month, -1, c."date") 
    GROUP BY c."patent_id", p."date"
) b ON p."id" = b."patent_id"
LEFT JOIN (
    SELECT c."citation_id", COUNT(c."patent_id") AS "forward_citations", p."date"
    FROM PATENTSVIEW.PATENTSVIEW.USPATENTCITATION c 
    JOIN PATENTSVIEW.PATENTSVIEW.PATENT p 
    ON c."patent_id" = p."id"
    WHERE TRY_TO_DATE(c."date") IS NOT NULL 
    AND TRY_TO_DATE(p."date") IS NOT NULL 
    AND c."date" BETWEEN p."date" AND DATEADD(month, 1, p."date") 
    GROUP BY c."citation_id", p."date"
) f ON p."id" = f."citation_id"
WHERE (c."subsection_id" = 'C05' OR c."group_id" = 'A01G') 
AND p."country" = 'US'
AND (b."backward_citations" > 0 OR f."forward_citations" > 0)
ORDER BY p."date"
LIMIT 20;
```

```sql
--Description: For Query 9, which includes the total number of claims alongside forward and backward citations, invalid dates are handled using `TRY_TO_DATE`. As with previous queries, columns used in SELECT or ORDER BY must also be included in GROUP BY to ensure correct syntax. Here's the corrected SQL:

SELECT p."id", p."title", p."date", p."abstract", p."num_claims",
       COALESCE(b."backward_citations", 0) AS "backward_citations",
       COALESCE(f."forward_citations", 0) AS "forward_citations"
FROM PATENTSVIEW.PATENTSVIEW.PATENT p
JOIN PATENTSVIEW.PATENTSVIEW.CPC_CURRENT c 
ON p."id" = c."patent_id" 
LEFT JOIN (
    SELECT c."patent_id", COUNT(c."citation_id") AS "backward_citations", p."date"
    FROM PATENTSVIEW.PATENTSVIEW.USPATENTCITATION c 
    JOIN PATENTSVIEW.PATENTSVIEW.PATENT p 
    ON c."citation_id" = p."id"
    WHERE TRY_TO_DATE(c."date") IS NOT NULL 
    AND TRY_TO_DATE(p."date") IS NOT NULL 
    AND p."date" > DATEADD(month, -1, c."date") 
    GROUP BY c."patent_id", p."date"
) b ON p."id" = b."patent_id"
LEFT JOIN (
    SELECT c."citation_id", COUNT(c."patent_id") AS "forward_citations", p."date"
    FROM PATENTSVIEW.PATENTSVIEW.USPATENTCITATION c 
    JOIN PATENTSVIEW.PATENTSVIEW.PATENT p 
    ON c."patent_id" = p."id"
    WHERE TRY_TO_DATE(c."date") IS NOT NULL 
    AND TRY_TO_DATE(p."date") IS NOT NULL 
    AND c."date" BETWEEN p."date" AND DATEADD(month, 1, p."date") 
    GROUP BY c."citation_id", p."date"
) f ON p."id" = f."citation_id"
WHERE (c."subsection_id" = 'C05' OR c."group_id" = 'A01G') 
AND p."country" = 'US'
AND (b."backward_citations" > 0 OR f."forward_citations" > 0)
ORDER BY p."date"
LIMIT 20;
```
[Corrected other sqls]
2025-07-01 04:14:13 - Thread-106 (execute) - INFO - [Successfully corrected]
Successfully executed. SQL:
--Description: For Query 5, the issue with invalid date formats can be addressed by ensuring that dates are valid before performing operations. Adding `TRY_TO_DATE` ensures only valid dates are considered during comparison. The corrected query is as follows:

SELECT c."citation_id", COUNT(c."patent_id") AS "forward_citations" 
FROM PATENTSVIEW.PATENTSVIEW.USPATENTCITATION c 
JOIN PATENTSVIEW.PATENTSVIEW.PATENT p 
ON c."patent_id" = p."id"
WHERE TRY_TO_DATE(c."date") IS NOT NULL  -- Ensure "c.date" has a valid date
AND TRY_TO_DATE(p."date") IS NOT NULL    -- Ensure "p.date" has a valid date
AND c."date" BETWEEN p."date" AND DATEADD(month, 1, p."date") 
AND p."country" = 'US' 
GROUP BY c."citation_id" 
ORDER BY p."date" 
LIMIT 20;
Results:
citation_id,forward_citations,date
4469402,1,1984-08-28
4238423,1,1986-11-18
4234555,1,1989-10-03
4853376,1,1992-10-27

[Successfully corrected]
2025-07-01 04:14:13 - Thread-106 (execute) - INFO - itercount: 0
2025-07-01 04:14:13 - Thread-106 (execute) - INFO - [Self-refine]
Table full name: PATENTSVIEW.PATENTSVIEW.BRF_SUM_TEXT
Column name: uuid Type: TEXT
Column name: patent_id Type: TEXT
Column name: text Type: TEXT
Sample rows:
[{'uuid': 'trk41aa0c2vx03i8zta2low1w', 'patent_id': '8340917', 'text': 'BACKGROUND Research in many areas of biotechnology, such as drug discovery, disease analysis, and crop improvements, involves matching fragments of sequences that are generated from a sample, with long sequences that represent biological components. For example, the human genome is a double helix of sequences of nucleotides, where one sequence is a complement of the other. There are 4 nucleotides in DNA sequences, more in RNA and protein sequences. Each nucleotide in a DNA sequence is represented by a character from the alphabet {a,c,t,g}. Each strand of the double helix that constitutes the human genome is a sequence of more than 3 billion characters. The 2 strands are not independent. For each character position in one strand, there is a complementary character in the corresponding position of the second strand. The characters a and t are complements of one another, and the characters c and g are complements of one another. Each character is also called a base, hence a genomic sequence is often said to contain more than 3 billion base-pairs (a base and its complement). An average laboratory test of a DNA sample takes hours to days, and typically generates over 100 million test fragments, each having a small number of letters, usually between 36 and 500 letters. Although test fragments are in the form of a single strand, a test fragment must be matched against both strands because it is unknown from which strand the test fragment originates. Typically, the test fragments are individually matched to selected chromosomes in a process that may take many hours or days. Matching between the fragments and the chromosomes typically allows for 1 or 2 errors in the match, such as mismatched letters or surplus characters in the fragment, to account for experimental errors. Some algorithms that perform fragment matching while allowing for errors are called BLAST algorithms. BLAST algorithms utilize in-memory analysis and are computationally intensive. Thus, they are generally inadequate for the high numbers of fragments that are generated for matching.'}, {'uuid': '3su3q8p4ekjd6xhnx2t4jys8t', 'patent_id': '9223704', 'text': 'BACKGROUND The present disclosure relates to a memory access control circuit, and more particularly, to a memory access control circuit, prefetch circuit, memory device and information processing system for gaining burst access to a memory. A processor uses a memory both as an instruction storage area and as a data storage area. Therefore, it is necessary for the processor to access the memory highly frequently during the execution of a program. In order to reduce the burden on the memory resulting from such frequent accesses, a cache memory is provided between the processor and memory. A cache memory manages a plurality of continuous words as a line. Therefore, the plurality of words are filled altogether at the time of a cache mishit. At this time, a burst transfer is used to transfer data from the memory. In order to achieve transfer of a plurality of words using a burst transfer, a system is known which can change the sequence of the words to be transferred by using the wraparound function adapted to wrap around the addresses in a specific range. For example, a data processor has been proposed which allows different types of burst transfer such as four-burst wrap (WRAP4), eight-burst wrap (WRAP8) and 16-burst wrap (WRAP16) to be specified (refer, for example, to Japanese Patent Laid-Open No. 2006-155488). As the memory becomes increasingly layered, a prefetch buffer may be provided between the cache memory and memory. In this case, the size in which the prefetch buffer is managed is likely larger than the line size of the cache memory, thus resulting in a larger burst transfer size. For example, if the processor requests a four-burst wrap, it is likely that the prefetch buffer may request a 16-burst wrap to the memory. If the wraparound function is used in this case, and if the start address is the third word as illustrated in FIG. 7A , the remaining zeroth to second words are not transferred quickly, thus causing the processor to stall. The present disclosure has been made in light of the foregoing, and it is desirable, when generating a wraparound memory access request, different in size from the original, to perform start address conversion so as to reduce the processor stall cycles. According to a first mode of the present disclosure, there are provided a memory access control circuit, prefetch buffer, memory device and information processing system. Each of the memory access control circuit, memory device and information processing system includes a determination section, request generation section and address conversion section. The determination section determines whether a target requested by a first wraparound memory access request from a processor is stored in the prefetch buffer. The request generation section generates a second wraparound memory access request including the target if it is determined that the target is not stored in the prefetch buffer. The address conversion section converts the start address of the first wraparound memory access request according to predetermined rules for use as a start address of the second wraparound memory access request. This speeds up the time it takes to complete the response to the first wraparound memory access request, thus providing reduced processor stall cycles. Further, in the first mode, the address conversion section may achieve the address conversion by replacing a lower bit portion of the unit of burst of the start address of the first wraparound memory access request with a predetermined value. In this case, the address conversion section may achieve the address conversion by replacing, of the start address of the first wraparound memory access request, the lower bit portion appropriate in length to the wraparound size of the first wraparound memory access request with the predetermined value. Further, the address conversion section may achieve the address conversion by replacing the lower bit portion of the start address of the first wraparound memory access request with zeros. In particular, if the first wraparound memory access request is intended to request a four-burst wraparound, and if the second wraparound memory access request is intended to request a 16-burst wraparound, the address conversion section may achieve the address conversion by replacing the lower two bits of the unit of burst of the start address of the first wraparound memory access request with zeros. Further, if the first wraparound memory access request is intended to request a four-burst wraparound, and if the second wraparound memory access request is intended to request an eight-burst wraparound, the address conversion section may achieve the address conversion by replacing the lower two bits of the unit of burst of the start address of the first wraparound memory access request with zeros. Still further, if the first wraparound memory access request is intended to request an eight-burst wraparound, and if the second wraparound memory access request is intended to request a 16-burst wraparound, the address conversion section may achieve the address conversion by replacing the lower three bits of the unit of burst of the start address of the first wraparound memory access request with zeros. The present disclosure performs start address conversion when generating a wraparound memory access request, different in size from the original, thus providing reduced processor stall cycles.'}, {'uuid': 'b0qs060fwm3tavltiwk2ye9wl', 'patent_id': '4140085', 'text': 'The invention relates to a method and an apparatus for controlling the proportion of fuel and air in a combustible fuel-air mixture fed to an internal combustion engine. More particularly, the invention relates to an apparatus in which an oxygen sensor (.lambda.-sensor) monitors the exhaust gas composition and generates a signal which is used in influencing the fuel-air ratio. For this purpose, the sensor signal is compared with a set-point or threshold value. Known in the art are systems which determine the duration of fuel injection control pulses by disposing in the exhaust system a .lambda.-sensor which generates an electrical signal that alternates abruptly between a higher and lower voltage depending on whether the mixture fed to the engine is rich or lean. This output signal is used as the actual value in a control loop and is used by the fuel injection system to determine the duration of the control pulses used to actuate the injection valves. The basic duration of the fuel injection control pulses is determined on the basis of two major variables, i.e., the engine rpm and the air flow rate aspirated by the engine. The fuel injection control pulses are generated in synchronism with crankshaft rotations. In this previously proposed system, an attempt is made to maintain the .lambda. control in the critical temperature domain, where the sensor has a very high internal resistance and is capable only to generate signals which are substantially shifted in voltage, by permitting the threshold or set-point voltage with which the sensor output is compared to follow the changing sensor potential. In this process, however, considerable non-linearities are produced. It is also particularly disadvantageous that aging an a dispersion of the characteristics of the sensor make the adjustment and the control process very difficult in this critical temperature domain. It is a principal object of the present invention to provide a fuel injection system with a method and an apparatus to permit reliable controlled operation of the fuel injection system even at relatively low oxygen sensor temperatures. It is a further object of the invention to provide a circuit for carrying out this method which is simply constructed and relatively inexpensiv
--------------------------------------------------
Table full name: PATENTSVIEW.PATENTSVIEW.FOREIGNCITATION
Column name: patent_id Type: TEXT
Column name: category Type: TEXT
Column name: uuid Type: TEXT
Column name: date Type: TEXT
Column name: country Type: TEXT
Column name: number Type: TEXT
Sample rows:
[{'uuid': 'xhj001ca1uk574sktzgyjbpc4', 'patent_id': '7329559', 'date': '2002-12-01', 'number': 'WO 02/099907', 'country': 'WO', 'category': 'cited by other'}, {'uuid': 'wxddvgazkrhjza59ens6ajy6e', 'patent_id': '7870461', 'date': '2002-12-01', 'number': 'WO 02/100026', 'country': 'WO', 'category': 'cited by other'}, {'uuid': 'qhziqthnqr8x58o6to57fw84d', 'patent_id': '8329239', 'date': '2002-12-01', 'number': 'WO 02/100192', 'country': 'WO', 'category': 'cited by other'}, {'uuid': 'bhzwlqdqrw7ohhcskzy601g24', 'patent_id': '10907170', 'date': '2002-12-01', 'number': 'WO 02/100199', 'country': 'WO', 'category': 'cited by applicant'}, {'uuid': 't7cepyiztg16eum41z8m3vkpj', 'patent_id': '9029656', 'date': '2002-12-01', 'number': 'WO 02/100199', 'country': 'WO', 'category': 'cited by applicant'}]
--------------------------------------------------
Table full name: PATENTSVIEW.PATENTSVIEW.PATENT
Column name: id Type: TEXT
Column name: number Type: TEXT
Column name: title Type: TEXT
Column name: kind Type: TEXT
Column name: date Type: TEXT
Column name: abstract Type: TEXT
Column name: num_claims Type: NUMBER
Column name: country Type: TEXT
Sample rows:
[{'id': 'D690894', 'number': 'D690894', 'country': 'US', 'date': '2013-10-01', 'abstract': None, 'title': 'Cremation remains keepsake charm', 'kind': 'S1', 'num_claims': 1}, {'id': 'D755392', 'number': 'D755392', 'country': 'US', 'date': '2016-05-03', 'abstract': None, 'title': 'Pulse oximetry sensor', 'kind': 'S1', 'num_claims': 1}, {'id': 'D756281', 'number': 'D756281', 'country': 'US', 'date': '2016-05-17', 'abstract': None, 'title': 'Wheel', 'kind': 'S1', 'num_claims': 1}, {'id': 'D761689', 'number': 'D761689', 'country': 'US', 'date': '2016-07-19', 'abstract': None, 'title': 'Band attachment', 'kind': 'S1', 'num_claims': 1}, {'id': 'D814540', 'number': 'D814540', 'country': 'US', 'date': '2018-04-03', 'abstract': None, 'title': 'Satellite equipment for robot', 'kind': 'S1', 'num_claims': 1}]
--------------------------------------------------
Table full name: PATENTSVIEW.PATENTSVIEW.USAPPLICATIONCITATION
Column name: kind Type: TEXT
Column name: application_id Type: TEXT
Column name: country Type: TEXT
Column name: patent_id Type: TEXT
Column name: uuid Type: TEXT
Column name: category Type: TEXT
Column name: date Type: TEXT
Column name: number Type: TEXT
Sample rows:
[{'uuid': 'wckile03msbg8fr0rtxy7b2m3', 'patent_id': '8712582', 'application_id': 'WO 96/13790', 'date': '1996-05-01', 'kind': 'A1', 'number': 'WO 96/13790', 'country': 'US', 'category': 'cited by applicant'}, {'uuid': '18dkuauyvinnam00r3wbfft9o', 'patent_id': '6857775', 'application_id': 'D. 434674', 'date': '2000-12-01', 'kind': 'S', 'number': 'D. 434674', 'country': 'US', 'category': 'cited by other'}, {'uuid': 'c2g37744mvmi7fq9uh7hnrelp', 'patent_id': '10857329', 'application_id': '2001/0000041', 'date': '2001-03-01', 'kind': 'A1', 'number': '2001/0000041', 'country': 'US', 'category': 'cited by examiner'}, {'uuid': 'qpjmbmd0cxewanpp7fp0aj9ck', 'patent_id': '9202758', 'application_id': '2001/0000012', 'date': '2001-03-01', 'kind': 'A1', 'number': '2001/0000012', 'country': 'US', 'category': 'cited by examiner'}, {'uuid': 'jne1x56qvdy444c8op202ord7', 'patent_id': '11072668', 'application_id': '2001/0000039', 'date': '2001-03-01', 'kind': 'A1', 'number': '2001/0000039', 'country': 'US', 'category': 'cited by applicant'}]
--------------------------------------------------
Table full name: PATENTSVIEW.PATENTSVIEW.USPC
Column name: patent_id Type: TEXT
Column name: uuid Type: TEXT
Sample rows:
[{'uuid': 'vx63cj017gh32rnj8qou8whzr', 'patent_id': '4733714'}, {'uuid': 'no3fq6xhprzuyjmzloepaacj0', 'patent_id': '4715905'}, {'uuid': '2jzao5tdsvfggvxxi3me6dx17', 'patent_id': '7684187'}, {'uuid': 'jitiqsy2de4rnjmvar48pi5hs', 'patent_id': '5924300'}, {'uuid': '2vz25pigd5urhwqwb0vqvmccs', 'patent_id': '9019701'}]
--------------------------------------------------
Table full name: PATENTSVIEW.PATENTSVIEW.CPC_GROUP
Column name: title Type: TEXT
Column name: id Type: TEXT
Sample rows:
[{'id': 'C12Y', 'title': 'ENZYMES'}, {'id': 'D05B', 'title': 'SEWING '}, {'id': 'A46B', 'title': 'BRUSHES '}, {'id': 'D04B', 'title': 'KNITTING'}, {'id': 'B23C', 'title': 'MILLING '}]
--------------------------------------------------
Table full name: PATENTSVIEW.PATENTSVIEW.IPCR
Column name: section Type: TEXT
Column name: patent_id Type: TEXT
Column name: uuid Type: TEXT
Column name: subclass Type: TEXT
Column name: action_date Type: TEXT
Sample rows:
[{'uuid': 'fwu2zrloyrwcwdgaktjgkx6mr', 'patent_id': '6530169', 'section': 'F', 'subclass': 'A', 'action_date': None}, {'uuid': 'kavup1p4zsm3wjwhdgwzfb3p0', 'patent_id': '6591733', 'section': 'F', 'subclass': 'A', 'action_date': None}, {'uuid': 'vhdtwcqpo7bz1jpgxthx2goq2', 'patent_id': '5421114', 'section': 'F', 'subclass': 'A', 'action_date': None}, {'uuid': 'ktdz2s1zgy5vjptntpkycb6pv', 'patent_id': '6384193', 'section': 'C', 'subclass': 'A', 'action_date': None}, {'uuid': 'qs706yjmasctoppsibduessiw', 'patent_id': '6405468', 'section': 'F', 'subclass': 'A', 'action_date': None}]
--------------------------------------------------
Table full name: PATENTSVIEW.PATENTSVIEW.PATENT_LAWYER
Column name: patent_id Type: TEXT
Sample rows:
[{'patent_id': 'D647010'}, {'patent_id': 'D735919'}, {'patent_id': 'D720263'}, {'patent_id': '7514340'}, {'patent_id': '7345545'}]
--------------------------------------------------
Table full name: PATENTSVIEW.PATENTSVIEW.DETAIL_DESC_TEXT_2021
Column name: text Type: TEXT
Column name: patent_id Type: TEXT
Sample rows:
[{'patent_id': '10936286', 'text': 'DETAILED DESCRIPTION\n\nPersons of ordinary skill in the art will realize that the following description is illustrative only and not in any way limiting. Other aspects will readily suggest themselves to such skilled persons.\n\nThe present invention improves the efficiency of existing LUT-based FPGA logic cells at implementing up, down and pop counters. When implementing each of these functions, some of the K-input LUTs in some of the logic cells remain available to generate any function of the K inputs to those LUTs.\n\nIn accordance with one aspect of the present invention, an illustrative LUT-based logic cell120that allows improved efficiency for up counters and pop counters is shown inFIG. 4, to which attention is now drawn. Some of the elements of logic cell120ofFIG. 4are common to the logic cells shown in previous drawing figures and will be referred to inFIG. 4using the same reference numerals used to designate those same elements in the previous drawing figures.\n\nThe logic cell120ofFIG. 4includes a K-input LUT shown within dashed lines122formed from a first (K-1)-input LUT124aand a second (K-1)-input LUT124b. The small squares126and128represent the configuration inputs used to define the functions of LUTs124aand124brespectively. Both LUTs124aand124bshare in common the K-1function inputs (In2, In3, . . . InKshown at reference numerals130,132, and134, respectively). A first (2-input) multiplexer136has a first data input coupled to the output F0of the first (K-1)-input LUT124a, a second data input coupled to the output F1of the second (K-1)-input LUT124b, and a select input coupled to a function input In1at reference numeral138of the K-input LUT122. The data output of the first multiplexer136serves as the output of the K-input LUT122and is directly connected to the primary output (Y) of the logic cell the main output of the logic cell120shown at reference numeral48. In one particular instance of the present invention, K=4.\n\nThe logic cell120ofFIG. 4also includes a carry-in input CI42, a counter input QI140, a carry-out output CO44, and a sum output S50. A carry circuit142in the logic cell ofFIG. 4includes a second multiplexer shown inFIG. 4as a 4-input multiplexer32having a first data input coupled to the F0output of the first 3-input LUT124a, a second data input coupled to the F1output of the second 3-input LUT124b, a third data input coupled to a logic-high constant voltage, a fourth data input coupled to a logic-low constant voltage, select inputs shown as small square34coupled to configuration circuitry for the multiplexer32used to choose which one of the inputs of the second carry multiplexer32will be passed to its data output, and a data output denoted G. A third multiplexer is shown inFIG. 4as a 4-input multiplexer36in the carry circuit142of the logic cell ofFIG. 4has a first data input coupled to the counter input QI140of the logic cell120, a second data input coupled to the output of the K-input LUT122at the first multiplexer136, a third data input coupled to a logic-high constant voltage, a fourth data input coupled to a logic-low constant voltage, select inputs shown as a small square38coupled to configuration circuitry for the third multiplexer36used to choose which one of the inputs of the third multiplexer36will be passed to its data output, and a data output denoted P. A carry-out multiplexer shown inFIG. 4as a 2-input multiplexer40in the carry circuit142of the logic cell110ofFIG. 4has a first data input coupled to the data output G of the second multiplexer32, a second data input coupled to the carry-in input CI42of the logic cell120, a select input coupled to the P data output of the third multiplexer36, and a data output coupled to the carry-out output CO44of the logic cell120. An exclusive-OR gate46in the carry circuit142of the logic cell120ofFIG. 4has a first input coupled to the carry-in input CI42of the logic cell120, a second input coupled to the data output P of the third multiplexer36, and an output coupled to the sum output S50of the logic cell120.\n\nIn some implementations of the invention, either of the F0or F1inputs from LUTs124aand124b, or the logic-high constant voltage input can be omitted from the second multiplexer32, and/or the logic-high constant voltage input can be omitted from the third multiplexer36.\n\nThe structural differences between the logic cell120according to the aspect of the invention illustrated inFIG. 4and the prior-art logic cell inFIG. 1are the use of the second 4-input multiplexer36to drive the exclusive-OR gate46that generates the sum output S50, and the addition of a QI counter input140to the logic cell120as shown inFIG. 4.\n\nBroadly, the logic cell120ofFIG. 4has K function inputs, a QI input and a carry input. The particular example shown inFIG. 4includes K function inputs In1138, In2130, IN3132, through InK134. To implement logic cells having larger values of K, additional function inputs can be added, each driving both of LUTs124aand124b. The primary output Y48of the logic cell120presents a value that is any function of the K function inputs. A second output (the carry output CO44) presents a value present on the carry input CI42or an output sourced by the second multiplexer32as selected by the output of the third multiplexer36. The inputs In1, In2, In3, . . . InK, and outputs S and Y are connected to the programmable routing network. The QI input can be driven by the flip-flop associated with the logic cell, as described above in relation toFIG. 2, but need not be driven by the programmable routing network. The carry output CO of one cell directly drives the carry input CI of the next cell in the carry chain, and neither CI nor CO need to be connected to the programmable routing network.\n\nFIG. 5is a block diagram that shows how the logic cell120ofFIG. 4can be used to implement an up counter.FIG. 5shows an N-bit up counter160formed from (N-1) logic cells120-0,120-1, and120-(N-1). As shown inFIG. 5, the second multiplexer32inFIG. 4is set so its output G is the value logic 0, and multiplexer36is set so its output P is the value at input QI140of the logic cell120ofFIG. 4. The carry-in CI input42of the logic cell120representing the lowest significant bit is set to logic 1, and the carry-in input CI42of each of the successive more significant bits is connected to the carry-out output CO44of the adjacent less significant bit logic cell120. Data flip-flops162-0through162-(N-1) each have their data inputs connected to the S output (138inFIG. 4) of the logic cell110included in their respective counter stage. The Q outputs of the flip-flops162-0through162-(N-1) are each connected to the QI input (140inFIG. 4) of the logic cell included in their respective counter stage.\n\nAs shown inFIG. 5, none of the LUT inputs (shown for convenience as In1, In2, In3, . . . InKin an instance of the invention employing K-input LUTs122), nor the Y output, of all of the logic cells (120-0,120-1, and120-(N-1) are utilized in performing the counter function and so each cell can be used to generate any function of the K inputs (In1, In2, In3, . . . InKinFIG. 5) simultaneously with the operation of the up-counter function. This is not possible using any of the prior-art logic cells.\n\nReferring now toFIG. 6, a block diagram shows a variation of the logic cell ofFIG. 4. The logic cell170ofFIG. 6includes many of the same elements present in the logic cell120ofFIG. 4. These elements common to both drawing figures will be referenced using the same reference numerals employed inFIG. 4. The elements common in the logic cell170that are common to the logic cell120are connected as described with reference toFIG. 4.\n\nThe difference between the logic cell170ofFIG. 6and the logic cell120ofFIG. 4is that the logic cell170ofFIG. 6further includes a fourth multiplexer172having a first data input and a second data input. The second data input is an inverting data input. The first and second data inputs are coupled together to the counter input QI140of the logic cell170, and a select input is coupled to configuration circuitry for the logic cell represented by small square174. The output of the fourth multiplexer172is coupled to the first data input of the third multiplexer36.\n\nThe fourth multiplexer172selectively inverts the value present at the QI input134as configured by configuration bit174. The logic cell170ofFIG. 6thus employs the fourth multiplexer172as a programmable inverter to support both an up counter and a down counter function by setting the configuration bit at reference numeral174to pass either the non-inverted or the inverted QI input at reference numeral140. As was the case with the logic cell ofFIG. 4, in some implementations of the invention, either of the F0or F1inputs from the LUTS124aand124b, or the logic-high constant voltage input can be omitted from the second multiplexer32, and/or the logic-high constant voltage input can be omitted from the third multiplexer36.\n\nFIG. 7is a block diagram showing the logic cell ofFIG. 6used to implement a down counter.FIG. 7shows an N-bit counter180that uses (N-1) logic cells. The carry-in CI input of the lowest significant bit is set to logic 0 (instead of to logic 1 in the counter depicted inFIG. 5). As shown inFIG. 7, the output of the second multiplexer32inFIG. 6is set to pass the value logic 1, and the output P of the third multiplexer36is set to pass the value at input QI140of the logic cell170ofFIG. 6inverted by the fourth multiplexer172. As also shown inFIG. 7, all of the LUT inputs of all of the logic cells (0,1, and N-1) can be used to generate any function of the K inputs simultaneously with the operation of the up or down counter function.\n\nOne of the attractive features of the present invention is that, when implementing both up and down counters, as shown respectively inFIG. 5andFIG. 7, the entire K-input LUT portion112of each logic cell120and170that is used remains a
--------------------------------------------------
Table full name: PATENTSVIEW.PATENTSVIEW.MATCH
Column name: patent_id Type: TEXT
Column name: publication_number Type: TEXT
Sample rows:
[{'patent_id': '3930423', 'publication_number': 'US-3930423-A'}, {'patent_id': '3930679', 'publication_number': 'US-3930679-A'}, {'patent_id': '3930816', 'publication_number': 'US-3930816-A'}, {'patent_id': '3930947', 'publication_number': 'US-3930947-A'}, {'patent_id': '3931452', 'publication_number': 'US-3931452-A'}]
--------------------------------------------------
Table full name: PATENTSVIEW.PATENTSVIEW.USPATENTCITATION
Column name: date Type: TEXT
Column name: category Type: TEXT
Column name: uuid Type: TEXT
Column name: patent_id Type: TEXT
Column name: citation_id Type: TEXT
Column name: kind Type: TEXT
Column name: country Type: TEXT
Sample rows:
[{'uuid': '57ncvypgc6olzvvyu8cyrup28', 'patent_id': '9089501', 'citation_id': '6966918', 'date': '2005-11-01', 'kind': 'B1', 'country': 'US', 'category': 'cited by applicant'}, {'uuid': 'ku1vpwjzed77n4wajpnj8s0bc', 'patent_id': '8568410', 'citation_id': '6966919', 'date': '2005-11-01', 'kind': 'B2', 'country': 'US', 'category': 'cited by applicant'}, {'uuid': '9y51eyspby8nsi5pgsjqhvqmu', 'patent_id': '8821530', 'citation_id': '6966923', 'date': '2005-11-01', 'kind': 'B2', 'country': 'US', 'category': 'cited by applicant'}, {'uuid': 'itpjgf8np2k8jjc3uw355hp7x', 'patent_id': '10219911', 'citation_id': '6966929', 'date': '2005-11-01', 'kind': 'B2', 'country': 'US', 'category': 'cited by applicant'}, {'uuid': 'm0pa59o492vy0l2so88l0xgs3', 'patent_id': '8518184', 'citation_id': '6966936', 'date': '2005-11-01', 'kind': 'B2', 'country': 'US', 'category': 'cited by applicant'}]
--------------------------------------------------
Table full name: PATENTSVIEW.PATENTSVIEW.APPLICATION
Column name: series_code Type: TEXT
Column name: number Type: TEXT
Column name: date Type: TEXT
Column name: id Type: TEXT
Column name: country Type: TEXT
Column name: patent_id Type: TEXT
Sample rows:
[{'id': 'D/535207', 'patent_id': 'D371814', 'series_code': 'D', 'number': 'D535207', 'country': 'US', 'date': '1990-07-26'}, {'id': 'D002048', 'patent_id': 'D390605', 'series_code': 'D', 'number': 'D002048', 'country': 'US', 'date': '1992-11-30'}, {'id': 'D013068', 'patent_id': 'D395297', 'series_code': 'D', 'number': 'D013068', 'country': 'US', 'date': '1993-09-17'}, {'id': 'D019659', 'patent_id': 'D387555', 'series_code': 'D', 'number': 'D019659', 'country': 'US', 'date': '1994-03-08'}, {'id': 'D019888', 'patent_id': 'D387736', 'series_code': 'D', 'number': 'D019888', 'country': 'US', 'date': '1994-03-11'}]
--------------------------------------------------
Table full name: PATENTSVIEW.PATENTSVIEW.CPC_SUBSECTION
Column name: title Type: TEXT
Column name: id Type: TEXT
Sample rows:
[{'id': 'F41', 'title': 'WEAPONS'}, {'id': 'A43', 'title': 'FOOTWEAR'}, {'id': 'A42', 'title': 'HEADWEAR'}, {'id': 'G04', 'title': 'HOROLOGY'}, {'id': 'B61', 'title': 'RAILWAYS'}]
--------------------------------------------------
Table full name: PATENTSVIEW.PATENTSVIEW.PATENT_ASSIGNEE
Column name: patent_id Type: TEXT
Sample rows:
[{'patent_id': '11179164'}, {'patent_id': '11139018'}, {'patent_id': '11165899'}, {'patent_id': '11168211'}, {'patent_id': '11142954'}]
--------------------------------------------------
Table full name: PATENTSVIEW.PATENTSVIEW.PATENT_GOVINTORG
Column name: patent_id Type: TEXT
Sample rows:
[{'patent_id': '10074282'}, {'patent_id': '10096097'}, {'patent_id': '10029556'}, {'patent_id': '10127447'}, {'patent_id': '10067112'}]
--------------------------------------------------
Table full name: PATENTSVIEW.PATENTSVIEW.PATENT_INVENTOR
Column name: patent_id Type: TEXT
Sample rows:
[{'patent_id': '4633115'}, {'patent_id': '7099733'}, {'patent_id': '8373326'}, {'patent_id': '7441399'}, {'patent_id': '6850293'}]
--------------------------------------------------
Table full name: PATENTSVIEW.PATENTSVIEW.CPC_CURRENT
Column name: category Type: TEXT
Column name: group_id Type: TEXT
Column name: section_id Type: TEXT
Column name: subsection_id Type: TEXT
Column name: subgroup_id Type: TEXT
Column name: uuid Type: TEXT
Column name: patent_id Type: TEXT
Sample rows:
[{'uuid': '0fccb987-5388-476f-8391-f47d2e55a308', 'patent_id': '10396367', 'section_id': 'C', 'subsection_id': 'C08', 'group_id': 'C08K', 'subgroup_id': 'C08K5/3462', 'category': 'inventional'}, {'uuid': 'b51fcbe9-5f0b-478c-9292-7a4e7721bbe9', 'patent_id': '5308489', 'section_id': 'C', 'subsection_id': 'C08', 'group_id': 'C08L', 'subgroup_id': 'C08L101/00', 'category': 'inventional'}, {'uuid': '2313da55-6a74-4330-a280-33125f345769', 'patent_id': '7479522', 'section_id': 'C', 'subsection_id': 'C08', 'group_id': 'C08L', 'subgroup_id': 'C08L51/085', 'category': 'inventional'}, {'uuid': '9703e112-1350-4036-b9e9-8106f486783d', 'patent_id': '6930146', 'section_id': 'C', 'subsection_id': 'C08', 'group_id': 'C08L', 'subgroup_id': 'C08L67/025', 'category': 'inventional'}, {'uuid': 'd0bb650e-2a37-43c5-ab0c-2984c34a94fe', 'patent_id': '7175953', 'section_id': 'C', 'subsection_id': 'C09', 'group_id': 'C09B', 'subgroup_id': 'C09B23/083', 'category': 'inventional'}]
--------------------------------------------------
Table full name: PATENTSVIEW.PATENTSVIEW.CPC_SUBGROUP
Column name: title Type: TEXT
Column name: id Type: TEXT
Sample rows:
[{'id': 'G06F12/1416', 'title': 'Accessing, addressing or allocating within memory systems or architectures -Protection against unauthorised use of memory ; or access to memory-by checking the object accessibility, e.g. type of access defined by the memory independently of subject rights '}, {'id': 'B01F15/0234', 'title': 'Accessories for mixers ; ; Auxiliary operations or auxiliary devices; Parts or details of general application-Feed or discharge mechanisms-Feed mechanisms -characterized by the means for feeding the components to the mixer-using gravity, e.g. from a hopper'}, {'id': 'B01F15/0237', 'title': 'Accessories for mixers ; ; Auxiliary operations or auxiliary devices; Parts or details of general application-Feed or discharge mechanisms-Feed mechanisms -characterized by the means for feeding the components to the mixer-using pistons, plungers, syringes'}, {'id': 'F01D15/065', 'title': 'Adaptations of machines or engines for special use; Combinations of engines with devices driven thereby -Adaptations for driving, or combinations with, hand-held tools or the like ; control thereof-with pressure-velocity transformation exclusively in rotor'}, {'id': 'Y10T156/1093', 'title': 'Adhesive bonding and miscellaneous chemical manufacture-Methods of surface bonding and/or assembly therefor-of discrete laminae to single face of additional lamina-All laminae planar and face to face-with covering of discrete laminae with additional lamina'}]
--------------------------------------------------
Table full name: PATENTSVIEW.PATENTSVIEW.PATENT_CONTRACTAWARDNUMBER
Column name: patent_id Type: TEXT
Sample rows:
[{'patent_id': '10169847'}, {'patent_id': 'PP21965'}, {'patent_id': '4534894'}, {'patent_id': '7267941'}, {'patent_id': '7547509'}]
--------------------------------------------------
Table full name: PATENTSVIEW.PATENTSVIEW.SUBCLASS_CURRENT
Column name: title Type: TEXT
Column name: id Type: TEXT
Sample rows:
[{'id': '558/165', 'title': 'Divalent chalcogen, bonded directly to two carbons or to carbon and hydrogen, attached indirectly to phosphorus by acyclic nonionic bonding (wherein the hydrogen may be replaced by substituted or unsubstituted ammonium, or by a Group IA or IIA light metal)'}, {'id': '210/DIG.*', 'title': '1'}, {'id': '514/200', 'title': '1'}, {'id': '514/210.8', 'title': '1'}, {'id': '540/223', 'title': '2'}]
--------------------------------------------------
Table full name: PATENTSVIEW.PATENTSVIEW.USRELDOC
Column name: date Type: TEXT
Column name: reldocno Type: TEXT
Column name: kind Type: TEXT
Column name: uuid Type: TEXT
Column name: patent_id Type: TEXT
Column name: country Type: TEXT
Sample rows:
[{'uuid': 'bg35bwgdg1rmbx1kshsjx1xf7', 'patent_id': '8618696', 'reldocno': '20130154389', 'country': 'US', 'date': '2013-06-20', 'kind': 'A1'}, {'uuid': 'z0i9pkakju0epdip0vtmcadnf', 'patent_id': '10037507', 'reldocno': '20170262782', 'country': 'US', 'date': '2017-09-14', 'kind': 'A1'}, {'uuid': 'itba71z7z5ip113q4tkwt75jf', 'patent_id': '10257822', 'reldocno': '20180302883', 'country': 'US', 'date': '2018-10-18', 'kind': 'A1'}, {'uuid': 'wg0fpahkrne5dj95a79ct5jyp', 'patent_id': '8402331', 'reldocno': '20120239994', 'country': 'US', 'date': '2012-09-20', 'kind': 'A1'}, {'uuid': 'yjpemeqlq1w4054nay25qb5kw', 'patent_id': '8133689', 'reldocno': '20110300560', 'country': 'US', 'date': '2011-12-08', 'kind': 'A1'}]
--------------------------------------------------
Table full name: PATENTSVIEW.PATENTSVIEW.USPC_CURRENT
Column name: patent_id Type: TEXT
Column name: uuid Type: TEXT
Sample rows:
[]

--------------------------------------------------
External knowledge that might be helpful: 
None
The table structure information is ({database name: {schema name: [table name]}}): 
{'PATENTSVIEW': {'PATENTSVIEW': ['BRF_SUM_TEXT', 'FOREIGNCITATION', 'PATENT', 'USAPPLICATIONCITATION', 'USPC', 'CPC_GROUP', 'IPCR', 'PATENT_LAWYER', 'DETAIL_DESC_TEXT_2021', 'MATCH', 'USPATENTCITATION', 'APPLICATION', 'CPC_SUBSECTION', 'PATENT_ASSIGNEE', 'PATENT_GOVINTORG', 'PATENT_INVENTOR', 'CPC_CURRENT', 'CPC_SUBGROUP', 'PATENT_CONTRACTAWARDNUMBER', 'SUBCLASS_CURRENT', 'USRELDOC', 'USPC_CURRENT']}}

Some few-shot examples after column exploration may be helpful:
Query:
-- Query 1: Retrieve specific details from the "PATENT" table including patent_id, title, abstract, and date of patents belonging to 'US'.
SELECT "id", "title", "date", "abstract" 
FROM PATENTSVIEW.PATENTSVIEW.PATENT 
WHERE "country" = 'US' 
ORDER BY "date" 
LIMIT 20;
Answer:
id,title,date,abstract
3931110,Rapid curing adhesive compositions comprising the reaction product of a ketone aldehyde condensation polymer and a primary aromatic amine,1976-01-06," This invention describes resin products having particular utility as rapid curing adhesives for wood and other materials, and processes for making the resin compositions. The reaction products are made by reacting an aldehyde condensation polymer, such as a phenol-formaldehyde condensation polymer, with a primary ar
Query:
-- Query 2: Get the patents and CPC categories that belong to subsection 'C05' or group 'A01G' from the "CPC_CURRENT" table.
SELECT "patent_id", "section_id", "subsection_id", "group_id" 
FROM PATENTSVIEW.PATENTSVIEW.CPC_CURRENT 
WHERE "subsection_id" = 'C05' OR "group_id" = 'A01G' 
LIMIT 20;
Answer:
patent_id,section_id,subsection_id,group_id
6516564,A,A01,A01G
11076534,A,A01,A01G
5408803,A,A01,A01G
4381623,A,A01,A01G
8478003,A,A01,A01G
10849278,A,A01,A01G
7634870,A,A01,A01G
9241446,A,A01,A01G
6550183,A,A01,A01G
10966377,A,A01,A01G
4955499,A,A01,A01G
3930334,A,A01,A01G
5581937,A,A01,A01G
4190984,A,A01,A01G
5056259,A,A01,A01G
9615657,A,A01,A01G
6038811,A,A01,A01G
Query:
-- Query 3: Join "PATENT" and "CPC_CURRENT" to list patent details (id, title, date, abstract) for patents in CPC subsection 'C05' or group 'A01G'.
SELECT p."id", p."title", p."date", p."abstract" 
FROM PATENTSVIEW.PATENTSVIEW.PATENT p 
JOIN PATENTSVIEW.PATENTSVIEW.CPC_CURRENT c 
ON p."id" = c."patent_id" 
WHERE (c."subsection_id" = 'C05' OR c."group_id" = 'A01G') 
AND p."country" = 'US' 
ORDER BY p."date" 
LIMIT 20;
Answer:
id,title,date,abstract
3930334,Hanging apparatus for falls and hanging plant,1976-01-06," A hanging apparatus for falls and hanging plant which includes a pair of liquid receptacles which are supported in respective top and bottom positions with the top liquid receptacle being substantially directly above the bottom receptacle. The top liquid receptacle is capable of dropping liquid from a plurality of locations to the bottom liquid receptacle, and the bottom liquid receptacle is positioned for
Task: Retrieve the following information for U.S. patents: The patent ID, title, and application date. The number of backward citations within 1 month before the application date (i.e., patents that cited the current patent before its application). The number of forward citations within 1 month after the application date (i.e., patents that cited the current patent after its application). The abstract text of the patent. Only include patents that belong to specific CPC categories, such as subsection 'C05' or group 'A01G'. The query should filter patents to include only those that have at least one backward citation or one forward citation in the 1-month period specified. Sort the results by application date and return all matching records.
Another way to say it: I wonder which patents within CPC subsection 'C05' or group 'A01G' in the USA have at least one forward or backward citations within one month of their application dates. Give me the ids, titles, application date, forward/backward citation counts and summary texts.

Please think step by step and answer only one complete SQL in snowflake dialect in ```sql``` format.
SQL usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: The table structure information is ({database name: {schema name: [table name]}}): 
{'PATENTSVIEW': {'PATENTSVIEW': ['BRF_SUM_TEXT', 'FOREIGNCITATION', 'PATENT', 'USAPPLICATIONCITATION', 'USPC', 'CPC_GROUP', 'IPCR', 'PATENT_LAWYER', 'DETAIL_DESC_TEXT_2021', 'MATCH', 'USPATENTCITATION', 'APPLICATION', 'CPC_SUBSECTION', 'PATENT_ASSIGNEE', 'PATENT_GOVINTORG', 'PATENT_INVENTOR', 'CPC_CURRENT', 'CPC_SUBGROUP', 'PATENT_CONTRACTAWARDNUMBER', 'SUBCLASS_CURRENT', 'USRELDOC', 'USPC_CURRENT']}}

When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
When asked something without stating name or id, return both of them. e.g. Which products ...? The answer should include product_name and product_id.
When asked percentage decrease, you should return a positive value. e.g. How many percentage points in 2021 decrease compared to ...? The answer should be a positive value indicating the decresed number. Try to use ABS().
If asked two tables, you should reply with the last one instead of combining two tables. e.g. Identifying the top five states ... examine the state that ranks fourth overall and identify its top five counties. You should only answer top five counties.
Use ST_DISTANCE to calculate distance between two geographic points for more accurate answer.
If the task description does not specify the number of decimal places, retain all decimals to four places.

[Self-refine]
2025-07-01 04:14:27 - Thread-106 (execute) - INFO - [Try to run SQL in self-refine]
```sql
SELECT 
    p."id" AS patent_id, 
    p."title", 
    app."date" AS application_date, 
    COUNT(DISTINCT bwd."citation_id") AS num_backward_citations, 
    COUNT(DISTINCT fwd."patent_id") AS num_forward_citations, 
    p."abstract" 
FROM 
    PATENTSVIEW.PATENTSVIEW.PATENT p
JOIN 
    PATENTSVIEW.PATENTSVIEW.CPC_CURRENT cpc
    ON p."id" = cpc."patent_id"
JOIN 
    PATENTSVIEW.PATENTSVIEW.APPLICATION app
    ON p."id" = app."patent_id"
LEFT JOIN 
    PATENTSVIEW.PATENTSVIEW.USPATENTCITATION bwd
    ON p."id" = bwd."citation_id" AND 
       ABS(DATEDIFF(DAY, bwd."date", app."date")) <= 30
LEFT JOIN 
    PATENTSVIEW.PATENTSVIEW.USPATENTCITATION fwd
    ON p."id" = fwd."patent_id" AND 
       ABS(DATEDIFF(DAY, fwd."date", app."date")) <= 30
WHERE 
    p."country" = 'US' AND 
    (cpc."subsection_id" = 'C05' OR cpc."group_id" = 'A01G') AND
    (COUNT(DISTINCT bwd."citation_id") > 0 OR COUNT(DISTINCT fwd."patent_id") > 0)
GROUP BY 
    p."id", p."title", app."date", p."abstract"
ORDER BY 
    app."date" ASC;
```
[Try to run SQL in self-refine]
2025-07-01 04:14:27 - Thread-106 (execute) - INFO - itercount: 1
2025-07-01 04:14:27 - Thread-106 (execute) - INFO - [Self-refine]
Input sql:
SELECT 
    p."id" AS patent_id, 
    p."title", 
    app."date" AS application_date, 
    COUNT(DISTINCT bwd."citation_id") AS num_backward_citations, 
    COUNT(DISTINCT fwd."patent_id") AS num_forward_citations, 
    p."abstract" 
FROM 
    PATENTSVIEW.PATENTSVIEW.PATENT p
JOIN 
    PATENTSVIEW.PATENTSVIEW.CPC_CURRENT cpc
    ON p."id" = cpc."patent_id"
JOIN 
    PATENTSVIEW.PATENTSVIEW.APPLICATION app
    ON p."id" = app."patent_id"
LEFT JOIN 
    PATENTSVIEW.PATENTSVIEW.USPATENTCITATION bwd
    ON p."id" = bwd."citation_id" AND 
       ABS(DATEDIFF(DAY, bwd."date", app."date")) <= 30
LEFT JOIN 
    PATENTSVIEW.PATENTSVIEW.USPATENTCITATION fwd
    ON p."id" = fwd."patent_id" AND 
       ABS(DATEDIFF(DAY, fwd."date", app."date")) <= 30
WHERE 
    p."country" = 'US' AND 
    (cpc."subsection_id" = 'C05' OR cpc."group_id" = 'A01G') AND
    (COUNT(DISTINCT bwd."citation_id") > 0 OR COUNT(DISTINCT fwd."patent_id") > 0)
GROUP BY 
    p."id", p."title", app."date", p."abstract"
ORDER BY 
    app."date" ASC;
The error information is:
{'status': 'error', 'error_msg': '##ERROR##002035 (42601): SQL compilation error:\nInvalid aggregate function in where clause [COUNT(DISTINCT BWD."citation_id")]'}
Please correct it and output only 1 complete SQL query.
[Self-refine]
2025-07-01 04:14:40 - Thread-106 (execute) - INFO - [Try to run SQL in self-refine]
```sql
SELECT 
    p."id" AS patent_id, 
    p."title", 
    app."date" AS application_date, 
    COUNT(DISTINCT bwd."citation_id") AS num_backward_citations, 
    COUNT(DISTINCT fwd."patent_id") AS num_forward_citations, 
    p."abstract" 
FROM 
    PATENTSVIEW.PATENTSVIEW.PATENT p
JOIN 
    PATENTSVIEW.PATENTSVIEW.CPC_CURRENT cpc
    ON p."id" = cpc."patent_id"
JOIN 
    PATENTSVIEW.PATENTSVIEW.APPLICATION app
    ON p."id" = app."patent_id"
LEFT JOIN 
    PATENTSVIEW.PATENTSVIEW.USPATENTCITATION bwd
    ON p."id" = bwd."citation_id" AND 
       ABS(DATEDIFF(DAY, bwd."date", app."date")) <= 30
LEFT JOIN 
    PATENTSVIEW.PATENTSVIEW.USPATENTCITATION fwd
    ON p."id" = fwd."patent_id" AND 
       ABS(DATEDIFF(DAY, fwd."date", app."date")) <= 30
WHERE 
    p."country" = 'US' AND 
    (cpc."subsection_id" = 'C05' OR cpc."group_id" = 'A01G')
GROUP BY 
    p."id", p."title", app."date", p."abstract"
HAVING 
    COUNT(DISTINCT bwd."citation_id") > 0 OR COUNT(DISTINCT fwd."patent_id") > 0
ORDER BY 
    app."date" ASC;
```
[Try to run SQL in self-refine]
2025-07-01 04:15:06 - Thread-106 (execute) - INFO - itercount: 2
2025-07-01 04:15:06 - Thread-106 (execute) - INFO - [Self-refine]
Input sql:
SELECT 
    p."id" AS patent_id, 
    p."title", 
    app."date" AS application_date, 
    COUNT(DISTINCT bwd."citation_id") AS num_backward_citations, 
    COUNT(DISTINCT fwd."patent_id") AS num_forward_citations, 
    p."abstract" 
FROM 
    PATENTSVIEW.PATENTSVIEW.PATENT p
JOIN 
    PATENTSVIEW.PATENTSVIEW.CPC_CURRENT cpc
    ON p."id" = cpc."patent_id"
JOIN 
    PATENTSVIEW.PATENTSVIEW.APPLICATION app
    ON p."id" = app."patent_id"
LEFT JOIN 
    PATENTSVIEW.PATENTSVIEW.USPATENTCITATION bwd
    ON p."id" = bwd."citation_id" AND 
       ABS(DATEDIFF(DAY, bwd."date", app."date")) <= 30
LEFT JOIN 
    PATENTSVIEW.PATENTSVIEW.USPATENTCITATION fwd
    ON p."id" = fwd."patent_id" AND 
       ABS(DATEDIFF(DAY, fwd."date", app."date")) <= 30
WHERE 
    p."country" = 'US' AND 
    (cpc."subsection_id" = 'C05' OR cpc."group_id" = 'A01G')
GROUP BY 
    p."id", p."title", app."date", p."abstract"
HAVING 
    COUNT(DISTINCT bwd."citation_id") > 0 OR COUNT(DISTINCT fwd."patent_id") > 0
ORDER BY 
    app."date" ASC;
The error information is:
{'status': 'error', 'error_msg': "##ERROR##100035 (22007): Timestamp '1839-05-00' is not recognized"}
Please correct it and output only 1 complete SQL query.
[Self-refine]
2025-07-01 04:15:20 - Thread-106 (execute) - INFO - [Try to run SQL in self-refine]
```sql
SELECT 
    p."id" AS patent_id, 
    p."title", 
    app."date" AS application_date, 
    COUNT(DISTINCT bwd."citation_id") AS num_backward_citations, 
    COUNT(DISTINCT fwd."patent_id") AS num_forward_citations, 
    p."abstract" 
FROM 
    PATENTSVIEW.PATENTSVIEW.PATENT p
JOIN 
    PATENTSVIEW.PATENTSVIEW.CPC_CURRENT cpc
    ON p."id" = cpc."patent_id"
JOIN 
    PATENTSVIEW.PATENTSVIEW.APPLICATION app
    ON p."id" = app."patent_id"
LEFT JOIN 
    PATENTSVIEW.PATENTSVIEW.USPATENTCITATION bwd
    ON p."id" = bwd."citation_id" AND 
       bwd."date" IS NOT NULL AND 
       app."date" IS NOT NULL AND 
       ABS(DATEDIFF(DAY, bwd."date", app."date")) <= 30
LEFT JOIN 
    PATENTSVIEW.PATENTSVIEW.USPATENTCITATION fwd
    ON p."id" = fwd."patent_id" AND 
       fwd."date" IS NOT NULL AND 
       app."date" IS NOT NULL AND 
       ABS(DATEDIFF(DAY, fwd."date", app."date")) <= 30
WHERE 
    p."country" = 'US' AND 
    app."date" IS NOT NULL AND 
    (cpc."subsection_id" = 'C05' OR cpc."group_id" = 'A01G')
GROUP BY 
    p."id", p."title", app."date", p."abstract"
HAVING 
    COUNT(DISTINCT bwd."citation_id") > 0 OR COUNT(DISTINCT fwd."patent_id") > 0
ORDER BY 
    app."date" ASC;
```
[Try to run SQL in self-refine]
2025-07-01 04:15:43 - Thread-106 (execute) - INFO - itercount: 3
2025-07-01 04:15:43 - Thread-106 (execute) - INFO - [Self-refine]
Input sql:
SELECT 
    p."id" AS patent_id, 
    p."title", 
    app."date" AS application_date, 
    COUNT(DISTINCT bwd."citation_id") AS num_backward_citations, 
    COUNT(DISTINCT fwd."patent_id") AS num_forward_citations, 
    p."abstract" 
FROM 
    PATENTSVIEW.PATENTSVIEW.PATENT p
JOIN 
    PATENTSVIEW.PATENTSVIEW.CPC_CURRENT cpc
    ON p."id" = cpc."patent_id"
JOIN 
    PATENTSVIEW.PATENTSVIEW.APPLICATION app
    ON p."id" = app."patent_id"
LEFT JOIN 
    PATENTSVIEW.PATENTSVIEW.USPATENTCITATION bwd
    ON p."id" = bwd."citation_id" AND 
       bwd."date" IS NOT NULL AND 
       app."date" IS NOT NULL AND 
       ABS(DATEDIFF(DAY, bwd."date", app."date")) <= 30
LEFT JOIN 
    PATENTSVIEW.PATENTSVIEW.USPATENTCITATION fwd
    ON p."id" = fwd."patent_id" AND 
       fwd."date" IS NOT NULL AND 
       app."date" IS NOT NULL AND 
       ABS(DATEDIFF(DAY, fwd."date", app."date")) <= 30
WHERE 
    p."country" = 'US' AND 
    app."date" IS NOT NULL AND 
    (cpc."subsection_id" = 'C05' OR cpc."group_id" = 'A01G')
GROUP BY 
    p."id", p."title", app."date", p."abstract"
HAVING 
    COUNT(DISTINCT bwd."citation_id") > 0 OR COUNT(DISTINCT fwd."patent_id") > 0
ORDER BY 
    app."date" ASC;
The error information is:
{'status': 'error', 'error_msg': "##ERROR##100035 (22007): Timestamp '1987-02-00' is not recognized"}
Please correct it and output only 1 complete SQL query.
[Self-refine]
2025-07-01 04:16:01 - Thread-106 (execute) - INFO - [Try to run SQL in self-refine]
```sql
SELECT 
    p."id" AS patent_id, 
    p."title", 
    app."date" AS application_date, 
    COUNT(DISTINCT bwd."citation_id") AS num_backward_citations, 
    COUNT(DISTINCT fwd."patent_id") AS num_forward_citations, 
    p."abstract" 
FROM 
    PATENTSVIEW.PATENTSVIEW.PATENT p
JOIN 
    PATENTSVIEW.PATENTSVIEW.CPC_CURRENT cpc
    ON p."id" = cpc."patent_id"
JOIN 
    PATENTSVIEW.PATENTSVIEW.APPLICATION app
    ON p."id" = app."patent_id" AND
       TRY_TO_DATE(app."date", 'YYYY-MM-DD') IS NOT NULL
LEFT JOIN 
    PATENTSVIEW.PATENTSVIEW.USPATENTCITATION bwd
    ON p."id" = bwd."citation_id" AND 
       bwd."date" IS NOT NULL AND 
       TRY_TO_DATE(bwd."date", 'YYYY-MM-DD') IS NOT NULL AND 
       ABS(DATEDIFF(DAY, TRY_TO_DATE(bwd."date", 'YYYY-MM-DD'), TRY_TO_DATE(app."date", 'YYYY-MM-DD'))) <= 30
LEFT JOIN 
    PATENTSVIEW.PATENTSVIEW.USPATENTCITATION fwd
    ON p."id" = fwd."patent_id" AND 
       fwd."date" IS NOT NULL AND 
       TRY_TO_DATE(fwd."date", 'YYYY-MM-DD') IS NOT NULL AND 
       ABS(DATEDIFF(DAY, TRY_TO_DATE(fwd."date", 'YYYY-MM-DD'), TRY_TO_DATE(app."date", 'YYYY-MM-DD'))) <= 30
WHERE 
    p."country" = 'US' AND 
    (cpc."subsection_id" = 'C05' OR cpc."group_id" = 'A01G')
GROUP BY 
    p."id", p."title", app."date", p."abstract"
HAVING 
    COUNT(DISTINCT bwd."citation_id") > 0 OR COUNT(DISTINCT fwd."patent_id") > 0
ORDER BY 
    app."date" ASC;
```
[Try to run SQL in self-refine]
2025-07-01 04:16:59 - Thread-106 (execute) - INFO - Total iteration counts: 3
