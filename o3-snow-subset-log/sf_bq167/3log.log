2025-05-07 06:38:10 - Thread-460 (execute) - INFO - [Exploration]
```sql
--Description: Peek at a few forum-message up-vote records  
SELECT *  
FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"  
LIMIT 20;
```

```sql
--Description: See the list of users so we know where to pick the names later  
SELECT "Id", "UserName", "DisplayName"  
FROM "META_KAGGLE"."META_KAGGLE"."USERS"  
LIMIT 20;
```

```sql
--Description: Count how many times every voter ↦ recipient pair appears  
SELECT "FromUserId", "ToUserId", COUNT(*) AS "pair_votes"  
FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"  
GROUP BY "FromUserId", "ToUserId"  
ORDER BY "pair_votes" DESC  
LIMIT 20;
```

```sql
--Description: Show the very top voter-recipient pair only  
SELECT "FromUserId", "ToUserId", COUNT(*) AS "pair_votes"  
FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"  
GROUP BY "FromUserId", "ToUserId"  
ORDER BY "pair_votes" DESC  
LIMIT 1;
```

```sql
--Description: Compute, for every ordered pair, both directions of up-votes  
WITH pairs AS (  
    SELECT "FromUserId" AS "u1", "ToUserId" AS "u2", COUNT(*) AS "votes_u1_to_u2"  
    FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"  
    GROUP BY "FromUserId", "ToUserId"  
)  
SELECT p1."u1", p1."u2",  
       p1."votes_u1_to_u2"                              AS "u1_to_u2",  
       COALESCE(p2."votes_u1_to_u2", 0)                 AS "u2_to_u1"  
FROM pairs p1  
LEFT JOIN pairs p2  
       ON p1."u1" = p2."u2" AND p1."u2" = p2."u1"  
ORDER BY p1."votes_u1_to_u2" DESC, COALESCE(p2."votes_u1_to_u2",0) DESC  
LIMIT 20;
```

```sql
--Description: Grab the very top asymmetric pair with their reciprocal count  
WITH pairs AS (  
    SELECT "FromUserId" AS "giver", "ToUserId" AS "receiver", COUNT(*) AS "votes_out"  
    FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"  
    GROUP BY "FromUserId", "ToUserId"  
)  
SELECT p1."giver", p1."receiver",  
       p1."votes_out"                    AS "giver_to_receiver",  
       COALESCE(p2."votes_out",0)        AS "receiver_to_giver"  
FROM pairs p1  
LEFT JOIN pairs p2  
       ON p1."giver" = p2."receiver" AND p1."receiver" = p2."giver"  
ORDER BY p1."votes_out" DESC, COALESCE(p2."votes_out",0) DESC  
LIMIT 1;
```

```sql
--Description: Attach usernames to both sides of the top pair for readability  
WITH pairs AS (  
    SELECT "FromUserId" AS "giver", "ToUserId" AS "receiver", COUNT(*) AS "votes_out"  
    FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"  
    GROUP BY "FromUserId", "ToUserId"  
), top_pair AS (  
    SELECT p1."giver", p1."receiver",  
           p1."votes_out"                      AS "giver_to_receiver",  
           COALESCE(p2."votes_out",0)          AS "receiver_to_giver"  
    FROM pairs p1  
    LEFT JOIN pairs p2  
           ON p1."giver" = p2."receiver" AND p1."receiver" = p2."giver"  
    ORDER BY p1."votes_out" DESC, COALESCE(p2."votes_out",0) DESC  
    LIMIT 1  
)  
SELECT u1."UserName"  AS "giver_username",  
       u2."UserName"  AS "receiver_username",  
       t."giver_to_receiver",  
       t."receiver_to_giver"  
FROM top_pair t  
JOIN "META_KAGGLE"."META_KAGGLE"."USERS" u1 ON t."giver"    = u1."Id"  
JOIN "META_KAGGLE"."META_KAGGLE"."USERS" u2 ON t."receiver" = u2."Id";
```

```sql
--Description: Inspect the distribution of reciprocal vote counts (symmetric look)  
WITH pairs AS (  
    SELECT "FromUserId" AS "u1", "ToUserId" AS "u2", COUNT(*) AS "votes"  
    FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"  
    GROUP BY "FromUserId", "ToUserId"  
), bothdir AS (  
    SELECT LEAST("u1","u2")  AS "low_id",  
           GREATEST("u1","u2") AS "high_id",  
           SUM("votes")        AS "total_between"  
    FROM pairs  
    GROUP BY LEAST("u1","u2"), GREATEST("u1","u2")  
)  
SELECT *  
FROM bothdir  
ORDER BY "total_between" DESC  
LIMIT 20;
```

```sql
--Description: Show how many different recipients each voter has up-voted  
SELECT "FromUserId", COUNT(DISTINCT "ToUserId") AS "distinct_recipients"  
FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"  
GROUP BY "FromUserId"  
ORDER BY "distinct_recipients" DESC  
LIMIT 20;
```

```sql
--Description: For curiosity, list any cases where reciprocal votes equal each other  
WITH pairs AS (  
    SELECT "FromUserId" AS "a", "ToUserId" AS "b", COUNT(*) AS "ab_votes"  
    FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"  
    GROUP BY "FromUserId", "ToUserId"  
), joined AS (  
    SELECT p1."a", p1."b", p1."ab_votes",  
           COALESCE(p2."ab_votes",0) AS "ba_votes"  
    FROM pairs p1  
    LEFT JOIN pairs p2  
           ON p1."a" = p2."b" AND p1."b" = p2."a"  
)  
SELECT *  
FROM joined  
WHERE "ab_votes" = "ba_votes" AND "ab_votes" > 10  -- threshold just for brevity  
ORDER BY "ab_votes" DESC  
LIMIT 20;
```
[Exploration]
2025-05-07 06:38:10 - Thread-460 (execute) - INFO - [Try to execute]
--Description: Peek at a few forum-message up-vote records  
SELECT *  
FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"  
LIMIT 20;
[Try to execute]
2025-05-07 06:38:11 - Thread-460 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Peek at a few forum-message up-vote records  
SELECT *  
FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"  
LIMIT 20;
Results:
Id,ForumMessageId,FromUserId,ToUserId,VoteDate
2190221,1463083,7940265,3955299,2021-08-10
2190421,1463083,6413307,3955299,2021-08-10
2190722,1463083,249965,3955299,2021-08-10
2190867,1463083,8024855,3955299,2021-08-10
2191063,1463083,561545,3955299,2021-08-10
2191590,1463083,7944779,3955299,2021-08-10
2191607,1463083,561067,3955299,2021-08-10
2192350,1463083,5196984,3955299,2021-08-10

[Successfully executed]
2025-05-07 06:38:11 - Thread-460 (execute) - INFO - [Try to execute]
--Description: See the list of users so we know where to pick the names later  
SELECT "Id", "UserName", "DisplayName"  
FROM "META_KAGGLE"."META_KAGGLE"."USERS"  
LIMIT 20;
[Try to execute]
2025-05-07 06:38:11 - Thread-460 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: See the list of users so we know where to pick the names later  
SELECT "Id", "UserName", "DisplayName"  
FROM "META_KAGGLE"."META_KAGGLE"."USERS"  
LIMIT 20;
Results:
Id,UserName,DisplayName
78428,jonessmithsonian,Jones Smithsonian
78436,cheryl1,Cheryl
277233,gangan,gangan
277203,ssaha1,S SAHA
277347,tarunc,tarunc
277229,yhmmath,yhmmath
496363,ishaangandhi,ishaangandhi
496479,salmankhalid,salman
852734,nsbzhd,nisabzahid
853003,canpervane,CSPer
852765,dany9000,Daniele Team
852672,appletart,appletart
1524194,emilyfertig,Emily Fertig
1525012,jkconeby,Jake Coneby
1524558,gavinl99,Gavin

[Successfully executed]
2025-05-07 06:38:11 - Thread-460 (execute) - INFO - [Try to execute]
--Description: Count how many times every voter ↦ recipient pair appears  
SELECT "FromUserId", "ToUserId", COUNT(*) AS "pair_votes"  
FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"  
GROUP BY "FromUserId", "ToUserId"  
ORDER BY "pair_votes" DESC  
LIMIT 20;
[Try to execute]
2025-05-07 06:38:12 - Thread-460 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Count how many times every voter ↦ recipient pair appears  
SELECT "FromUserId", "ToUserId", COUNT(*) AS "pair_votes"  
FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"  
GROUP BY "FromUserId", "ToUserId"  
ORDER BY "pair_votes" DESC  
LIMIT 20;
Results:
FromUserId,ToUserId,pair_votes
-1,75976,2666
-1,5309,1975
-1,4944079,1149
-1,3258,944
9755101,9742946,899
9484259,9742946,892
9788055,9742946,880
-1,1095143,829
8335210,6245640,795
-1,3012786,793
-1,8273630,766
54836,75976,738
-1,2779868,723
-1,1132983,699
-1,7237430,663
-1,2242,637
-1,113660,629
-1,1673888,626
-1,2033538,567
-1,357941,554

[Successfully executed]
2025-05-07 06:38:12 - Thread-460 (execute) - INFO - [Try to execute]
--Description: Show the very top voter-recipient pair only  
SELECT "FromUserId", "ToUserId", COUNT(*) AS "pair_votes"  
FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"  
GROUP BY "FromUserId", "ToUserId"  
ORDER BY "pair_votes" DESC  
LIMIT 1;
[Try to execute]
2025-05-07 06:38:13 - Thread-460 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Show the very top voter-recipient pair only  
SELECT "FromUserId", "ToUserId", COUNT(*) AS "pair_votes"  
FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"  
GROUP BY "FromUserId", "ToUserId"  
ORDER BY "pair_votes" DESC  
LIMIT 1;
Results:
FromUserId,ToUserId,pair_votes
-1,75976,2666

[Successfully executed]
2025-05-07 06:38:13 - Thread-460 (execute) - INFO - [Try to execute]
--Description: Compute, for every ordered pair, both directions of up-votes  
WITH pairs AS (  
    SELECT "FromUserId" AS "u1", "ToUserId" AS "u2", COUNT(*) AS "votes_u1_to_u2"  
    FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"  
    GROUP BY "FromUserId", "ToUserId"  
)  
SELECT p1."u1", p1."u2",  
       p1."votes_u1_to_u2"                              AS "u1_to_u2",  
       COALESCE(p2."votes_u1_to_u2", 0)                 AS "u2_to_u1"  
FROM pairs p1  
LEFT JOIN pairs p2  
       ON p1."u1" = p2."u2" AND p1."u2" = p2."u1"  
ORDER BY p1."votes_u1_to_u2" DESC, COALESCE(p2."votes_u1_to_u2",0) DESC  
LIMIT 20;
[Try to execute]
2025-05-07 06:38:15 - Thread-460 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Compute, for every ordered pair, both directions of up-votes  
WITH pairs AS (  
    SELECT "FromUserId" AS "u1", "ToUserId" AS "u2", COUNT(*) AS "votes_u1_to_u2"  
    FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"  
    GROUP BY "FromUserId", "ToUserId"  
)  
SELECT p1."u1", p1."u2",  
       p1."votes_u1_to_u2"                              AS "u1_to_u2",  
       COALESCE(p2."votes_u1_to_u2", 0)                 AS "u2_to_u1"  
FROM pairs p1  
LEFT JOIN pairs p2  
       ON p1."u1" = p2."u2" AND p1."u2" = p2."u1"  
ORDER BY p1."votes_u1_to_u2" DESC, COALESCE(p2."votes_u1_to_u2",0) DESC  
LIMIT 20;
Results:
u1,u2,u1_to_u2,u2_to_u1
-1,75976,2666,0
-1,5309,1975,0
-1,4944079,1149,0
-1,3258,944,0
9755101,9742946,899,0
9484259,9742946,892,32
9788055,9742946,880,0
-1,1095143,829,0
8335210,6245640,795,3
-1,3012786,793,0
-1,8273630,766,0
54836,75976,738,224
-1,2779868,723,0
-1,1132983,699,0
-1,7237430,663,0
-1,2242,637,0
-1,113660,629,0
-1,1673888,626,0
-1,2033538,567,0
-1,357941,554,0

[Successfully executed]
2025-05-07 06:38:15 - Thread-460 (execute) - INFO - [Try to execute]
--Description: Grab the very top asymmetric pair with their reciprocal count  
WITH pairs AS (  
    SELECT "FromUserId" AS "giver", "ToUserId" AS "receiver", COUNT(*) AS "votes_out"  
    FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"  
    GROUP BY "FromUserId", "ToUserId"  
)  
SELECT p1."giver", p1."receiver",  
       p1."votes_out"                    AS "giver_to_receiver",  
       COALESCE(p2."votes_out",0)        AS "receiver_to_giver"  
FROM pairs p1  
LEFT JOIN pairs p2  
       ON p1."giver" = p2."receiver" AND p1."receiver" = p2."giver"  
ORDER BY p1."votes_out" DESC, COALESCE(p2."votes_out",0) DESC  
LIMIT 1;
[Try to execute]
2025-05-07 06:38:16 - Thread-460 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Grab the very top asymmetric pair with their reciprocal count  
WITH pairs AS (  
    SELECT "FromUserId" AS "giver", "ToUserId" AS "receiver", COUNT(*) AS "votes_out"  
    FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"  
    GROUP BY "FromUserId", "ToUserId"  
)  
SELECT p1."giver", p1."receiver",  
       p1."votes_out"                    AS "giver_to_receiver",  
       COALESCE(p2."votes_out",0)        AS "receiver_to_giver"  
FROM pairs p1  
LEFT JOIN pairs p2  
       ON p1."giver" = p2."receiver" AND p1."receiver" = p2."giver"  
ORDER BY p1."votes_out" DESC, COALESCE(p2."votes_out",0) DESC  
LIMIT 1;
Results:
giver,receiver,giver_to_receiver,receiver_to_giver
-1,75976,2666,0

[Successfully executed]
2025-05-07 06:38:16 - Thread-460 (execute) - INFO - [Try to execute]
--Description: Attach usernames to both sides of the top pair for readability  
WITH pairs AS (  
    SELECT "FromUserId" AS "giver", "ToUserId" AS "receiver", COUNT(*) AS "votes_out"  
    FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"  
    GROUP BY "FromUserId", "ToUserId"  
), top_pair AS (  
    SELECT p1."giver", p1."receiver",  
           p1."votes_out"                      AS "giver_to_receiver",  
           COALESCE(p2."votes_out",0)          AS "receiver_to_giver"  
    FROM pairs p1  
    LEFT JOIN pairs p2  
           ON p1."giver" = p2."receiver" AND p1."receiver" = p2."giver"  
    ORDER BY p1."votes_out" DESC, COALESCE(p2."votes_out",0) DESC  
    LIMIT 1  
)  
SELECT u1."UserName"  AS "giver_username",  
       u2."UserName"  AS "receiver_username",  
       t."giver_to_receiver",  
       t."receiver_to_giver"  
FROM top_pair t  
JOIN "META_KAGGLE"."META_KAGGLE"."USERS" u1 ON t."giver"    = u1."Id"  
JOIN "META_KAGGLE"."META_KAGGLE"."USERS" u2 ON t."receiver" = u2."Id";
[Try to execute]
2025-05-07 06:38:18 - Thread-460 (execute) - INFO - [Error occurred]
No data found for the specified query.

[Error occurred]
2025-05-07 06:40:44 - Thread-460 (execute) - INFO - [Corrected SQL]
```sql
--Description:
-- 1) Count how many up-votes each user (“giver”) has sent to every other user (“receiver”).
-- 2) Self-join that summary to bring in the opposite direction so we can see how many
--    up-votes the receiver sent back to the giver.
-- 3) Order by the largest number of received votes (giver → receiver) and, on ties,
--    by the returned votes (receiver → giver); keep only the top pair.
-- 4) Attach usernames.  User id –1 (system / anonymous) has no row in USERS,
--    so COALESCE substitutes a readable label.
WITH pair_counts AS (
    SELECT
        "FromUserId" AS "giver",
        "ToUserId"   AS "receiver",
        COUNT(*)     AS "votes_giver_to_receiver"
    FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"
    GROUP BY "FromUserId", "ToUserId"
),
ranked AS (
    SELECT
        pc1."giver",
        pc1."receiver",
        pc1."votes_giver_to_receiver"                                    AS "upvotes_received",
        COALESCE(pc2."votes_giver_to_receiver", 0)                       AS "upvotes_returned"
    FROM pair_counts pc1
    LEFT JOIN pair_counts pc2
           ON pc1."giver"    = pc2."receiver"
          AND pc1."receiver" = pc2."giver"
    ORDER BY pc1."votes_giver_to_receiver" DESC,
             COALESCE(pc2."votes_giver_to_receiver", 0) DESC
    LIMIT 1
)
SELECT
    COALESCE(u_from."UserName", 'SYSTEM_' || ranked."giver")    AS "giver_username",
    COALESCE(u_to."UserName",   'SYSTEM_' || ranked."receiver") AS "receiver_username",
    ranked."upvotes_received",
    ranked."upvotes_returned"
FROM ranked
LEFT JOIN "META_KAGGLE"."META_KAGGLE"."USERS" u_from
       ON ranked."giver" = u_from."Id"
LEFT JOIN "META_KAGGLE"."META_KAGGLE"."USERS" u_to
       ON ranked."receiver" = u_to."Id";
```
[Corrected SQL]
2025-05-07 06:40:49 - Thread-460 (execute) - INFO - [Results for corrected sql]
giver_username,receiver_username,upvotes_received,upvotes_returned
SYSTEM_-1,cpmpml,2666,0

[Results for corrected sql]
2025-05-07 06:41:43 - Thread-460 (execute) - INFO - [Corrected other sqls]
```sql
--Description: Inspect the distribution of reciprocal vote counts (symmetric look)
WITH pairs AS (
    SELECT
        "FromUserId" AS "u1",
        "ToUserId"   AS "u2",
        COUNT(*)     AS "votes"
    FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"
    GROUP BY "FromUserId", "ToUserId"
),
bothdir AS (
    SELECT
        LEAST("u1","u2")      AS "low_id",
        GREATEST("u1","u2")   AS "high_id",
        SUM("votes")          AS "total_between"
    FROM pairs
    GROUP BY LEAST("u1","u2"), GREATEST("u1","u2")
)
SELECT *
FROM bothdir
ORDER BY "total_between" DESC
LIMIT 20;
```

```sql
--Description: Show how many distinct recipients each voter has up-voted
SELECT
    "FromUserId",
    COUNT(DISTINCT "ToUserId") AS "distinct_recipients"
FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"
GROUP BY "FromUserId"
ORDER BY "distinct_recipients" DESC
LIMIT 20;
```

```sql
--Description: List cases where reciprocal vote counts are equal (and sizeable)
WITH pairs AS (
    SELECT
        "FromUserId" AS "a",
        "ToUserId"   AS "b",
        COUNT(*)     AS "ab_votes"
    FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"
    GROUP BY "FromUserId", "ToUserId"
),
joined AS (
    SELECT
        p1."a",
        p1."b",
        p1."ab_votes",
        COALESCE(p2."ab_votes", 0) AS "ba_votes"
    FROM pairs p1
    LEFT JOIN pairs p2
           ON p1."a" = p2."b" AND p1."b" = p2."a"
)
SELECT *
FROM joined
WHERE "ab_votes" = "ba_votes" AND "ab_votes" > 10
ORDER BY "ab_votes" DESC
LIMIT 20;
```
[Corrected other sqls]
2025-05-07 06:41:43 - Thread-460 (execute) - INFO - [Successfully corrected]
Successfully corrected. SQL:
--Description:
-- 1) Count how many up-votes each user (“giver”) has sent to every other user (“receiver”).
-- 2) Self-join that summary to bring in the opposite direction so we can see how many
--    up-votes the receiver sent back to the giver.
-- 3) Order by the largest number of received votes (giver → receiver) and, on ties,
--    by the returned votes (receiver → giver); keep only the top pair.
-- 4) Attach usernames.  User id –1 (system / anonymous) has no row in USERS,
--    so COALESCE substitutes a readable label.
WITH pair_counts AS (
    SELECT
        "FromUserId" AS "giver",
        "ToUserId"   AS "receiver",
        COUNT(*)     AS "votes_giver_to_receiver"
    FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"
    GROUP BY "FromUserId", "ToUserId"
),
ranked AS (
    SELECT
        pc1."giver",
        pc1."receiver",
        pc1."votes_giver_to_receiver"                                    AS "upvotes_received",
        COALESCE(pc2."votes_giver_to_receiver", 0)                       AS "upvotes_returned"
    FROM pair_counts pc1
    LEFT JOIN pair_counts pc2
           ON pc1."giver"    = pc2."receiver"
          AND pc1."receiver" = pc2."giver"
    ORDER BY pc1."votes_giver_to_receiver" DESC,
             COALESCE(pc2."votes_giver_to_receiver", 0) DESC
    LIMIT 1
)
SELECT
    COALESCE(u_from."UserName", 'SYSTEM_' || ranked."giver")    AS "giver_username",
    COALESCE(u_to."UserName",   'SYSTEM_' || ranked."receiver") AS "receiver_username",
    ranked."upvotes_received",
    ranked."upvotes_returned"
FROM ranked
LEFT JOIN "META_KAGGLE"."META_KAGGLE"."USERS" u_from
       ON ranked."giver" = u_from."Id"
LEFT JOIN "META_KAGGLE"."META_KAGGLE"."USERS" u_to
       ON ranked."receiver" = u_to."Id";
Results:
giver_username,receiver_username,upvotes_received,upvotes_returned
SYSTEM_-1,cpmpml,2666,0

[Successfully corrected]
2025-05-07 06:41:43 - Thread-460 (execute) - INFO - [Try to execute]
--Description: Inspect the distribution of reciprocal vote counts (symmetric look)
WITH pairs AS (
    SELECT
        "FromUserId" AS "u1",
        "ToUserId"   AS "u2",
        COUNT(*)     AS "votes"
    FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"
    GROUP BY "FromUserId", "ToUserId"
),
bothdir AS (
    SELECT
        LEAST("u1","u2")      AS "low_id",
        GREATEST("u1","u2")   AS "high_id",
        SUM("votes")          AS "total_between"
    FROM pairs
    GROUP BY LEAST("u1","u2"), GREATEST("u1","u2")
)
SELECT *
FROM bothdir
ORDER BY "total_between" DESC
LIMIT 20
[Try to execute]
2025-05-07 06:41:45 - Thread-460 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Inspect the distribution of reciprocal vote counts (symmetric look)
WITH pairs AS (
    SELECT
        "FromUserId" AS "u1",
        "ToUserId"   AS "u2",
        COUNT(*)     AS "votes"
    FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"
    GROUP BY "FromUserId", "ToUserId"
),
bothdir AS (
    SELECT
        LEAST("u1","u2")      AS "low_id",
        GREATEST("u1","u2")   AS "high_id",
        SUM("votes")          AS "total_between"
    FROM pairs
    GROUP BY LEAST("u1","u2"), GREATEST("u1","u2")
)
SELECT *
FROM bothdir
ORDER BY "total_between" DESC
LIMIT 20
Results:
low_id,high_id,total_between
-1,75976,2666
-1,5309,1975
-1,4944079,1149
54836,75976,962
-1,3258,944
9484259,9742946,924
9742946,9755101,899
9742946,9788055,880
-1,1095143,829
6245640,8335210,798
-1,3012786,793
75976,1723677,775
-1,8273630,766
3012786,5430373,756
-1,2779868,723
-1,1132983,699
3363440,4183416,672
-1,7237430,663
1788308,1918280,658
-1,2242,637

[Successfully executed]
2025-05-07 06:41:45 - Thread-460 (execute) - INFO - [Try to execute]
--Description: Show how many distinct recipients each voter has up-voted
SELECT
    "FromUserId",
    COUNT(DISTINCT "ToUserId") AS "distinct_recipients"
FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"
GROUP BY "FromUserId"
ORDER BY "distinct_recipients" DESC
LIMIT 20
[Try to execute]
2025-05-07 06:41:47 - Thread-460 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Show how many distinct recipients each voter has up-voted
SELECT
    "FromUserId",
    COUNT(DISTINCT "ToUserId") AS "distinct_recipients"
FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"
GROUP BY "FromUserId"
ORDER BY "distinct_recipients" DESC
LIMIT 20
Results:
FromUserId,distinct_recipients
-1,20203
3012786,8852
373959,7090
1723677,5866
4432707,4641
10735783,4622
8273630,4443
75976,3029
622458,2806
417337,2577
9072771,2086
10030651,2037
4037336,1917
4051350,1882
727004,1850
54836,1824
769452,1794
87114,1775
7024923,1727
9278072,1667

[Successfully executed]
2025-05-07 06:41:47 - Thread-460 (execute) - INFO - [Try to execute]
--Description: List cases where reciprocal vote counts are equal (and sizeable)
WITH pairs AS (
    SELECT
        "FromUserId" AS "a",
        "ToUserId"   AS "b",
        COUNT(*)     AS "ab_votes"
    FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"
    GROUP BY "FromUserId", "ToUserId"
),
joined AS (
    SELECT
        p1."a",
        p1."b",
        p1."ab_votes",
        COALESCE(p2."ab_votes", 0) AS "ba_votes"
    FROM pairs p1
    LEFT JOIN pairs p2
           ON p1."a" = p2."b" AND p1."b" = p2."a"
)
SELECT *
FROM joined
WHERE "ab_votes" = "ba_votes" AND "ab_votes" > 10
ORDER BY "ab_votes" DESC
LIMIT 20
[Try to execute]
2025-05-07 06:42:01 - Thread-460 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: List cases where reciprocal vote counts are equal (and sizeable)
WITH pairs AS (
    SELECT
        "FromUserId" AS "a",
        "ToUserId"   AS "b",
        COUNT(*)     AS "ab_votes"
    FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"
    GROUP BY "FromUserId", "ToUserId"
),
joined AS (
    SELECT
        p1."a",
        p1."b",
        p1."ab_votes",
        COALESCE(p2."ab_votes", 0) AS "ba_votes"
    FROM pairs p1
    LEFT JOIN pairs p2
           ON p1."a" = p2."b" AND p1."b" = p2."a"
)
SELECT *
FROM joined
WHERE "ab_votes" = "ba_votes" AND "ab_votes" > 10
ORDER BY "ab_votes" DESC
LIMIT 20
Results:
a,b,ab_votes,ba_votes
1723677,1696976,66,66
1696976,1723677,66,66
10172187,3012786,48,48
3012786,10172187,48,48
17037041,17421843,45,45
17421843,17037041,45,45
19186184,4707427,44,44
4707427,19186184,44,44
4707427,19517213,41,41
19517213,4707427,41,41
6851926,4576104,40,40
4576104,6851926,40,40
9278072,4707427,39,39
4707427,9278072,39,39
6673300,16192307,36,36
16192307,6673300,36,36
373959,4878232,35,35
4878232,373959,35,35
4491801,2003977,34,34

[Successfully executed]
2025-05-07 06:42:01 - Thread-460 (execute) - INFO - itercount: 0
2025-05-07 06:42:01 - Thread-460 (execute) - INFO - [Self-refine]
Table full name: META_KAGGLE.META_KAGGLE.DATASETS
Column name: LastActivityDate Type: DATE
Column name: Id Type: NUMBER
Column name: OwnerUserId Type: NUMBER
Column name: Type Type: TEXT
Column name: TotalDownloads Type: NUMBER
Column name: TotalVotes Type: NUMBER
Column name: CurrentDatasourceVersionId Type: NUMBER
Column name: TotalKernels Type: NUMBER
Column name: TotalViews Type: NUMBER
Column name: ForumId Type: NUMBER
Column name: OwnerOrganizationId Type: NUMBER
Column name: CreatorUserId Type: NUMBER
Column name: CurrentDatasetVersionId Type: NUMBER
Column name: CreationDate Type: NUMBER
Sample rows:
[{'Id': 58151, 'CreatorUserId': 2311653, 'OwnerUserId': 2311653, 'OwnerOrganizationId': None, 'CurrentDatasetVersionId': 112840, 'CurrentDatasourceVersionId': 123254, 'ForumId': 66990, 'Type': 'Dataset', 'CreationDate': 1538462902000000, 'LastActivityDate': '2018-10-02', 'TotalViews': 132, 'TotalDownloads': 0, 'TotalVotes': 0, 'TotalKernels': 0}, {'Id': 58161, 'CreatorUserId': 2311653, 'OwnerUserId': 2311653, 'OwnerOrganizationId': None, 'CurrentDatasetVersionId': 112865, 'CurrentDatasourceVersionId': 123281, 'ForumId': 67000, 'Type': 'Dataset', 'CreationDate': 1538464192000000, 'LastActivityDate': '2018-10-02', 'TotalViews': 10, 'TotalDownloads': 0, 'TotalVotes': 0, 'TotalKernels': 0}, {'Id': 58185, 'CreatorUserId': 2311653, 'OwnerUserId': 2311653, 'OwnerOrganizationId': None, 'CurrentDatasetVersionId': 112907, 'CurrentDatasourceVersionId': 123332, 'ForumId': 67025, 'Type': 'Dataset', 'CreationDate': 1538468032000000, 'LastActivityDate': '2018-10-02', 'TotalViews': 13, 'TotalDownloads': 0, 'TotalVotes': 0, 'TotalKernels': 1}, {'Id': 58199, 'CreatorUserId': 2311653, 'OwnerUserId': 2311653, 'OwnerOrganizationId': None, 'CurrentDatasetVersionId': 112931, 'CurrentDatasourceVersionId': 123357, 'ForumId': 67040, 'Type': 'Dataset', 'CreationDate': 1538469809000000, 'LastActivityDate': '2018-10-02', 'TotalViews': 314, 'TotalDownloads': 0, 'TotalVotes': 0, 'TotalKernels': 0}, {'Id': 58252, 'CreatorUserId': 2312500, 'OwnerUserId': 2312500, 'OwnerOrganizationId': None, 'CurrentDatasetVersionId': 113034, 'CurrentDatasourceVersionId': 123463, 'ForumId': 67095, 'Type': 'Dataset', 'CreationDate': 1538480351000000, 'LastActivityDate': '2018-10-02', 'TotalViews': 63, 'TotalDownloads': 0, 'TotalVotes': 0, 'TotalKernels': 0}]

--------------------------------------------------
Table full name: META_KAGGLE.META_KAGGLE.DATASETTAGS
Column name: DatasetId Type: NUMBER
Column name: TagId Type: NUMBER
Column name: Id Type: NUMBER
Sample rows:
[{'Id': 445, 'DatasetId': 629, 'TagId': 2304}, {'Id': 447, 'DatasetId': 655, 'TagId': 2304}, {'Id': 520, 'DatasetId': 649, 'TagId': 2304}, {'Id': 699, 'DatasetId': 749, 'TagId': 2304}, {'Id': 926, 'DatasetId': 290, 'TagId': 2304}]

--------------------------------------------------
Table full name: META_KAGGLE.META_KAGGLE.DATASETTASKSUBMISSIONS
Column name: DatasetTaskId Type: NUMBER
Column name: DatasetId Type: NUMBER
Column name: SubmittedUserId Type: NUMBER
Column name: Id Type: NUMBER
Column name: AcceptedDate Type: NUMBER
Column name: KernelId Type: NUMBER
Column name: CreationDate Type: NUMBER
Sample rows:
[{'Id': 4719, 'DatasetTaskId': 2304, 'SubmittedUserId': 4348228, 'CreationDate': 1602941845000000, 'KernelId': 12336275, 'DatasetId': None, 'AcceptedDate': None}, {'Id': 4743, 'DatasetTaskId': 2304, 'SubmittedUserId': 5986902, 'CreationDate': 1603110187000000, 'KernelId': 12373911, 'DatasetId': None, 'AcceptedDate': None}, {'Id': 4761, 'DatasetTaskId': 2304, 'SubmittedUserId': 5521499, 'CreationDate': 1603290215000000, 'KernelId': 12304472, 'DatasetId': None, 'AcceptedDate': None}, {'Id': 4813, 'DatasetTaskId': 2304, 'SubmittedUserId': 2050099, 'CreationDate': 1603636907000000, 'KernelId': 12484884, 'DatasetId': None, 'AcceptedDate': None}, {'Id': 4827, 'DatasetTaskId': 2304, 'SubmittedUserId': 3623292, 'CreationDate': 1603736617000000, 'KernelId': 12512601, 'DatasetId': None, 'AcceptedDate': None}]

--------------------------------------------------
Table full name: META_KAGGLE.META_KAGGLE.EPISODES
Column name: CompetitionId Type: NUMBER
Column name: Id Type: NUMBER
Column name: EndTime Type: NUMBER
Column name: CreateTime Type: NUMBER
Column name: Type Type: NUMBER
Sample rows:
[{'Id': 54280896, 'Type': 1, 'CompetitionId': 60154, 'CreateTime': 1711149530000000, 'EndTime': 1711149568000000}, {'Id': 54215929, 'Type': 1, 'CompetitionId': 60154, 'CreateTime': 1710568729000000, 'EndTime': 1710568777000000}, {'Id': 54348494, 'Type': 1, 'CompetitionId': 60154, 'CreateTime': 1711772827000000, 'EndTime': 1711772865000000}, {'Id': 54556515, 'Type': 1, 'CompetitionId': 60154, 'CreateTime': 1713772468000000, 'EndTime': 1713772515000000}, {'Id': 54667942, 'Type': 1, 'CompetitionId': 60154, 'CreateTime': 1714797902000000, 'EndTime': 1714797992000000}]

--------------------------------------------------
Table full name: META_KAGGLE.META_KAGGLE.FORUMMESSAGEVOTES
Column name: ToUserId Type: NUMBER
Column name: FromUserId Type: NUMBER
Column name: Id Type: NUMBER
Column name: VoteDate Type: DATE
Column name: ForumMessageId Type: NUMBER
Sample rows:
[{'Id': 183321, 'ForumMessageId': 6, 'FromUserId': 307512, 'ToUserId': 638, 'VoteDate': '2017-04-06'}, {'Id': 4402419, 'ForumMessageId': 28, 'FromUserId': 6632177, 'ToUserId': 368, 'VoteDate': '2024-07-16'}, {'Id': 133472, 'ForumMessageId': 352, 'FromUserId': 697221, 'ToUserId': 2246, 'VoteDate': '2016-08-26'}, {'Id': 431934, 'ForumMessageId': 546, 'FromUserId': 514568, 'ToUserId': 1828, 'VoteDate': '2018-06-30'}, {'Id': 177441, 'ForumMessageId': 563, 'FromUserId': 929000, 'ToUserId': 1231, 'VoteDate': '2017-03-14'}]

--------------------------------------------------
Table full name: META_KAGGLE.META_KAGGLE.FORUMTOPICS
Column name: TotalViews Type: NUMBER
Column name: LastForumMessageId Type: FLOAT
Column name: IsSticky Type: BOOLEAN
Column name: LastCommentDate Type: NUMBER
Column name: TotalReplies Type: NUMBER
Column name: Score Type: NUMBER
Column name: KernelId Type: FLOAT
Column name: Title Type: TEXT
Column name: TotalMessages Type: NUMBER
Column name: CreationDate Type: NUMBER
Column name: FirstForumMessageId Type: FLOAT
Column name: Id Type: NUMBER
Column name: ForumId Type: NUMBER
Sample rows:
[{'TotalReplies': 1, 'LastCommentDate': 1625377492000000, 'FirstForumMessageId': None, 'IsSticky': False, 'ForumId': 16860, 'Title': None, 'TotalMessages': 0, 'Id': 250718, 'LastForumMessageId': None, 'CreationDate': 1625377492000000, 'TotalViews': 0, 'KernelId': nan, 'Score': 28}, {'TotalReplies': 0, 'LastCommentDate': 1625218912000000, 'FirstForumMessageId': None, 'IsSticky': False, 'ForumId': 16860, 'Title': None, 'TotalMessages': 0, 'Id': 250354, 'LastForumMessageId': None, 'CreationDate': 1625218912000000, 'TotalViews': 0, 'KernelId': 18233971.0, 'Score': 42}, {'TotalReplies': 0, 'LastCommentDate': 1617153396000000, 'FirstForumMessageId': None, 'IsSticky': False, 'ForumId': 16860, 'Title': None, 'TotalMessages': 0, 'Id': 229617, 'LastForumMessageId': None, 'CreationDate': 1617153396000000, 'TotalViews': 0, 'KernelId': 11887338.0, 'Score': 217}, {'TotalReplies': 0, 'LastCommentDate': 1621965486000000, 'FirstForumMessageId': None, 'IsSticky': False, 'ForumId': 16860, 'Title': None, 'TotalMessages': 0, 'Id': 241702, 'LastForumMessageId': None, 'CreationDate': 1621965486000000, 'TotalViews': 0, 'KernelId': 5832124.0, 'Score': 114}, {'TotalReplies': 0, 'LastCommentDate': 1616509777000000, 'FirstForumMessageId': None, 'IsSticky': False, 'ForumId': 16860, 'Title': None, 'TotalMessages': 0, 'Id': 228138, 'LastForumMessageId': None, 'CreationDate': 1616509777000000, 'TotalViews': 0, 'KernelId': 12613420.0, 'Score': 61}]

--------------------------------------------------
Table full name: META_KAGGLE.META_KAGGLE.KERNELS
Column name: ForumTopicId Type: NUMBER
Column name: Id Type: NUMBER
Column name: MedalAwardDate Type: DATE
Column name: MadePublicDate Type: DATE
Column name: FirstKernelVersionId Type: NUMBER
Column name: TotalComments Type: NUMBER
Column name: EvaluationDate Type: DATE
Column name: ForkParentKernelVersionId Type: NUMBER
Column name: IsProjectLanguageTemplate Type: BOOLEAN
Column name: Medal Type: NUMBER
Column name: CreationDate Type: NUMBER
Column name: TotalVotes Type: NUMBER
Column name: TotalViews Type: NUMBER
Column name: CurrentKernelVersionId Type: NUMBER
Column name: CurrentUrlSlug Type: TEXT
Column name: AuthorUserId Type: NUMBER
Sample rows:
[{'Id': 46978346, 'AuthorUserId': 17582017, 'CurrentKernelVersionId': nan, 'ForkParentKernelVersionId': nan, 'ForumTopicId': nan, 'FirstKernelVersionId': 152701563, 'CreationDate': 1701170742000000, 'EvaluationDate': '2023-12-30', 'MadePublicDate': '2023-11-28', 'IsProjectLanguageTemplate': False, 'CurrentUrlSlug': 'notebook209f8fec22', 'Medal': None, 'MedalAwardDate': None, 'TotalViews': 50, 'TotalComments': 0, 'TotalVotes': 1}, {'Id': 46979607, 'AuthorUserId': 17650091, 'CurrentKernelVersionId': 152712152.0, 'ForkParentKernelVersionId': 152550707.0, 'ForumTopicId': 464880.0, 'FirstKernelVersionId': 152705157, 'CreationDate': 1701172382000000, 'EvaluationDate': '2023-11-28', 'MadePublicDate': '2023-11-28', 'IsProjectLanguageTemplate': False, 'CurrentUrlSlug': 'countvectorizer-multinomialnb', 'Medal': None, 'MedalAwardDate': None, 'TotalViews': 148, 'TotalComments': 1, 'TotalVotes': 1}, {'Id': 46980103, 'AuthorUserId': 17915674, 'CurrentKernelVersionId': 152949918.0, 'ForkParentKernelVersionId': nan, 'ForumTopicId': nan, 'FirstKernelVersionId': 152706531, 'CreationDate': 1701172993000000, 'EvaluationDate': '2023-11-30', 'MadePublicDate': '2023-11-28', 'IsProjectLanguageTemplate': False, 'CurrentUrlSlug': 'cam-capture', 'Medal': None, 'MedalAwardDate': None, 'TotalViews': 121, 'TotalComments': 0, 'TotalVotes': 1}, {'Id': 46981995, 'AuthorUserId': 12749163, 'CurrentKernelVersionId': 153703103.0, 'ForkParentKernelVersionId': 152693168.0, 'ForumTopicId': nan, 'FirstKernelVersionId': 152711750, 'CreationDate': 1701175249000000, 'EvaluationDate': '2023-12-05', 'MadePublicDate': '2023-11-28', 'IsProjectLanguageTemplate': False, 'CurrentUrlSlug': 'prisons-in-hungary', 'Medal': None, 'MedalAwardDate': None, 'TotalViews': 316, 'TotalComments': 0, 'TotalVotes': 1}, {'Id': 46982846, 'AuthorUserId': 13608749, 'CurrentKernelVersionId': 152714618.0, 'ForkParentKernelVersionId': nan, 'ForumTopicId': nan, 'FirstKernelVersionId': 152714161, 'CreationDate': 1701176272000000, 'EvaluationDate': '2023-11-28', 'MadePublicDate': '2023-11-28', 'IsProjectLanguageTemplate': False, 'CurrentUrlSlug': 'my-notebook', 'Medal': None, 'MedalAwardDate': None, 'TotalViews': 75, 'TotalComments': 0, 'TotalVotes': 1}]

--------------------------------------------------
Table full name: META_KAGGLE.META_KAGGLE.KERNELVERSIONS
Column name: VersionNumber Type: FLOAT
Column name: ScriptLanguageId Type: NUMBER
Column name: Title Type: TEXT
Column name: LinesChangedFromFork Type: FLOAT
Column name: ParentScriptVersionId Type: TEXT
Column name: LinesChangedFromPrevious Type: FLOAT
Column name: LinesUnchangedFromPrevious Type: FLOAT
Column name: CreationDate Type: NUMBER
Column name: AuthorUserId Type: NUMBER
Column name: TotalVotes Type: NUMBER
Column name: TotalLines Type: FLOAT
Column name: EvaluationDate Type: DATE
Column name: LinesInsertedFromFork Type: FLOAT
Column name: LinesUnchangedFromFork Type: FLOAT
Column name: ScriptId Type: NUMBER
Column name: LinesDeletedFromFork Type: FLOAT
Column name: IsChange Type: BOOLEAN
Column name: LinesInsertedFromPrevious Type: FLOAT
Column name: Id Type: NUMBER
Sample rows:
[{'LinesUnchangedFromFork': nan, 'LinesChangedFromFork': nan, 'LinesDeletedFromFork': nan, 'LinesUnchangedFromPrevious': 427.0, 'TotalLines': 431.0, 'IsChange': True, 'VersionNumber': 86.0, 'LinesInsertedFromPrevious': 4.0, 'EvaluationDate': '2022-10-06', 'CreationDate': 1665069639000000, 'LinesChangedFromPrevious': 0.0, 'ScriptId': 30636649, 'ScriptLanguageId': 9, 'ParentScriptVersionId': None, 'TotalVotes': 0, 'AuthorUserId': 11500118, 'Title': 'Titanic Problem', 'LinesInsertedFromFork': nan, 'Id': 107355719}, {'LinesUnchangedFromFork': nan, 'LinesChangedFromFork': nan, 'LinesDeletedFromFork': nan, 'LinesUnchangedFromPrevious': 426.0, 'TotalLines': 431.0, 'IsChange': True, 'VersionNumber': 7.0, 'LinesInsertedFromPrevious': 5.0, 'EvaluationDate': '2024-01-31', 'CreationDate': 1706733414000000, 'LinesChangedFromPrevious': 0.0, 'ScriptId': 50117187, 'ScriptLanguageId': 9, 'ParentScriptVersionId': None, 'TotalVotes': 0, 'AuthorUserId': 15669490, 'Title': 'notebookc1fc5ad94b', 'LinesInsertedFromFork': nan, 'Id': 161218273}, {'LinesUnchangedFromFork': nan, 'LinesChangedFromFork': nan, 'LinesDeletedFromFork': nan, 'LinesUnchangedFromPrevious': 499.0, 'TotalLines': 431.0, 'IsChange': True, 'VersionNumber': 10.0, 'LinesInsertedFromPrevious': 5.0, 'EvaluationDate': '2017-05-31', 'CreationDate': 1496235682000000, 'LinesChangedFromPrevious': 14.0, 'ScriptId': 265878, 'ScriptLanguageId': 9, 'ParentScriptVersionId': None, 'TotalVotes': 0, 'AuthorUserId': 378133, 'Title': 'Forecasting Diabetes Mellitus', 'LinesInsertedFromFork': nan, 'Id': 1202703}, {'LinesUnchangedFromFork': nan, 'LinesChangedFromFork': nan, 'LinesDeletedFromFork': nan, 'LinesUnchangedFromPrevious': 425.0, 'TotalLines': 431.0, 'IsChange': True, 'VersionNumber': 16.0, 'LinesInsertedFromPrevious': 6.0, 'EvaluationDate': '2021-11-15', 'CreationDate': 1636958055000000, 'LinesChangedFromPrevious': 0.0, 'ScriptId': 21902001, 'ScriptLanguageId': 9, 'ParentScriptVersionId': None, 'TotalVotes': 0, 'AuthorUserId': 8444425, 'Title': 'Assignment 3', 'LinesInsertedFromFork': nan, 'Id': 79775492}, {'LinesUnchangedFromFork': 224.0, 'LinesChangedFromFork': 0.0, 'LinesDeletedFromFork': 76.0, 'LinesUnchangedFromPrevious': 424.0, 'TotalLines': 431.0, 'IsChange': True, 'VersionNumber': 3.0, 'LinesInsertedFromPrevious': 7.0, 'EvaluationDate': '2024-06-28', 'CreationDate': 1719567230000000, 'LinesChangedFromPrevious': 0.0, 'ScriptId': 60937253, 'ScriptLanguageId': 9, 'ParentScriptVersionId': None, 'TotalVotes': 0, 'AuthorUserId': 6045667, 'Title': 'HW8-anomaly-detection', 'LinesInsertedFromFork': 207.0, 'Id': 185890301}]

--------------------------------------------------
Table full name: META_KAGGLE.META_KAGGLE.SUBMISSIONS
Column name: PublicScoreFullPrecision Type: FLOAT
Column name: SourceKernelVersionId Type: TEXT
Column name: SubmissionDate Type: DATE
Column name: PublicScoreLeaderboardDisplay Type: FLOAT
Column name: IsAfterDeadline Type: BOOLEAN
Column name: PrivateScoreFullPrecision Type: FLOAT
Column name: ScoreDate Type: DATE
Column name: TeamId Type: NUMBER
Column name: Id Type: NUMBER
Column name: SubmittedUserId Type: NUMBER
Column name: PrivateScoreLeaderboardDisplay Type: FLOAT
Sample rows:
[{'Id': 2575661, 'SubmittedUserId': 441360, 'TeamId': 270557, 'SourceKernelVersionId': '', 'SubmissionDate': '2016-02-16', 'ScoreDate': '2016-02-16', 'IsAfterDeadline': False, 'PublicScoreLeaderboardDisplay': 0.4713, 'PublicScoreFullPrecision': 0.4713052641725747, 'PrivateScoreLeaderboardDisplay': 0.47029, 'PrivateScoreFullPrecision': 0.47029765275103375}, {'Id': 2574743, 'SubmittedUserId': 22969, 'TeamId': 266628, 'SourceKernelVersionId': '', 'SubmissionDate': '2016-02-16', 'ScoreDate': '2016-02-16', 'IsAfterDeadline': False, 'PublicScoreLeaderboardDisplay': 0.47615, 'PublicScoreFullPrecision': 0.4761521119797183, 'PrivateScoreLeaderboardDisplay': 0.47544, 'PrivateScoreFullPrecision': 0.4754497853556987}, {'Id': 2576136, 'SubmittedUserId': 137177, 'TeamId': 277085, 'SourceKernelVersionId': '', 'SubmissionDate': '2016-02-16', 'ScoreDate': '2016-02-16', 'IsAfterDeadline': False, 'PublicScoreLeaderboardDisplay': 0.51698, 'PublicScoreFullPrecision': 0.5169891895550529, 'PrivateScoreLeaderboardDisplay': 0.51586, 'PrivateScoreFullPrecision': 0.5158655121170114}, {'Id': 2576081, 'SubmittedUserId': 460599, 'TeamId': 265697, 'SourceKernelVersionId': '', 'SubmissionDate': '2016-02-16', 'ScoreDate': '2016-02-16', 'IsAfterDeadline': False, 'PublicScoreLeaderboardDisplay': 0.51105, 'PublicScoreFullPrecision': 0.5110518882832594, 'PrivateScoreLeaderboardDisplay': 0.51019, 'PrivateScoreFullPrecision': 0.5101954265336581}, {'Id': 2577187, 'SubmittedUserId': 191861, 'TeamId': 272837, 'SourceKernelVersionId': '161290', 'SubmissionDate': '2016-02-16', 'ScoreDate': '2016-02-16', 'IsAfterDeadline': False, 'PublicScoreLeaderboardDisplay': 0.46151, 'PublicScoreFullPrecision': 0.46151804109644645, 'PrivateScoreLeaderboardDisplay': 0.46024, 'PrivateScoreFullPrecision': 0.4602417308754851}]

--------------------------------------------------
Table full name: META_KAGGLE.META_KAGGLE.TEAMMEMBERSHIPS
Column name: Id Type: NUMBER
Column name: TeamId Type: NUMBER
Column name: UserId Type: NUMBER
Column name: RequestDate Type: DATE
Sample rows:
[{'Id': 18940, 'TeamId': 4541, 'UserId': 10466, 'RequestDate': None}, {'Id': 19443, 'TeamId': 4978, 'UserId': 8263, 'RequestDate': None}, {'Id': 889883, 'TeamId': 855573, 'UserId': 860462, 'RequestDate': None}, {'Id': 19205, 'TeamId': 4772, 'UserId': 2505, 'RequestDate': None}, {'Id': 1178361, 'TeamId': 917458, 'UserId': 659634, 'RequestDate': None}]

--------------------------------------------------
Table full name: META_KAGGLE.META_KAGGLE.USERFOLLOWERS
Column name: CreationDate Type: DATE
Column name: Id Type: NUMBER
Column name: UserId Type: NUMBER
Column name: FollowingUserId Type: NUMBER
Sample rows:
[{'Id': 412502, 'UserId': 368, 'FollowingUserId': 1302389, 'CreationDate': '2020-03-08'}, {'Id': 851010, 'UserId': 421, 'FollowingUserId': 727004, 'CreationDate': '2021-08-18'}, {'Id': 851009, 'UserId': 421, 'FollowingUserId': 1053193, 'CreationDate': '2021-08-18'}, {'Id': 448467, 'UserId': 440, 'FollowingUserId': 473824, 'CreationDate': '2020-04-27'}, {'Id': 31190, 'UserId': 650, 'FollowingUserId': 1221368, 'CreationDate': '2017-10-23'}]

--------------------------------------------------
Table full name: META_KAGGLE.META_KAGGLE.KERNELVERSIONDATASETSOURCES
Column name: KernelVersionId Type: NUMBER
Column name: SourceDatasetVersionId Type: NUMBER
Column name: Id Type: NUMBER
Sample rows:
[{'Id': 108078246, 'KernelVersionId': 81536237, 'SourceDatasetVersionId': 2883584}, {'Id': 145502949, 'KernelVersionId': 104735677, 'SourceDatasetVersionId': 4128768}, {'Id': 146492371, 'KernelVersionId': 105348317, 'SourceDatasetVersionId': 4128768}, {'Id': 266698769, 'KernelVersionId': 186690255, 'SourceDatasetVersionId': 8781824}, {'Id': 252654, 'KernelVersionId': 376521, 'SourceDatasetVersionId': 256}]

--------------------------------------------------
Table full name: META_KAGGLE.META_KAGGLE.KERNELVOTES
Column name: Id Type: NUMBER
Column name: KernelVersionId Type: NUMBER
Column name: UserId Type: NUMBER
Column name: VoteDate Type: DATE
Sample rows:
[{'Id': 3147639, 'UserId': 6437951, 'KernelVersionId': 83046050, 'VoteDate': '2021-12-23'}, {'Id': 3499202, 'UserId': 7611249, 'KernelVersionId': 83046050, 'VoteDate': '2022-04-06'}, {'Id': 3676963, 'UserId': 5890725, 'KernelVersionId': 83046050, 'VoteDate': '2022-06-03'}, {'Id': 3570039, 'UserId': 10007967, 'KernelVersionId': 83046050, 'VoteDate': '2022-04-28'}, {'Id': 3569330, 'UserId': 8560689, 'KernelVersionId': 83046050, 'VoteDate': '2022-04-28'}]

--------------------------------------------------
Table full name: META_KAGGLE.META_KAGGLE.COMPETITIONS
Column name: Title Type: TEXT
Column name: LeaderboardPercentage Type: NUMBER
Column name: TeamMergerDeadlineDate Type: NUMBER
Column name: NumScoredSubmissions Type: NUMBER
Column name: MaxTeamSize Type: NUMBER
Column name: Slug Type: TEXT
Column name: HasLeaderboard Type: BOOLEAN
Column name: ScoreTruncationNumDecimals Type: NUMBER
Column name: EvaluationAlgorithmName Type: TEXT
Column name: EnabledDate Type: NUMBER
Column name: MaxDailySubmissions Type: NUMBER
Column name: ModelSubmissionDeadlineDate Type: NUMBER
Column name: FinalLeaderboardHasBeenVerified Type: BOOLEAN
Column name: DeadlineDate Type: NUMBER
Column name: HasKernels Type: BOOLEAN
Column name: EvaluationAlgorithmDescription Type: TEXT
Column name: HostName Type: TEXT
Column name: RewardQuantity Type: FLOAT
Column name: Id Type: NUMBER
Column name: ValidationSetValue Type: TEXT
Column name: EvaluationAlgorithmIsMax Type: BOOLEAN
Column name: CompetitionTypeId Type: NUMBER
Column name: ValidationSetName Type: TEXT
Column name: UserRankMultiplier Type: FLOAT
Column name: ForumId Type: NUMBER
Column name: OnlyAllowKernelSubmissions Type: BOOLEAN
Column name: Subtitle Type: TEXT
Column name: RewardType Type: TEXT
Column name: BanTeamMergers Type: BOOLEAN
Column name: EnableTeamModels Type: BOOLEAN
Column name: EnableSubmissionModelAttachments Type: BOOLEAN
Column name: EnableSubmissionModelHashes Type: BOOLEAN
Column name: NumPrizes Type: NUMBER
Column name: OrganizationId Type: FLOAT
Column name: EvaluationAlgorithmAbbreviation Type: TEXT
Column name: TeamModelDeadlineDate Type: NUMBER
Column name: ProhibitNewEntrantsDeadlineDate Type: NUMBER
Column name: HostSegmentTitle Type: TEXT
Column name: TotalTeams Type: NUMBER
Column name: TotalSubmissions Type: NUMBER
Column name: CanQualifyTiers Type: BOOLEAN
Column name: TotalCompetitors Type: NUMBER
Sample rows:
[{'ValidationSetValue': None, 'EnableSubmissionModelAttachments': False, 'TotalCompetitors': 19, 'TotalTeams': 14, 'CanQualifyTiers': False, 'EnableSubmissionModelHashes': False, 'UserRankMultiplier': 0.0, 'RewardType': 'Knowledge', 'CompetitionTypeId': 1, 'NumPrizes': 1, 'MaxTeamSize': 1, 'NumScoredSubmissions': 2, 'ValidationSetName': None, 'EvaluationAlgorithmAbbreviation': 'RMSE', 'Slug': 'itmo-year2012-ml-recsys-track-1', 'HasLeaderboard': True, 'HasKernels': False, 'FinalLeaderboardHasBeenVerified': True, 'ModelSubmissionDeadlineDate': None, 'EvaluationAlgorithmIsMax': False, 'DeadlineDate': 1451606340000000, 'TotalSubmissions': 117, 'EnabledDate': 1447716414000000, 'OnlyAllowKernelSubmissions': False, 'EvaluationAlgorithmDescription': 'Square root of the average of the squared errors.', 'ProhibitNewEntrantsDeadlineDate': None, 'HostName': None, 'MaxDailySubmissions': 1440, 'OrganizationId': None, 'Subtitle': 'Задача для студентов 4-го курса КТ по рекомендательным системам в рамках курса по машинному обучению. Track 1', 'TeamModelDeadlineDate': None, 'EvaluationAlgorithmName': 'Root Mean Squared Error', 'LeaderboardPercentage': 30, 'EnableTeamModels': False, 'BanTeamMergers': True, 'Id': 4758, 'RewardQuantity': 0.0, 'HostSegmentTitle': 'Community', 'TeamMergerDeadlineDate': None, 'ForumId': 923, 'ScoreTruncationNumDecimals': 5, 'Title': 'ITMO year2012 ML RecSys (track 1)'}, {'ValidationSetValue': None, 'EnableSubmissionModelAttachments': False, 'TotalCompetitors': 43, 'TotalTeams': 28, 'CanQualifyTiers': False, 'EnableSubmissionModelHashes': False, 'UserRankMultiplier': 0.0, 'RewardType': 'Knowledge', 'CompetitionTypeId': 1, 'NumPrizes': 1, 'MaxTeamSize': 1, 'NumScoredSubmissions': 3, 'ValidationSetName': None, 'EvaluationAlgorithmAbbreviation': 'RMSE', 'Slug': 'swimming-pool-visitor-forecasting', 'HasLeaderboard': True, 'HasKernels': False, 'FinalLeaderboardHasBeenVerified': True, 'ModelSubmissionDeadlineDate': None, 'EvaluationAlgorithmIsMax': False, 'DeadlineDate': 1499471940000000, 'TotalSubmissions': 2602, 'EnabledDate': 1477586443000000, 'OnlyAllowKernelSubmissions': False, 'EvaluationAlgorithmDescription': 'Square root of the average of the squared errors.', 'ProhibitNewEntrantsDeadlineDate': None, 'HostName': None, 'MaxDailySubmissions': 250, 'OrganizationId': None, 'Subtitle': 'Predict the number of daily visitors of Nettebad Osnabrück', 'TeamModelDeadlineDate': None, 'EvaluationAlgorithmName': 'Root Mean Squared Error', 'LeaderboardPercentage': 50, 'EnableTeamModels': False, 'BanTeamMergers': True, 'Id': 5686, 'RewardQuantity': 0.0, 'HostSegmentTitle': 'Community', 'TeamMergerDeadlineDate': None, 'ForumId': 1797, 'ScoreTruncationNumDecimals': 5, 'Title': 'Swimming Pool Visitor Forecasting'}, {'ValidationSetValue': None, 'EnableSubmissionModelAttachments': False, 'TotalCompetitors': 24, 'TotalTeams': 24, 'CanQualifyTiers': False, 'EnableSubmissionModelHashes': False, 'UserRankMultiplier': 0.0, 'RewardType': 'Knowledge', 'CompetitionTypeId': 1, 'NumPrizes': 1, 'MaxTeamSize': 1, 'NumScoredSubmissions': 500, 'ValidationSetName': None, 'EvaluationAlgorithmAbbreviation': 'AUC', 'Slug': 'sprlnaivebayesfast', 'HasLeaderboard': True, 'HasKernels': False, 'FinalLeaderboardHasBeenVerified': True, 'ModelSubmissionDeadlineDate': None, 'EvaluationAlgorithmIsMax': True, 'DeadlineDate': 1513382340000000, 'TotalSubmissions': 693, 'EnabledDate': 1503957354000000, 'OnlyAllowKernelSubmissions': False, 'EvaluationAlgorithmDescription': 'Measures discrimination. Calculates how well an algorithm separates true positives from false positives. Overall good metric for classification problems. Has range [0.5, 1.0]', 'ProhibitNewEntrantsDeadlineDate': None, 'HostName': None, 'MaxDailySubmissions': 500, 'OrganizationId': None, 'Subtitle': "Assignment 1.  Solve using naive Bayes'", 'TeamModelDeadlineDate': None, 'EvaluationAlgorithmName': 'Area Under Receiver Operating Characteristic Curve', 'LeaderboardPercentage': 50, 'EnableTeamModels': False, 'BanTeamMergers': True, 'Id': 7100, 'RewardQuantity': nan, 'HostSegmentTitle': 'Community', 'TeamMergerDeadlineDate': None, 'ForumId': 6106, 'ScoreTruncationNumDecimals': 5, 'Title': 'SPRLNaiveBayesFAST'}, {'ValidationSetValue': None, 'EnableSubmissionModelAttachments': False, 'TotalCompetitors': 4, 'TotalTeams': 4, 'CanQualifyTiers': False, 'EnableSubmissionModelHashes': False, 'UserRankMultiplier': 0.0, 'RewardType': 'Knowledge', 'CompetitionTypeId': 1, 'NumPrizes': 1, 'MaxTeamSize': 1, 'NumScoredSubmissions': 2, 'ValidationSetName': None, 'EvaluationAlgorithmAbbreviation': 'AUC', 'Slug': 'late-arrival-of-flights', 'HasLeaderboard': True, 'HasKernels': False, 'FinalLeaderboardHasBeenVerified': True, 'ModelSubmissionDeadlineDate': None, 'EvaluationAlgorithmIsMax': True, 'DeadlineDate': 1492387140000000, 'TotalSubmissions': 42, 'EnabledDate': 1491572280000000, 'OnlyAllowKernelSubmissions': False, 'EvaluationAlgorithmDescription': 'Measures discrimination. Calculates how well an algorithm separates true positives from false positives. Overall good metric for classification problems. Has range [0.5, 1.0]', 'ProhibitNewEntrantsDeadlineDate': None, 'HostName': None, 'MaxDailySubmissions': 30, 'OrganizationId': None, 'Subtitle': 'Which flights will be late? Find this out!', 'TeamModelDeadlineDate': None, 'EvaluationAlgorithmName': 'Area Under Receiver Operating Characteristic Curve', 'LeaderboardPercentage': 50, 'EnableTeamModels': False, 'BanTeamMergers': True, 'Id': 6443, 'RewardQuantity': 0.0, 'HostSegmentTitle': 'Community', 'TeamMergerDeadlineDate': None, 'ForumId': 3080, 'ScoreTruncationNumDecimals': 5, 'Title': 'Late Arrival of Flights'}, {'ValidationSetValue': None, 'EnableSubmissionModelAttachments': False, 'TotalCompetitors': 11, 'TotalTeams': 11, 'CanQualifyTiers': False, 'EnableSubmissionModelHashes': False, 'UserRankMultiplier': 0.0, 'RewardType': None, 'CompetitionTypeId': 1, 'NumPrizes': 0, 'MaxTeamSize': 1, 'NumScoredSubmissions': 40, 'ValidationSetName': None, 'EvaluationAlgorithmAbbreviation': 'AUC', 'Slug': 'random-forests-competition', 'HasLeaderboard': True, 'HasKernels': False, 'FinalLeaderboardHasBeenVerified': True, 'ModelSubmissionDeadlineDate': None, 'EvaluationAlgorithmIsMax': True, 'DeadlineDate': 1507089540000000, 'TotalSubmissions': 251, 'EnabledDate': 1506745154000000, 'OnlyAllowKernelSubmissions': False, 'EvaluationAlgorithmDescription': 'Measures discrimination. Calculates how well an algorithm separates true positives from false positives. Overall good metric for classification problems. Has range [0.5, 1.0]', 'ProhibitNewEntrantsDeadlineDate': None, 'HostName': None, 'MaxDailySubmissions': 40, 'OrganizationId': None, 'Subtitle': '.', 'TeamModelDeadlineDate': None, 'EvaluationAlgorithmName': 'Area Under Receiver Operating Characteristic Curve', 'LeaderboardPercentage': 50, 'EnableTeamModels': False, 'BanTeamMergers': True, 'Id': 7318, 'RewardQuantity': 0.0, 'HostSegmentTitle': 'Community', 'TeamMergerDeadlineDate': None, 'ForumId': 7130, 'ScoreTruncationNumDecimals': 5, 'Title': 'Random Forests Competition'}]

--------------------------------------------------
Table full name: META_KAGGLE.META_KAGGLE.KERNELVERSIONCOMPETITIONSOURCES
Column name: Id Type: NUMBER
Column name: SourceCompetitionId Type: NUMBER
Column name: KernelVersionId Type: NUMBER
Sample rows:
[{'Id': 6280, 'KernelVersionId': 4511, 'SourceCompetitionId': 3948}, {'Id': 601723, 'KernelVersionId': 555, 'SourceCompetitionId': 3948}, {'Id': 88411, 'KernelVersionId': 841, 'SourceCompetitionId': 3948}, {'Id': 974621, 'KernelVersionId': 610, 'SourceCompetitionId': 3948}, {'Id': 950711, 'KernelVersionId': 773, 'SourceCompetitionId': 3948}]

--------------------------------------------------
Table full name: META_KAGGLE.META_KAGGLE.TAGS
Column name: CompetitionCount Type: NUMBER
Column name: Description Type: TEXT
Column name: KernelCount Type: NUMBER
Column name: Name Type: TEXT
Column name: DatasetCount Type: NUMBER
Column name: FullPath Type: TEXT
Column name: ParentTagId Type: NUMBER
Column name: Id Type: NUMBER
Column name: Slug Type: TEXT
Sample rows:
[{'Id': 2606, 'ParentTagId': 4141, 'Name': 'basketball', 'Slug': 'basketball', 'FullPath': 'subject > health and fitness > exercise > sports > basketball', 'Description': "Basketball is one of the world's most popular and widely viewed sports. Analyze Kobe Bryant's shot selections and peruse our annual March Mania competitions.", 'DatasetCount': 1870, 'CompetitionCount': 20, 'KernelCount': 662}, {'Id': 4202, 'ParentTagId': 11111, 'Name': 'healthcare', 'Slug': 'healthcare', 'FullPath': 'subject > health and fitness > health > healthcare', 'Description': 'AI in healthcare is a growing interest. One of the major problems is simply converting research into an application. Should be easy, right?', 'DatasetCount': 1648, 'CompetitionCount': 14, 'KernelCount': 1654}, {'Id': 7000, 'ParentTagId': 16637, 'Name': 'earth and nature', 'Slug': 'natural-and-physical-sciences', 'FullPath': 'subject > earth and nature', 'Description': '', 'DatasetCount': 47109, 'CompetitionCount': 10, 'KernelCount': 336}, {'Id': 7408, 'ParentTagId': 7302, 'Name': 'weather and climate', 'Slug': 'weather', 'FullPath': 'subject > earth and nature > environment > weather and climate', 'Description': 'Weather datasets and kernels come in all wind speeds and directions. You have weather data about hurricanes and other inclement phenomena, hourly readings, and general weather for various cities.', 'DatasetCount': 1170, 'CompetitionCount': 8, 'KernelCount': 565}, {'Id': 8317, 'ParentTagId': 11122, 'Name': 'housing', 'Slug': 'housing', 'FullPath': 'subject > people and society > business > real estate > housing', 'Description': 'Explore datasets, kernels, and competitions related to housing markets in this tag.', 'DatasetCount': 721, 'CompetitionCount': 56, 'KernelCount': 890}]

--------------------------------------------------
Table full name: META_KAGGLE.META_KAGGLE.USERORGANIZATIONS
Column name: Id Type: NUMBER
Column name: JoinDate Type: DATE
Column name: OrganizationId Type: NUMBER
Column name: UserId Type: NUMBER
Sample rows:
[{'Id': 33, 'UserId': 724814, 'OrganizationId': 5, 'JoinDate': '2016-10-04'}, {'Id': 46, 'UserId': 346825, 'OrganizationId': 3, 'JoinDate': '2016-10-17'}, {'Id': 84, 'UserId': 755155, 'OrganizationId': 41, 'JoinDate': '2016-10-20'}, {'Id': 149, 'UserId': 56073, 'OrganizationId': 66, 'JoinDate': '2016-10-20'}, {'Id': 250, 'UserId': 331256, 'OrganizationId': 114, 'JoinDate': '2016-10-24'}]

--------------------------------------------------
Table full name: META_KAGGLE.META_KAGGLE.EPISODEAGENTS
Column name: Index Type: NUMBER
Column name: EpisodeId Type: NUMBER
Column name: Reward Type: FLOAT
Column name: InitialConfidence Type: FLOAT
Column name: InitialScore Type: FLOAT
Column name: SubmissionId Type: NUMBER
Column name: Id Type: NUMBER
Column name: State Type: NUMBER
Column name: UpdatedConfidence Type: FLOAT
Column name: UpdatedScore Type: FLOAT
Sample rows:
[{'Id': 81336101, 'EpisodeId': 33120822, 'Index': 1, 'Reward': 90009.0, 'State': 2, 'SubmissionId': 22809035, 'InitialConfidence': 35.0, 'InitialScore': 580.0042657891344, 'UpdatedConfidence': 35.0, 'UpdatedScore': 584.479734260055}, {'Id': 81282735, 'EpisodeId': 33094139, 'Index': 1, 'Reward': 90009.0, 'State': 2, 'SubmissionId': 24127816, 'InitialConfidence': 62.12528253738546, 'InitialScore': 1272.9005023034138, 'UpdatedConfidence': 60.78962034206572, 'UpdatedScore': 1262.803283593908}, {'Id': 81400825, 'EpisodeId': 33153184, 'Index': 1, 'Reward': 90009.0, 'State': 2, 'SubmissionId': 22599340, 'InitialConfidence': 35.0, 'InitialScore': 566.3995879006497, 'UpdatedConfidence': 35.0, 'UpdatedScore': 569.9552747465942}, {'Id': 81458769, 'EpisodeId': 33182156, 'Index': 1, 'Reward': 90009.0, 'State': 2, 'SubmissionId': 24115042, 'InitialConfidence': 36.79200561544236, 'InitialScore': 1320.6288982194073, 'UpdatedConfidence': 36.45203209769453, 'UpdatedScore': 1325.9342154604803}, {'Id': 81400895, 'EpisodeId': 33153219, 'Index': 1, 'Reward': 90009.0, 'State': 2, 'SubmissionId': 23177330, 'InitialConfidence': 35.0, 'InitialScore': 1173.6191450661524, 'UpdatedConfidence': 35.0, 'UpdatedScore': 1169.175078766726}]

--------------------------------------------------
Table full name: META_KAGGLE.META_KAGGLE.USERS
Column name: Id Type: NUMBER
Column name: Country Type: TEXT
Column name: RegisterDate Type: TEXT
Column name: PerformanceTier Type: NUMBER
Column name: DisplayName Type: TEXT
Column name: UserName Type: TEXT
Sample rows:
[{'Id': 154581, 'UserName': 'aashu154581', 'DisplayName': 'Aashu', 'RegisterDate': '01/01/2014', 'PerformanceTier': 0, 'Country': None}, {'Id': 277324, 'UserName': 'adamwyeth', 'DisplayName': 'Adam Wyeth', 'RegisterDate': '01/01/2015', 'PerformanceTier': 0, 'Country': None}, {'Id': 852854, 'UserName': 'lolo1995s', 'DisplayName': 'Lolo', 'RegisterDate': '01/01/2017', 'PerformanceTier': 0, 'Country': None}, {'Id': 853107, 'UserName': 'doncolio', 'DisplayName': 'Festus Adeboye', 'RegisterDate': '01/01/2017', 'PerformanceTier': 0, 'Country': None}, {'Id': 853091, 'UserName': 'pthamie', 'DisplayName': 'pthamie', 'RegisterDate': '01/01/2017', 'PerformanceTier': 0, 'Country': None}]

--------------------------------------------------
Table full name: META_KAGGLE.META_KAGGLE.COMPETITIONTAGS
Column name: TagId Type: NUMBER
Column name: CompetitionId Type: NUMBER
Column name: Id Type: NUMBER
Sample rows:
[{'Id': 482, 'CompetitionId': 13242, 'TagId': 12038}, {'Id': 315, 'CompetitionId': 4032, 'TagId': 14101}, {'Id': 300, 'CompetitionId': 4195, 'TagId': 14101}, {'Id': 304, 'CompetitionId': 4272, 'TagId': 14101}, {'Id': 298, 'CompetitionId': 4280, 'TagId': 14101}]

--------------------------------------------------
Table full name: META_KAGGLE.META_KAGGLE.DATASETVOTES
Column name: VoteDate Type: DATE
Column name: Id Type: NUMBER
Column name: UserId Type: NUMBER
Column name: DatasetVersionId Type: NUMBER
Sample rows:
[{'Id': 400, 'UserId': 484081, 'DatasetVersionId': 6, 'VoteDate': '2016-01-28'}, {'Id': 359, 'UserId': 188410, 'DatasetVersionId': 6, 'VoteDate': '2016-01-24'}, {'Id': 341, 'UserId': 118065, 'DatasetVersionId': 6, 'VoteDate': '2016-01-23'}, {'Id': 247, 'UserId': 400808, 'DatasetVersionId': 6, 'VoteDate': '2016-01-17'}, {'Id': 2748, 'UserId': 262803, 'DatasetVersionId': 6, 'VoteDate': '2016-05-03'}]

--------------------------------------------------
Table full name: META_KAGGLE.META_KAGGLE.FORUMMESSAGES
Column name: PostUserId Type: NUMBER
Column name: PostDate Type: TEXT
Column name: MedalAwardDate Type: TEXT
Column name: Id Type: NUMBER
Column name: RawMarkdown Type: TEXT
Column name: ForumTopicId Type: NUMBER
Column name: ReplyToForumMessageId Type: FLOAT
Column name: Medal Type: FLOAT
Column name: Message Type: TEXT
Sample rows:
[{'Id': 2178559, 'ForumTopicId': 390539, 'PostUserId': 8860864, 'PostDate': '03/12/2023 14:49:20', 'ReplyToForumMessageId': 2178321.0, 'Message': '<p>You can contact me via LinkedIn. <a href="https://www.linkedin.com/in/luuisotorres/" target="_blank">https://www.linkedin.com/in/luuisotorres/</a></p>', 'RawMarkdown': 'You can contact me via LinkedIn. https://www.linkedin.com/in/luuisotorres/', 'Medal': None, 'MedalAwardDate': None}, {'Id': 2176448, 'ForumTopicId': 393128, 'PostUserId': 113660, 'PostDate': '03/10/2023 16:55:10', 'ReplyToForumMessageId': 2176034.0, 'Message': '<p>it seems that this paper figures out how to do 1dconv<br>\n<a href="https://www.researchgate.net/publication/343599175_Real-Time_Sign_Language_Detection_using_Human_Pose_Estimation" target="_blank">https://www.researchgate.net/publication/343599175_Real-Time_Sign_Language_Detection_using_Human_Pose_Estimation</a></p>\n<ul>\n<li>keep the NaN values </li>\n<li>perform 1dconv</li>\n<li>if conv ouput contains NaN, set to zero</li>\n</ul>', 'RawMarkdown': 'it seems that this paper figures out how to do 1dconv\nhttps://www.researchgate.net/publication/343599175_Real-Time_Sign_Language_Detection_using_Human_Pose_Estimation\n\n- keep the NaN values \n- perform 1dconv\n- if conv ouput contains NaN, set to zero', 'Medal': None, 'MedalAwardDate': None}, {'Id': 2131946, 'ForumTopicId': 376603, 'PostUserId': 11189444, 'PostDate': '02/06/2023 13:53:44', 'ReplyToForumMessageId': 2130319.0, 'Message': '<p><strong><em>Thank you so much! Will surely look into it!</em></strong> <a href="https://www.kaggle.com/darshan77879" target="_blank">@darshan77879</a> 🤩</p>', 'RawMarkdown': '***Thank you so much! Will surely look into it!*** @darshan77879 🤩', 'Medal': None, 'MedalAwardDate': None}, {'Id': 2135159, 'ForumTopicId': 383718, 'PostUserId': 5757223, 'PostDate': '02/08/2023 13:42:41', 'ReplyToForumMessageId': 2129733.0, 'Message': '<p>important information 👍</p>', 'RawMarkdown': 'important information 👍', 'Medal': None, 'MedalAwardDate': None}, {'Id': 2127784, 'ForumTopicId': 383248, 'PostUserId': 11886643, 'PostDate': '02/03/2023 06:39:33', 'ReplyToForumMessageId': 2127570.0, 'Message': '<p>Hi <a href="https://www.kaggle.com/javohirtoshqorgonov" target="_blank">@javohirtoshqorgonov</a> and <a href="https://www.kaggle.com/jodiaarnold" target="_blank">@jodiaarnold</a>, I also like python very much.</p>\n<p>When I got into data science, I had to chose which language to code in and after some research I chose Python.</p>\n<p>I had no coding experience, and preferred Python due to :</p>\n<ul>\n<li>It looking like relatively readable language,</li>\n<li>Its versatility : I like that it can be used beyond DA/DS also, like for machine learning, webscraping, but also coding small programs easily etc,</li>\n<li>Very widely documented, a lot of libraries available, a big community for support,…</li>\n</ul>', 'RawMarkdown': 'Hi @javohirtoshqorgonov and @jodiaarnold, I also like python very much.\n\nWhen I got into data science, I had to chose which language to code in and after some research I chose Python.\n\nI had no coding experience, and preferred Python due to :\n- It looking like relatively readable language,\n- Its versatility : I like that it can be used beyond DA/DS also, like for machine learning, webscraping, but also coding small programs easily etc,\n- Very widely documented, a lot of libraries available, a big community for support,...', 'Medal': None, 'MedalAwardDate': None}]

--------------------------------------------------
Table full name: META_KAGGLE.META_KAGGLE.FORUMS
Column name: Title Type: TEXT
Column name: Id Type: NUMBER
Column name: ParentForumId Type: NUMBER
Sample rows:
[{'Id': 2578766, 'ParentForumId': None, 'Title': 'Models'}, {'Id': 16860, 'ParentForumId': None, 'Title': 'Notebooks'}, {'Id': 1462513, 'ParentForumId': None, 'Title': 'Advanced SQL'}, {'Id': 1462517, 'ParentForumId': None, 'Title': 'Data Cleaning'}, {'Id': 573890, 'ParentForumId': None, 'Title': 'Dataset Tasks'}]

--------------------------------------------------
Table full name: META_KAGGLE.META_KAGGLE.KERNELLANGUAGES
Column name: Id Type: NUMBER
Column name: DisplayName Type: TEXT
Column name: IsNotebook Type: BOOLEAN
Column name: Name Type: TEXT
Sample rows:
[{'Id': 1, 'Name': 'R', 'DisplayName': 'R', 'IsNotebook': False}, {'Id': 12, 'Name': 'R Notebook HTML', 'DisplayName': 'R', 'IsNotebook': False}, {'Id': 13, 'Name': 'R Notebook', 'DisplayName': 'R', 'IsNotebook': True}, {'Id': 16, 'Name': 'RMarkdown - Interactive', 'DisplayName': 'R', 'IsNotebook': True}, {'Id': 8, 'Name': 'IPython Notebook', 'DisplayName': 'Python', 'IsNotebook': True}]

--------------------------------------------------
Table full name: META_KAGGLE.META_KAGGLE.DATASETTASKS
Column name: Subtitle Type: TEXT
Column name: DatasetId Type: NUMBER
Column name: CreationDate Type: NUMBER
Column name: TotalVotes Type: NUMBER
Column name: Deadline Type: NUMBER
Column name: Description Type: TEXT
Column name: Title Type: TEXT
Column name: OwnerUserId Type: NUMBER
Column name: ForumId Type: TEXT
Column name: Id Type: NUMBER
Sample rows:
[{'TotalVotes': 193, 'Subtitle': None, 'ForumId': None, 'Description': '## Task Details\nCan we predict the possibility of a booking for a hotel based on the previous_cancellation as the target?\n\n## Expected Submission\nTwo columns --&gt; Hotel Name and Booking_Possibility (0 or 1)', 'CreationDate': 1582109315000000, 'OwnerUserId': 2889731, 'DatasetId': 511638, 'Deadline': nan, 'Title': 'Can we predict the possibility of a booking?', 'Id': 462}, {'TotalVotes': 14, 'Subtitle': 'Prize Pool $6000; Submission deadline - July 25', 'ForumId': None, 'Description': '## Task Details\nWe are sharing the latest BCG Atlas data and various texts related to BCG vaccine policies around the world. The goal of the task is to try to **improve and to extend the existing BCG World Atlas data** and to get a fuller picture of the administration of the vaccine. All data that is collected during this task will support the work of the BCG Atlas team, and it will also help with the analysis of the second task of the hackathon. \nThe current BCG data is stored in  file.  The task is to try to find snippets that answer some of these questions. All the questions are listed as columns. Specifically, we would like to get as many accurate answers as possible to the following questions, for as many countries or regions as possible:\n- Which BCG strain over the years has been used in different countries since the creation of the vaccine and during what time periods?\n- Who are or were the target group of the vaccine, and when and at what age were they vaccinated?\n- Have revaccinations (boosters) been given and if yes, when and at what age?\n \nIn the following spreadsheet are listed a couple of sample records - [BCG policy data hackathon sample google spreadsheet](https://docs.google.com/spreadsheets/d/1nrzrAy0vC43Iy9QaKA5pR83O3YW3I16pXFjnOt86j5I/edit#gid=67941157). The new records which were added in addition to the existing BCG data from "BCG_world_atlas_data-2020.csv" file are on line 3, 6 and 7 and are highlighted in green. Line 4 and 5 are part of the original "BCG_world_atlas_data-2020.csv" file. The first 4 columns are mandatory and the field “Is it from bcgatlas.org (Mandatory field)” should have the value “no” for all records that are added by the participants of the hackathon. \n\n## Expected Submission\nThe expected submission will be a copy of the "BCG_world_atlas_data-2020.csv"  file saved in Kaggle. The file should contain additional rows for a number of countries with snippets that contain answers to a specific question of a given column.  There should be no more than 2 new rows (data sources) per country. The snippet length should not be longer than 350* characters. For each additional row that has been added apart from the snippet(s), the first four columns are mandatory and should also be updated. A manual review is highly recommended in order to make sure that the snippets of the 2 selected data sources contain information about the specified country.\n\nParticipants must also accept our [competition rules](https://www.kaggle.com/bcgvaccine/hackathon). \n\n## Evaluation\nSubmissions will be scored using the following grading rubric:\n- How many answers for how many countries have been found?  \n- Are the snippets relevant?   \n- Is the methodology well documented and if the code easy to read and reuse?  \n\n## Timeline\nStart date (June 8, 2020)\nSubmission deadline (July 25, 2020) at 11:59pm UTC.**\n\n## Prizes\n- First prize $3,000\n- Second prize $2,000\n- Third prize $1,000\n\n## Winners\n- First place - Dimitrina Zlatkova - contributed 57 additional\nentries data points\n- Second place - Marouane Benmeida - contributed 33 additional\nentries data points\n\n\n[*] 22 June, updated the length from 120 to 350 characters.', 'CreationDate': 1591047416000000, 'OwnerUserId': 5212675, 'DatasetId': 688051, 'Deadline': 1600646400000000.0, 'Title': 'Extend the BCG World Atlas Database for BCG Vaccine Policies and Practices', 'Id': 1026}, {'TotalVotes': 21, 'Subtitle': 'Kernel to find the recipe that use the items in my fridge', 'ForumId': None, 'Description': "## Task Details\nI'm hungry and I've got some left-over, but currently unknown ingredients, (ex: 'winter squash', 'mexican seasoning', 'mixed spice', 'honey', 'butter', 'olive oil', 'salt') in my fridge. I want to find the recipe that use the most (if not all) the ingredients in my fridge with fewest additional ingredients to buy, with the least amount of effort in time to prep/cook.\n\n## Expected Submission\nA kernel that takes an array of arrays of ingredients in my fridge and outputs the recommended dish information.\nEach inner array is the ingredients that I have for one dish.\nExpected output is an array of arrays of [recipeId,  recipeName, prepTimeInMinutes, numberOfFridgeItemUsed, numberOfAdditionalItemsNeeded]:\n\nExample input:\n```\ninput = [\n ['winter squash', 'mexican seasoning', 'mixed spice', 'honey', 'butter', 'olive oil', 'salt'], \n['low sodium chicken broth', 'tomatoes', 'zucchini', 'potatoes', 'wax beans', 'green beans', 'carrots'], \n['spinach',  'garlic powder', 'soft breadcrumbs', 'oregano', 'onion']\n ]\n```\n\nExample output:\n```\noutput = [ \n[137739, 'arriba baked winter squash mexican style', 60, 7, 0],\n[87098, 'homemade vegetable soup from a can', 15, 7, 1],\n[38798, 'i can t believe it s spinach', 30, 5, 3]\n ]\n\n```\n\n## Evaluation\nAn average score of recipes will be calculated. Each recipe score is calculated as:\n```each recipe score = numberOfFridgeItemUsed ^ 60 / prepTimeInMinutes) - numberOfAdditionalItemsNeeded ^ (prepTimeInMinutes / 15)```\n\nNote: I'm willing to leave some of my items in the fridge for my next meal ��", 'CreationDate': 1575918022000000, 'OwnerUserId': 1952004, 'DatasetId': 311962, 'Deadline': 1580428800000000.0, 'Title': 'Hungry with my fridge!', 'Id': 164}, {'TotalVotes': 16, 'Subtitle': None, 'ForumId': None, 'Description': "## Task Details\nIt might seem to be intuitive that bikeshare users would travel in the reverse direction in the evening than in the morning. But how true is that? If that's the case, would it reduce the value of convenience of bikeshares being available everywhere, and should they just get their own bikes? Do we also need a crew to pick up and restore all the bikes to initial distributions across the city before the next morning?\n\n## Expected Submission\n1. Find out what percentage of bikes are returned to its initial location?\n2. How many bikeshare trips usually visit more than just start/end points, but visited some other points before the end of the day?", 'CreationDate': 1580852341000000, 'OwnerUserId': 1952004, 'DatasetId': 501019, 'Deadline': nan, 'Title': 'Do bikeshare go round trip or one way?', 'Id': 433}, {'TotalVotes': 27, 'Subtitle': None, 'ForumId': None, 'Description': 'Use various Algorithms to increase the performance of the prediction of the sentiment expressed in the review.', 'CreationDate': 1584292213000000, 'OwnerUserId': 3630854, 'DatasetId': 134715, 'Deadline': 1609372800000000.0, 'Title': 'Sentiment Analysis', 'Id': 588}]

--------------------------------------------------
Table full name: META_KAGGLE.META_KAGGLE.DATASOURCES
Column name: CreatorUserId Type: NUMBER
Column name: CreationDate Type: NUMBER
Column name: CurrentDatasourceVersionId Type: NUMBER
Column name: Id Type: NUMBER
Column name: Type Type: TEXT
Sample rows:
[{'Id': 498859, 'CreatorUserId': 3867392, 'CreationDate': 1579359348000000, 'Type': 'Dataset', 'CurrentDatasourceVersionId': 925571}, {'Id': 3683191, 'CreatorUserId': 4064256, 'CreationDate': 1692280786000000, 'Type': 'Dataset', 'CurrentDatasourceVersionId': 6399262}, {'Id': 4068752, 'CreatorUserId': 4064256, 'CreationDate': 1700233077000000, 'Type': 'Dataset', 'CurrentDatasourceVersionId': 7076875}, {'Id': 4684371, 'CreatorUserId': 4064256, 'CreationDate': 1710735660000000, 'Type': 'Dataset', 'CurrentDatasourceVersionId': 7977563}, {'Id': 4684374, 'CreatorUserId': 4064256, 'CreationDate': 1710735708000000, 'Type': 'Dataset', 'CurrentDatasourceVersionId': 7977567}]

--------------------------------------------------
Table full name: META_KAGGLE.META_KAGGLE.KERNELTAGS
Column name: Id Type: NUMBER
Column name: TagId Type: NUMBER
Column name: KernelId Type: NUMBER
Sample rows:
[{'Id': 5867, 'KernelId': 90782, 'TagId': 2304}, {'Id': 14387, 'KernelId': 160689, 'TagId': 2304}, {'Id': 1008, 'KernelId': 358835, 'TagId': 2304}, {'Id': 4312, 'KernelId': 435514, 'TagId': 2304}, {'Id': 18455, 'KernelId': 744580, 'TagId': 2304}]

--------------------------------------------------
Table full name: META_KAGGLE.META_KAGGLE.USERACHIEVEMENTS
Column name: TotalGold Type: NUMBER
Column name: TierAchievementDate Type: DATE
Column name: HighestRanking Type: NUMBER
Column name: CurrentRanking Type: NUMBER
Column name: Id Type: NUMBER
Column name: UserId Type: NUMBER
Column name: TotalSilver Type: NUMBER
Column name: Tier Type: NUMBER
Column name: AchievementType Type: TEXT
Column name: Points Type: NUMBER
Column name: TotalBronze Type: NUMBER
Sample rows:
[{'Id': 6426519, 'UserId': 930969, 'AchievementType': 'Competitions', 'Tier': 0, 'TierAchievementDate': None, 'Points': 0, 'CurrentRanking': None, 'HighestRanking': None, 'TotalGold': 0, 'TotalSilver': 0, 'TotalBronze': 0}, {'Id': 6512273, 'UserId': 960263, 'AchievementType': 'Competitions', 'Tier': 0, 'TierAchievementDate': None, 'Points': 0, 'CurrentRanking': None, 'HighestRanking': None, 'TotalGold': 0, 'TotalSilver': 0, 'TotalBronze': 0}, {'Id': 6419651, 'UserId': 928677, 'AchievementType': 'Competitions', 'Tier': 0, 'TierAchievementDate': None, 'Points': 0, 'CurrentRanking': None, 'HighestRanking': None, 'TotalGold': 0, 'TotalSilver': 0, 'TotalBronze': 0}, {'Id': 6510824, 'UserId': 959735, 'AchievementType': 'Competitions', 'Tier': 0, 'TierAchievementDate': None, 'Points': 0, 'CurrentRanking': None, 'HighestRanking': None, 'TotalGold': 0, 'TotalSilver': 0, 'TotalBronze': 0}, {'Id': 7122494, 'UserId': 1159614, 'AchievementType': 'Competitions', 'Tier': 0, 'TierAchievementDate': None, 'Points': 0, 'CurrentRanking': None, 'HighestRanking': None, 'TotalGold': 0, 'TotalSilver': 0, 'TotalBronze': 0}]

--------------------------------------------------
Table full name: META_KAGGLE.META_KAGGLE.KERNELVERSIONKERNELSOURCES
Column name: KernelVersionId Type: NUMBER
Column name: SourceKernelVersionId Type: NUMBER
Column name: Id Type: NUMBER
Sample rows:
[{'Id': 1069706, 'KernelVersionId': 6490319, 'SourceKernelVersionId': 6488320}, {'Id': 1071186, 'KernelVersionId': 6492453, 'SourceKernelVersionId': 6488320}, {'Id': 1077710, 'KernelVersionId': 6513221, 'SourceKernelVersionId': 6488320}, {'Id': 1078087, 'KernelVersionId': 6513555, 'SourceKernelVersionId': 6488320}, {'Id': 1082279, 'KernelVersionId': 6525168, 'SourceKernelVersionId': 6488320}]

--------------------------------------------------
External knowledge that might be helpful: 
None
The table structure information is ({database name: {schema name: [table name]}}): 
{'META_KAGGLE': {'META_KAGGLE': ['DATASETS', 'DATASETTAGS', 'DATASETTASKSUBMISSIONS', 'EPISODES', 'FORUMMESSAGEVOTES', 'FORUMTOPICS', 'KERNELS', 'KERNELVERSIONS', 'SUBMISSIONS', 'TEAMMEMBERSHIPS', 'USERFOLLOWERS', 'KERNELVERSIONDATASETSOURCES', 'KERNELVOTES', 'COMPETITIONS', 'KERNELVERSIONCOMPETITIONSOURCES', 'TAGS', 'USERORGANIZATIONS', 'EPISODEAGENTS', 'USERS', 'COMPETITIONTAGS', 'DATASETVOTES', 'FORUMMESSAGES', 'FORUMS', 'KERNELLANGUAGES', 'DATASETTASKS', 'DATASOURCES', 'KERNELTAGS', 'USERACHIEVEMENTS', 'KERNELVERSIONKERNELSOURCES']}}

Some few-shot examples after column exploration may be helpful:
Query:
--Description: Peek at a few forum-message up-vote records  
SELECT *  
FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"  
LIMIT 20;
Answer:
Id,ForumMessageId,FromUserId,ToUserId,VoteDate
2190221,1463083,7940265,3955299,2021-08-10
2190421,1463083,6413307,3955299,2021-08-10
2190722,1463083,249965,3955299,2021-08-10
2190867,1463083,8024855,3955299,2021-08-10
2191063,1463083,561545,3955299,2021-08-10
2191590,1463083,7944779,3955299,2021-08-10
2191607,1463083,561067,3955299,2021-08-10
2192350,1463083,5196984,3955299,2021-08-10
Query:
--Description: See the list of users so we know where to pick the names later  
SELECT "Id", "UserName", "DisplayName"  
FROM "META_KAGGLE"."META_KAGGLE"."USERS"  
LIMIT 20;
Answer:
Id,UserName,DisplayName
78428,jonessmithsonian,Jones Smithsonian
78436,cheryl1,Cheryl
277233,gangan,gangan
277203,ssaha1,S SAHA
277347,tarunc,tarunc
277229,yhmmath,yhmmath
496363,ishaangandhi,ishaangandhi
496479,salmankhalid,salman
852734,nsbzhd,nisabzahid
853003,canpervane,CSPer
852765,dany9000,Daniele Team
852672,appletart,appletart
1524194,emilyfertig,Emily Fertig
1525012,jkconeby,Jake Coneby
1524558,gavinl99,Gavin
Query:
--Description: Count how many times every voter ↦ recipient pair appears  
SELECT "FromUserId", "ToUserId", COUNT(*) AS "pair_votes"  
FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"  
GROUP BY "FromUserId", "ToUserId"  
ORDER BY "pair_votes" DESC  
LIMIT 20;
Answer:
FromUserId,ToUserId,pair_votes
-1,75976,2666
-1,5309,1975
-1,4944079,1149
-1,3258,944
9755101,9742946,899
9484259,9742946,892
9788055,9742946,880
-1,1095143,829
8335210,6245640,795
-1,3012786,793
-1,8273630,766
54836,75976,738
-1,2779868,723
-1,1132983,699
-1,7237430,663
-1,2242,637
-1,113660,629
-1,1673888,626
-1,2033538,567
-1,357941,554
Query:
--Description: Show the very top voter-recipient pair only  
SELECT "FromUserId", "ToUserId", COUNT(*) AS "pair_votes"  
FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"  
GROUP BY "FromUserId", "ToUserId"  
ORDER BY "pair_votes" DESC  
LIMIT 1;
Answer:
FromUserId,ToUserId,pair_votes
-1,75976,2666
Query:
--Description: Compute, for every ordered pair, both directions of up-votes  
WITH pairs AS (  
    SELECT "FromUserId" AS "u1", "ToUserId" AS "u2", COUNT(*) AS "votes_u1_to_u2"  
    FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"  
    GROUP BY "FromUserId", "ToUserId"  
)  
SELECT p1."u1", p1."u2",  
       p1."votes_u1_to_u2"                              AS "u1_to_u2",  
       COALESCE(p2."votes_u1_to_u2", 0)                 AS "u2_to_u1"  
FROM pairs p1  
LEFT JOIN pairs p2  
       ON p1."u1" = p2."u2" AND p1."u2" = p2."u1"  
ORDER BY p1."votes_u1_to_u2" DESC, COALESCE(p2."votes_u1_to_u2",0) DESC  
LIMIT 20;
Answer:
u1,u2,u1_to_u2,u2_to_u1
-1,75976,2666,0
-1,5309,1975,0
-1,4944079,1149,0
-1,3258,944,0
9755101,9742946,899,0
9484259,9742946,892,32
9788055,9742946,880,0
-1,1095143,829,0
8335210,6245640,795,3
-1,3012786,793,0
-1,8273630,766,0
54836,75976,738,224
-1,2779868,723,0
-1,1132983,699,0
-1,7237430,663,0
-1,2242,637,0
-1,113660,629,0
-1,1673888,626,0
-1,2033538,567,0
-1,357941,554,0
Query:
--Description: Grab the very top asymmetric pair with their reciprocal count  
WITH pairs AS (  
    SELECT "FromUserId" AS "giver", "ToUserId" AS "receiver", COUNT(*) AS "votes_out"  
    FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"  
    GROUP BY "FromUserId", "ToUserId"  
)  
SELECT p1."giver", p1."receiver",  
       p1."votes_out"                    AS "giver_to_receiver",  
       COALESCE(p2."votes_out",0)        AS "receiver_to_giver"  
FROM pairs p1  
LEFT JOIN pairs p2  
       ON p1."giver" = p2."receiver" AND p1."receiver" = p2."giver"  
ORDER BY p1."votes_out" DESC, COALESCE(p2."votes_out",0) DESC  
LIMIT 1;
Answer:
giver,receiver,giver_to_receiver,receiver_to_giver
-1,75976,2666,0
Query:
--Description: Inspect the distribution of reciprocal vote counts (symmetric look)
WITH pairs AS (
    SELECT
        "FromUserId" AS "u1",
        "ToUserId"   AS "u2",
        COUNT(*)     AS "votes"
    FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"
    GROUP BY "FromUserId", "ToUserId"
),
bothdir AS (
    SELECT
        LEAST("u1","u2")      AS "low_id",
        GREATEST("u1","u2")   AS "high_id",
        SUM("votes")          AS "total_between"
    FROM pairs
    GROUP BY LEAST("u1","u2"), GREATEST("u1","u2")
)
SELECT *
FROM bothdir
ORDER BY "total_between" DESC
LIMIT 20
Answer:
low_id,high_id,total_between
-1,75976,2666
-1,5309,1975
-1,4944079,1149
54836,75976,962
-1,3258,944
9484259,9742946,924
9742946,9755101,899
9742946,9788055,880
-1,1095143,829
6245640,8335210,798
-1,3012786,793
75976,1723677,775
-1,8273630,766
3012786,5430373,756
-1,2779868,723
-1,1132983,699
3363440,4183416,672
-1,7237430,663
1788308,1918280,658
-1,2242,637
Query:
--Description: Show how many distinct recipients each voter has up-voted
SELECT
    "FromUserId",
    COUNT(DISTINCT "ToUserId") AS "distinct_recipients"
FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"
GROUP BY "FromUserId"
ORDER BY "distinct_recipients" DESC
LIMIT 20
Answer:
FromUserId,distinct_recipients
-1,20203
3012786,8852
373959,7090
1723677,5866
4432707,4641
10735783,4622
8273630,4443
75976,3029
622458,2806
417337,2577
9072771,2086
10030651,2037
4037336,1917
4051350,1882
727004,1850
54836,1824
769452,1794
87114,1775
7024923,1727
9278072,1667
Query:
--Description: List cases where reciprocal vote counts are equal (and sizeable)
WITH pairs AS (
    SELECT
        "FromUserId" AS "a",
        "ToUserId"   AS "b",
        COUNT(*)     AS "ab_votes"
    FROM "META_KAGGLE"."META_KAGGLE"."FORUMMESSAGEVOTES"
    GROUP BY "FromUserId", "ToUserId"
),
joined AS (
    SELECT
        p1."a",
        p1."b",
        p1."ab_votes",
        COALESCE(p2."ab_votes", 0) AS "ba_votes"
    FROM pairs p1
    LEFT JOIN pairs p2
           ON p1."a" = p2."b" AND p1."b" = p2."a"
)
SELECT *
FROM joined
WHERE "ab_votes" = "ba_votes" AND "ab_votes" > 10
ORDER BY "ab_votes" DESC
LIMIT 20
Answer:
a,b,ab_votes,ba_votes
1723677,1696976,66,66
1696976,1723677,66,66
10172187,3012786,48,48
3012786,10172187,48,48
17037041,17421843,45,45
17421843,17037041,45,45
19186184,4707427,44,44
4707427,19186184,44,44
4707427,19517213,41,41
19517213,4707427,41,41
6851926,4576104,40,40
4576104,6851926,40,40
9278072,4707427,39,39
4707427,9278072,39,39
6673300,16192307,36,36
16192307,6673300,36,36
373959,4878232,35,35
4878232,373959,35,35
4491801,2003977,34,34
Task: Identify the pair of Kaggle users involved in ForumMessageVotes such that one user has given the other the greatest distinct number of upvotes, then also display how many upvotes that recipient returned. Present the usernames of both users, the total distinct upvotes one received from the other, and the upvotes they gave back, sorting by the highest received count and then by the highest given count, and show only the top result.

Please think step by step and answer only one complete SQL in snowflake dialect in ```sql``` format.
SQL usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: The table structure information is ({database name: {schema name: [table name]}}): 
{'META_KAGGLE': {'META_KAGGLE': ['DATASETS', 'DATASETTAGS', 'DATASETTASKSUBMISSIONS', 'EPISODES', 'FORUMMESSAGEVOTES', 'FORUMTOPICS', 'KERNELS', 'KERNELVERSIONS', 'SUBMISSIONS', 'TEAMMEMBERSHIPS', 'USERFOLLOWERS', 'KERNELVERSIONDATASETSOURCES', 'KERNELVOTES', 'COMPETITIONS', 'KERNELVERSIONCOMPETITIONSOURCES', 'TAGS', 'USERORGANIZATIONS', 'EPISODEAGENTS', 'USERS', 'COMPETITIONTAGS', 'DATASETVOTES', 'FORUMMESSAGES', 'FORUMS', 'KERNELLANGUAGES', 'DATASETTASKS', 'DATASOURCES', 'KERNELTAGS', 'USERACHIEVEMENTS', 'KERNELVERSIONKERNELSOURCES']}}

When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
If the task description does not specify the number of decimal places, retain all decimals to four places.

[Self-refine]
2025-05-07 06:42:42 - Thread-460 (execute) - INFO - [Try to run SQL in self-refine]
```sql
WITH vote_counts AS (           -- 1. total up-votes for every ordered pair (exclude anonymous -1)
    SELECT  "FromUserId"  AS "giver_id",
            "ToUserId"    AS "receiver_id",
            COUNT(*)      AS "giver_to_receiver"
    FROM    META_KAGGLE.META_KAGGLE.FORUMMESSAGEVOTES
    WHERE   "FromUserId"  > 0          -- keep real Kaggle users only
      AND   "ToUserId"    > 0
    GROUP BY "FromUserId", "ToUserId"
),
paired AS (                     -- 2. bring the reverse direction alongside
    SELECT  vc1."giver_id",
            vc1."receiver_id",
            vc1."giver_to_receiver",
            COALESCE(vc2."giver_to_receiver",0) AS "receiver_to_giver"
    FROM    vote_counts vc1
    LEFT JOIN vote_counts vc2
           ON vc1."giver_id"    = vc2."receiver_id"
          AND vc1."receiver_id" = vc2."giver_id"
)
SELECT  u1."UserName" AS "giver_username",
        u2."UserName" AS "receiver_username",
        p."giver_to_receiver",
        p."receiver_to_giver"
FROM    paired p
LEFT JOIN META_KAGGLE.META_KAGGLE.USERS u1 ON u1."Id" = p."giver_id"
LEFT JOIN META_KAGGLE.META_KAGGLE.USERS u2 ON u2."Id" = p."receiver_id"
ORDER BY p."giver_to_receiver" DESC NULLS LAST,
         p."receiver_to_giver" DESC NULLS LAST
LIMIT 1;
```
[Try to run SQL in self-refine]
2025-05-07 06:44:18 - Thread-460 (execute) - INFO - Total iteration counts: 0
