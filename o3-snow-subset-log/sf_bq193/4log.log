2025-05-07 01:32:47 - Thread-101 (execute) - INFO - [Exploration]
```sql
--Description: 1) Show a few README-type files that exist in the sample set
SELECT DISTINCT 
       "repo_name",
       "path",
       "id"
FROM   GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES
WHERE  "path" ILIKE '%README.md'
LIMIT  20;
```

```sql
--Description: 2) Quickly preview the first 200 characters of the README.md files’ contents
SELECT  f."repo_name",
        f."path",
        SUBSTR(c."content",1,200) AS "preview"
FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES  f
JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
       ON f."id" = c."id"
WHERE   f."path" ILIKE '%README.md'
LIMIT   20;
```

```sql
--Description: 3) View one specific README.md in full for manual inspection
SELECT  c."content"
FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES  f
JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
       ON f."id" = c."id"
WHERE   f."path" ILIKE '%README.md'
  AND   f."repo_name" = 'torvalds/linux'       -- change repo if no hit
LIMIT   20;
```

```sql
--Description: 4) Split README.md texts into individual lines (one row per line)  
SELECT   f."repo_name",
         TRIM(line.value::STRING)        AS "line_text"
FROM     GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES      f
JOIN     GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS   c
       ON f."id" = c."id",
LATERAL  FLATTEN( input => SPLIT( c."content", '\n') ) line
WHERE    f."path" ILIKE '%README.md'
LIMIT    20;
```

```sql
--Description: 5) Same as above, but remove blank lines and those that start with ‘#’ (Markdown) or ‘//’  
SELECT   f."repo_name",
         line_clean.value::STRING  AS "clean_line"
FROM     GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES      f
JOIN     GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS   c
       ON f."id" = c."id",
LATERAL  FLATTEN( input => SPLIT( c."content", '\n') ) line_raw,
LATERAL  ( SELECT TRIM(line_raw.value::STRING) AS value ) line_clean
WHERE    f."path" ILIKE '%README.md'
  AND    line_clean.value IS NOT NULL
  AND    line_clean.value <> ''
  AND    line_clean.value NOT ILIKE '#%'
  AND    line_clean.value NOT ILIKE '//%'
LIMIT    20;
```

```sql
--Description: 6) Count how many repositories contain each non-comment README line (frequency)
SELECT   line_clean,
         COUNT(DISTINCT "repo_name") AS "repo_count"
FROM   (
         SELECT f."repo_name",
                TRIM(line.value::STRING) AS line_clean
         FROM   GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES      f
         JOIN   GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS   c
           ON   f."id" = c."id",
         LATERAL FLATTEN( input => SPLIT(c."content", '\n') ) line
         WHERE  f."path" ILIKE '%README.md'
           AND  TRIM(line.value::STRING) <> ''
           AND  TRIM(line.value::STRING) NOT ILIKE '#%'
           AND  TRIM(line.value::STRING) NOT ILIKE '//%'
       ) x
GROUP BY line_clean
ORDER BY "repo_count" DESC
LIMIT 20;
```

```sql
--Description: 7) Bring in programming languages for repos that have README.md files
SELECT   DISTINCT f."repo_name",
         l."language"
FROM     GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
JOIN     GITHUB_REPOS.GITHUB_REPOS.LANGUAGES    l
       ON f."repo_name" = l."repo_name"
WHERE    f."path" ILIKE '%README.md'
LIMIT    20;
```

```sql
--Description: 8) For each non-comment README line, list the distinct languages (comma-separated)
SELECT  line_clean,
        LISTAGG(DISTINCT l."language", ',') WITHIN GROUP (ORDER BY l."language") AS "languages"
FROM  (
        SELECT f."repo_name",
               TRIM(line.value::STRING) AS line_clean
        FROM   GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES      f
        JOIN   GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS   c
          ON   f."id" = c."id",
        LATERAL FLATTEN( input => SPLIT(c."content", '\n') ) line
        WHERE  f."path" ILIKE '%README.md'
          AND  TRIM(line.value::STRING) <> ''
          AND  TRIM(line.value::STRING) NOT ILIKE '#%'
          AND  TRIM(line.value::STRING) NOT ILIKE '//%'
      ) r
JOIN  GITHUB_REPOS.GITHUB_REPOS.LANGUAGES l
  ON r."repo_name" = l."repo_name"
GROUP BY line_clean
LIMIT 20;
```

```sql
--Description: 9) Combine frequency and language list; order by popularity
SELECT  line_clean,
        COUNT(DISTINCT repo_name)                             AS "freq",
        LISTAGG(DISTINCT language, ',') 
             WITHIN GROUP (ORDER BY language)                AS "languages"
FROM (
        SELECT  f."repo_name",
                TRIM(line.value::STRING) AS line_clean
        FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES    f
        JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
              ON f."id" = c."id",
        LATERAL FLATTEN( input => SPLIT(c."content", '\n') ) line
        WHERE   f."path" ILIKE '%README.md'
          AND   TRIM(line.value::STRING) <> ''
          AND   TRIM(line.value::STRING) NOT ILIKE '#%'
          AND   TRIM(line.value::STRING) NOT ILIKE '//%'
     ) lines
LEFT JOIN GITHUB_REPOS.GITHUB_REPOS.LANGUAGES g
       ON lines."repo_name" = g."repo_name"
GROUP BY line_clean
ORDER BY "freq" DESC
LIMIT 20;
```

```sql
--Description: 10) View licences of repos containing a very common README line
SELECT  DISTINCT l."license",
        f."repo_name"
FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES    f
JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
      ON f."id" = c."id"
JOIN    LATERAL FLATTEN( input => SPLIT(c."content", '\n') ) line
      ON TRUE
JOIN    GITHUB_REPOS.GITHUB_REPOS.LICENSES        l
      ON f."repo_name" = l."repo_name"
WHERE   f."path" ILIKE '%README.md'
  AND   TRIM(line.value::STRING) = 'Copyright (C) 2011 Samsung Electronics'
LIMIT   20;
```

These ten progressively build up from locating README files to extracting non-commented lines, counting their occurrences, and associating each line with the languages used in the repositories that contain it.
[Exploration]
2025-05-07 01:32:47 - Thread-101 (execute) - INFO - [Try to execute]
--Description: 1) Show a few README-type files that exist in the sample set
SELECT DISTINCT 
       "repo_name",
       "path",
       "id"
FROM   GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES
WHERE  "path" ILIKE '%README.md'
LIMIT  20;
[Try to execute]
2025-05-07 01:32:48 - Thread-101 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 1) Show a few README-type files that exist in the sample set
SELECT DISTINCT 
       "repo_name",
       "path",
       "id"
FROM   GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES
WHERE  "path" ILIKE '%README.md'
LIMIT  20;
Results:
repo_name,path,id
hatajoe/github-notification-gopherjs,GitHub-Notification-GopherJS-darwin-x64/GitHub-Notification-GopherJS.app/Contents/Resources/app/node_modules/octonode/node_modules/request/node_modules/bl/node_modules/readable-stream/node_modules/string_decoder/README.md,4d2aa001501107cd2792f385ad62237dc3757521
itsthejb/ObjcAssociatedObjectHelpers,README.md,b618db0b7811ca2f6619bf52cbb5532cad0152c9
jdhoek/inkscape-isometric-projection,README.md,a770e8d8ad235d5d18238b8e6f854f4285e7e6fd

[Successfully executed]
2025-05-07 01:32:48 - Thread-101 (execute) - INFO - [Try to execute]
--Description: 2) Quickly preview the first 200 characters of the README.md files’ contents
SELECT  f."repo_name",
        f."path",
        SUBSTR(c."content",1,200) AS "preview"
FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES  f
JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
       ON f."id" = c."id"
WHERE   f."path" ILIKE '%README.md'
LIMIT   20;
[Try to execute]
2025-05-07 01:32:51 - Thread-101 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 2) Quickly preview the first 200 characters of the README.md files’ contents
SELECT  f."repo_name",
        f."path",
        SUBSTR(c."content",1,200) AS "preview"
FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES  f
JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
       ON f."id" = c."id"
WHERE   f."path" ILIKE '%README.md'
LIMIT   20;
Results:
repo_name,path,preview
rgardler/azure-quickstart-templates,emercoin-ubuntu/README.md,"# Emercoin Instance

This Microsoft Azure template deploys a single Emercoin client which will connect to the public Emercoin network.

[![Deploy to Azure](http://azuredeploy.net/deploybutton.png)](ht"
briancavalier/todomvc-fab,examples/cujo/bower_components/curl/src/curl/plugin/README.md,"curl.js loader plugins
===

Please see the wiki for information about using plugins.  If you're interested
in creating yo

[Successfully executed]
2025-05-07 01:32:51 - Thread-101 (execute) - INFO - [Try to execute]
--Description: 3) View one specific README.md in full for manual inspection
SELECT  c."content"
FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES  f
JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
       ON f."id" = c."id"
WHERE   f."path" ILIKE '%README.md'
  AND   f."repo_name" = 'torvalds/linux'       -- change repo if no hit
LIMIT   20;
[Try to execute]
2025-05-07 01:32:53 - Thread-101 (execute) - INFO - [Error occurred]
No data found for the specified query.

[Error occurred]
2025-05-07 01:33:50 - Thread-101 (execute) - INFO - [Corrected SQL]
```sql
--Description: To confirm README.md data is accessible, select a small sample
--of README files and show their repository, file path, and the first 200
--characters of the content.  We join SAMPLE_FILES (which lists every file)
--with SAMPLE_CONTENTS (which stores file blobs) on the common SHA-1 “id”.
--Filtering with ILIKE '%README.md' narrows the result to README-type files
--regardless of directory depth or case.  Limiting to 5 rows gives a quick,
--manageable preview while proving data presence.

SELECT  f."repo_name",
        f."path",
        SUBSTR(c."content", 1, 200) AS "preview"
FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES     f
JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS  c
      ON f."id" = c."id"
WHERE   f."path" ILIKE '%README.md'
LIMIT   5;
```
[Corrected SQL]
2025-05-07 01:33:51 - Thread-101 (execute) - INFO - [Results for corrected sql]
repo_name,path,preview
DaMSL/K3,tools/scripts/docker/README.md,"K3 Dockerfiles
==========

Dockerfiles are updated for three images:

1. **k3-app** -- (~250MB) light-weight image to run a K3 program. Based on debian:jessie. It contains only the necessary dependenc"
briancavalier/todomvc-fab,examples/cujo/bower_components/curl/src/curl/plugin/README.md,"curl.js loader plugins
===

Please see the wiki for information about using plugins.  If you're interested
in creating your own plugins, please

[Results for corrected sql]
2025-05-07 01:36:08 - Thread-101 (execute) - INFO - [Corrected other sqls]
```sql
--Description: 4) Split README.md texts into individual lines (one row per line)
SELECT   f."repo_name",
         TRIM(line.value::STRING) AS "line_text"
FROM     GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES     f
JOIN     GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS  c
       ON f."id" = c."id",
LATERAL  FLATTEN(input => SPLIT(c."content", '\n')) line
WHERE    f."path" ILIKE '%README.md'
LIMIT    20;
```

```sql
--Description: 5) Show non-empty README lines that are not comments (# or //)
SELECT  f."repo_name",
        TRIM(line.value::STRING) AS "clean_line"
FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES     f
JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS  c
      ON f."id" = c."id",
LATERAL FLATTEN(input => SPLIT(c."content", '\n')) line
WHERE   f."path" ILIKE '%README.md'
  AND   TRIM(line.value::STRING) <> ''
  AND   TRIM(line.value::STRING) NOT ILIKE '#%'
  AND   TRIM(line.value::STRING) NOT ILIKE '//%'
LIMIT   20;
```

```sql
--Description: 6) Count how many repositories contain each non-comment README line
SELECT  line_clean,
        COUNT(DISTINCT repo_name) AS "repo_count"
FROM (
        SELECT  f."repo_name"                             AS repo_name,
                TRIM(line.value::STRING)                  AS line_clean
        FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES    f
        JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
              ON f."id" = c."id",
        LATERAL FLATTEN(input => SPLIT(c."content", '\n')) line
        WHERE   f."path" ILIKE '%README.md'
          AND   TRIM(line.value::STRING) <> ''
          AND   TRIM(line.value::STRING) NOT ILIKE '#%'
          AND   TRIM(line.value::STRING) NOT ILIKE '//%'
     ) t
GROUP BY line_clean
ORDER BY "repo_count" DESC
LIMIT 20;
```

```sql
--Description: 7) List programming languages for repos that contain README.md files
SELECT DISTINCT
       f."repo_name",
       l."language"
FROM   GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES  f
LEFT JOIN GITHUB_REPOS.GITHUB_REPOS.LANGUAGES  l
     ON f."repo_name" = l."repo_name"
WHERE  f."path" ILIKE '%README.md'
LIMIT  20;
```

```sql
--Description: 8) For each README line, return the distinct languages (comma-separated)
SELECT  line_clean,
        LISTAGG(DISTINCT l."language", ',') WITHIN GROUP (ORDER BY l."language") AS "languages"
FROM (
        SELECT  f."repo_name",
                TRIM(line.value::STRING) AS line_clean
        FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES    f
        JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
              ON f."id" = c."id",
        LATERAL FLATTEN(input => SPLIT(c."content", '\n')) line
        WHERE   f."path" ILIKE '%README.md'
          AND   TRIM(line.value::STRING) <> ''
          AND   TRIM(line.value::STRING) NOT ILIKE '#%'
          AND   TRIM(line.value::STRING) NOT ILIKE '//%'
     ) lines
LEFT JOIN GITHUB_REPOS.GITHUB_REPOS.LANGUAGES l
       ON lines."repo_name" = l."repo_name"
GROUP BY line_clean
LIMIT 20;
```

```sql
--Description: 9) Combine frequency and language list for README lines, order by popularity
SELECT  line_clean,
        COUNT(DISTINCT repo_name)                                                AS "freq",
        LISTAGG(DISTINCT language, ',') WITHIN GROUP (ORDER BY language)         AS "languages"
FROM (
        SELECT  f."repo_name",
                TRIM(line.value::STRING) AS line_clean
        FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES    f
        JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
              ON f."id" = c."id",
        LATERAL FLATTEN(input => SPLIT(c."content", '\n')) line
        WHERE   f."path" ILIKE '%README.md'
          AND   TRIM(line.value::STRING) <> ''
          AND   TRIM(line.value::STRING) NOT ILIKE '#%'
          AND   TRIM(line.value::STRING) NOT ILIKE '//%'
     ) base
LEFT JOIN GITHUB_REPOS.GITHUB_REPOS.LANGUAGES lang
       ON base."repo_name" = lang."repo_name"
GROUP BY line_clean
ORDER BY "freq" DESC
LIMIT 20;
```

```sql
--Description: 10) Show licences of repos whose README contains a specific line
SELECT DISTINCT
       lic."license",
       f."repo_name"
FROM   GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES     f
JOIN   GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS  c
     ON f."id" = c."id",
LATERAL FLATTEN(input => SPLIT(c."content", '\n')) line
JOIN   GITHUB_REPOS.GITHUB_REPOS.LICENSES         lic
     ON f."repo_name" = lic."repo_name"
WHERE  f."path" ILIKE '%README.md'
  AND  TRIM(line.value::STRING) = 'Copyright (C) 2011 Samsung Electronics'
LIMIT  20;
```
[Corrected other sqls]
2025-05-07 01:36:08 - Thread-101 (execute) - INFO - [Successfully corrected]
Successfully corrected. SQL:
--Description: To confirm README.md data is accessible, select a small sample
--of README files and show their repository, file path, and the first 200
--characters of the content.  We join SAMPLE_FILES (which lists every file)
--with SAMPLE_CONTENTS (which stores file blobs) on the common SHA-1 “id”.
--Filtering with ILIKE '%README.md' narrows the result to README-type files
--regardless of directory depth or case.  Limiting to 5 rows gives a quick,
--manageable preview while proving data presence.

SELECT  f."repo_name",
        f."path",
        SUBSTR(c."content", 1, 200) AS "preview"
FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES     f
JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS  c
      ON f."id" = c."id"
WHERE   f."path" ILIKE '%README.md'
LIMIT   5;
Results:
repo_name,path,preview
DaMSL/K3,tools/scripts/docker/README.md,"K3 Dockerfiles
==========

Dockerfiles are updated for three images:

1. **k3-app** -- (~250MB) light-weight image to run a K3 program. Based on debian:jessie. It contains only the necessary dependenc"
briancavalier/todomvc-fab,examples/cujo/bower_components/curl/src/curl/plugin/README.md,"curl.js loader plugins
===

Please see the wiki for information about using plugins.  If you're interested
in creating your own plugins, please

[Successfully corrected]
2025-05-07 01:36:08 - Thread-101 (execute) - INFO - [Try to execute]
--Description: 4) Split README.md texts into individual lines (one row per line)
SELECT   f."repo_name",
         TRIM(line.value::STRING) AS "line_text"
FROM     GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES     f
JOIN     GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS  c
       ON f."id" = c."id",
LATERAL  FLATTEN(input => SPLIT(c."content", '\n')) line
WHERE    f."path" ILIKE '%README.md'
LIMIT    20
[Try to execute]
2025-05-07 01:37:42 - Thread-101 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 4) Split README.md texts into individual lines (one row per line)
SELECT   f."repo_name",
         TRIM(line.value::STRING) AS "line_text"
FROM     GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES     f
JOIN     GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS  c
       ON f."id" = c."id",
LATERAL  FLATTEN(input => SPLIT(c."content", '\n')) line
WHERE    f."path" ILIKE '%README.md'
LIMIT    20
Results:
repo_name,line_text
rgardler/azure-quickstart-templates,# Emercoin Instance
rgardler/azure-quickstart-templates,
rgardler/azure-quickstart-templates,This Microsoft Azure template deploys a single Emercoin client which will connect to the public Emercoin network.
rgardler/azure-quickstart-templates,
rgardler/azure-quickstart-templates,[![Deploy to Azure](http://azuredeploy.net/deploybutton.png)](https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2

[Successfully executed]
2025-05-07 01:37:42 - Thread-101 (execute) - INFO - [Try to execute]
--Description: 5) Show non-empty README lines that are not comments (# or //)
SELECT  f."repo_name",
        TRIM(line.value::STRING) AS "clean_line"
FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES     f
JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS  c
      ON f."id" = c."id",
LATERAL FLATTEN(input => SPLIT(c."content", '\n')) line
WHERE   f."path" ILIKE '%README.md'
  AND   TRIM(line.value::STRING) <> ''
  AND   TRIM(line.value::STRING) NOT ILIKE '#%'
  AND   TRIM(line.value::STRING) NOT ILIKE '//%'
LIMIT   20
[Try to execute]
2025-05-07 01:38:42 - Thread-101 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 5) Show non-empty README lines that are not comments (# or //)
SELECT  f."repo_name",
        TRIM(line.value::STRING) AS "clean_line"
FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES     f
JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS  c
      ON f."id" = c."id",
LATERAL FLATTEN(input => SPLIT(c."content", '\n')) line
WHERE   f."path" ILIKE '%README.md'
  AND   TRIM(line.value::STRING) <> ''
  AND   TRIM(line.value::STRING) NOT ILIKE '#%'
  AND   TRIM(line.value::STRING) NOT ILIKE '//%'
LIMIT   20
Results:
repo_name,clean_line
rgardler/azure-quickstart-templates,This Microsoft Azure template deploys a single Emercoin client which will connect to the public Emercoin network.
rgardler/azure-quickstart-templates,[![Deploy to Azure](http://azuredeploy.net/deploybutton.png)](https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2FAzure%2Fazure-quickstart-templates%2Fmaster%2Femercoin-ubuntu%2Fazuredeploy.json)
rgardler/azure-quickstart-templates,"<a href=""h

[Successfully executed]
2025-05-07 01:38:42 - Thread-101 (execute) - INFO - [Try to execute]
--Description: 6) Count how many repositories contain each non-comment README line
SELECT  line_clean,
        COUNT(DISTINCT repo_name) AS "repo_count"
FROM (
        SELECT  f."repo_name"                             AS repo_name,
                TRIM(line.value::STRING)                  AS line_clean
        FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES    f
        JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
              ON f."id" = c."id",
        LATERAL FLATTEN(input => SPLIT(c."content", '\n')) line
        WHERE   f."path" ILIKE '%README.md'
          AND   TRIM(line.value::STRING) <> ''
          AND   TRIM(line.value::STRING) NOT ILIKE '#%'
          AND   TRIM(line.value::STRING) NOT ILIKE '//%'
     ) t
GROUP BY line_clean
ORDER BY "repo_count" DESC
LIMIT 20
[Try to execute]
2025-05-07 01:39:46 - Thread-101 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 6) Count how many repositories contain each non-comment README line
SELECT  line_clean,
        COUNT(DISTINCT repo_name) AS "repo_count"
FROM (
        SELECT  f."repo_name"                             AS repo_name,
                TRIM(line.value::STRING)                  AS line_clean
        FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES    f
        JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
              ON f."id" = c."id",
        LATERAL FLATTEN(input => SPLIT(c."content", '\n')) line
        WHERE   f."path" ILIKE '%README.md'
          AND   TRIM(line.value::STRING) <> ''
          AND   TRIM(line.value::STRING) NOT ILIKE '#%'
          AND   TRIM(line.value::STRING) NOT ILIKE '//%'
     ) t
GROUP BY line_clean
ORDER BY "repo_count" DESC
LIMIT 20
Results:
LINE_CLEAN,repo_count
==========,2
js!,1
- Mesos: 0.22.1</pre>,1
2. **k3-compiler** -- (~2 GB) Image containing the GHC and GCC tool chains to compile a K3 program to binary. Based on debian:jessie,1
1. **Download** the latest version from the CKEditor website:,1
on the wiki (TBD).,1
"(Note: Docker build now has the -f option, so you don't have to call all docker files, ""Dockerfile"")",1
The other scripts in here are left for legacy purposes.,1
- GHC: 7.10.1,1
[![Deploy to Azure](http

[Successfully executed]
2025-05-07 01:39:46 - Thread-101 (execute) - INFO - [Try to execute]
--Description: 7) List programming languages for repos that contain README.md files
SELECT DISTINCT
       f."repo_name",
       l."language"
FROM   GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES  f
LEFT JOIN GITHUB_REPOS.GITHUB_REPOS.LANGUAGES  l
     ON f."repo_name" = l."repo_name"
WHERE  f."path" ILIKE '%README.md'
LIMIT  20
[Try to execute]
2025-05-07 01:40:28 - Thread-101 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 7) List programming languages for repos that contain README.md files
SELECT DISTINCT
       f."repo_name",
       l."language"
FROM   GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES  f
LEFT JOIN GITHUB_REPOS.GITHUB_REPOS.LANGUAGES  l
     ON f."repo_name" = l."repo_name"
WHERE  f."path" ILIKE '%README.md'
LIMIT  20
Results:
repo_name,language
ribot/android-guidelines,[]
yburke94/Raft.net,"[
  {
    ""bytes"": 576059,
    ""name"": ""C#""
  }
]"
josa42/atom-blame,"[
  {
    ""bytes"": 2707,
    ""name"": ""CSS""
  },
  {
    ""bytes"": 34230,
    ""name"": ""JavaScript""
  }
]"
mvarnagiris/financius-public,"[
  {
    ""bytes"": 6392,
    ""name"": ""HTML""
  },
  {
    ""bytes"": 1003503,
    ""name"": ""Java""
  }
]"
marianopeck/OSSubprocess,"[
  {
    ""bytes"": 1700,
    ""name"": ""HTML""
  },
  {
    ""byt

[Successfully executed]
2025-05-07 01:40:28 - Thread-101 (execute) - INFO - [Try to execute]
--Description: 8) For each README line, return the distinct languages (comma-separated)
SELECT  line_clean,
        LISTAGG(DISTINCT l."language", ',') WITHIN GROUP (ORDER BY l."language") AS "languages"
FROM (
        SELECT  f."repo_name",
                TRIM(line.value::STRING) AS line_clean
        FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES    f
        JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
              ON f."id" = c."id",
        LATERAL FLATTEN(input => SPLIT(c."content", '\n')) line
        WHERE   f."path" ILIKE '%README.md'
          AND   TRIM(line.value::STRING) <> ''
          AND   TRIM(line.value::STRING) NOT ILIKE '#%'
          AND   TRIM(line.value::STRING) NOT ILIKE '//%'
     ) lines
LEFT JOIN GITHUB_REPOS.GITHUB_REPOS.LANGUAGES l
       ON lines."repo_name" = l."repo_name"
GROUP BY line_clean
LIMIT 20
[Try to execute]
2025-05-07 01:41:18 - Thread-101 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 8) For each README line, return the distinct languages (comma-separated)
SELECT  line_clean,
        LISTAGG(DISTINCT l."language", ',') WITHIN GROUP (ORDER BY l."language") AS "languages"
FROM (
        SELECT  f."repo_name",
                TRIM(line.value::STRING) AS line_clean
        FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES    f
        JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
              ON f."id" = c."id",
        LATERAL FLATTEN(input => SPLIT(c."content", '\n')) line
        WHERE   f."path" ILIKE '%README.md'
          AND   TRIM(line.value::STRING) <> ''
          AND   TRIM(line.value::STRING) NOT ILIKE '#%'
          AND   TRIM(line.value::STRING) NOT ILIKE '//%'
     ) lines
LEFT JOIN GITHUB_REPOS.GITHUB_REPOS.LANGUAGES l
       ON lines."repo_name" = l."repo_name"
GROUP BY line_clean
LIMIT 20
Results:
LINE_CLEAN,languages
The editor comes with a few sample pages that can be used to verify that,"[{""bytes"":553,""name"":""ApacheConf""},{""bytes"":87973,""name"":""CSS""},{""bytes"":229930,""name"":""HTML""},{""bytes"":21196,""name"":""JavaScript""},{""bytes"":122722,""name"":""PHP""}]"
- Mesos: 0.22.1</pre>,"[{""bytes"":530367,""name"":""C++""},{""bytes"":2285,""name"":""CMake""},{""bytes"":2265182,""name"":""Haskell""},{""bytes"":488,""name"":""Shell""}]"
- GHC: 7.10.1,"[{""bytes"":530367,"

[Successfully executed]
2025-05-07 01:41:18 - Thread-101 (execute) - INFO - [Try to execute]
--Description: 9) Combine frequency and language list for README lines, order by popularity
SELECT  line_clean,
        COUNT(DISTINCT repo_name)                                                AS "freq",
        LISTAGG(DISTINCT language, ',') WITHIN GROUP (ORDER BY language)         AS "languages"
FROM (
        SELECT  f."repo_name",
                TRIM(line.value::STRING) AS line_clean
        FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES    f
        JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
              ON f."id" = c."id",
        LATERAL FLATTEN(input => SPLIT(c."content", '\n')) line
        WHERE   f."path" ILIKE '%README.md'
          AND   TRIM(line.value::STRING) <> ''
          AND   TRIM(line.value::STRING) NOT ILIKE '#%'
          AND   TRIM(line.value::STRING) NOT ILIKE '//%'
     ) base
LEFT JOIN GITHUB_REPOS.GITHUB_REPOS.LANGUAGES lang
       ON base."repo_name" = lang."repo_name"
GROUP BY line_clean
ORDER BY "freq" DESC
LIMIT 20
[Try to execute]
2025-05-07 01:41:19 - Thread-101 (execute) - INFO - [Error occurred]
{'status': 'error', 'error_msg': "##ERROR##000904 (42000): SQL compilation error: error line 2 at position 23\ninvalid identifier 'REPO_NAME'"}
[Error occurred]
2025-05-07 01:42:50 - Thread-101 (execute) - INFO - [Corrected SQL]
```sql
--Description:  Consolidate all the requirements—find every distinct, non-comment,
--non-blank line appearing in README.md files, count how many different
--repositories contain that line (“freq”), and list the programming languages
--used by those repositories in alphabetical, comma-separated form (“languages”).
--The inner sub-query (“base”) extracts lines while filtering out blanks and
--comment-style prefixes (# or //).  We alias the repository column as
--"repo_name" (quoted) so it can be referenced unambiguously in the outer query.
--The outer query LEFT JOINs to the LANGUAGES table, aggregates, orders by
--frequency, and shows the 20 most common lines.

SELECT  line_clean,
        COUNT(DISTINCT "repo_name")                                             AS "freq",
        LISTAGG(DISTINCT lang."language", ',') 
          WITHIN GROUP (ORDER BY lang."language")                               AS "languages"
FROM (
        SELECT  f."repo_name"                       AS "repo_name",
                TRIM(line.value::STRING)            AS line_clean
        FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES     f
        JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS  c
              ON f."id" = c."id",
        LATERAL FLATTEN(input => SPLIT(c."content", '\n')) line
        WHERE   f."path" ILIKE '%README.md'
          AND   TRIM(line.value::STRING) <> ''
          AND   TRIM(line.value::STRING) NOT ILIKE '#%'
          AND   TRIM(line.value::STRING) NOT ILIKE '//%'
     ) base
LEFT JOIN GITHUB_REPOS.GITHUB_REPOS.LANGUAGES lang
       ON base."repo_name" = lang."repo_name"
GROUP BY line_clean
ORDER BY "freq" DESC
LIMIT 20;
```
[Corrected SQL]
2025-05-07 01:42:51 - Thread-101 (execute) - INFO - [Results for corrected sql]
{'status': 'error', 'error_msg': "##ERROR##002028 (42601): SQL compilation error:\nambiguous column name 'repo_name'"}
[Results for corrected sql]
2025-05-07 01:44:57 - Thread-101 (execute) - INFO - [Corrected SQL]
```sql
--Description:  Extract every unique, non-blank, non-comment line from all
--README.md files, count how many distinct repositories include each line
--(freq), and list the programming languages used by those repositories in a
--comma-separated, alphabetical string (languages).  An inner sub-query (“base”)
--pulls and filters the lines while labelling the repository as base.repo_name;
--the outer query joins to LANGUAGES, aggregates, and orders by popularity.

SELECT  base.line_clean,
        COUNT(DISTINCT base.repo_name)                                                  AS "freq",
        LISTAGG(DISTINCT lang."language"::STRING, ',') 
          WITHIN GROUP (ORDER BY lang."language"::STRING)                               AS "languages"
FROM (
        SELECT  f."repo_name"                       AS repo_name,
                TRIM(line.value::STRING)            AS line_clean
        FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES     f
        JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS  c
              ON f."id" = c."id",
        LATERAL FLATTEN(input => SPLIT(c."content", '\n')) line
        WHERE   f."path" ILIKE '%README.md'
          AND   TRIM(line.value::STRING) <> ''
          AND   TRIM(line.value::STRING) NOT ILIKE '#%'
          AND   TRIM(line.value::STRING) NOT ILIKE '//%'
     ) base
LEFT JOIN GITHUB_REPOS.GITHUB_REPOS.LANGUAGES lang
       ON base.repo_name = lang."repo_name"
GROUP BY base.line_clean
ORDER BY "freq" DESC
LIMIT 20;
```
[Corrected SQL]
2025-05-07 01:44:59 - Thread-101 (execute) - INFO - [Results for corrected sql]
LINE_CLEAN,freq,languages
==========,2,"[{""bytes"":530367,""name"":""C++""},{""bytes"":2285,""name"":""CMake""},{""bytes"":2265182,""name"":""Haskell""},{""bytes"":488,""name"":""Shell""}],[{""bytes"":553,""name"":""ApacheConf""},{""bytes"":87973,""name"":""CSS""},{""bytes"":229930,""name"":""HTML""},{""bytes"":21196,""name"":""JavaScript""},{""bytes"":122722,""name"":""PHP""}]"
"Copyright (c) 2003-2015, CKSource - Frederico Knabben. All rights reserved.",1,"[{""bytes"":553,""name"":""ApacheC

[Results for corrected sql]
2025-05-07 01:45:19 - Thread-101 (execute) - INFO - [Corrected other sqls]
```sql
--Description: Retrieve licences for repositories whose README.md contains the
--exact line “Copyright (C) 2011 Samsung Electronics”.  We join SAMPLE_FILES to
--SAMPLE_CONTENTS on the blob id, split README content into lines via LATERAL
--FLATTEN (aliased as lines), then join to LICENSES for the licence text.  All
--aliases are explicit to avoid ambiguity.

SELECT DISTINCT
       lic."license",
       f."repo_name"
FROM   GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES     f
JOIN   GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS  c
       ON f."id" = c."id",
LATERAL FLATTEN(input => SPLIT(c."content", '\n')) lines
JOIN   GITHUB_REPOS.GITHUB_REPOS.LICENSES         lic
       ON f."repo_name" = lic."repo_name"
WHERE  f."path" ILIKE '%README.md'
  AND  TRIM(lines.value::STRING) = 'Copyright (C) 2011 Samsung Electronics'
LIMIT  20;
```
[Corrected other sqls]
2025-05-07 01:45:19 - Thread-101 (execute) - INFO - [Successfully corrected]
Successfully corrected. SQL:
--Description:  Extract every unique, non-blank, non-comment line from all
--README.md files, count how many distinct repositories include each line
--(freq), and list the programming languages used by those repositories in a
--comma-separated, alphabetical string (languages).  An inner sub-query (“base”)
--pulls and filters the lines while labelling the repository as base.repo_name;
--the outer query joins to LANGUAGES, aggregates, and orders by popularity.

SELECT  base.line_clean,
        COUNT(DISTINCT base.repo_name)                                                  AS "freq",
        LISTAGG(DISTINCT lang."language"::STRING, ',') 
          WITHIN GROUP (ORDER BY lang."language"::STRING)                               AS "languages"
FROM (
        SELECT  f."repo_name"                       AS repo_name,
                TRIM(line.value::STRING)            AS line_clean
        FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES     f
        JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS  c
              ON f."id" = c."id",
        LATERAL FLATTEN(input => SPLIT(c."content", '\n')) line
        WHERE   f."path" ILIKE '%README.md'
          AND   TRIM(line.value::STRING) <> ''
          AND   TRIM(line.value::STRING) NOT ILIKE '#%'
          AND   TRIM(line.value::STRING) NOT ILIKE '//%'
     ) base
LEFT JOIN GITHUB_REPOS.GITHUB_REPOS.LANGUAGES lang
       ON base.repo_name = lang."repo_name"
GROUP BY base.line_clean
ORDER BY "freq" DESC
LIMIT 20;
Results:
LINE_CLEAN,freq,languages
==========,2,"[{""bytes"":530367,""name"":""C++""},{""bytes"":2285,""name"":""CMake""},{""bytes"":2265182,""name"":""Haskell""},{""bytes"":488,""name"":""Shell""}],[{""bytes"":553,""name"":""ApacheConf""},{""bytes"":87973,""name"":""CSS""},{""bytes"":229930,""name"":""HTML""},{""bytes"":21196,""name"":""JavaScript""},{""bytes"":122722,""name"":""PHP""}]"
"Copyright (c) 2003-2015, CKSource - Frederico Knabben. All rights reserved.",1,"[{""bytes"":553,""name"":""ApacheC

[Successfully corrected]
2025-05-07 01:45:19 - Thread-101 (execute) - INFO - [Try to execute]
--Description: Retrieve licences for repositories whose README.md contains the
--exact line “Copyright (C) 2011 Samsung Electronics”.  We join SAMPLE_FILES to
--SAMPLE_CONTENTS on the blob id, split README content into lines via LATERAL
--FLATTEN (aliased as lines), then join to LICENSES for the licence text.  All
--aliases are explicit to avoid ambiguity.

SELECT DISTINCT
       lic."license",
       f."repo_name"
FROM   GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES     f
JOIN   GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS  c
       ON f."id" = c."id",
LATERAL FLATTEN(input => SPLIT(c."content", '\n')) lines
JOIN   GITHUB_REPOS.GITHUB_REPOS.LICENSES         lic
       ON f."repo_name" = lic."repo_name"
WHERE  f."path" ILIKE '%README.md'
  AND  TRIM(lines.value::STRING) = 'Copyright (C) 2011 Samsung Electronics'
LIMIT  20
[Try to execute]
2025-05-07 01:45:20 - Thread-101 (execute) - INFO - [Error occurred]
{'status': 'error', 'error_msg': '##ERROR##000904 (42000): SQL compilation error: error line 9 at position 10\ninvalid identifier \'F."repo_name"\''}
[Error occurred]
2025-05-07 01:46:58 - Thread-101 (execute) - INFO - [Corrected SQL]
```sql
--Description:  Find every repository whose README.md contains the exact line
--“Copyright (C) 2011 Samsung Electronics”, then return the repository name
--and its declared licence.  
--Process
--1.  SAMPLE_FILES is joined to SAMPLE_CONTENTS via the shared blob "id" to get
--    file contents.  
--2.  CROSS JOIN LATERAL FLATTEN splits the README text into individual lines
--    (each row becomes one line, alias line).  
--3.  We filter to README paths (ILIKE '%README.md') and keep only rows whose
--    trimmed line equals the target string.  
--4.  Those repositories are joined to LICENSES on repo_name to fetch their
--    licence identifiers.  
--5.  DISTINCT removes duplicates; LIMIT confines output to 20 rows for preview.

SELECT DISTINCT
       lic."license",
       f."repo_name"
FROM   GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES    AS f
JOIN   GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS AS c
       ON f."id" = c."id"
CROSS JOIN LATERAL FLATTEN(input => SPLIT(c."content", '\n')) AS line
JOIN   GITHUB_REPOS.GITHUB_REPOS.LICENSES        AS lic
       ON lic."repo_name" = f."repo_name"
WHERE  f."path" ILIKE '%README.md'
  AND  TRIM(line.value::STRING) = 'Copyright (C) 2011 Samsung Electronics'
LIMIT 20;
```
[Corrected SQL]
2025-05-07 01:48:51 - Thread-101 (execute) - INFO - [Results for corrected sql]
No data found for the specified query.

[Results for corrected sql]
2025-05-07 01:49:52 - Thread-101 (execute) - INFO - [Corrected SQL]
```sql
--Description:  Search all README.md files for any line that contains the word
--“Samsung”.  This broader search helps verify if Samsung-related text exists in
--the sample data after the previous exact-match returned no rows.  We:
--1) Join SAMPLE_FILES and SAMPLE_CONTENTS on the file’s SHA-1 id to obtain
--   each README’s content, 
--2) Split the content into individual lines via CROSS JOIN LATERAL FLATTEN, 
--3) Filter to README paths (ILIKE '%README.md') and lines containing
--   “Samsung” (case-insensitive),
--4) Return the repository name and the matching line, limited to 20 results.

SELECT  f."repo_name",
        TRIM(line.value::STRING) AS "readme_line"
FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES    AS f
JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS AS c
      ON f."id" = c."id"
CROSS JOIN LATERAL FLATTEN( input => SPLIT(c."content", '\n') ) AS line
WHERE   f."path" ILIKE '%README.md'
  AND   line.value::STRING ILIKE '%Samsung%'
LIMIT 20;
```
[Corrected SQL]
2025-05-07 01:49:53 - Thread-101 (execute) - INFO - [Results for corrected sql]
No data found for the specified query.

[Results for corrected sql]
2025-05-07 01:51:08 - Thread-101 (execute) - INFO - [Corrected SQL]
```sql
--Description:  Verify whether any README.md lines in the sample set mention
--“Samsung”.  The query joins SAMPLE_FILES with SAMPLE_CONTENTS on the file
--SHA-1 “id”, splits each README into individual lines via CROSS JOIN LATERAL
--FLATTEN (alias line), filters to README paths (%README.md) and retains lines
--containing “Samsung” (case-insensitive).  It returns the repository name and
--the matching line text, limited to 20 rows for a quick scan.

SELECT  f."repo_name",
        TRIM(line.value::STRING) AS "matching_line"
FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES     AS f
JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS  AS c
       ON f."id" = c."id"
CROSS JOIN LATERAL FLATTEN( input => SPLIT(c."content", '\n') ) AS line
WHERE   f."path" ILIKE '%README.md'
  AND   line.value::STRING ILIKE '%Samsung%'
LIMIT 20;
```
[Corrected SQL]
2025-05-07 01:51:17 - Thread-101 (execute) - INFO - [Results for corrected sql]
No data found for the specified query.

[Results for corrected sql]
2025-05-07 01:51:17 - Thread-101 (execute) - INFO - itercount: 0
2025-05-07 01:51:17 - Thread-101 (execute) - INFO - [Self-refine]
Table full name: GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES
Column name: symlink_target Type: TEXT
Column name: id Type: TEXT
Column name: mode Type: NUMBER
Column name: path Type: TEXT
Column name: repo_name Type: TEXT
Column name: ref Type: TEXT
Sample rows:
[{'repo_name': 'dorimanx/DORIMANX_LG_STOCK_LP_KERNEL', 'ref': 'refs/heads/master', 'path': 'drivers/isdn/hisax/elsa.c', 'mode': 33188, 'id': '64ba26a4afe649818a23565fc4ae6631eaf9d9b1', 'symlink_target': None}, {'repo_name': 'dorimanx/DORIMANX_LG_STOCK_LP_KERNEL', 'ref': 'refs/heads/master', 'path': 'arch/arm/mach-pxa/include/mach/smemc.h', 'mode': 33188, 'id': 'b802f285fe00e6dd3b39af77e3b351d3a4343316', 'symlink_target': None}, {'repo_name': 'dorimanx/DORIMANX_LG_STOCK_LP_KERNEL', 'ref': 'refs/heads/master', 'path': 'drivers/i2c/busses/i2c-eg20t.c', 'mode': 33188, 'id': 'c811289b61e21628f28d79b71f27651c39e3e024', 'symlink_target': None}, {'repo_name': 'dorimanx/DORIMANX_LG_STOCK_LP_KERNEL', 'ref': 'refs/heads/master', 'path': 'arch/arm/mm/proc-arm920.S', 'mode': 33188, 'id': 'b06224a692b9bc255c860f959b7fe5913e957852', 'symlink_target': None}, {'repo_name': 'dorimanx/DORIMANX_LG_STOCK_LP_KERNEL', 'ref': 'refs/heads/master', 'path': 'drivers/video/msm/lcdc_external.c', 'mode': 33188, 'id': 'b699610f51077fda4568a25d8506c69d7a345658', 'symlink_target': None}]

--------------------------------------------------
Table full name: GITHUB_REPOS.GITHUB_REPOS.LANGUAGES
Column name: repo_name Type: TEXT
Column name: language Type: VARIANT
Sample rows:
[{'repo_name': 'debjyoti385/awesome-data-mining-datasets', 'language': '[]'}, {'repo_name': 'graidl/test', 'language': '[]'}, {'repo_name': 'iBeacons/grape', 'language': '[]'}, {'repo_name': 'swapnil-pimpale/geep-kernel-training', 'language': '[]'}, {'repo_name': 'TheEvilDev/atom-yeoman', 'language': '[]'}]

--------------------------------------------------
Table full name: GITHUB_REPOS.GITHUB_REPOS.LICENSES
Column name: repo_name Type: TEXT
Column name: license Type: TEXT
Sample rows:
[{'repo_name': 'npm/npmconf', 'license': 'isc'}, {'repo_name': 'live627/shiny-bear', 'license': 'isc'}, {'repo_name': 'k7hoven/spexcript', 'license': 'isc'}, {'repo_name': 'photofroggy/Reflex', 'license': 'isc'}, {'repo_name': 'sr-cafe/topisto', 'license': 'isc'}]

--------------------------------------------------
Table full name: GITHUB_REPOS.GITHUB_REPOS.SAMPLE_COMMITS
Column name: parent Type: VARIANT
Column name: committer Type: VARIANT
Column name: difference Type: VARIANT
Column name: message Type: TEXT
Column name: author Type: VARIANT
Column name: difference_truncated Type: BOOLEAN
Column name: subject Type: TEXT
Column name: trailer Type: VARIANT
Column name: encoding Type: TEXT
Column name: commit Type: TEXT
Column name: repo_name Type: TEXT
Column name: tree Type: TEXT
Sample rows:
[{'commit': '76cdd58e558669366adfaded436fda01b30cce3e', 'tree': 'deaccb499752c928919693edea65f9ea4c1fe756', 'parent': '[\n  "1c12c4cf9411eb130b245fa8d0fbbaf989477c7b"\n]', 'author': '{\n  "date": 1210806352000000,\n  "email": "8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com",\n  "name": "Heiko Carstens",\n  "time_sec": 1210806352,\n  "tz_offset": -420\n}', 'committer': '{\n  "date": 1210817475000000,\n  "email": "69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org",\n  "name": "Linus Torvalds",\n  "time_sec": 1210817475,\n  "tz_offset": -420\n}', 'subject': 'memory_hotplug: always initialize pageblock bitmap', 'message': 'memory_hotplug: always initialize pageblock bitmap\n\nTrying to online a new memory section that was added via memory hotplug\nsometimes results in crashes when the new pages are added via __free_page.\n Reason for that is that the pageblock bitmap isn\'t initialized and hence\ncontains random stuff.  That means that get_pageblock_migratetype()\nreturns also random stuff and therefore\n\n\tlist_add(&page->lru,\n\t\t&zone->free_area[order].free_list[migratetype]);\n\nin __free_one_page() tries to do a list_add to something that isn\'t even\nnecessarily a list.\n\nThis happens since 86051ca5eaf5e560113ec7673462804c54284456 ("mm: fix\nusemap initialization") which makes sure that the pageblock bitmap gets\nonly initialized for pages present in a zone.  Unfortunately for hot-added\nmemory the zones "grow" after the memmap and the pageblock memmap have\nbeen initialized.  Which means that the new pages have an unitialized\nbitmap.  To solve this the calls to grow_zone_span() and grow_pgdat_span()\nare moved to __add_zone() just before the initialization happens.\n\nThe patch also moves the two functions since __add_zone() is the only\ncaller and I didn\'t want to add a forward declaration.\n\nSigned-off-by: Heiko Carstens <8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com>\nCc: Andy Whitcroft <b4658fdd7fbd645c2859b0e39d71018f32058d12@shadowen.org>\nCc: Dave Hansen <e169c2064f54e292652f83bb35eed10e1aa33f38@us.ibm.com>\nCc: Gerald Schaefer <7a67bf9a8691f9f1ca8ce9577e14c37413ea5f58@de.ibm.com>\nCc: KAMEZAWA Hiroyuki <634f508bd7c47cf0ee4126243675c3e598920fbc@jp.fujitsu.com>\nCc: Yasunori Goto <5e8c143c1cccd8ccee45b5a7b90115158373a5d7@jp.fujitsu.com>\nCc: <4fbacc2fa0ffdbb11bf1ad6925b886ebd08dd15f@kernel.org>\nSigned-off-by: Andrew Morton <5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org>\nSigned-off-by: Linus Torvalds <69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org>\n', 'trailer': '[\n  {\n    "email": "8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com",\n    "key": "Signed-off-by",\n    "value": "Heiko Carstens <8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com>"\n  },\n  {\n    "email": "b4658fdd7fbd645c2859b0e39d71018f32058d12@shadowen.org",\n    "key": "Cc",\n    "value": "Andy Whitcroft <b4658fdd7fbd645c2859b0e39d71018f32058d12@shadowen.org>"\n  },\n  {\n    "email": "e169c2064f54e292652f83bb35eed10e1aa33f38@us.ibm.com",\n    "key": "Cc",\n    "value": "Dave Hansen <e169c2064f54e292652f83bb35eed10e1aa33f38@us.ibm.com>"\n  },\n  {\n    "email": "7a67bf9a8691f9f1ca8ce9577e14c37413ea5f58@de.ibm.com",\n    "key": "Cc",\n    "value": "Gerald Schaefer <7a67bf9a8691f9f1ca8ce9577e14c37413ea5f58@de.ibm.com>"\n  },\n  {\n    "email": "634f508bd7c47cf0ee4126243675c3e598920fbc@jp.fujitsu.com",\n    "key": "Cc",\n    "value": "KAMEZAWA Hiroyuki <634f508bd7c47cf0ee4126243675c3e598920fbc@jp.fujitsu.com>"\n  },\n  {\n    "email": "5e8c143c1cccd8ccee45b5a7b90115158373a5d7@jp.fujitsu.com",\n    "key": "Cc",\n    "value": "Yasunori Goto <5e8c143c1cccd8ccee45b5a7b90115158373a5d7@jp.fujitsu.com>"\n  },\n  {\n    "email": "4fbacc2fa0ffdbb11bf1ad6925b886ebd08dd15f@kernel.org",\n    "key": "Cc",\n    "value": "<4fbacc2fa0ffdbb11bf1ad6925b886ebd08dd15f@kernel.org>"\n  },\n  {\n    "email": "5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org",\n    "key": "Signed-off-by",\n    "value": "Andrew Morton <5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org>"\n  },\n  {\n    "email": "69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org",\n    "key": "Signed-off-by",\n    "value": "Linus Torvalds <69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org>"\n  }\n]', 'difference': '[\n  {\n    "new_mode": 33188,\n    "new_path": "mm/memory_hotplug.c",\n    "new_sha1": "833f854eabe50ad226696667db7e49d332840bb6",\n    "old_mode": 33188,\n    "old_path": "mm/memory_hotplug.c",\n    "old_sha1": "656ad1c65422f0440a56b422b8431891e5304827"\n  },\n  {\n    "new_mode": 33188,\n    "new_path": "mm/page_alloc.c",\n    "new_sha1": "63835579323a7ca70722154f5b3e6560872da409",\n    "old_mode": 33188,\n    "old_path": "mm/page_alloc.c",\n    "old_sha1": "bdd5c432c426fdf6714ff90e1eebdfccfdccee8c"\n  }\n]', 'difference_truncated': None, 'repo_name': 'torvalds/linux', 'encoding': None}, {'commit': '2565409fc0303f3ab8d66b8326702a687962a29b', 'tree': 'b57f238d77ee87a991371a7021462b8c71351659', 'parent': '[\n  "4156153c4daddf12dd386016f96a947a01e93bf4"\n]', 'author': '{\n  "date": 1326417453000000,\n  "email": "8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com",\n  "name": "Heiko Carstens",\n  "time_sec": 1326417453,\n  "tz_offset": -480\n}', 'committer': '{\n  "date": 1326427983000000,\n  "email": "69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org",\n  "name": "Linus Torvalds",\n  "time_sec": 1326427983,\n  "tz_offset": -480\n}', 'subject': 'mm,x86,um: move CMPXCHG_DOUBLE config option', 'message': 'mm,x86,um: move CMPXCHG_DOUBLE config option\n\nMove CMPXCHG_DOUBLE and rename it to HAVE_CMPXCHG_DOUBLE so architectures\ncan simply select the option if it is supported.\n\nSigned-off-by: Heiko Carstens <8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com>\nAcked-by: Christoph Lameter <ef3ecccf258fa062c5c6521a4887d40541963af7@linux.com>\nCc: Pekka Enberg <add4fcd06328a394f0ad91feda7ee057316dc5ed@kernel.org>\nCc: Ingo Molnar <9dbbbf0688fedc85ad4da37637f1a64b8c718ee2@elte.hu>\nCc: Thomas Gleixner <00e4cf8f46a57000a44449bf9dd8cbbcc209fd2a@linutronix.de>\nCc: "H. Peter Anvin" <8a453bad9912ffe59bc0f0b8abe03df9be19379e@zytor.com>\nSigned-off-by: Andrew Morton <5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org>\nSigned-off-by: Linus Torvalds <69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org>\n', 'trailer': '[\n  {\n    "email": "8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com",\n    "key": "Signed-off-by",\n    "value": "Heiko Carstens <8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com>"\n  },\n  {\n    "email": "ef3ecccf258fa062c5c6521a4887d40541963af7@linux.com",\n    "key": "Acked-by",\n    "value": "Christoph Lameter <ef3ecccf258fa062c5c6521a4887d40541963af7@linux.com>"\n  },\n  {\n    "email": "add4fcd06328a394f0ad91feda7ee057316dc5ed@kernel.org",\n    "key": "Cc",\n    "value": "Pekka Enberg <add4fcd06328a394f0ad91feda7ee057316dc5ed@kernel.org>"\n  },\n  {\n    "email": "9dbbbf0688fedc85ad4da37637f1a64b8c718ee2@elte.hu",\n    "key": "Cc",\n    "value": "Ingo Molnar <9dbbbf0688fedc85ad4da37637f1a64b8c718ee2@elte.hu>"\n  },\n  {\n    "email": "00e4cf8f46a57000a44449bf9dd8cbbcc209fd2a@linutronix.de",\n    "key": "Cc",\n    "value": "Thomas Gleixner <00e4cf8f46a57000a44449bf9dd8cbbcc209fd2a@linutronix.de>"\n  },\n  {\n    "email": "8a453bad9912ffe59bc0f0b8abe03df9be19379e@zytor.com",\n    "key": "Cc",\n    "value": "\\"H. Peter Anvin\\" <8a453bad9912ffe59bc0f0b8abe03df9be19379e@zytor.com>"\n  },\n  {\n    "email": "5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org",\n    "key": "Signed-off-by",\n    "value": "Andrew Morton <5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org>"\n  },\n  {\n    "email": "69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org",\n    "key": "Signed-off-by",\n    "value": "Linus Torvalds <69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org>"\n  }\n]', 'difference': '[\n  {\n    "new_mode": 33188,\n    "new_path": "arch/Kconfig",\n    "new_sha1": "4f55c736be11ea3aa3ac6762b0ec3d1371b872ce",\n    "old_mode": 33188,\n    "old_path": "arch/Kconfig",\n    "old_sha1": "22182a8cc62c9610edaaf5aefaef83b8de07af71"\n  },\n  {\n    "new_mode": 33188,\n    "new_path": "arch/x86/Kconfig",\n    "new_sha1": "6c14ecd851d0b3ae9d32cbd73ce97419b1cb4a48",\n    "old_mode": 33188,\n    "old_path": "arch/x86/Kconfig",\n    "old_sha1": "59717fd17bc738720860e0b3f9d67ad3af211441"\n  },\n  {\n    "new_mode": 33188,\n    "new_path": "arch/x86/Kconfig.cpu",\n    "new_sha1": "3c57033e22118f2ce7771d10fa8305193c94af20",\n    "old_mode": 33188,\n    "old_path": "arch/x86/Kconfig.cpu",\n    "old_sha1": "99d2ab8b77953bde375e44328604aee7473fdd59"\n  },\n  {\n    "new_mode": 33188,\n    "new_path": "arch/x86/um/Kconfig",\n    "new_sha1": "b2b54d2edf53979fb7daf770c0d4bf0215a73fe0",\n    "old_mode": 33188,\n    "old_path": "arch/x86/um/Kconfig",\n    "old_sha1": "a62bfc66239ec5bd7aac0d7b423e817c7ace85ce"\n  },\n  {\n    "new_mode": 33188,\n    "new_path": "mm/slub.c",\n    "new_sha1": "4907563ef7ff7e199577f5d2ffedda6fa358271e",\n    "old_mode": 33188,\n    "old_path": "mm/slub.c",\n    "old_sha1": "72aa8413460932bf0826cf3d40bf52798a0e9ab9"\n  }\n]', 'difference_truncated': None, 'repo_name': 'torvalds/linux', 'encoding': None}, {'commit': '7779d7bed950a7fb1af4f540c2f82a6b81b65901', 'tree': 'ca8e8d16a3f50d670f95b3b51c1aaad81a0e05f8', 'parent': '[\n  "29f12ca32122db98481150be09d35bd72b68045e"\n]', 'author': '{\n  "date": 1257978394000000,\n  "email": "8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com",\n  "name": "Heiko Carstens",\n  "time_sec": 1257978394,\n  "tz_offset": -480\n}', 'committer': '{\n  "date": 1258039557000000,\n  "email": "69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org",\n  "name": "Linus Torvalds",\n  "time_sec": 1258039557,\n  "tz_offset": -480\n}', 'subject': 'fs: add missing compat_ptr handling for FS_IOC_RESVSP ioctl', 'message': 'fs: add missing compat_ptr handling for FS_IOC_RESVSP ioctl\n\nFor FS_IOC_RESVSP and FS_IOC_RESVSP64 compat_sys_ioctl() uses its\narg argument as a pointer to userspace. However it is missing a\na call to compat_ptr() which will do a proper pointer conversion.\n\nThis was introduced with 3e63cbb1 "fs: Add new pre-allocation ioctls\nto vfs for compatibility with legacy xfs ioctls".\n\nSigned-off-by: Heiko Carstens <8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com>\nCc: Ankit Jain <b1c1d8736f20db3fb6c1c66bb1455ed43909f0d8@ankitjain.org>\nAcked-by: Christoph Hellwig <923f7720577207a44b32e59bbfbea59d27f1ae8e@lst.de>\nCc: Al Viro <de609eb4d5d70b1d38ec6642adbfc33a2781f63c@zeniv.linux.org.uk>\nAcked-by: Arnd Bergmann <e4472cc19f359953704d0123967dc8ec6d534e3c@googlemail.com>\nAcked-by: David S. Miller <fe08d3c717adf2ae63592e4c9aec6e3e404d8e3e@davemloft.net>\nCc: <4fbacc2fa0ffdbb11bf1ad6925b886ebd08dd15f@kernel.org>\t\t[2.6.31.x]\nSigned-off-by: Andrew Morton <5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org>\nSigned-off-by: Linus Torvalds <69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org>\n', 'trailer': '[\n  {\n    "email": "8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com",\n    "key": "Signed-off-by",\n    "value": "Heiko Carstens <8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com>"\n  },\n  {\n    "email": "b1c1d8736f20db3fb6c1c66bb1455ed43909f0d8@ankitjain.org",\n    "key": "Cc",\n    "value": "Ankit Jain <b1c1d8736f20db3fb6c1c66bb1455ed43909f0d8@ankitjain.org>"\n  },\n  {\n    "email": "923f7720577207a44b32e59bbfbea59d27f1ae8e@lst.de",\n    "key": "Acked-by",\n    "value": "Christoph Hellwig <923f7720577207a44b32e59bbfbea59d27f1ae8e@lst.de>"\n  },\n  {\n    "email": "de609eb4d5d70b1d38ec6642adbfc33a2781f63c@zeniv.linux.org.uk",\n    "key": "Cc",\n    "value": "Al Viro <de609eb4d5d70b1d38ec6642adbfc33a2781f63c@zeniv.linux.org.uk>"\n  },\n  {\n    "email": "e4472cc19f359953704d0123967dc8ec6d534e3c@googlemail.com",\n    "key": "Acked-by",\n    "value": "Arnd Bergmann <e4472cc19f359953704d0123967dc8ec6d534e3c@googlemail.com>"\n  },\n  {\n    "email": "fe08d3c717adf2ae63592e4c9aec6e3e404d8e3e@davemloft.net",\n    "key": "Acked-by",\n    "value": "David S. Miller <fe08d3c717adf2ae63592e4c9aec6e3e404d8e3e@davemloft.net>"\n  },\n  {\n    "email": "4fbacc2fa0ffdbb11bf1ad6925b886ebd08dd15f@kernel.org",\n    "key": "Cc",\n    "value": "<4fbacc2fa0ffdbb11bf1ad6925b886ebd08dd15f@kernel.org>\\t\\t[2.6.31.x]"\n  },\n  {\n    "email": "5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org",\n    "key": "Signed-off-by",\n    "value": "Andrew Morton <5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org>"\n  },\n  {\n    "email": "69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org",\n    "key": "Signed-off-by",\n    "value": "Linus Torvalds <69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org>"\n  }\n]', 'difference': '[\n  {\n    "new_mode": 33188,\n    "new_path": "fs/compat_ioctl.c",\n    "new_sha1": "d84e7058c298a56dd9b22c6c6fa6fb286fb730c9",\n    "old_mode": 33188,\n    "old_path": "fs/compat_ioctl.c",\n    "old_sha1": "f91fd51b32e321efc97a61b0d79274ecd81533ca"\n  }\n]', 'difference_truncated': None, 'repo_name': 'torvalds/linux', 'encoding': None}, {'commit': '42e41c54d61e32e8a349943607daa53205324d7f', 'tree': 'a38050a0b2e716100372601262273cdbd195baf8', 'parent': '[\n  "0487683096decad0720dfaf80b9d28173d5f6662"\n]', 'author': '{\n  "date": 1253577880000000,\n  "email": "8f3f75c74bd5184edcfa6534cab3c13a00a2f794@gentoo.org",\n  "name": "Mike Frysinger",\n  "time_sec": 1253577880,\n  "tz_offset": -420\n}', 'committer': '{\n  "date": 1253629068000000,\n  "email": "69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org",\n  "name": "Linus Torvalds",\n  "time_sec": 1253629068,\n  "tz_offset": -420\n}', 'subject': 'checkpatch: add some common Blackfin checks', 'message': 'checkpatch: add some common Blackfin checks\n\nAdd checks for Blackfin-specific issues that seem to crop up from time to\ntime.  In particular, we have helper macros to break a 32bit address into\nthe hi/lo parts, and we want to make sure people use the csync/ssync\nvariant that includes fun anomaly workarounds.\n\nSigned-off-by: Mike Frysinger <8f3f75c74bd5184edcfa6534cab3c13a00a2f794@gentoo.org>\nSigned-off-by: Bryan Wu <956b36c0f472d2edb239225c10f7e4411d1efbb9@kernel.org>\nCc: Andy Whitcroft <b4658fdd7fbd645c2859b0e39d71018f32058d12@shadowen.org>\nSigned-off-by: Andrew Morton <5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org>\nSigned-off-by: Linus Torvalds <69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org>\n', 'trailer': '[\n  {\n    "email": "8f3f75c74bd5184edcfa6534cab3c13a00a2f794@gentoo.org",\n    "key": "Signed-off-by",\n    "value": "Mike Frysinger <8f3f75c74bd5184edcfa6534cab3c13a00a2f794@gentoo.org>"\n  },\n  {\n    "email": "956b36c0f472d2edb239225c10f7e4411d1efbb9@kernel.org",\n    "key": "Signed-off-by",\n    "value": "Bryan Wu <956b36c0f472d2edb239225c10f7e4411d1efbb9@kernel.org>"\n  },\n  {\n    "email": "b4658fdd7fbd645c2859b0e39d71018f32058d12@shadowen.org",\n    "key": "Cc",\n    "value": "Andy Whitcroft <b4658fdd7fbd645c2859b0e39d71018f32058d12@shadowen.org>"\n  },\n  {\n    "email": "5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org",\n    "key": "Signed-off-by",\n    "value": "Andrew Morton <5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org>"\n  },\n  {\n    "email": "69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org",\n    "key": "Signed-off-by",\n    "value": "Linus Torvalds <69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org>"\n  }\n]', 'difference': '[\n  {\n    "new_mode": 33261,\n    "new_path": "scripts/checkpatch.pl",\n    "new_sha1": "87bbb8bce9bfe3702a3e6b896dce4338bf4f6d2d",\n    "old_mode": 33261,\n    "old_path": "scripts/checkpatch.pl",\n    "old_sha1": "8b1dfd544c6430595873c3f659189074ea090e78"\n  }\n]', 'difference_truncated': None, 'repo_name': 'torvalds/linux', 'encoding': None}, {'commit': '46c529cf79f6c7b239f83b4997d676dd5b51908c', 'tree': '2d04be82f11d82a48ab3b72fa0e71862bed24ffa', 'parent': '[\n  "c68d2b1594548cda7f6dbac6a4d9d30a9b01558c"\n]', 'author': '{\n  "date": 1256601006000000,\n  "email": "8f3f75c74bd5184edcfa6534cab3c13a00a2f794@gentoo.org",\n  "name": "Mike Frysinger",\n  "time_sec": 1256601006,\n  "tz_offset": -420\n}', 'committer': '{\n  "date": 1256827170000000,\n  "email": "69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org",\n  "name": "Linus Torvalds",\n  "time_sec": 1256827170,\n  "tz_offset": -420\n}', 'subject': 'twl4030-gpio: remove __devexit markings from remove func', 'message': 'twl4030-gpio: remove __devexit markings from remove func\n\nThe gpio_twl4030_probe() function calls gpio_twl4030_remove(), and the\nformer has __devinit, so the latter cannot use __devexit.  Otherwise we\nhit the section mismatch warning:\n\nWARNING: drivers/gpio/built-in.o(.devinit.text+0x71a): Section mismatch\n\tin reference from the function _gpio_twl4030_probe() to the function\n\t.devexit.text:_gpio_twl4030_remove()\nThe function __devinit _gpio_twl4030_probe() references a function\n\t__devexit _gpio_twl4030_remove().\nThis is often seen when error handling in the init function uses\n\tfunctionality in the exit path.\nThe fix is often to remove the __devexit annotation of\n\t_gpio_twl4030_remove() so it may be used outside an exit section.\n\nSigned-off-by: Mike Frysinger <8f3f75c74bd5184edcfa6534cab3c13a00a2f794@gentoo.org>\nCc: David Brownell <e543181633fc0fc2787945ef377537d9112d0c96@pacbell.net>\nSigned-off-by: Andrew Morton <5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org>\nSigned-off-by: Linus Torvalds <69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org>\n', 'trailer': '[\n  {\n    "email": "8f3f75c74bd5184edcfa6534cab3c13a00a2f794@gentoo.org",\n    "key": "Signed-off-by",\n    "value": "Mike Frysinger <8f3f75c74bd5184edcfa6534cab3c13a00a2f794@gentoo.org>"\n  },\n  {\n    "email": "e543181633fc0fc2787945ef377537d9112d0c96@pacbell.net",\n    "key": "Cc",\n    "value": "David Brownell <e543181633fc0fc2787945ef377537d9112d0c96@pacbell.net>"\n  },\n  {\n    "email": "5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org",\n    "key": "Signed-off-by",\n    "value": "Andrew Morton <5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org>"\n  },\n  {\n    "email": "69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org",\n    "key": "Signed-off-by",\n    "value": "Linus Torvalds <69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org>"\n  }\n]', 'difference': '[\n  {\n    "new_mode": 33188,\n    "new_path": "drivers/gpio/twl4030-gpio.c",\n    "new_sha1": "49384a7c54920399e2d629d3e87b6986b3a964eb",\n    "old_mode": 33188,\n    "old_path": "drivers/gpio/twl4030-gpio.c",\n    "old_sha1": "afad14792141116898c6291288616b23e9308a36"\n  }\n]', 'difference_truncated': None, 'repo_name': 'torvalds/linux', 'encoding': None}]

--------------------------------------------------
Table full name: GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
Column name: size Type: NUMBER
Column name: binary Type: BOOLEAN
Column name: sample_symlink_target Type: TEXT
Column name: copies Type: NUMBER
Column name: sample_mode Type: NUMBER
Column name: sample_path Type: TEXT
Column name: content Type: TEXT
Column name: sample_ref Type: TEXT
Column name: id Type: TEXT
Column name: sample_repo_name Type: TEXT
Sample rows:
[{'id': '2dd586a19b594a73e9c6f7485d1e5da9203a4467', 'size': 21447, 'content': '/*\n * rtc-ds1305.c -- driver for DS1305 and DS1306 SPI RTC chips\n *\n * Copyright (C) 2008 David Brownell\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation.\n *\n */\n#include <linux/kernel.h>\n#include <linux/init.h>\n#include <linux/bcd.h>\n#include <linux/slab.h>\n#include <linux/rtc.h>\n#include <linux/workqueue.h>\n\n#include <linux/spi/spi.h>\n#include <linux/spi/ds1305.h>\n#include <linux/module.h>\n\n\n/*\n * Registers ... mask DS1305_WRITE into register address to write,\n * otherwise you\'re reading it.  All non-bitmask values are BCD.\n */\n#define DS1305_WRITE\t\t0x80\n\n\n/* RTC date/time ... the main special cases are that we:\n *  - Need fancy "hours" encoding in 12hour mode\n *  - Don\'t rely on the "day-of-week" field (or tm_wday)\n *  - Are a 21st-century clock (2000 <= year < 2100)\n */\n#define DS1305_RTC_LEN\t\t7\t\t/* bytes for RTC regs */\n\n#define DS1305_SEC\t\t0x00\t\t/* register addresses */\n#define DS1305_MIN\t\t0x01\n#define DS1305_HOUR\t\t0x02\n#\tdefine DS1305_HR_12\t\t0x40\t/* set == 12 hr mode */\n#\tdefine DS1305_HR_PM\t\t0x20\t/* set == PM (12hr mode) */\n#define DS1305_WDAY\t\t0x03\n#define DS1305_MDAY\t\t0x04\n#define DS1305_MON\t\t0x05\n#define DS1305_YEAR\t\t0x06\n\n\n/* The two alarms have only sec/min/hour/wday fields (ALM_LEN).\n * DS1305_ALM_DISABLE disables a match field (some combos are bad).\n *\n * NOTE that since we don\'t use WDAY, we limit ourselves to alarms\n * only one day into the future (vs potentially up to a week).\n *\n * NOTE ALSO that while we could generate once-a-second IRQs (UIE), we\n * don\'t currently support them.  We\'d either need to do it only when\n * no alarm is pending (not the standard model), or to use the second\n * alarm (implying that this is a DS1305 not DS1306, *and* that either\n * it\'s wired up a second IRQ we know, or that INTCN is set)\n */\n#define DS1305_ALM_LEN\t\t4\t\t/* bytes for ALM regs */\n#define DS1305_ALM_DISABLE\t0x80\n\n#define DS1305_ALM0(r)\t\t(0x07 + (r))\t/* register addresses */\n#define DS1305_ALM1(r)\t\t(0x0b + (r))\n\n\n/* three control registers */\n#define DS1305_CONTROL_LEN\t3\t\t/* bytes of control regs */\n\n#define DS1305_CONTROL\t\t0x0f\t\t/* register addresses */\n#\tdefine DS1305_nEOSC\t\t0x80\t/* low enables oscillator */\n#\tdefine DS1305_WP\t\t0x40\t/* write protect */\n#\tdefine DS1305_INTCN\t\t0x04\t/* clear == only int0 used */\n#\tdefine DS1306_1HZ\t\t0x04\t/* enable 1Hz output */\n#\tdefine DS1305_AEI1\t\t0x02\t/* enable ALM1 IRQ */\n#\tdefine DS1305_AEI0\t\t0x01\t/* enable ALM0 IRQ */\n#define DS1305_STATUS\t\t0x10\n/* status has just AEIx bits, mirrored as IRQFx */\n#define DS1305_TRICKLE\t\t0x11\n/* trickle bits are defined in <linux/spi/ds1305.h> */\n\n/* a bunch of NVRAM */\n#define DS1305_NVRAM_LEN\t96\t\t/* bytes of NVRAM */\n\n#define DS1305_NVRAM\t\t0x20\t\t/* register addresses */\n\n\nstruct ds1305 {\n\tstruct spi_device\t*spi;\n\tstruct rtc_device\t*rtc;\n\n\tstruct work_struct\twork;\n\n\tunsigned long\t\tflags;\n#define FLAG_EXITING\t0\n\n\tbool\t\t\thr12;\n\tu8\t\t\tctrl[DS1305_CONTROL_LEN];\n};\n\n\n/*----------------------------------------------------------------------*/\n\n/*\n * Utilities ...  tolerate 12-hour AM/PM notation in case of non-Linux\n * software (like a bootloader) which may require it.\n */\n\nstatic unsigned bcd2hour(u8 bcd)\n{\n\tif (bcd & DS1305_HR_12) {\n\t\tunsigned\thour = 0;\n\n\t\tbcd &= ~DS1305_HR_12;\n\t\tif (bcd & DS1305_HR_PM) {\n\t\t\thour = 12;\n\t\t\tbcd &= ~DS1305_HR_PM;\n\t\t}\n\t\thour += bcd2bin(bcd);\n\t\treturn hour - 1;\n\t}\n\treturn bcd2bin(bcd);\n}\n\nstatic u8 hour2bcd(bool hr12, int hour)\n{\n\tif (hr12) {\n\t\thour++;\n\t\tif (hour <= 12)\n\t\t\treturn DS1305_HR_12 | bin2bcd(hour);\n\t\thour -= 12;\n\t\treturn DS1305_HR_12 | DS1305_HR_PM | bin2bcd(hour);\n\t}\n\treturn bin2bcd(hour);\n}\n\n/*----------------------------------------------------------------------*/\n\n/*\n * Interface to RTC framework\n */\n\nstatic int ds1305_alarm_irq_enable(struct device *dev, unsigned int enabled)\n{\n\tstruct ds1305\t*ds1305 = dev_get_drvdata(dev);\n\tu8\t\tbuf[2];\n\tlong\t\terr = -EINVAL;\n\n\tbuf[0] = DS1305_WRITE | DS1305_CONTROL;\n\tbuf[1] = ds1305->ctrl[0];\n\n\tif (enabled) {\n\t\tif (ds1305->ctrl[0] & DS1305_AEI0)\n\t\t\tgoto done;\n\t\tbuf[1] |= DS1305_AEI0;\n\t} else {\n\t\tif (!(buf[1] & DS1305_AEI0))\n\t\t\tgoto done;\n\t\tbuf[1] &= ~DS1305_AEI0;\n\t}\n\terr = spi_write_then_read(ds1305->spi, buf, sizeof(buf), NULL, 0);\n\tif (err >= 0)\n\t\tds1305->ctrl[0] = buf[1];\ndone:\n\treturn err;\n\n}\n\n\n/*\n * Get/set of date and time is pretty normal.\n */\n\nstatic int ds1305_get_time(struct device *dev, struct rtc_time *time)\n{\n\tstruct ds1305\t*ds1305 = dev_get_drvdata(dev);\n\tu8\t\taddr = DS1305_SEC;\n\tu8\t\tbuf[DS1305_RTC_LEN];\n\tint\t\tstatus;\n\n\t/* Use write-then-read to get all the date/time registers\n\t * since dma from stack is nonportable\n\t */\n\tstatus = spi_write_then_read(ds1305->spi, &addr, sizeof(addr),\n\t\t\tbuf, sizeof(buf));\n\tif (status < 0)\n\t\treturn status;\n\n\tdev_vdbg(dev, "%s: %02x %02x %02x, %02x %02x %02x %02x\\n",\n\t\t"read", buf[0], buf[1], buf[2], buf[3],\n\t\tbuf[4], buf[5], buf[6]);\n\n\t/* Decode the registers */\n\ttime->tm_sec = bcd2bin(buf[DS1305_SEC]);\n\ttime->tm_min = bcd2bin(buf[DS1305_MIN]);\n\ttime->tm_hour = bcd2hour(buf[DS1305_HOUR]);\n\ttime->tm_wday = buf[DS1305_WDAY] - 1;\n\ttime->tm_mday = bcd2bin(buf[DS1305_MDAY]);\n\ttime->tm_mon = bcd2bin(buf[DS1305_MON]) - 1;\n\ttime->tm_year = bcd2bin(buf[DS1305_YEAR]) + 100;\n\n\tdev_vdbg(dev, "%s secs=%d, mins=%d, "\n\t\t"hours=%d, mday=%d, mon=%d, year=%d, wday=%d\\n",\n\t\t"read", time->tm_sec, time->tm_min,\n\t\ttime->tm_hour, time->tm_mday,\n\t\ttime->tm_mon, time->tm_year, time->tm_wday);\n\n\t/* Time may not be set */\n\treturn rtc_valid_tm(time);\n}\n\nstatic int ds1305_set_time(struct device *dev, struct rtc_time *time)\n{\n\tstruct ds1305\t*ds1305 = dev_get_drvdata(dev);\n\tu8\t\tbuf[1 + DS1305_RTC_LEN];\n\tu8\t\t*bp = buf;\n\n\tdev_vdbg(dev, "%s secs=%d, mins=%d, "\n\t\t"hours=%d, mday=%d, mon=%d, year=%d, wday=%d\\n",\n\t\t"write", time->tm_sec, time->tm_min,\n\t\ttime->tm_hour, time->tm_mday,\n\t\ttime->tm_mon, time->tm_year, time->tm_wday);\n\n\t/* Write registers starting at the first time/date address. */\n\t*bp++ = DS1305_WRITE | DS1305_SEC;\n\n\t*bp++ = bin2bcd(time->tm_sec);\n\t*bp++ = bin2bcd(time->tm_min);\n\t*bp++ = hour2bcd(ds1305->hr12, time->tm_hour);\n\t*bp++ = (time->tm_wday < 7) ? (time->tm_wday + 1) : 1;\n\t*bp++ = bin2bcd(time->tm_mday);\n\t*bp++ = bin2bcd(time->tm_mon + 1);\n\t*bp++ = bin2bcd(time->tm_year - 100);\n\n\tdev_dbg(dev, "%s: %02x %02x %02x, %02x %02x %02x %02x\\n",\n\t\t"write", buf[1], buf[2], buf[3],\n\t\tbuf[4], buf[5], buf[6], buf[7]);\n\n\t/* use write-then-read since dma from stack is nonportable */\n\treturn spi_write_then_read(ds1305->spi, buf, sizeof(buf),\n\t\t\tNULL, 0);\n}\n\n/*\n * Get/set of alarm is a bit funky:\n *\n * - First there\'s the inherent raciness of getting the (partitioned)\n *   status of an alarm that could trigger while we\'re reading parts\n *   of that status.\n *\n * - Second there\'s its limited range (we could increase it a bit by\n *   relying on WDAY), which means it will easily roll over.\n *\n * - Third there\'s the choice of two alarms and alarm signals.\n *   Here we use ALM0 and expect that nINT0 (open drain) is used;\n *   that\'s the only real option for DS1306 runtime alarms, and is\n *   natural on DS1305.\n *\n * - Fourth, there\'s also ALM1, and a second interrupt signal:\n *     + On DS1305 ALM1 uses nINT1 (when INTCN=1) else nINT0;\n *     + On DS1306 ALM1 only uses INT1 (an active high pulse)\n *       and it won\'t work when VCC1 is active.\n *\n *   So to be most general, we should probably set both alarms to the\n *   same value, letting ALM1 be the wakeup event source on DS1306\n *   and handling several wiring options on DS1305.\n *\n * - Fifth, we support the polled mode (as well as possible; why not?)\n *   even when no interrupt line is wired to an IRQ.\n */\n\n/*\n * Context: caller holds rtc->ops_lock (to protect ds1305->ctrl)\n */\nstatic int ds1305_get_alarm(struct device *dev, struct rtc_wkalrm *alm)\n{\n\tstruct ds1305\t*ds1305 = dev_get_drvdata(dev);\n\tstruct spi_device *spi = ds1305->spi;\n\tu8\t\taddr;\n\tint\t\tstatus;\n\tu8\t\tbuf[DS1305_ALM_LEN];\n\n\t/* Refresh control register cache BEFORE reading ALM0 registers,\n\t * since reading alarm registers acks any pending IRQ.  That\n\t * makes returning "pending" status a bit of a lie, but that bit\n\t * of EFI status is at best fragile anyway (given IRQ handlers).\n\t */\n\taddr = DS1305_CONTROL;\n\tstatus = spi_write_then_read(spi, &addr, sizeof(addr),\n\t\t\tds1305->ctrl, sizeof(ds1305->ctrl));\n\tif (status < 0)\n\t\treturn status;\n\n\talm->enabled = !!(ds1305->ctrl[0] & DS1305_AEI0);\n\talm->pending = !!(ds1305->ctrl[1] & DS1305_AEI0);\n\n\t/* get and check ALM0 registers */\n\taddr = DS1305_ALM0(DS1305_SEC);\n\tstatus = spi_write_then_read(spi, &addr, sizeof(addr),\n\t\t\tbuf, sizeof(buf));\n\tif (status < 0)\n\t\treturn status;\n\n\tdev_vdbg(dev, "%s: %02x %02x %02x %02x\\n",\n\t\t"alm0 read", buf[DS1305_SEC], buf[DS1305_MIN],\n\t\tbuf[DS1305_HOUR], buf[DS1305_WDAY]);\n\n\tif ((DS1305_ALM_DISABLE & buf[DS1305_SEC])\n\t\t\t|| (DS1305_ALM_DISABLE & buf[DS1305_MIN])\n\t\t\t|| (DS1305_ALM_DISABLE & buf[DS1305_HOUR]))\n\t\treturn -EIO;\n\n\t/* Stuff these values into alm->time and let RTC framework code\n\t * fill in the rest ... and also handle rollover to tomorrow when\n\t * that\'s needed.\n\t */\n\talm->time.tm_sec = bcd2bin(buf[DS1305_SEC]);\n\talm->time.tm_min = bcd2bin(buf[DS1305_MIN]);\n\talm->time.tm_hour = bcd2hour(buf[DS1305_HOUR]);\n\talm->time.tm_mday = -1;\n\talm->time.tm_mon = -1;\n\talm->time.tm_year = -1;\n\t/* next three fields are unused by Linux */\n\talm->time.tm_wday = -1;\n\talm->time.tm_mday = -1;\n\talm->time.tm_isdst = -1;\n\n\treturn 0;\n}\n\n/*\n * Context: caller holds rtc->ops_lock (to protect ds1305->ctrl)\n */\nstatic int ds1305_set_alarm(struct device *dev, struct rtc_wkalrm *alm)\n{\n\tstruct ds1305\t*ds1305 = dev_get_drvdata(dev);\n\tstruct spi_device *spi = ds1305->spi;\n\tunsigned long\tnow, later;\n\tstruct rtc_time\ttm;\n\tint\t\tstatus;\n\tu8\t\tbuf[1 + DS1305_ALM_LEN];\n\n\t/* convert desired alarm to time_t */\n\tstatus = rtc_tm_to_time(&alm->time, &later);\n\tif (status < 0)\n\t\treturn status;\n\n\t/* Read current time as time_t */\n\tstatus = ds1305_get_time(dev, &tm);\n\tif (status < 0)\n\t\treturn status;\n\tstatus = rtc_tm_to_time(&tm, &now);\n\tif (status < 0)\n\t\treturn status;\n\n\t/* make sure alarm fires within the next 24 hours */\n\tif (later <= now)\n\t\treturn -EINVAL;\n\tif ((later - now) > 24 * 60 * 60)\n\t\treturn -EDOM;\n\n\t/* disable alarm if needed */\n\tif (ds1305->ctrl[0] & DS1305_AEI0) {\n\t\tds1305->ctrl[0] &= ~DS1305_AEI0;\n\n\t\tbuf[0] = DS1305_WRITE | DS1305_CONTROL;\n\t\tbuf[1] = ds1305->ctrl[0];\n\t\tstatus = spi_write_then_read(ds1305->spi, buf, 2, NULL, 0);\n\t\tif (status < 0)\n\t\t\treturn status;\n\t}\n\n\t/* write alarm */\n\tbuf[0] = DS1305_WRITE | DS1305_ALM0(DS1305_SEC);\n\tbuf[1 + DS1305_SEC] = bin2bcd(alm->time.tm_sec);\n\tbuf[1 + DS1305_MIN] = bin2bcd(alm->time.tm_min);\n\tbuf[1 + DS1305_HOUR] = hour2bcd(ds1305->hr12, alm->time.tm_hour);\n\tbuf[1 + DS1305_WDAY] = DS1305_ALM_DISABLE;\n\n\tdev_dbg(dev, "%s: %02x %02x %02x %02x\\n",\n\t\t"alm0 write", buf[1 + DS1305_SEC], buf[1 + DS1305_MIN],\n\t\tbuf[1 + DS1305_HOUR], buf[1 + DS1305_WDAY]);\n\n\tstatus = spi_write_then_read(spi, buf, sizeof(buf), NULL, 0);\n\tif (status < 0)\n\t\treturn status;\n\n\t/* enable alarm if requested */\n\tif (alm->enabled) {\n\t\tds1305->ctrl[0] |= DS1305_AEI0;\n\n\t\tbuf[0] = DS1305_WRITE | DS1305_CONTROL;\n\t\tbuf[1] = ds1305->ctrl[0];\n\t\tstatus = spi_write_then_read(ds1305->spi, buf, 2, NULL, 0);\n\t}\n\n\treturn status;\n}\n\n#ifdef CONFIG_PROC_FS\n\nstatic int ds1305_proc(struct device *dev, struct seq_file *seq)\n{\n\tstruct ds1305\t*ds1305 = dev_get_drvdata(dev);\n\tchar\t\t*diodes = "no";\n\tchar\t\t*resistors = "";\n\n\t/* ctrl[2] is treated as read-only; no locking needed */\n\tif ((ds1305->ctrl[2] & 0xf0) == DS1305_TRICKLE_MAGIC) {\n\t\tswitch (ds1305->ctrl[2] & 0x0c) {\n\t\tcase DS1305_TRICKLE_DS2:\n\t\t\tdiodes = "2 diodes, ";\n\t\t\tbreak;\n\t\tcase DS1305_TRICKLE_DS1:\n\t\t\tdiodes = "1 diode, ";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tgoto done;\n\t\t}\n\t\tswitch (ds1305->ctrl[2] & 0x03) {\n\t\tcase DS1305_TRICKLE_2K:\n\t\t\tresistors = "2k Ohm";\n\t\t\tbreak;\n\t\tcase DS1305_TRICKLE_4K:\n\t\t\tresistors = "4k Ohm";\n\t\t\tbreak;\n\t\tcase DS1305_TRICKLE_8K:\n\t\t\tresistors = "8k Ohm";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tdiodes = "no";\n\t\t\tbreak;\n\t\t}\n\t}\n\ndone:\n\treturn seq_printf(seq,\n\t\t\t"trickle_charge\\t: %s%s\\n",\n\t\t\tdiodes, resistors);\n}\n\n#else\n#define ds1305_proc\tNULL\n#endif\n\nstatic const struct rtc_class_ops ds1305_ops = {\n\t.read_time\t= ds1305_get_time,\n\t.set_time\t= ds1305_set_time,\n\t.read_alarm\t= ds1305_get_alarm,\n\t.set_alarm\t= ds1305_set_alarm,\n\t.proc\t\t= ds1305_proc,\n\t.alarm_irq_enable = ds1305_alarm_irq_enable,\n};\n\nstatic void ds1305_work(struct work_struct *work)\n{\n\tstruct ds1305\t*ds1305 = container_of(work, struct ds1305, work);\n\tstruct mutex\t*lock = &ds1305->rtc->ops_lock;\n\tstruct spi_device *spi = ds1305->spi;\n\tu8\t\tbuf[3];\n\tint\t\tstatus;\n\n\t/* lock to protect ds1305->ctrl */\n\tmutex_lock(lock);\n\n\t/* Disable the IRQ, and clear its status ... for now, we "know"\n\t * that if more than one alarm is active, they\'re in sync.\n\t * Note that reading ALM data registers also clears IRQ status.\n\t */\n\tds1305->ctrl[0] &= ~(DS1305_AEI1 | DS1305_AEI0);\n\tds1305->ctrl[1] = 0;\n\n\tbuf[0] = DS1305_WRITE | DS1305_CONTROL;\n\tbuf[1] = ds1305->ctrl[0];\n\tbuf[2] = 0;\n\n\tstatus = spi_write_then_read(spi, buf, sizeof(buf),\n\t\t\tNULL, 0);\n\tif (status < 0)\n\t\tdev_dbg(&spi->dev, "clear irq --> %d\\n", status);\n\n\tmutex_unlock(lock);\n\n\tif (!test_bit(FLAG_EXITING, &ds1305->flags))\n\t\tenable_irq(spi->irq);\n\n\trtc_update_irq(ds1305->rtc, 1, RTC_AF | RTC_IRQF);\n}\n\n/*\n * This "real" IRQ handler hands off to a workqueue mostly to allow\n * mutex locking for ds1305->ctrl ... unlike I2C, we could issue async\n * I/O requests in IRQ context (to clear the IRQ status).\n */\nstatic irqreturn_t ds1305_irq(int irq, void *p)\n{\n\tstruct ds1305\t\t*ds1305 = p;\n\n\tdisable_irq(irq);\n\tschedule_work(&ds1305->work);\n\treturn IRQ_HANDLED;\n}\n\n/*----------------------------------------------------------------------*/\n\n/*\n * Interface for NVRAM\n */\n\nstatic void msg_init(struct spi_message *m, struct spi_transfer *x,\n\t\tu8 *addr, size_t count, char *tx, char *rx)\n{\n\tspi_message_init(m);\n\tmemset(x, 0, 2 * sizeof(*x));\n\n\tx->tx_buf = addr;\n\tx->len = 1;\n\tspi_message_add_tail(x, m);\n\n\tx++;\n\n\tx->tx_buf = tx;\n\tx->rx_buf = rx;\n\tx->len = count;\n\tspi_message_add_tail(x, m);\n}\n\nstatic ssize_t\nds1305_nvram_read(struct file *filp, struct kobject *kobj,\n\t\tstruct bin_attribute *attr,\n\t\tchar *buf, loff_t off, size_t count)\n{\n\tstruct spi_device\t*spi;\n\tu8\t\t\taddr;\n\tstruct spi_message\tm;\n\tstruct spi_transfer\tx[2];\n\tint\t\t\tstatus;\n\n\tspi = container_of(kobj, struct spi_device, dev.kobj);\n\n\tif (unlikely(off >= DS1305_NVRAM_LEN))\n\t\treturn 0;\n\tif (count >= DS1305_NVRAM_LEN)\n\t\tcount = DS1305_NVRAM_LEN;\n\tif ((off + count) > DS1305_NVRAM_LEN)\n\t\tcount = DS1305_NVRAM_LEN - off;\n\tif (unlikely(!count))\n\t\treturn count;\n\n\taddr = DS1305_NVRAM + off;\n\tmsg_init(&m, x, &addr, count, NULL, buf);\n\n\tstatus = spi_sync(spi, &m);\n\tif (status < 0)\n\t\tdev_err(&spi->dev, "nvram %s error %d\\n", "read", status);\n\treturn (status < 0) ? status : count;\n}\n\nstatic ssize_t\nds1305_nvram_write(struct file *filp, struct kobject *kobj,\n\t\tstruct bin_attribute *attr,\n\t\tchar *buf, loff_t off, size_t count)\n{\n\tstruct spi_device\t*spi;\n\tu8\t\t\taddr;\n\tstruct spi_message\tm;\n\tstruct spi_transfer\tx[2];\n\tint\t\t\tstatus;\n\n\tspi = container_of(kobj, struct spi_device, dev.kobj);\n\n\tif (unlikely(off >= DS1305_NVRAM_LEN))\n\t\treturn -EFBIG;\n\tif (count >= DS1305_NVRAM_LEN)\n\t\tcount = DS1305_NVRAM_LEN;\n\tif ((off + count) > DS1305_NVRAM_LEN)\n\t\tcount = DS1305_NVRAM_LEN - off;\n\tif (unlikely(!count))\n\t\treturn count;\n\n\taddr = (DS1305_WRITE | DS1305_NVRAM) + off;\n\tmsg_init(&m, x, &addr, count, buf, NULL);\n\n\tstatus = spi_sync(spi, &m);\n\tif (status < 0)\n\t\tdev_err(&spi->dev, "nvram %s error %d\\n", "write", status);\n\treturn (status < 0) ? status : count;\n}\n\nstatic struct bin_attribute nvram = {\n\t.attr.name\t= "nvram",\n\t.attr.mode\t= S_IRUGO | S_IWUSR,\n\t.read\t\t= ds1305_nvram_read,\n\t.write\t\t= ds1305_nvram_write,\n\t.size\t\t= DS1305_NVRAM_LEN,\n};\n\n/*----------------------------------------------------------------------*/\n\n/*\n * Interface to SPI stack\n */\n\nstatic int ds1305_probe(struct spi_device *spi)\n{\n\tstruct ds1305\t\t\t*ds1305;\n\tint\t\t\t\tstatus;\n\tu8\t\t\t\taddr, value;\n\tstruct ds1305_platform_data\t*pdata = dev_get_platdata(&spi->dev);\n\tbool\t\t\t\twrite_ctrl = false;\n\n\t/* Sanity check board setup data.  This may be hooked up\n\t * in 3wire mode, but we don\'t care.  Note that unless\n\t * there\'s an inverter in place, this needs SPI_CS_HIGH!\n\t */\n\tif ((spi->bits_per_word && spi->bits_per_word != 8)\n\t\t\t|| (spi->max_speed_hz > 2000000)\n\t\t\t|| !(spi->mode & SPI_CPHA))\n\t\treturn -EINVAL;\n\n\t/* set up driver data */\n\tds1305 = devm_kzalloc(&spi->dev, sizeof(*ds1305), GFP_KERNEL);\n\tif (!ds1305)\n\t\treturn -ENOMEM;\n\tds1305->spi = spi;\n\tspi_set_drvdata(spi, ds1305);\n\n\t/* read and cache control registers */\n\taddr = DS1305_CONTROL;\n\tstatus = spi_write_then_read(spi, &addr, sizeof(addr),\n\t\t\tds1305->ctrl, sizeof(ds1305->ctrl));\n\tif (status < 0) {\n\t\tdev_dbg(&spi->dev, "can\'t %s, %d\\n",\n\t\t\t\t"read", status);\n\t\treturn status;\n\t}\n\n\tdev_dbg(&spi->dev, "ctrl %s: %3ph\\n", "read", ds1305->ctrl);\n\n\t/* Sanity check register values ... partially compensating for the\n\t * fact that SPI has no device handshake.  A pullup on MISO would\n\t * make these tests fail; but not all systems will have one.  If\n\t * some register is neither 0x00 nor 0xff, a chip is likely there.\n\t */\n\tif ((ds1305->ctrl[0] & 0x38) != 0 || (ds1305->ctrl[1] & 0xfc) != 0) {\n\t\tdev_dbg(&spi->dev, "RTC chip is not present\\n");\n\t\treturn -ENODEV;\n\t}\n\tif (ds1305->ctrl[2] == 0)\n\t\tdev_dbg(&spi->dev, "chip may not be present\\n");\n\n\t/* enable writes if needed ... if we were paranoid it would\n\t * make sense to enable them only when absolutely necessary.\n\t */\n\tif (ds1305->ctrl[0] & DS1305_WP) {\n\t\tu8\t\tbuf[2];\n\n\t\tds1305->ctrl[0] &= ~DS1305_WP;\n\n\t\tbuf[0] = DS1305_WRITE | DS1305_CONTROL;\n\t\tbuf[1] = ds1305->ctrl[0];\n\t\tstatus = spi_write_then_read(spi, buf, sizeof(buf), NULL, 0);\n\n\t\tdev_dbg(&spi->dev, "clear WP --> %d\\n", status);\n\t\tif (status < 0)\n\t\t\treturn status;\n\t}\n\n\t/* on DS1305, maybe start oscillator; like most low power\n\t * oscillators, it may take a second to stabilize\n\t */\n\tif (ds1305->ctrl[0] & DS1305_nEOSC) {\n\t\tds1305->ctrl[0] &= ~DS1305_nEOSC;\n\t\twrite_ctrl = true;\n\t\tdev_warn(&spi->dev, "SET TIME!\\n");\n\t}\n\n\t/* ack any pending IRQs */\n\tif (ds1305->ctrl[1]) {\n\t\tds1305->ctrl[1] = 0;\n\t\twrite_ctrl = true;\n\t}\n\n\t/* this may need one-time (re)init */\n\tif (pdata) {\n\t\t/* maybe enable trickle charge */\n\t\tif (((ds1305->ctrl[2] & 0xf0) != DS1305_TRICKLE_MAGIC)) {\n\t\t\tds1305->ctrl[2] = DS1305_TRICKLE_MAGIC\n\t\t\t\t\t\t| pdata->trickle;\n\t\t\twrite_ctrl = true;\n\t\t}\n\n\t\t/* on DS1306, configure 1 Hz signal */\n\t\tif (pdata->is_ds1306) {\n\t\t\tif (pdata->en_1hz) {\n\t\t\t\tif (!(ds1305->ctrl[0] & DS1306_1HZ)) {\n\t\t\t\t\tds1305->ctrl[0] |= DS1306_1HZ;\n\t\t\t\t\twrite_ctrl = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (ds1305->ctrl[0] & DS1306_1HZ) {\n\t\t\t\t\tds1305->ctrl[0] &= ~DS1306_1HZ;\n\t\t\t\t\twrite_ctrl = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (write_ctrl) {\n\t\tu8\t\tbuf[4];\n\n\t\tbuf[0] = DS1305_WRITE | DS1305_CONTROL;\n\t\tbuf[1] = ds1305->ctrl[0];\n\t\tbuf[2] = ds1305->ctrl[1];\n\t\tbuf[3] = ds1305->ctrl[2];\n\t\tstatus = spi_write_then_read(spi, buf, sizeof(buf), NULL, 0);\n\t\tif (status < 0) {\n\t\t\tdev_dbg(&spi->dev, "can\'t %s, %d\\n",\n\t\t\t\t\t"write", status);\n\t\t\treturn status;\n\t\t}\n\n\t\tdev_dbg(&spi->dev, "ctrl %s: %3ph\\n", "write", ds1305->ctrl);\n\t}\n\n\t/* see if non-Linux software set up AM/PM mode */\n\taddr = DS1305_HOUR;\n\tstatus = spi_write_then_read(spi, &addr, sizeof(addr),\n\t\t\t\t&value, sizeof(value));\n\tif (status < 0) {\n\t\tdev_dbg(&spi->dev, "read HOUR --> %d\\n", status);\n\t\treturn status;\n\t}\n\n\tds1305->hr12 = (DS1305_HR_12 & value) != 0;\n\tif (ds1305->hr12)\n\t\tdev_dbg(&spi->dev, "AM/PM\\n");\n\n\t/* register RTC ... from here on, ds1305->ctrl needs locking */\n\tds1305->rtc = devm_rtc_device_register(&spi->dev, "ds1305",\n\t\t\t&ds1305_ops, THIS_MODULE);\n\tif (IS_ERR(ds1305->rtc)) {\n\t\tstatus = PTR_ERR(ds1305->rtc);\n\t\tdev_dbg(&spi->dev, "register rtc --> %d\\n", status);\n\t\treturn status;\n\t}\n\n\t/* Maybe set up alarm IRQ; be ready to handle it triggering right\n\t * away.  NOTE that we don\'t share this.  The signal is active low,\n\t * and we can\'t ack it before a SPI message delay.  We temporarily\n\t * disable the IRQ until it\'s acked, which lets us work with more\n\t * IRQ trigger modes (not all IRQ controllers can do falling edge).\n\t */\n\tif (spi->irq) {\n\t\tINIT_WORK(&ds1305->work, ds1305_work);\n\t\tstatus = devm_request_irq(&spi->dev, spi->irq, ds1305_irq,\n\t\t\t\t0, dev_name(&ds1305->rtc->dev), ds1305);\n\t\tif (status < 0) {\n\t\t\tdev_dbg(&spi->dev, "request_irq %d --> %d\\n",\n\t\t\t\t\tspi->irq, status);\n\t\t\treturn status;\n\t\t}\n\n\t\tdevice_set_wakeup_capable(&spi->dev, 1);\n\t}\n\n\t/* export NVRAM */\n\tstatus = sysfs_create_bin_file(&spi->dev.kobj, &nvram);\n\tif (status < 0) {\n\t\tdev_dbg(&spi->dev, "register nvram --> %d\\n", status);\n\t\treturn status;\n\t}\n\n\treturn 0;\n}\n\nstatic int ds1305_remove(struct spi_device *spi)\n{\n\tstruct ds1305 *ds1305 = spi_get_drvdata(spi);\n\n\tsysfs_remove_bin_file(&spi->dev.kobj, &nvram);\n\n\t/* carefully shut down irq and workqueue, if present */\n\tif (spi->irq) {\n\t\tset_bit(FLAG_EXITING, &ds1305->flags);\n\t\tdevm_free_irq(&spi->dev, spi->irq, ds1305);\n\t\tcancel_work_sync(&ds1305->work);\n\t}\n\n\treturn 0;\n}\n\nstatic struct spi_driver ds1305_driver = {\n\t.driver.name\t= "rtc-ds1305",\n\t.driver.owner\t= THIS_MODULE,\n\t.probe\t\t= ds1305_probe,\n\t.remove\t\t= ds1305_remove,\n\t/* REVISIT add suspend/resume */\n};\n\nmodule_spi_driver(ds1305_driver);\n\nMODULE_DESCRIPTION("RTC driver for DS1305 and DS1306 chips");\nMODULE_LICENSE("GPL");\nMODULE_ALIAS("spi:rtc-ds1305");\n', 'binary': False, 'copies': 256, 'sample_repo_name': 'wandboard-org/linux', 'sample_ref': 'refs/heads/master', 'sample_path': 'drivers/rtc/rtc-ds1305.c', 'sample_mode': 33188, 'sample_symlink_target': None}, {'id': '816b2d7412b432d86a4a36147255ec664f760193', 'size': 3974, 'content': '/*\n *  linux/drivers/devfreq/governor_simpleondemand.c\n *\n *  Copyright (C) 2011 Samsung Electronics\n *\tMyungJoo Ham <myungjoo.ham@samsung.com>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation.\n */\n\n#include <linux/errno.h>\n#include <linux/module.h>\n#include <linux/devfreq.h>\n#include <linux/math64.h>\n#include "governor.h"\n\n/* Default constants for DevFreq-Simple-Ondemand (DFSO) */\n#define DFSO_UPTHRESHOLD\t(90)\n#define DFSO_DOWNDIFFERENCTIAL\t(10)\nstatic int devfreq_simple_ondemand_func(struct devfreq *df,\n\t\t\t\t\tunsigned long *freq,\n\t\t\t\t\tu32 *flag)\n{\n\tstruct devfreq_dev_status stat;\n\tint err;\n\tunsigned long long a, b;\n\tunsigned int dfso_upthreshold = DFSO_UPTHRESHOLD;\n\tunsigned int dfso_downdifferential = DFSO_DOWNDIFFERENCTIAL;\n\tstruct devfreq_simple_ondemand_data *data = df->data;\n\tunsigned long max = (df->max_freq) ? df->max_freq : UINT_MAX;\n\tunsigned long min = (df->min_freq) ? df->min_freq : 0;\n\n\tstat.private_data = NULL;\n\n\terr = df->profile->get_dev_status(df->dev.parent, &stat);\n\tif (err)\n\t\treturn err;\n\n\tif (data) {\n\t\tif (data->upthreshold)\n\t\t\tdfso_upthreshold = data->upthreshold;\n\t\tif (data->downdifferential)\n\t\t\tdfso_downdifferential = data->downdifferential;\n\t}\n\tif (dfso_upthreshold > 100 ||\n\t    dfso_upthreshold < dfso_downdifferential)\n\t\treturn -EINVAL;\n\n\t/* Prevent overflow */\n\tif (stat.busy_time >= (1 << 24) || stat.total_time >= (1 << 24)) {\n\t\tstat.busy_time >>= 7;\n\t\tstat.total_time >>= 7;\n\t}\n\n\tif (data && data->simple_scaling) {\n\t\tif (stat.busy_time * 100 >\n\t\t    stat.total_time * dfso_upthreshold)\n\t\t\t*freq = max;\n\t\telse if (stat.busy_time * 100 <\n\t\t\t stat.total_time *\n\t\t\t (dfso_upthreshold - dfso_downdifferential))\n\t\t\t*freq = min;\n\t\telse\n\t\t\t*freq = df->previous_freq;\n\t\treturn 0;\n\t}\n\n\t/* Assume MAX if it is going to be divided by zero */\n\tif (stat.total_time == 0) {\n\t\t*freq = max;\n\t\treturn 0;\n\t}\n\n\t/* Set MAX if it\'s busy enough */\n\tif (stat.busy_time * 100 >\n\t    stat.total_time * dfso_upthreshold) {\n\t\t*freq = max;\n\t\treturn 0;\n\t}\n\n\t/* Set MAX if we do not know the initial frequency */\n\tif (stat.current_frequency == 0) {\n\t\t*freq = max;\n\t\treturn 0;\n\t}\n\n\t/* Keep the current frequency */\n\tif (stat.busy_time * 100 >\n\t    stat.total_time * (dfso_upthreshold - dfso_downdifferential)) {\n\t\t*freq = stat.current_frequency;\n\t\treturn 0;\n\t}\n\n\t/* Set the desired frequency based on the load */\n\ta = stat.busy_time;\n\ta *= stat.current_frequency;\n\tb = div_u64(a, stat.total_time);\n\tb *= 100;\n\tb = div_u64(b, (dfso_upthreshold - dfso_downdifferential / 2));\n\t*freq = (unsigned long) b;\n\n\tif (df->min_freq && *freq < df->min_freq)\n\t\t*freq = df->min_freq;\n\tif (df->max_freq && *freq > df->max_freq)\n\t\t*freq = df->max_freq;\n\n\treturn 0;\n}\n\nstatic int devfreq_simple_ondemand_handler(struct devfreq *devfreq,\n\t\t\t\tunsigned int event, void *data)\n{\n\tswitch (event) {\n\tcase DEVFREQ_GOV_START:\n\t\tdevfreq_monitor_start(devfreq);\n\t\tbreak;\n\n\tcase DEVFREQ_GOV_STOP:\n\t\tdevfreq_monitor_stop(devfreq);\n\t\tbreak;\n\n\tcase DEVFREQ_GOV_INTERVAL:\n\t\tdevfreq_interval_update(devfreq, (unsigned int *)data);\n\t\tbreak;\n\n\tcase DEVFREQ_GOV_SUSPEND:\n\t\tdevfreq_monitor_suspend(devfreq);\n\t\tbreak;\n\n\tcase DEVFREQ_GOV_RESUME:\n\t\tdevfreq_monitor_resume(devfreq);\n\t\tbreak;\n\n\tdefault:\n\t\tbreak;\n\t}\n\n\treturn 0;\n}\n\nstatic struct devfreq_governor devfreq_simple_ondemand = {\n\t.name = "simple_ondemand",\n\t.get_target_freq = devfreq_simple_ondemand_func,\n\t.event_handler = devfreq_simple_ondemand_handler,\n};\n\nstatic int __init devfreq_simple_ondemand_init(void)\n{\n\treturn devfreq_add_governor(&devfreq_simple_ondemand);\n}\nsubsys_initcall(devfreq_simple_ondemand_init);\n\nstatic void __exit devfreq_simple_ondemand_exit(void)\n{\n\tint ret;\n\n\tret = devfreq_remove_governor(&devfreq_simple_ondemand);\n\tif (ret)\n\t\tpr_err("%s: failed remove governor %d\\n", __func__, ret);\n\n\treturn;\n}\nmodule_exit(devfreq_simple_ondemand_exit);\nMODULE_LICENSE("GPL");\n', 'binary': False, 'copies': 1, 'sample_repo_name': 'garwedgess/android_kernel_lge_g4', 'sample_ref': 'refs/heads/M', 'sample_path': 'drivers/devfreq/governor_simpleondemand.c', 'sample_mode': 33188, 'sample_symlink_target': None}, {'id': 'f50a76cff9f42438026c7cf8bba687bcd2d491ea', 'size': 7866, 'content': '/*\n  Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation; version 2 of the License.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#include "gtest/gtest.h"\n#include "gmock/gmock.h"\n\n#include <exception>\n\n#define private public\n#include "mysqlrouter/uri.h"\n\nusing std::get;\nusing ::testing::StrEq;\nusing ::testing::ContainerEq;\nusing ::testing::IsEmpty;\nusing mysqlrouter::URI;\nusing mysqlrouter::URIError;\nusing mysqlrouter::URIQuery;\nusing mysqlrouter::URIAuthority;\nusing mysqlrouter::URIPath;\nusing mysqlrouter::URIQuery;\n\nusing mysqlrouter::URI;\nusing mysqlrouter::URIError;\nusing mysqlrouter::URIQuery;\nusing mysqlrouter::URIAuthority;\nusing mysqlrouter::URIPath;\nusing mysqlrouter::t_parse_scheme;\nusing mysqlrouter::t_parse_authority;\nusing mysqlrouter::t_parse_path;\nusing mysqlrouter::t_parse_query;\nusing mysqlrouter::t_parse_fragment;\n\nclass URITests: public ::testing::Test {\nprotected:\n  virtual void SetUp() {\n  }\n};\n\nTEST_F(URITests, Constructor)\n{\n  URI u;\n  ASSERT_TRUE(u.scheme.empty());\n  ASSERT_TRUE(u.host.empty());\n  ASSERT_EQ(u.port, 0);\n  ASSERT_TRUE(u.username.empty());\n  ASSERT_TRUE(u.password.empty());\n  ASSERT_TRUE(u.path.empty());\n  ASSERT_TRUE(u.query.empty());\n  ASSERT_TRUE(u.fragment.empty());\n}\n\nTEST_F(URITests, ParseScheme)\n{\n  URI u;\n  ASSERT_THAT(mysqlrouter::t_parse_scheme("ham:"), StrEq("ham"));\n  ASSERT_THAT(mysqlrouter::t_parse_scheme("HAM:"), StrEq("ham"));\n  ASSERT_THAT(mysqlrouter::t_parse_scheme("MySQL+Fabric:"), StrEq("mysql+fabric"));\n  ASSERT_THAT(mysqlrouter::t_parse_scheme("MySQL.Fabric:"), StrEq("mysql.fabric"));\n  ASSERT_THAT(mysqlrouter::t_parse_scheme("MySQL-Fabric:"), StrEq("mysql-fabric"));\n}\n\nTEST_F(URITests, ParseSchemeFail)\n{\n  ASSERT_THROW(mysqlrouter::t_parse_scheme("ham"), URIError);\n  ASSERT_THROW(mysqlrouter::t_parse_scheme("ham$$:"), URIError);\n}\n\nTEST_F(URITests, ParseAuthority)\n{\n  URIAuthority auth;\n\n  auth = mysqlrouter::t_parse_authority("ham://spam.example.com");\n  ASSERT_THAT(get<0>(auth), StrEq("spam.example.com"));\n  ASSERT_EQ(get<1>(auth), 0);\n  ASSERT_TRUE(get<2>(auth).empty());\n  ASSERT_TRUE(get<3>(auth).empty());\n\n  auth = mysqlrouter::t_parse_authority("ham://spam.example.com");\n  ASSERT_THAT(get<0>(auth), StrEq("spam.example.com"));\n\n  auth = mysqlrouter::t_parse_authority("ham://scott@spam.example.com/");\n  ASSERT_THAT(get<0>(auth), StrEq("spam.example.com"));\n  ASSERT_THAT(get<2>(auth), StrEq("scott"));\n  ASSERT_TRUE(get<3>(auth).empty());\n\n  auth = mysqlrouter::t_parse_authority("ham://scott:@spam.example.com/");\n  ASSERT_THAT(get<0>(auth), StrEq("spam.example.com"));\n  ASSERT_THAT(get<2>(auth), StrEq("scott"));\n  ASSERT_TRUE(get<3>(auth).empty());\n\n  auth = mysqlrouter::t_parse_authority("ham://:@spam.example.com");\n  ASSERT_THAT(get<0>(auth), StrEq("spam.example.com"));\n  ASSERT_TRUE(get<2>(auth).empty());\n  ASSERT_TRUE(get<3>(auth).empty());\n\n  auth = mysqlrouter::t_parse_authority("ham://scott:tiger@spam.example.com:3306/");\n  ASSERT_THAT(get<0>(auth), StrEq("spam.example.com"));\n  ASSERT_EQ(get<1>(auth), 3306);\n  ASSERT_THAT(get<2>(auth), StrEq("scott"));\n  ASSERT_THAT(get<3>(auth), StrEq("tiger"));\n\n  auth = mysqlrouter::t_parse_authority("ham://spam.example.com:/");\n  ASSERT_EQ(get<1>(auth), 0);\n  auth = mysqlrouter::t_parse_authority("ham://spam.example.com:3306/");\n  ASSERT_EQ(get<1>(auth), 3306);\n}\n\nTEST_F(URITests, ParseAuthorityFail)\n{\n  ASSERT_THROW(mysqlrouter::t_parse_authority("ham"), URIError);\n  ASSERT_THROW(mysqlrouter::t_parse_authority("ham://spam.example.com:999999/"), URIError);\n  ASSERT_THROW(mysqlrouter::t_parse_authority("ham://:3306/"), URIError);\n}\n\nTEST_F(URITests, ParseAuthorityEmpty)\n{\n  URIAuthority a = mysqlrouter::t_parse_authority("ham://");\n  ASSERT_THAT(get<0>(a), StrEq(""));\n  a = mysqlrouter::t_parse_authority("ham:///");\n  ASSERT_THAT(get<0>(a), StrEq(""));\n}\n\nTEST_F(URITests, ParsePath)\n{\n  URIPath p;\n  p = mysqlrouter::t_parse_path("ham://scott:tiger@spam.example.com:3306/the/way/to/go");\n  ASSERT_THAT(p.at(0), StrEq("the"));\n  ASSERT_THAT(p.at(1), StrEq("way"));\n  ASSERT_THAT(p.at(2), StrEq("to"));\n  ASSERT_THAT(p.at(3), StrEq("go"));\n  ASSERT_THROW(p.at(4), std::out_of_range);\n  p.clear();\n  \n  p = mysqlrouter::t_parse_path("ham://scott:tiger@spam.example.com:3306/withslashatend/");\n  ASSERT_THAT(p.at(0), StrEq("withslashatend"));\n  ASSERT_THROW(p.at(1), std::out_of_range);\n  p.clear();\n  \n  p = mysqlrouter::t_parse_path("ham://scott:tiger@spam.example.com:3306/double//slash/");\n  ASSERT_THAT(p.at(0), StrEq("double"));\n  ASSERT_THAT(p.at(1), StrEq("slash"));\n  ASSERT_THROW(p.at(2), std::out_of_range);\n  p.clear();\n  \n  p = mysqlrouter::t_parse_path("file:///path/to/file");\n  ASSERT_THAT(p.at(2), StrEq("file"));\n  p.clear();\n  p = mysqlrouter::t_parse_path("ham://example.com");\n  ASSERT_THROW(p.at(0), std::out_of_range);\n  p.clear();\n  \n  p = mysqlrouter::t_parse_path("ham://example.com/path/to/?key1=val2");\n  ASSERT_THAT(p.at(0), StrEq("path"));\n  ASSERT_THAT(p.at(1), StrEq("to"));\n  ASSERT_THROW(p.at(2), std::out_of_range);\n  p.clear();\n}\n\nTEST_F(URITests, ParsePathFail)\n{\n  ASSERT_THROW(mysqlrouter::t_parse_path("ham"), URIError);\n}\n\nTEST_F(URITests, ParseQuery)\n{\n  URIQuery q;\n\n  q = mysqlrouter::t_parse_query("ham://example.com?key1=val1&key2=val2", URI::query_delimiter);\n  ASSERT_THAT(q["key1"], StrEq("val1"));\n  ASSERT_THAT(q["key2"], StrEq("val2"));\n  \n  q = mysqlrouter::t_parse_query("ham://example.com/path/to/?key1=val1&key2=", \'&\');\n  ASSERT_THAT(q["key1"], StrEq("val1"));\n  ASSERT_THAT(q["key2"], StrEq(""));\n  \n  q = mysqlrouter::t_parse_query("ham://example.com?key1=val1#foo");\n  ASSERT_THAT(q["key1"], StrEq("val1"));\n}\n\nTEST_F(URITests, ParseQueryFail)\n{\n  std::string f;\n  \n  f = mysqlrouter::t_parse_fragment("ham://example.com?key1=val1#foo");\n  ASSERT_THAT(f, StrEq("foo"));\n  \n  f = mysqlrouter::t_parse_fragment("ham://example.com#foo");\n  ASSERT_THAT(f, StrEq("foo"));\n  \n  f = mysqlrouter::t_parse_fragment("ham://example.com#");\n  ASSERT_TRUE(f.empty());\n  \n  f = mysqlrouter::t_parse_fragment("ham://example.com");\n  ASSERT_TRUE(f.empty());\n}\n\nTEST_F(URITests, ParseFragmentFail)\n{\n  ASSERT_THROW(mysqlrouter::t_parse_fragment("ham"), URIError);\n}\n\nTEST_F(URITests, ConstructorWithURI)\n{\n  URI u("ham://scott:tiger@host.example.com:3306/path/to/sys?key1=val1");\n  ASSERT_THAT(u.scheme, StrEq("ham"));\n  ASSERT_THAT(u.username, StrEq("scott"));\n  ASSERT_THAT(u.password, StrEq("tiger"));\n  ASSERT_THAT(u.host, StrEq("host.example.com"));\n  ASSERT_EQ(u.port, 3306);\n  ASSERT_THAT(u.path.at(0), StrEq("path"));\n  ASSERT_THAT(u.path.at(1), StrEq("to"));\n  ASSERT_THAT(u.path.at(2), StrEq("sys"));\n  ASSERT_THAT(u.query["key1"], StrEq("val1"));\n}\n\nTEST_F(URITests, ConstructorWithURIFail)\n{\n  ASSERT_THROW(new URI("ham$$://scott:tiger@host.example.com:3306/path/to/sys?key1=val1"), URIError);\n}\n\nTEST_F(URITests, SetURI)\n{\n  URI u("ham://scott:tiger@host.example.com:3306/path/to/sys?key1=val1");\n  u.set_uri("spam://spamhost.example.com");\n  ASSERT_EQ(u.scheme, string("spam"));\n  ASSERT_EQ(u.host, string("spamhost.example.com"));\n  ASSERT_EQ(u.port, 0);\n  ASSERT_EQ(u.username, string());\n  ASSERT_EQ(u.password, string());\n  ASSERT_THAT(u.path, IsEmpty());\n  ASSERT_THAT(u.query, IsEmpty());\n  ASSERT_EQ(u.fragment, string());\n}\n', 'binary': False, 'copies': 1, 'sample_repo_name': 'mysql/mysql-router', 'sample_ref': 'refs/heads/2.0', 'sample_path': 'src/router/tests/test_uri.cc', 'sample_mode': 33188, 'sample_symlink_target': None}, {'id': '8e0ab7a402ed401e4a92a0933d211dada21b4508', 'size': 903, 'content': '<?php\n/**\n * Licensed under The GPL-3.0 License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @since    2.0.0\n * @author   Christopher Castro <chris@quickapps.es>\n * @link     http://www.quickappscms.org\n * @license  http://opensource.org/licenses/gpl-3.0.html GPL-3.0 License\n */\nnamespace User\\Notification\\Message;\n\nuse User\\Model\\Entity\\User;\nuse User\\Notification\\Message\\BaseMessage;\n\n/**\n * Sends instructions for the "password recovery" process.\n *\n */\nclass PasswordRequestMessage extends BaseMessage\n{\n\n    /**\n     * {@inheritDoc}\n     */\n    public function send()\n    {\n        $this\n            ->subject(plugin(\'User\')->settings[\'message_password_recovery_subject\'])\n            ->body(plugin(\'User\')->settings[\'message_password_recovery_body\']);\n        return parent::send();\n    }\n}\n', 'binary': False, 'copies': 1, 'sample_repo_name': 'quickapps/cms', 'sample_ref': 'refs/heads/2.0', 'sample_path': 'plugins/User/src/Notification/Message/PasswordRequestMessage.php', 'sample_mode': 33188, 'sample_symlink_target': None}, {'id': '9281ba3801cf1a02af6ea13bebdc19a41d48b463', 'size': 1444, 'content': "<?php\n/**\n * Licensed under The GPL-3.0 License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @since    2.0.0\n * @author   Christopher Castro <chris@quickapps.es>\n * @link     http://www.quickappscms.org\n * @license  http://opensource.org/licenses/gpl-3.0.html GPL-3.0 License\n */\n\n$skins = [\n    'black' => 'Black',\n    'black-light' => 'Black Light',\n    'blue' => 'Blue',\n    'blue-light' => 'Blue Light',\n    'green' => 'Green',\n    'green-light' => 'Green Light',\n    'purple' => 'Purple',\n    'purple-light' => 'Purple Light',\n    'red' => 'Red',\n    'red-light' => 'Red Light',\n    'yellow' => 'Yellow',\n    'yellow-light' => 'Yellow Light',\n];\n?>\n\n<fieldset>\n    <legend><?php echo __d('backend_theme', 'Layout Options'); ?></legend>\n    <?php echo $this->Form->input('fixed_layout', ['type' => 'checkbox', 'label' => __d('backend_theme', 'Fixed Layout')]); ?>\n    <?php echo $this->Form->input('boxed_layout', ['type' => 'checkbox', 'label' => __d('backend_theme', 'Boxed Layout')]); ?>\n    <?php echo $this->Form->input('collapsed_sidebar', ['type' => 'checkbox', 'label' => __d('backend_theme', 'Collapsed Sidebar')]); ?>\n</fieldset>\n\n<fieldset>\n    <legend><?php echo __d('backend_theme', 'Skins'); ?></legend>\n    <?php echo $this->Form->input('skin', ['type' => 'select', 'options' => $skins, 'label' => false]); ?>\n</fieldset>\n", 'binary': False, 'copies': 1, 'sample_repo_name': 'quickapps/cms', 'sample_ref': 'refs/heads/2.0', 'sample_path': 'plugins/BackendTheme/src/Template/Element/settings.ctp', 'sample_mode': 33188, 'sample_symlink_target': None}]

--------------------------------------------------
Table full name: GITHUB_REPOS.GITHUB_REPOS.SAMPLE_REPOS
Column name: watch_count Type: NUMBER
Column name: repo_name Type: TEXT
Sample rows:
[{'repo_name': 'kbandla/APTnotes', 'watch_count': 256}, {'repo_name': 'bigcompany/hook.io', 'watch_count': 256}, {'repo_name': 'krisk/Fuse', 'watch_count': 256}, {'repo_name': 'brigade/react-waypoint', 'watch_count': 256}, {'repo_name': 'Quartz/mapquery', 'watch_count': 256}]

--------------------------------------------------
External knowledge that might be helpful: 
None
The table structure information is ({database name: {schema name: [table name]}}): 
{'GITHUB_REPOS': {'GITHUB_REPOS': ['SAMPLE_FILES', 'LANGUAGES', 'LICENSES', 'SAMPLE_COMMITS', 'SAMPLE_CONTENTS', 'SAMPLE_REPOS']}}

Some few-shot examples after column exploration may be helpful:
Query:
--Description: 1) Show a few README-type files that exist in the sample set
SELECT DISTINCT 
       "repo_name",
       "path",
       "id"
FROM   GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES
WHERE  "path" ILIKE '%README.md'
LIMIT  20;
Answer:
repo_name,path,id
hatajoe/github-notification-gopherjs,GitHub-Notification-GopherJS-darwin-x64/GitHub-Notification-GopherJS.app/Contents/Resources/app/node_modules/octonode/node_modules/request/node_modules/bl/node_modules/readable-stream/node_modules/string_decoder/README.md,4d2aa001501107cd2792f385ad62237dc3757521
itsthejb/ObjcAssociatedObjectHelpers,README.md,b618db0b7811ca2f6619bf52cbb5532cad0152c9
jdhoek/inkscape-isometric-projection,README.md,a770e8d8ad235d5d18238b8e6f854f4285e7e6fd
Query:
--Description: 2) Quickly preview the first 200 characters of the README.md files’ contents
SELECT  f."repo_name",
        f."path",
        SUBSTR(c."content",1,200) AS "preview"
FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES  f
JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
       ON f."id" = c."id"
WHERE   f."path" ILIKE '%README.md'
LIMIT   20;
Answer:
repo_name,path,preview
rgardler/azure-quickstart-templates,emercoin-ubuntu/README.md,"# Emercoin Instance

This Microsoft Azure template deploys a single Emercoin client which will connect to the public Emercoin network.

[![Deploy to Azure](http://azuredeploy.net/deploybutton.png)](ht"
briancavalier/todomvc-fab,examples/cujo/bower_components/curl/src/curl/plugin/README.md,"curl.js loader plugins
===

Please see the wiki for information about using plugins.  If you're interested
in creating yo
Query:
--Description: 4) Split README.md texts into individual lines (one row per line)
SELECT   f."repo_name",
         TRIM(line.value::STRING) AS "line_text"
FROM     GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES     f
JOIN     GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS  c
       ON f."id" = c."id",
LATERAL  FLATTEN(input => SPLIT(c."content", '\n')) line
WHERE    f."path" ILIKE '%README.md'
LIMIT    20
Answer:
repo_name,line_text
rgardler/azure-quickstart-templates,# Emercoin Instance
rgardler/azure-quickstart-templates,
rgardler/azure-quickstart-templates,This Microsoft Azure template deploys a single Emercoin client which will connect to the public Emercoin network.
rgardler/azure-quickstart-templates,
rgardler/azure-quickstart-templates,[![Deploy to Azure](http://azuredeploy.net/deploybutton.png)](https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2
Query:
--Description: 5) Show non-empty README lines that are not comments (# or //)
SELECT  f."repo_name",
        TRIM(line.value::STRING) AS "clean_line"
FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES     f
JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS  c
      ON f."id" = c."id",
LATERAL FLATTEN(input => SPLIT(c."content", '\n')) line
WHERE   f."path" ILIKE '%README.md'
  AND   TRIM(line.value::STRING) <> ''
  AND   TRIM(line.value::STRING) NOT ILIKE '#%'
  AND   TRIM(line.value::STRING) NOT ILIKE '//%'
LIMIT   20
Answer:
repo_name,clean_line
rgardler/azure-quickstart-templates,This Microsoft Azure template deploys a single Emercoin client which will connect to the public Emercoin network.
rgardler/azure-quickstart-templates,[![Deploy to Azure](http://azuredeploy.net/deploybutton.png)](https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2FAzure%2Fazure-quickstart-templates%2Fmaster%2Femercoin-ubuntu%2Fazuredeploy.json)
rgardler/azure-quickstart-templates,"<a href=""h
Query:
--Description: 6) Count how many repositories contain each non-comment README line
SELECT  line_clean,
        COUNT(DISTINCT repo_name) AS "repo_count"
FROM (
        SELECT  f."repo_name"                             AS repo_name,
                TRIM(line.value::STRING)                  AS line_clean
        FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES    f
        JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
              ON f."id" = c."id",
        LATERAL FLATTEN(input => SPLIT(c."content", '\n')) line
        WHERE   f."path" ILIKE '%README.md'
          AND   TRIM(line.value::STRING) <> ''
          AND   TRIM(line.value::STRING) NOT ILIKE '#%'
          AND   TRIM(line.value::STRING) NOT ILIKE '//%'
     ) t
GROUP BY line_clean
ORDER BY "repo_count" DESC
LIMIT 20
Answer:
LINE_CLEAN,repo_count
==========,2
js!,1
- Mesos: 0.22.1</pre>,1
2. **k3-compiler** -- (~2 GB) Image containing the GHC and GCC tool chains to compile a K3 program to binary. Based on debian:jessie,1
1. **Download** the latest version from the CKEditor website:,1
on the wiki (TBD).,1
"(Note: Docker build now has the -f option, so you don't have to call all docker files, ""Dockerfile"")",1
The other scripts in here are left for legacy purposes.,1
- GHC: 7.10.1,1
[![Deploy to Azure](http
Query:
--Description: 7) List programming languages for repos that contain README.md files
SELECT DISTINCT
       f."repo_name",
       l."language"
FROM   GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES  f
LEFT JOIN GITHUB_REPOS.GITHUB_REPOS.LANGUAGES  l
     ON f."repo_name" = l."repo_name"
WHERE  f."path" ILIKE '%README.md'
LIMIT  20
Answer:
repo_name,language
ribot/android-guidelines,[]
yburke94/Raft.net,"[
  {
    ""bytes"": 576059,
    ""name"": ""C#""
  }
]"
josa42/atom-blame,"[
  {
    ""bytes"": 2707,
    ""name"": ""CSS""
  },
  {
    ""bytes"": 34230,
    ""name"": ""JavaScript""
  }
]"
mvarnagiris/financius-public,"[
  {
    ""bytes"": 6392,
    ""name"": ""HTML""
  },
  {
    ""bytes"": 1003503,
    ""name"": ""Java""
  }
]"
marianopeck/OSSubprocess,"[
  {
    ""bytes"": 1700,
    ""name"": ""HTML""
  },
  {
    ""byt
Query:
--Description: 8) For each README line, return the distinct languages (comma-separated)
SELECT  line_clean,
        LISTAGG(DISTINCT l."language", ',') WITHIN GROUP (ORDER BY l."language") AS "languages"
FROM (
        SELECT  f."repo_name",
                TRIM(line.value::STRING) AS line_clean
        FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES    f
        JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
              ON f."id" = c."id",
        LATERAL FLATTEN(input => SPLIT(c."content", '\n')) line
        WHERE   f."path" ILIKE '%README.md'
          AND   TRIM(line.value::STRING) <> ''
          AND   TRIM(line.value::STRING) NOT ILIKE '#%'
          AND   TRIM(line.value::STRING) NOT ILIKE '//%'
     ) lines
LEFT JOIN GITHUB_REPOS.GITHUB_REPOS.LANGUAGES l
       ON lines."repo_name" = l."repo_name"
GROUP BY line_clean
LIMIT 20
Answer:
LINE_CLEAN,languages
The editor comes with a few sample pages that can be used to verify that,"[{""bytes"":553,""name"":""ApacheConf""},{""bytes"":87973,""name"":""CSS""},{""bytes"":229930,""name"":""HTML""},{""bytes"":21196,""name"":""JavaScript""},{""bytes"":122722,""name"":""PHP""}]"
- Mesos: 0.22.1</pre>,"[{""bytes"":530367,""name"":""C++""},{""bytes"":2285,""name"":""CMake""},{""bytes"":2265182,""name"":""Haskell""},{""bytes"":488,""name"":""Shell""}]"
- GHC: 7.10.1,"[{""bytes"":530367,"
Task: Retrieve all non-empty, non-commented lines from `README.md` files in GitHub repositories, excluding lines that are comments (either starting with `#` for Markdown or `//` for code comments). For each line, calculate how often each unique line appears across all repositories and return a comma-separated list of the programming languages used in each repository containing that line, sorted alphabetically, with the results ordered by the frequency of occurrence in descending order.

Please think step by step and answer only one complete SQL in snowflake dialect in ```sql``` format.
SQL usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: The table structure information is ({database name: {schema name: [table name]}}): 
{'GITHUB_REPOS': {'GITHUB_REPOS': ['SAMPLE_FILES', 'LANGUAGES', 'LICENSES', 'SAMPLE_COMMITS', 'SAMPLE_CONTENTS', 'SAMPLE_REPOS']}}

When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
If the task description does not specify the number of decimal places, retain all decimals to four places.

[Self-refine]
2025-05-07 01:52:18 - Thread-101 (execute) - INFO - [Try to run SQL in self-refine]
```sql
WITH readme_lines AS (
    /* 1. Split every README.md into individual, trimmed lines
          while discarding blank lines and comment‐style lines   */
    SELECT
        f."repo_name"                                   AS repo_name,
        TRIM(line.value::STRING)                        AS line_clean
    FROM  GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES    f
    JOIN  GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
          ON f."id" = c."id",
          LATERAL FLATTEN(input => SPLIT(c."content", '\n')) line
    WHERE f."path" ILIKE '%README.md'
          AND TRIM(line.value::STRING) <> ''            -- keep non-empty
          AND TRIM(line.value::STRING) NOT ILIKE '#%'   -- drop “# …”
          AND TRIM(line.value::STRING) NOT ILIKE '//%'  -- drop “// …”
),
repo_languages AS (
    /* 2. Expand the LANGUAGES table so each array element becomes one row */
    SELECT
        l."repo_name",
        lang.value:"name"::STRING AS language
    FROM  GITHUB_REPOS.GITHUB_REPOS.LANGUAGES l,
          LATERAL FLATTEN(input => l."language") lang
)
SELECT
    rl.line_clean,
    COUNT(DISTINCT rl.repo_name)                                         AS repo_count,
    LISTAGG(DISTINCT rl_lang.language, ',') 
        WITHIN GROUP (ORDER BY rl_lang.language)                         AS languages
FROM          readme_lines rl
LEFT JOIN     repo_languages rl_lang
       ON     rl.repo_name = rl_lang.repo_name
GROUP BY       rl.line_clean
ORDER BY       repo_count DESC NULLS LAST;
```
[Try to run SQL in self-refine]
2025-05-07 01:52:18 - Thread-101 (execute) - INFO - itercount: 1
2025-05-07 01:52:18 - Thread-101 (execute) - INFO - [Self-refine]
Input sql:
WITH readme_lines AS (
    /* 1. Split every README.md into individual, trimmed lines
          while discarding blank lines and comment‐style lines   */
    SELECT
        f."repo_name"                                   AS repo_name,
        TRIM(line.value::STRING)                        AS line_clean
    FROM  GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES    f
    JOIN  GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
          ON f."id" = c."id",
          LATERAL FLATTEN(input => SPLIT(c."content", '\n')) line
    WHERE f."path" ILIKE '%README.md'
          AND TRIM(line.value::STRING) <> ''            -- keep non-empty
          AND TRIM(line.value::STRING) NOT ILIKE '#%'   -- drop “# …”
          AND TRIM(line.value::STRING) NOT ILIKE '//%'  -- drop “// …”
),
repo_languages AS (
    /* 2. Expand the LANGUAGES table so each array element becomes one row */
    SELECT
        l."repo_name",
        lang.value:"name"::STRING AS language
    FROM  GITHUB_REPOS.GITHUB_REPOS.LANGUAGES l,
          LATERAL FLATTEN(input => l."language") lang
)
SELECT
    rl.line_clean,
    COUNT(DISTINCT rl.repo_name)                                         AS repo_count,
    LISTAGG(DISTINCT rl_lang.language, ',') 
        WITHIN GROUP (ORDER BY rl_lang.language)                         AS languages
FROM          readme_lines rl
LEFT JOIN     repo_languages rl_lang
       ON     rl.repo_name = rl_lang.repo_name
GROUP BY       rl.line_clean
ORDER BY       repo_count DESC NULLS LAST;
The error information is:
{'status': 'error', 'error_msg': "##ERROR##000904 (42000): SQL compilation error: error line 31 at position 29\ninvalid identifier 'RL_LANG.REPO_NAME'"}
Please correct it and output only 1 complete SQL query.
[Self-refine]
2025-05-07 01:52:55 - Thread-101 (execute) - INFO - [Try to run SQL in self-refine]
```sql
WITH readme_lines AS (
    /* 1. Split every README.md into individual, trimmed lines,
          discarding blank and comment lines                                       */
    SELECT
        f."repo_name"                                      AS repo_name,
        TRIM(line.value::STRING)                           AS line_clean
    FROM  GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES     f
    JOIN  GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS  c
          ON f."id" = c."id",
          LATERAL FLATTEN(input => SPLIT(c."content", '\n')) line
    WHERE f."path" ILIKE '%README.md'
      AND TRIM(line.value::STRING) <> ''                  -- non-empty
      AND TRIM(line.value::STRING) NOT ILIKE '#%'         -- skip “# …”
      AND TRIM(line.value::STRING) NOT ILIKE '//%'        -- skip “// …”
),
repo_languages AS (
    /* 2. Expand language arrays into one row per language per repo                */
    SELECT
        l."repo_name"                        AS repo_name,
        lang.value:"name"::STRING            AS language
    FROM  GITHUB_REPOS.GITHUB_REPOS.LANGUAGES l,
          LATERAL FLATTEN(input => l."language") lang
)
SELECT
    rl.line_clean,
    COUNT(DISTINCT rl.repo_name)                                        AS repo_count,
    LISTAGG(DISTINCT rlang.language, ',')
        WITHIN GROUP (ORDER BY rlang.language)                          AS languages
FROM       readme_lines  rl
LEFT JOIN  repo_languages rlang
       ON  rl.repo_name = rlang.repo_name
GROUP BY   rl.line_clean
ORDER BY   repo_count DESC NULLS LAST;
```
[Try to run SQL in self-refine]
2025-05-07 01:52:59 - Thread-101 (execute) - INFO - Total iteration counts: 1
