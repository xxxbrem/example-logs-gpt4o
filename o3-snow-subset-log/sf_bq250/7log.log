2025-05-06 23:02:01 - Thread-816 (execute) - INFO - itercount: 0
2025-05-06 23:02:01 - Thread-816 (execute) - INFO - [Self-refine]
Table full name: GEO_OPENSTREETMAP_WORLDPOP.GEO_OPENSTREETMAP.HISTORY_CHANGESETS
Column name: osm_timestamp_min Type: NUMBER Description: Minimum timestamp of objects contained in this changeset.
Column name: ways Type: VARIANT Description: Ways that are part of this way
Column name: id Type: NUMBER Description: Changeset ID.
Column name: osm_timestamp_max Type: NUMBER Description: Maximum timestamp of objects contained in this changeset.
Column name: relations Type: VARIANT Description: Relations that are part of this way
Column name: nodes Type: VARIANT Description: Nodes that are part of this way
Sample rows:
[{'id': 12029340, 'osm_timestamp_min': 1340735868, 'osm_timestamp_max': 1340735870, 'relations': '[]', 'ways': '[\n  24012734,\n  24013188,\n  32787862,\n  122430881,\n  122445966,\n  129713279,\n  34883701,\n  169141542,\n  169141543,\n  169141536,\n  169141544,\n  169141541,\n  169141540,\n  169141537,\n  169141538,\n  169141539,\n  111561168,\n  150543888,\n  150543890,\n  142813428,\n  142812626,\n  122190124,\n  122176895,\n  122190125,\n  25787631\n]', 'nodes': '[\n  1270750198,\n  1270750190,\n  977802739,\n  279326703,\n  1803085216,\n  1803085218,\n  1803085222,\n  1803085223,\n  1803085224,\n  1803085225,\n  1803085226,\n  1803085227,\n  1803085229,\n  1803085231,\n  1803085232,\n  1803085237,\n  1803085238,\n  1803085239,\n  1803085240,\n  1803085241,\n  1803085242,\n  1803085243,\n  1803085244,\n  1803085246,\n  1803085247,\n  1803085249,\n  1803085251,\n  1803085252,\n  1803085255,\n  1803085256,\n  1803085257,\n  1803085258,\n  1634427172,\n  1562905956,\n  1332837556,\n 
--------------------------------------------------
Table full name: GEO_OPENSTREETMAP_WORLDPOP.GEO_OPENSTREETMAP.HISTORY_NODES
Column name: all_tags Type: VARIANT
Column name: changeset Type: NUMBER
Column name: longitude Type: NUMBER
Column name: username Type: TEXT
Column name: latitude Type: NUMBER
Column name: id Type: NUMBER
Column name: osm_timestamp Type: NUMBER
Column name: geometry Type: BINARY
Column name: visible Type: BOOLEAN
Column name: version Type: NUMBER
Sample rows:
[{'id': 6927827940, 'version': 1, 'username': 'importES', 'changeset': 76357152, 'visible': True, 'osm_timestamp': 1572369059000000, 'geometry': "bytearray(b'\\x01\\x01\\x00\\x00\\x00ilTLJrD\\xc0\\xe7\\x0b\\x10\\xbb\\xa5\\xc93\\xc0')", 'all_tags': '[]', 'latitude': '-19.787685100', 'longitude': '-40.892892400'}, {'id': 5949962528, 'version': 1, 'username': 'importES', 'changeset': 63140610, 'visible': True, 'osm_timestamp': 1538519269000000, 'geometry': "bytearray(b'\\x01\\x01\\x00\\x00\\x00m\\xbe\\x00\\xb1[{D\\xc0\\xe9v\\x9b\\xdc\\x94\\xc53\\xc0')", 'all_tags': '[]', 'latitude': '-19.771802700', 'longitude': '-40.963735700'}, {'id': 6643961210, 'version': 1, 'username': 'importES', 'changeset': 72606663, 'visible': True, 'osm_timestamp': 1563979319000000, 'geometry': "bytearray(b'\\x01\\x01\\x00\\x00\\x00\\xd8%O\\xfe\\x93mD\\xc0\\xdbE\\x87v\\x04\\xba3\\xc0')", 'all_tags': '[]', 'latitude': '-19.726630600', 'longitude': '-40.856078900'}, {'id': 5932998508, 'version': 1, 'username': 'importES', 'changeset': 62961772, 'visible': True, 'osm_timestamp': 1538008739000000, 'geometry': "bytearray(b'\\x01\\x01\\x00\\x00\\x00\\xa6\\xa5\\xa8\\xe9i|D\\xc0\\x02\\x16T\\xaf\\xb6\\xd53\\xc0')", 'all_tags': '[]', 'latitude': '-19.834818800', 'longitude': '-40.971982200'}, {'id': 6656130802, 'version': 1, 'username': 'importES', 'changeset': 72749611, 'visible': True, 'osm_timestamp': 1564360084000000, 'geometry': "bytearray(b'\\x01\\x01\\x00\\x00\\x00\\x0e\\xa1\\xef\\x13\\xac\\x8aD\\xc0\\x80\\xa2\\r\\x1b\\xc0\\xe03\\xc0')", 'all_tags': '[]', 'latitude': '-19.877931300', 'longitude': '-41.083376400'}]
--------------------------------------------------
Table full name: GEO_OPENSTREETMAP_WORLDPOP.GEO_OPENSTREETMAP.PLANET_FEATURES_POINTS
Column name: geometry Type: BINARY
Column name: osm_timestamp Type: NUMBER
Column name: osm_way_id Type: NUMBER
Column name: osm_id Type: NUMBER
Column name: osm_version Type: NUMBER
Column name: all_tags Type: VARIANT
Sample rows:
[{'osm_id': 8069642225, 'osm_version': 1, 'osm_way_id': None, 'osm_timestamp': 1604175532000000, 'geometry': "bytearray(b'\\x01\\x01\\x00\\x00\\x00\\xa2\\x9bX;\\xe5,\\x1e@\\xac59!\\x19\\xbcH@')", 'all_tags': '[\n  {\n    "key": "ID",\n    "value": "Friedhof Kottweiler"\n  }\n]'}, {'osm_id': 8242788835, 'osm_version': 1, 'osm_way_id': None, 'osm_timestamp': 1608386913000000, 'geometry': 'bytearray(b"\\x01\\x01\\x00\\x00\\x00r\\xc9\\\'\\x1aZ\\x9b4@O\\xfc\\xbd\\xb9d^C@")', 'all_tags': '[\n  {\n    "key": "id",\n    "value": "1"\n  }\n]'}, {'osm_id': 8242783616, 'osm_version': 1, 'osm_way_id': None, 'osm_timestamp': 1608386913000000, 'geometry': "bytearray(b'\\x01\\x01\\x00\\x00\\x00\\x94\\xd3\\xe8\\x1f\\x8e\\x9b4@\\xa5\\x17\\x10\\xb5\\xc8^C@')", 'all_tags': '[\n  {\n    "key": "id",\n    "value": "1"\n  }\n]'}, {'osm_id': 8242788671, 'osm_version': 1, 'osm_way_id': None, 'osm_timestamp': 1608386913000000, 'geometry': "bytearray(b'\\x01\\x01\\x00\\x00\\x00\\xb3\\x84\\xc6]\\xce\\x9a4@m\\xaaIK@^C@')", 'all_tags': '[\n  {\n    "key": "id",\n    "value": "1"\n  }\n]'}, {'osm_id': 2025510744, 'osm_version': 1, 'osm_way_id': None, 'osm_timestamp': 1353534859000000, 'geometry': "bytearray(b'\\x01\\x01\\x00\\x00\\x005\\xf7Fc\\xa3VA@\\xf6\\x8d\\n\\xf7%f/\\xc0')", 'all_tags': '[\n  {\n    "key": "LAT",\n    "value": "-15.699508"\n  },\n  {\n    "key": "LONG",\n    "value": "34.676861"\n  },\n  {\n    "key": "Village_Na",\n    "value": "Felemu"\n  },\n  {\n    "key": "name",\n    "value": "Felemu"\n  },\n  {\n    "key": "place",\n    "value": "village"\n  }\n]'}]
--------------------------------------------------
Table full name: GEO_OPENSTREETMAP_WORLDPOP.GEO_OPENSTREETMAP.PLANET_FEATURES
Column name: geometry Type: BINARY
Column name: osm_timestamp Type: NUMBER
Column name: all_tags Type: VARIANT
Column name: feature_type Type: TEXT
Column name: osm_version Type: NUMBER
Column name: osm_id Type: NUMBER
Column name: osm_way_id Type: NUMBER
Sample rows:
[{'feature_type': 'multipolygons', 'osm_id': None, 'osm_way_id': 838028090, 'osm_version': 1, 'osm_timestamp': 1597721403000000, 'all_tags': '[\n  {\n    "key": "building",\n    "value": "residential"\n  }\n]', 'geometry': 'bytearray(b"\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\xb8q0@Ga^@\\xb8\\x10\\x9a\\x13j\\x880@Z$\\xdc\\x1aGa^@Jm\\x98Wd\\x880@\\x959\\xf10Ha^@2\\xa1\\x93\\xefc\\x880@)\\\'\\xdaUHa^@\\xcb\\xc3B\\xadi\\x880@\\xb8q0@Ga^@\\xb8\\x10\\x9a\\x13j\\x880@")'}, {'feature_type': 'multipolygons', 'osm_id': None, 'osm_way_id': 382740968, 'osm_version': 1, 'osm_timestamp': 1448482166000000, 'all_tags': '[\n  {\n    "key": "building",\n    "value": "terrace"\n  }\n]', 'geometry': 'bytearray(b"\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x05\\x00\\x00\\x00 \\x15\\xb5\\xea)\\xa0\\x12\\xc0\\x13U\\xae\\xa6\\xa1\\xceK@\\r\\x81m\\x0e!\\xa0\\x12\\xc01\\xbcHW\\x9f\\xceK@(\\\'\\x7f\\x9c\\xd5\\x9f\\x12\\xc0\\x96\\xc38\\xc9\\xa0\\xceK@;\\xbb\\xc6x\\xde\\x9f\\x12\\xc0w\\\\\\x9e\\x18\\xa3\\xceK@ \\x15\\xb5\\xea)\\xa0\\x12\\xc0\\x13U\\xae\\xa6\\xa1\\xceK@")'}, {'feature_type': 'multipolygons', 'osm_id': None, 'osm_way_id': 546457224, 'osm_version': 1, 'osm_timestamp': 1513122789000000, 'all_tags': '[\n  {\n    "key": "building",\n    "value": "house"\n  }\n]', 'geometry': 'bytearray(b"\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x05\\x00\\x00\\x00q\\xd1$\\x0c^\\xceW@N\\xf0M\\xd3g\\\'0@/\\x9a\\xdfz^\\xceW@(\\xee\\x1d\\xdal\\\'0@ZJ;\\xda]\\xceW@\\xda\\x08\\x1f\\xa5m\\\'0@\\x9b\\x81\\x80k]\\xceW@\\x00\\x0bO\\x9eh\\\'0@q\\xd1$\\x0c^\\xceW@N\\xf0M\\xd3g\\\'0@")'}, {'feature_type': 'multipolygons', 'osm_id': None, 'osm_way_id': 828271565, 'osm_version': 1, 'osm_timestamp': 1595283501000000, 'all_tags': '[\n  {\n    "key": "building",\n    "value": "yes"\n  }\n]', 'geometry': "bytearray(b'\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\xd2\\x1f\\xf52e*T\\xc0M\\xc0T\\xd8\\xb1\\x88E@\\x16\\xf3\\x18\\x8a`*T\\xc0\\xaf\\xef\\x1e\\xfb\\xb4\\x88E@o!\\xd9ma*T\\xc0CGa\\xcd\\xb7\\x88E@+N\\xb5\\x16f*T\\xc0\\xde\\x17\\x97\\xaa\\xb4\\x88E@\\xd2\\x1f\\xf52e*T\\xc0M\\xc0T\\xd8\\xb1\\x88E@')"}, {'feature_type': 'multipolygons', 'osm_id': None, 'osm_way_id': 662226180, 'osm_version': 1, 'osm_timestamp': 1547163526000000, 'all_tags': '[\n  {\n    "key": "building",\n    "value": "yes"\n  }\n]', 'geometry': "bytearray(b'\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x95\\xeeS\\xfa.\\x0cT\\xc0\\xcc\\x93\\xb5\\x97~dE@\\xc4r\\xf0\\xf1.\\x0cT\\xc0=ot\\xdf{dE@$\\xafsx-\\x0cT\\xc0\\xdef;\\xf0{dE@\\xf5*\\xd7\\x80-\\x0cT\\xc0m\\x8b|\\xa8~dE@\\x95\\xeeS\\xfa.\\x0cT\\xc0\\xcc\\x93\\xb5\\x97~dE@')"}]
--------------------------------------------------
Table full name: GEO_OPENSTREETMAP_WORLDPOP.GEO_OPENSTREETMAP.PLANET_NODES
Column name: all_tags Type: VARIANT
Column name: osm_timestamp Type: NUMBER
Column name: changeset Type: NUMBER
Column name: visible Type: BOOLEAN
Column name: latitude Type: NUMBER
Column name: geometry Type: BINARY
Column name: username Type: TEXT
Column name: version Type: NUMBER
Column name: longitude Type: NUMBER
Column name: id Type: NUMBER
Sample rows:
[{'id': 7567379700, 'version': 1, 'username': 'victoire Tsajio', 'changeset': 85909148, 'visible': True, 'osm_timestamp': 1590700726000000, 'geometry': None, 'all_tags': '[]', 'latitude': '4.890477200', 'longitude': '13.863136700'}, {'id': 7195756138, 'version': 1, 'username': 'victoire Tsajio', 'changeset': 80731891, 'visible': True, 'osm_timestamp': 1581188143000000, 'geometry': None, 'all_tags': '[]', 'latitude': '7.011165500', 'longitude': '13.025633100'}, {'id': 7136966285, 'version': 1, 'username': 'victoire Tsajio', 'changeset': 79655185, 'visible': True, 'osm_timestamp': 1579185841000000, 'geometry': None, 'all_tags': '[]', 'latitude': '6.503585400', 'longitude': '11.779961600'}, {'id': 7204208818, 'version': 1, 'username': 'victoire Tsajio', 'changeset': 80865294, 'visible': True, 'osm_timestamp': 1581445682000000, 'geometry': None, 'all_tags': '[]', 'latitude': '7.384704700', 'longitude': '13.482831700'}, {'id': 7198127485, 'version': 1, 'username': 'victoire Tsajio', 'changeset': 80758733, 'visible': True, 'osm_timestamp': 1581269547000000, 'geometry': None, 'all_tags': '[]', 'latitude': '7.249313300', 'longitude': '13.503087800'}]
--------------------------------------------------
Table full name: GEO_OPENSTREETMAP_WORLDPOP.GEO_OPENSTREETMAP.PLANET_RELATIONS
Column name: visible Type: BOOLEAN
Column name: osm_timestamp Type: NUMBER
Column name: id Type: NUMBER
Column name: username Type: TEXT
Column name: all_tags Type: VARIANT
Column name: geometry Type: BINARY
Column name: members Type: VARIANT
Column name: changeset Type: NUMBER
Column name: version Type: NUMBER
Sample rows:
[{'id': 10690020, 'version': 1, 'username': 'Marius Geitle_import', 'changeset': 80711931, 'visible': True, 'osm_timestamp': 1581117816000000, 'geometry': 'bytearray(b\'\\x01\\x03\\x00\\x00\\x00\\x03\\x00\\x00\\x00/\\x00\\x00\\x003\\xf3.(\\x1d\\xea @\\xcdLz)\\x86qM@\\xc3\\xe2&Y=\\xea @/S\\xee\\x99\\x80qM@I\\x86w\\x14B\\xea @\\xd6\\x89&\\xab}qM@\\x8d$A\\xb8\\x02\\xea @\\x7f\\xb4\\xee\\xd5}qM@\\x87d\\x12?\\x10\\xea @".\\xef`zqM@\\x8b\\xaf\\xd1\\xcdY\\xea @A\\xc9\\xd3\\xa8vqM@\\xdd\\xc7\\x1b\\xaas\\xea @YY\\x91\\x87tqM@\\x94U"\\x9a\\x8a\\xea @\\xdd)xerqM@\\x00w4i\\xae\\xea @\\xab\\x84\\x82\\xadmqM@A\\x17\\x1eE\\xe7\\xea @`3eLfqM@v\\x01\\xe5\\xa5Q\\xeb @,:H>eqM@`o\\xac\\xd5h\\xeb @\\x8b<I\\xbafqM@\\xd9\\xe8A\\xe6o\\xeb @u}0:jqM@W\\xf06\\xcaU\\xeb @\\xa6\\x998\\x03mqM@&\\\\#\\xdd*\\xeb @\\xd3\\x11e\\x14pqM@\\x00\\x9c(S\\x16\\xeb @y~\\xac;qqM@\\x1c\\x1fw[3\\xeb @\\xf8R\\x1d\\x17zqM@#\\x11uz9\\xeb @\\xa9b*\\xfd\\x84qM@*{\\x01\\xacD\\xeb @\\x14i\\xd1\\xf1\\x87qM@\\xb6h\\x01\\xdaV\\xeb @\\x91\\xe6\\xd9\\xf6\\x87qM@\\x0e^`\\xfbn\\xeb @\\xbc\\xcd\\x1b\\\'\\x85qM@\\xbe\\xc0\\xacP\\xa4\\xeb @\\x7f\\xc9\\xd7\\xaf\\x85qM@T\\xa1\\xcb\\xe5P\\xec @\\x02k0h|qM@\\xa16\\xaa\\xd3\\x81\\xec @\\xb1\\x0e\\xec\\x9dvqM@id\\xebt{\\xec @\\\\\\x7f\\xa6\\xb9pqM@\\x03\\x8d\\x88\\x18e\\xec @|n\\xb2WiqM@h<\\x11\\xc4y\\xec @y\\xa3ElfqM@4\\xa3\\x1f\\r\\xa7\\xec @`\\xcb\\xd0\\x1diqM@\\x1fc\\x93\\xa1\\xcf\\xec @\\t\\xa1(unqM@\\xb0\\xc5\\x13\\xe6\\xe2\\xec @\\x07G\\xc9\\xabsqM@B\\xc6\\xed\\xe1\\xdc\\xec @\\xcec\\xde\\xf4xqM@zW\\xe2\\xa6\\xab\\xec @\\x8di\\\\\\xee\\x82qM@\\x94:\\xb7\\xbfi\\xec @+\\xe7\\xe6v\\x8aqM@\\xd6\\x0fV\\x08P\\xec @\\x0b8\\x95V\\x8dqM@\\xae\\x04\\x9c\\xef\\xf1\\xeb @c\\x0f\\x92\\xaa\\x92qM@\\xb2\\xd3\\xb40\\xb0\\xeb @\\x85\\x07\\x17<\\x96qM@\\xd9?\\xf4I\\x93\\xeb @q\\x96\\xed\\x9e\\x97qM@\\xf83\\xbcY\\x83\\xeb @\\x1f\\x98\\x92\\x9b\\x97qM@I\\xc6{\\x1fX\\xeb @\\x0b\\x13\\xfc%\\x98qM@J\\xb0\\x82)\\x14\\xeb @56\\x85\\xdf\\x97qM@\\xec\\xab\\x06\\xbc\\\'\\xea @tz\\x83\\xd4\\x92qM@:F\\xb2G\\xa8\\xe9 @P\\x84\\xc3\\xc1\\x94qM@\\x84\\x87\\xc4\\x98O\\xe9 @r\\xd0o\\xa9\\x94qM@\\x0f\\x13\\x1e~H\\xe9 @2\\xe7\\x19\\xfb\\x92qM@R\\xd1\\xfdA\\xc9\\xe9 @rK\\xf5\\xae\\x8bqM@Aa\\x9a3\\xec\\xe9 @\\xe5\\xb0\\xeab\\x89qM@3\\xf3.(\\x1d\\xea @\\xcdLz)\\x86qM@\\n\\x00\\x00\\x00\\x16\\xf8\\x8an\\xbd\\xea @\\x84\\x06Q\\xadtqM@\\x07\\xd6\\xcc\\xb5\\xc3\\xea @[\\xde\\x0b\\x82}qM@\\xa1r\\x02\\x89\\xdc\\xea @\\xac\\xa2\\xe4z\\x80qM@\\xc3P\\xe2\\xce\\xe0\\xea @\\xbc\\xb9\\xaeN\\x84qM@r\\xde\\xff\\xc7\\t\\xeb @\\xf8\\x19\\x17\\x0e\\x84qM@\\xd5\\xc8S\\xfb\\x19\\xeb @T\\x8b-\\xa9\\x7fqM@H.\\xff!\\xfd\\xea @\\xfb~j\\xbctqM@Zs\\x91\\x8c\\xe6\\xea @e\\xf9\\x15\\xc6qqM@/)-\\x12\\xc9\\xea @\\x8ay\\x0cEpqM@\\x16\\xf8\\x8an\\xbd\\xea @\\x84\\x06Q\\xadtqM@\\x07\\x00\\x00\\x00)\\x0e\\xa0\\xdf\\xf7\\xeb @_0\\xb8\\xe6\\x8eqM@\\xbf\\x05~\\xf9\\t\\xec @Q\\xf2\\x8fc\\x90qM@\\xbeGG\\x83%\\xec @~\\x97R\\x97\\x8cqM@\\xf1\\x87\\x9f\\xff\\x1e\\xec @ \\x17\\x8b\\x95\\x87qM@\\xa3)\\x96\\xb6\\x13\\xec @\\xc2\\x14\\x8a\\x19\\x86qM@!\\xc1\\xf9y\\xf8\\xeb @\\xe0\\xa3\\xfez\\x85qM@)\\x0e\\xa0\\xdf\\xf7\\xeb @_0\\xb8\\xe6\\x8eqM@\')', 'all_tags': '[\n  {\n    "key": "natural",\n    "value": "wetland"\n  },\n  {\n    "key": "type",\n    "value": "multipolygon"\n  },\n  {\n    "key": "wetland",\n    "value": "bog"\n  }\n]', 'members': '[\n  {\n    "id": 770759858,\n    "role": "outer",\n    "type": "w"\n  },\n  {\n    "id": 770407551,\n    "role": "inner",\n    "type": "w"\n  },\n  {\n    "id": 770407528,\n    "role": "inner",\n    "type": "w"\n  }\n]'}, {'id': 8754016, 'version': 1, 'username': 'Reitstoen_import', 'changeset': 63024511, 'visible': True, 'osm_timestamp': 1538174385000000, 'geometry': 'bytearray(b\'\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00^\\x00\\x00\\x00`\\x82\\t\\x92-a%@\\x97b\\xfdU6\\xf6N@\\xbd\\x0c\\xb5\\\\\\xec`%@@\\xf6\\xd5\\xb0:\\xf6N@\\x0b\\xa1\\x83.\\xe1`%@d\\x84\\x01\\x95;\\xf6N@E\\xbe\\xf0\\xef\\xd8`%@K\\xb2\\xc4\\xb9<\\xf6N@\\x91*\\xe5\\x10\\xcc`%@\\xc1f%R?\\xf6N@W\\xdb\\xa8\\xa9\\xc0`%@\\xbc\\xff\\xd9\\xa0@\\xf6N@\\xbaFp\\xc8\\xab`%@C\\x11\\xf7\\xfd@\\xf6N@\\xcb8W\\xde\\x9f`%@\\x9d\\xb8\\x1c\\xaf@\\xf6N@@H`\\xbd\\x9b`%@\\x03V\\xb3s?\\xf6N@]\\xa9\\xc2\\xfa\\x9a`%@\\x93\\xa6A\\xd1<\\xf6N@"\\x9fF\\x10\\x9d`%@\\xdc*-\\xc8;\\xf6N@\\x19\\x9f]\\x19\\xaf`%@\\xe3\\xb1U88\\xf6N@?\\xa2\\t\\x14\\xb1`%@1\\xb1\\xf9\\xb86\\xf6N@"\\xa9;\\x05\\xaf`%@\\t\\xb4\\x8513\\xf6N@\\xc6PN\\xb4\\xab`%@o\\xdbRb2\\xf6N@\\xc5{\\x1fX\\x9f`%@\\xa4\\xf4L/1\\xf6N@\\xe8\\xffUG\\x8e`%@\\xe1\\x9cl^0\\xf6N@r\\x84\\xb1*g`%@\\xbe\\xb2\\x1c2/\\xf6N@\\x8f\\xb3D\\xc2R`%@\\xe8y\\x81\\xa3.\\xf6N@\\x1f\\x12\\xbe\\xf77`%@\\x12\\x89\\x9d\\x84-\\xf6N@te\\xab&\\xe3_%@\\x1c\\xe8\\xebC(\\xf6N@q\\x13\\xff\\xc1\\xd1_%@\\x93\\x94O\\xea&\\xf6N@\\xd2F\\tU\\xc5_%@\\xff6\\xd5\\xa4%\\xf6N@\\xb3\\x10x\\xbb\\xb9_%@\\xb3\\x15\\x8f\\xe6#\\xf6N@\\x0f\\xbc\\x10a\\xb2_%@\\xd7\\xdd<\\xd5!\\xf6N@<g\\x0b\\x08\\xad_%@\\x00\\x82\\x83\\x07\\x17\\xf6N@\\x11D\\x82N\\xad_%@\\xd2\\xf5\\xe9\\x1d\\x13\\xf6N@\\x9a/\\x8ay\\xb1_%@:\\xf5\\xdc\\x9d\\x10\\xf6N@\\x18\\x1e\\xa0\\xa0\\xb9_%@\\xed\\x1bNO\\x0e\\xf6N@\\x1a\\x08\\xb8\\xd6\\xcd_%@\\x90\\x81\\xe1\\x01\\n\\xf6N@\\xe2d\\xd1*\\xe9_%@\\xf8\\xa0\\xb1@\\x05\\xf6N@@\\xbd\\xbe{\\xec_%@\\x03\\x97"T\\x04\\xf6N@\\x87\\xb1;\\x93\\xec_%@\\xf4\\x7fX\\x80\\x00\\xf6N@b6\\x01\\x86\\xe5_%@de\\x8f\\xab\\xec\\xf5N@(\\xfc\\xad\\xf8\\xe1_%@\\x12\\xcf\\xc8\\xd6\\xe9\\xf5N@k\\xee2\\r\\xd4_%@\\xd2{\\x19{\\xe5\\xf5N@\\x8f,\\xaa\\x8f\\xd1_%@\\x86\\xdc\\x0c7\\xe0\\xf5N@\\xec\\x14\\x06\\xc0\\xd3_%@Ad\\x91&\\xde\\xf5N@\\xd9\\xedX\\x11\\xda_%@HA\\xa6k\\xdc\\xf5N@zJ\\xbd]\\xe5_%@6\\xf0Y\\x8d\\xdb\\xf5N@~\\xdc#@\\xf2_%@\\x96\\xf8\\x92|\\xdb\\xf5N@\\xa3\\xef\\xc9\\x1e\\xfc_%@H\\x89]\\xdb\\xdb\\xf5N@\\x99\\xda\\xf7M\\x06`%@B\\xf4\\xff\\x05\\xdd\\xf5N@*\\xd0\\xddd\\n`%@/\\xcb\\x8d\\xd8\\xdd\\xf5N@\\xdd[\\xecQ\\x13`%@JB"m\\xe3\\xf5N@\\xb8\\xd5\\xbd_\\x16`%@\\x08\\xc3%l\\xe4\\xf5N@\\xa1\\xb6\\r\\xa3 `%@&2\\xbd\\x0e\\xe6\\xf5N@W\\xc7\\x96\\x8a2`%@\\x9c\\xd2\\xb0\\xce\\xe7\\xf5N@A\\xe8\\xa0K8`%@\\x8f\\xae-\\x97\\xe8\\xf5N@\\xcbc\\x17V;`%@\\xb7oZ\\x95\\xe9\\xf5N@\\xee\\x11 \\xf99`%@\\x81\\xc6\\xf1\\xe8\\xeb\\xf5N@\\xbf\\\\0]-`%@\\xfc\\x1d\\xe5\\xbb\\xef\\xf5N@61n\\xb4-`%@+\\x0c\\xdb`\\xf2\\xf5N@\\x9eK\\x82\\x811`%@\\x13:\\x9e\\x85\\xf3\\xf5N@\\xba\\x04\\x96\\x128`%@B\\xd2\\xa7U\\xf4\\xf5N@\\x19\\n\\xd8\\x0eF`%@xo\\xa0\\x1b\\xf5\\xf5N@\\xac\\x96*\\x07i`%@Z\\xe0+\\xba\\xf5\\xf5N@+=\\x89\\xbeq`%@\\xf3\\x00\\x16\\xf9\\xf5\\xf5N@\\xa4\\xab*\\xea\\x82`%@\\x10\\xb8d\\x0b\\xf7\\xf5N@J\\xcd\\xc3\\xae\\x92`%@\\xa9\\xa4\\x04\\xb3\\xf8\\xf5N@E\\xfa\\xa3^\\xa6`%@m\\xdc\\x07\\xc5\\xfb\\xf5N@\\xdc\\xfcu]\\xae`%@f-\\x05\\xa4\\xfd\\xf5N@\\x81\\xb9q\\xe6\\xb2`%@\\x12=\\xdf\\x05\\x00\\xf6N@\\x0f\\x12\\xfd5\\xb4`%@L\\xd3V\\xdb\\x03\\xf6N@\\x81q\\xbav\\xb3`%@\\x02\\x85z\\xfa\\x08\\xf6N@@\\xea\\xc0\\x83\\xb0`%@\\xa0\\xe6\\x9a\\xb8\\x0b\\xf6N@y\\x0f+7\\xac`%@^\\x05B\\xfc\\r\\xf6N@t\\x9d\\xa1\\x13\\x9d`%@\\x8c\\x01m\\x06\\x13\\xf6N@j\\x99\\xb1\\r\\x81`%@\\x0bR\\xdf\\xe8\\x19\\xf6N@+\\x12\\xb8\\x1a~`%@.\\x0e\\x1d\\xf1\\x1a\\xf6N@\\x19\\x03\\xeb8~`%@\\xc6\\xe0\\x17M\\x1d\\xf6N@\\xe2\\xfd]D\\x80`%@\\x1a\\xd9:\\xdd\\x1e\\xf6N@ \\xb5.\\xda\\x88`%@\\r\\x95\\xda\\xe6!\\xf6N@\\x88\\x14\\x03$\\x9a`%@\\xaa`TR\\\'\\xf6N@\\xc4\\x13\\x8b)\\xa2`%@\\x04^f\\xd8(\\xf6N@\\xb0Q{\\xb6\\xb3`%@\\x9e\\xa6*\\xc8*\\xf6N@x\\xae\\x94\\n\\xcf`%@\\xd1\\xb3\\xb4\\xae,\\xf6N@\\x06\\x04)g\\xde`%@\\x0cV\\x9cj-\\xf6N@\\xca+|"\\xf4`%@\\xbf\\x8aB\\x81-\\xf6N@\\x8ef\\xc0\\xb4\\x03a%@N\\x17\\x18h-\\xf6N@ \\t\\xfbv\\x12a%@\\xefV\\x96\\xe8,\\xf6N@\\xb0K\\x9e\\xfc\\\'a%@\\x9c\\xba\\x97\\xa0+\\xf6N@hI6\\r@a%@\\xe5*\\x16\\xbf)\\xf6N@j{\\x05\\xb3Sa%@\\xf2b\\x06\\xcf)\\xf6N@\\xec\\xf1\\x8c\\xc7Va%@B\\xc5\\x82\\x0c.\\xf6N@\\xa4\\xb5X@Wa%@\\x0c\\xac\\x88?/\\xf6N@\\x96N\\xda\\nPa%@\\xefd\\xcbM/\\xf6N@\\xb3ry\\xbdEa%@\\x1e\\xfd\\xd4\\x1d0\\xf6N@DKy\\x08>a%@R$\\x04P1\\xf6N@\\xc5\\xac\\x17C9a%@\\x98\\xb6$\\xac2\\xf6N@s\\x86\\xe2\\x8e7a%@\\x15\\x00\\xe3\\x194\\xf6N@\\x19c\\xbb\\xd69a%@bi\\xe0G5\\xf6N@\\xf0T\\x1b\\xf7Aa%@V\\x8d\\x14\\x805\\xf6N@`\\x82\\t\\x92-a%@\\x97b\\xfdU6\\xf6N@\')', 'all_tags': '[\n  {\n    "key": "natural",\n    "value": "wetland"\n  },\n  {\n    "key": "type",\n    "value": "multipolygon"\n  },\n  {\n    "key": "wetland",\n    "value": "bog"\n  }\n]', 'members': '[\n  {\n    "id": 627858735,\n    "role": "outer",\n    "type": "w"\n  },\n  {\n    "id": 628915282,\n    "role": "outer",\n    "type": "w"\n  }\n]'}, {'id': 8749538, 'version': 1, 'username': 'Reitstoen_import', 'changeset': 62988214, 'visible': True, 'osm_timestamp': 1538076373000000, 'geometry': 'bytearray(b\'\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00-\\x00\\x00\\x00\\x8d\\xf1\\xbc\\xaf%\\xeb&@:@0G\\x8f\\x0fO@c\\x91pk\\x1c\\xeb&@\\x19 \\xd1\\x04\\x8a\\x0fO@F\\x1a&d1\\xeb&@\\x9e*:\\xed\\x84\\x0fO@[m\\xb4\\xd2Z\\xeb&@\\x00+v\\xea\\x80\\x0fO@\\xa3\\xb1\\xf6w\\xb6\\xeb&@\\xd8G\\xa7\\xae|\\x0fO@\\xc5\\x0cC\\x9ag\\xeb&@\\xa5\\xf8\\x9d\\xcby\\x0fO@\\xe00\\xd1 \\x05\\xeb&@\\x99"\\nwx\\x0fO@uwS\\x80\\xde\\xea&@\\xde2\\xf1X}\\x0fO@\\xef\\xcc\\x04\\xc3\\xb9\\xea&@\\x90\\x14\\xec\\x1a\\x88\\x0fO@\\x00\\xad\\xf9\\xf1\\x97\\xea&@\\x1d3\\xf5_\\x8c\\x0fO@\\xcf\\xe2 |\\x83\\xea&@\\xac}KJ\\x8b\\x0fO@\\x1c2/\\xd1j\\xea&@\\x9e*:\\xed\\x84\\x0fO@\\x8f\\x04u%]\\xea&@\\xcewK\\xcdy\\x0fO@\\x8a"Z\\xe1L\\xea&@\\xfeh8en\\x0fO@\\xf1\\xea\\xc1I?\\xea&@\\x9f>]8k\\x0fO@\\x93\\x17>\\xc7\\xec\\xe9&@\\x97\\xf0:\\xd1d\\x0fO@\\xe3\\x98\\x1b\\xc2\\xe7\\xe9&@?\\xed\\xf0\\xd7d\\x0fO@(\\x87\\xaa\\xf3\\x03\\xea&@d\\xad\\xa1\\xd4^\\x0fO@\\x1a]\\xefH\\x06\\xea&@l\\xfaG:^\\x0fO@\\xa3]\\xe0M\\x12\\xea&@\\xc0\\xa2\\xb6h\\\\\\x0fO@Ls\\x86=H\\xea&@_\\x18D\\xff_\\x0fO@\\xe5\\xe1\\xf3y{\\xea&@\\xaa\\xd7-\\x02c\\x0fO@\\xb2\\xf1`\\x8b\\xdd\\xea&@\\xd3\\x84\\xed\\\'c\\x0fO@\\\\$\\xedF\\x1f\\xeb&@\\xb6\\xad\\xc1Vd\\x0fO@\\xc8h\\xd3\\xc72\\xeb&@\\xa4\\x1a\\xf6{b\\x0fO@\\xd6\\xd7_\\x1b\\x96\\xeb&@\\xe98\\xc85O\\x0fO@\\xf0\\xf2\\x19\\xf5\\xb5\\xeb&@\\xe6\\xf7\\x91\\xb6L\\x0fO@W\\xa2\\xa2\\xa0\\xca\\xeb&@\\xfca:cN\\x0fO@*\\x1f\\x82\\xaa\\xd1\\xeb&@\\xacP\\xee\\x88T\\x
--------------------------------------------------
Table full name: GEO_OPENSTREETMAP_WORLDPOP.GEO_OPENSTREETMAP.HISTORY_LAYERS
Column name: layer_name Type: TEXT
Column name: osm_id Type: NUMBER
Column name: all_tags Type: VARIANT
Column name: osm_way_id Type: NUMBER
Column name: geometry Type: BINARY
Column name: gdal_type Type: TEXT
Column name: layer_code Type: NUMBER
Column name: osm_timestamp Type: NUMBER
Column name: osm_version Type: NUMBER
Column name: layer_class Type: TEXT
Sample rows:
[{'layer_code': 5260, 'layer_class': 'traffic', 'layer_name': 'parking', 'osm_id': 741825328, 'osm_way_id': 741825328, 'osm_timestamp': 1589776763000000, 'osm_version': 3, 'all_tags': '[\n  {\n    "key": "amenity",\n    "value": "parking"\n  }\n]', 'geometry': 'bytearray(b"\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x0b\\x00\\x00\\x00\\xdb\\x12^\\\'\\x9aL4@\\x08\\xc6f\\xec\\xf0\\xaeI@P\\x10\\xf20\\xa3L4@\\x0c\\x83\\x9er\\xf1\\xaeI@\\x9f\\x15\\xce$\\xa0L4@ML\\x17b\\xf5\\xaeI@\\x0c\\xe8*\\x82\\xa4L4@Y\\xda\\xf3F\\xf7\\xaeI@4\\x0b\\xb4;\\xa4L4@\\xe4\\xa2\\x10\\xb7\\xf9\\xaeI@\\xd3\\xcf\\xac\\xb6\\xacL4@\\xaa\\x14\\x96\\xd3\\xf9\\xaeI@\\xc0\\x03\\xa8N\\xacL4@\\xa1?~\\x80\\xff\\xaeI@w\\xd5^\\x9f\\x94L4@|\\xc5\\xbft\\xff\\xaeI@m\\xdf\\xed\\x8b\\x95L4@^\\x07\\xbd\\xed\\xf8\\xaeI@\\xbc\\xbdk\\xd0\\x97L4@\\xb9\\x92x\\xd4\\xf3\\xaeI@\\xdb\\x12^\\\'\\x9aL4@\\x08\\xc6f\\xec\\xf0\\xaeI@")', 'gdal_type': None}, {'layer_code': 5260, 'layer_class': 'traffic', 'layer_name': 'parking', 'osm_id': 257038338, 'osm_way_id': 257038338, 'osm_timestamp': 1390004985000000, 'osm_version': 1, 'all_tags': '[\n  {\n    "key": "amenity",\n    "value": "parking"\n  }\n]', 'geometry': 'bytearray(b\'\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x86A\\x05,^\\x054@w\\xab\\xf8\\xd0O\\xc5I@"\\xd0\\xbb\\x0cZ\\x054@Z\\xc0_\\\'P\\xc5I@{j\\xf5\\xd5U\\x054@a{\\xd2.K\\xc5I@\\xde\\xdb>\\xf5Y\\x054@\\x7ffk\\xd8J\\xc5I@\\x86A\\x05,^\\x054@w\\xab\\xf8\\xd0O\\xc5I@\')', 'gdal_type': None}, {'layer_code': 5260, 'layer_class': 'traffic', 'layer_name': 'parking', 'osm_id': 208444794, 'osm_way_id': 208444794, 'osm_timestamp': 1362504492000000, 'osm_version': 1, 'all_tags': '[\n  {\n    "key": "amenity",\n    "value": "parking"\n  }\n]', 'geometry': "bytearray(b'\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x04\\x00\\x00\\x002Tj\\x9b\\x87\\x044@\\x97\\xfa\\x1e\\x9a\\x1e\\xc4I@\\x92h\\x13q\\x84\\x044@\\x01,\\x972\\x15\\xc4I@\\xfc\\xc6\\xe8\\xca\\xb1\\x044@\\x98\\xb8\\x9f\\x9d\\x1d\\xc4I@2Tj\\x9b\\x87\\x044@\\x97\\xfa\\x1e\\x9a\\x1e\\xc4I@')", 'gdal_type': None}, {'layer_code': 5260, 'layer_class': 'traffic', 'layer_name': 'parking', 'osm_id': 239759646, 'osm_way_id': 239759646, 'osm_timestamp': 1380380021000000, 'osm_version': 2, 'all_tags': '[\n  {\n    "key": "amenity",\n    "value": "parking"\n  }\n]', 'geometry': "bytearray(b'\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x08\\x00\\x00\\x00u,\\xb6IE\\x014@\\xe6\\x93\\x15\\xc3\\xd5\\xc3I@\\xf8\\xca\\x17\\x0fJ\\x014@X\\xdc$\\xab\\xc7\\xc3I@\\x1c\\x06\\x98\\x9eU\\x014@\\x94\\xd23\\xbd\\xc4\\xc3I@\\x9c\\xd5L\\x08g\\x014@\\xa8\\x99I/\\xc5\\xc3I@\\x9a\\xe1\\xbc\\xeec\\x014@>\\xf2\\x07\\x03\\xcf\\xc3I@\\xf9$\\xc1e_\\x014@w\\x80\\x82\\xe6\\xce\\xc3I@\\xfd\\x91D\\x8a\\\\\\x014@\\xaa\\xeb\\xf5\\x93\\xd6\\xc3I@u,\\xb6IE\\x014@\\xe6\\x93\\x15\\xc3\\xd5\\xc3I@')", 'gdal_type': None}, {'layer_code': 5260, 'layer_class': 'traffic', 'layer_name': 'parking', 'osm_id': 741576051, 'osm_way_id': 741576051, 'osm_timestamp': 1590072866000000, 'osm_version': 3, 'all_tags': '[\n  {\n    "key": "amenity",\n    "value": "parking"\n  }\n]', 'geometry': "bytearray(b'\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\xafR\\xf7\\xb7\\xbaF4@\\xbf\\xdc8sY\\xb0I@\\x8e\\x00\\x13]\\xbcF4@Q\\xa3\\x90dV\\xb0I@\\x1c\\x14\\xef[\\x08G4@+\\xbb\\x05\\xb7Z\\xb0I@\\x8e\\xbbc\\x0c\\x07G4@.X`~]\\xb0I@\\xa0\\xd5$\\xd3\\xfcF4@\\x89\\xa3a\\xe7\\\\\\xb0I@1\\x1f\\xb5.\\xdaF4@\\x9c\\x8aT\\x18[\\xb0I@\\xafR\\xf7\\xb7\\xbaF4@\\xbf\\xdc8sY\\xb0I@')", 'gdal_type': None}]
--------------------------------------------------
Table full name: GEO_OPENSTREETMAP_WORLDPOP.GEO_OPENSTREETMAP.HISTORY_RELATIONS
Column name: username Type: TEXT
Column name: members Type: VARIANT
Column name: osm_timestamp Type: NUMBER
Column name: id Type: NUMBER
Column name: visible Type: BOOLEAN
Column name: version Type: NUMBER
Column name: geometry Type: BINARY
Column name: all_tags Type: VARIANT
Column name: changeset Type: NUMBER
Sample rows:
[{'id': 2348169, 'version': 343, 'username': 'ksairus', 'changeset': 69292905, 'visible': True, 'osm_timestamp': 1555470815000000, 'geometry': 'bytearray(b"\\x01\\x04\\x00\\x00\\x00/\\x00\\x00\\x00\\x01\\x01\\x00\\x00\\x00\\x07\\x86)\\x80\\x18}>@[\\xfa\\xe11M8I@\\x01\\x01\\x00\\x00\\x00\\x9a\\x9dE\\xefT7@@\\xeb\\tK<\\xa0\\x0fI@\\x01\\x01\\x00\\x00\\x00\\x95\\xeftBCCA@`rY;@\\xcdH@\\x01\\x01\\x00\\x00\\x00\\xd6\\xeb\\\'\\xad\\t}G@\\xe4\\xa6aSB\\x9eI@\\x01\\x01\\x00\\x00\\x00\\xdd\\xe3\\x96\\xa0\\xd0\\xffF@\\xd3\\xa4\\xca\\xe6`\\xc5I@\\x01\\x01\\x00\\x00\\x00\\xc8\\xed\\x97OV\\x81F@|p-IT\\xf0I@\\x01\\x01\\x00\\x00\\x007\\xb1\\xc0Wt\\xd2B@\\xa8\\x989\\x13\\x89\\xd3H@\\x01\\x01\\x00\\x00\\x00d\\x9f\\xb6\\xfcv\\x0fC@kI\\xfd\\xab}\\x19I@\\x01\\x01\\x00\\x00\\x00{\\xbf\\xd1\\x8e\\x1b\\xc1C@\\xca\\xd4n\\x05^}I@\\x01\\x01\\x00\\x00\\x00\\xb8?\\xcd\\x7f\\xfe\\x8cC@A>2g\\xc7lI@\\x01\\x01\\x00\\x00\\x00\\xa4\\xff\\xe5Z\\xb4UC@\\xc3\\x8e\\xb5u&OI@\\x01\\x01\\x00\\x00\\x00?\\x14q\\xdf\\x0f\\x1aB@C6\\xeb\\xe7\\xa8\\xfeH@\\x01\\x01\\x00\\x00\\x00\\x16\\xa13\\xc4\\x0c\\xafA@\\x8d\\xf7\\x99i\\xb1\\xf6H@\\x01\\x01\\x00\\x00\\x00G\\xbc\\xe1\\xe3\\xb8\\\\D@\\x1b#\\xc8\\xf7{\\x8fI@\\x01\\x01\\x00\\x00\\x00\\xd48@\\xd5\\x8d\\xc8D@\\x95\\xdbQ\\xf7\\\\\\x8aI@\\x01\\x01\\x00\\x00\\x00\\xc1\\xbd!C}\\x1fE@\\xc3\\x01\\x99B\\x8c\\x99I@\\x01\\x01\\x00\\x00\\x00t\\x90!\\x11d\\x90E@s\\xbd\\x12\\xed\\xcf\\xc5I@\\x01\\x01\\x00\\x00\\x00e\\x8a\\x83\\x95T\\xc0E@scz\\xc2\\x12\\xf8I@\\x01\\x01\\x00\\x00\\x00\\x9f\\xc2\\x11\\xa4R\\xaeE@\\xac\\xcdZe\\x01\\xf1I@\\x01\\x01\\x00\\x00\\x00 a\\x18\\xb0\\xe4\\xe4E@\\xba%9`W!J@\\x01\\x01\\x00\\x00\\x00<\\xfef\\xbds#H@^<(\\xcd\\x8b\\xacI@\\x01\\x01\\x00\\x00\\x00\\xb6%r\\xc1\\x19\\xdeH@\\xed\\xf5\\xee\\x8f\\xf7\\x98I@\\x01\\x01\\x00\\x00\\x00_\\x1f\\x8c\\x8e\\x9a\\x7fJ@g\\x12P<\\xc2\\x95I@\\x01\\x01\\x00\\x00\\x00q}i\\x9b,\\x93J@\\xf3\\x16\\xfe\\xc2\\xe1\\x95I@\\x01\\x01\\x00\\x00\\x00\\xf1Dk\\xa0T\\xafI@\\xc3-\\x1fII\\x9dI@\\x01\\x01\\x00\\x00\\x00j[\\x83\\xad\\xc8\\x87I@\\xc0\\xfe5j\\xcf\\xa1I@\\x01\\x01\\x00\\x00\\x00\\xd96\\xd6\\x0f\\xfblI@\\x1e\\xcaaA\\xab\\x98I@\\x01\\x01\\x00\\x00\\x00\\x1c\\xb0\\x06\\x83\\xc6\\x06I@\\xa7x\\xb7\\r\\xfe\\x98I@\\x01\\x01\\x00\\x00\\x00+\\x82\\xa4\\xf4\\xf1%I@h$B#\\xd8\\x8dI@\\x01\\x01\\x00\\x00\\x00=+i\\xc57~K@\\xcf\\x97\\x83E\\xea\\x95I@\\x01\\x01\\x00\\x00\\x00\\xcdx\\x000C\\nK@R\\x85\\x9a|\\x0e\\x8bI@\\x01\\x01\\x00\\x00\\x00\\xdd\\xce\\x19\\xac\\x93\\x89K@\\x85\\xf3\\x15I`\\xe3I@\\x01\\x01\\x00\\x00\\x00U#\\x05`MOM@ew\\x92\\xbeZ\\x9bI@\\x01\\x01\\x00\\x00\\x00\\xa4\\x84`U=\\x05P@\\x0e\\xccv*\\x854J@\\x01\\x01\\x00\\x00\\x00\\x16\\x94X\\x08a\\\'P@.q?;;9J@\\x01\\x01\\x00\\x00\\x00\\x96\\xd5\\xcf\\xf6\\xc3\\x99P@f\\x9flo\\\\\\xfaI@\\x01\\x01\\x00\\x00\\x00\\x9a\\xf1\\x11\\x8c^iP@\\xf6\\xc8\\x8b\\xf1\\x06\\x11J@\\x01\\x01\\x00\\x00\\x00\\xe9,\\xb3\\x08\\xc5\\xd4P@U\\xd3?\\xd2\\xf1\\xf3I@\\x01\\x01\\x00\\x00\\x00\\xbcw\\xd4\\x98\\x10FR@\\xc7\\x1f\\xb1\\x82\\x84\\xe5H@\\x01\\x01\\x00\\x00\\x00f\\xdc\\xd4@sLR@&4\\xa4\\xe5\\x9b\\xf7H@\\x01\\x01\\x00\\x00\\x00\\x98@\\x00_@NR@\\xc4\\x02\\x04\\x18;\\xfcH@\\x01\\x01\\x00\\x00\\x00\\xb8Q\\t\\xf4.\\xdaQ@1\\x93M^\\t\\x99I@\\x01\\x01\\x00\\x00\\x00\\xb9\\x81L|\\x7fuQ@\\x88\\xf6g\\xf5\\xc4\\xd0I@\\x01\\x01\\x00\\x00\\x00\\xc5B\\x08#\\xd1JQ@\\x06\\xda\\x1dR\\x0c\\xe5I@\\x01\\x01\\x00\\x00\\x00\\xd5\\x98k,<\\x16Q@\\xedX\\x11\\xda\\x17\\xe7I@\\x01\\x01\\x00\\x00\\x00\\x92\\x96%\\x95\\x84JO@O\\x7fQ\\xdd\\xb7XJ@\\x01\\x01\\x00\\x00\\x00S<.\\xaaERN@w\\n\\xb9R\\xcf\\x86J@")', 'members': '[\n  {\n    "id": 4025962078,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 2781144802,\n    "role": "forward_stop",\n    "type": "n"\n  },\n  {\n    "id": 1843860388,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 4020137343,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 4022911771,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 3839518929,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 4020137344,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 4025962072,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 4025083261,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 4032336056,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 4029732480,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 4021927560,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 4020137348,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 300311935,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 1617880845,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 418216025,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 938204194,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 4032336060,\n    "role": "forward_stop",\n    "type": "n"\n  },\n  {\n    "id": 3783616259,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 4020137347,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 4020137349,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 1639090916,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 3783594367,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 4030794165,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 4038453578,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 4072002004,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 300582144,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 4072002009,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 4072001993,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 4072001996,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 2014361423,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 910772729,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 1829903457,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 2450700508,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 2450549271,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 309489707,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 4016637102,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 577771203,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 1118684630,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 902316263,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 304726798,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 1576981974,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 394980121,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 3394213879,\n    "role": "forward_stop",\n    "type": "n"\n  },\n  {\n    "id": 719596870,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 1232861103,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 2644051429,\n    "role": "stop",\n    "type": "n"\n  },\n  {\n    "id": 529593143,\n    "role": "forward_stop",\n    "type": "w"\n  },\n  {\n    "id": 583796098,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 583796094,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 583796096,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 407073084,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 415742931,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 415742926,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 256738526,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 407073096,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 407073095,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 272768971,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 323965022,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 323965021,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 275713683,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 275713684,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 684286378,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 684286379,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 463320294,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 463320293,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 27678368,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 27671394,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 407073048,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 407073052,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 407073051,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 407073062,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 358892610,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 407073056,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 358892596,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 407073059,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 358892606,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 407073055,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 407073053,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 407073078,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 365243343,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 326239177,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 27671395,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 27671396,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 359021821,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 359021822,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 234784794,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 234784793,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 24993970,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 27671973,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 27671974,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 285646385,\n    "role": "",\n    "type": "w"\n  },\n  {\n    "id": 310617258,\n    "role": "",\n    "type": "w
--------------------------------------------------
Table full name: GEO_OPENSTREETMAP_WORLDPOP.GEO_OPENSTREETMAP.PLANET_WAYS
Column name: version Type: NUMBER
Column name: geometry Type: BINARY
Column name: username Type: TEXT
Column name: visible Type: BOOLEAN
Column name: all_tags Type: VARIANT
Column name: osm_timestamp Type: NUMBER
Column name: nodes Type: VARIANT
Column name: id Type: NUMBER
Column name: changeset Type: NUMBER
Sample rows:
[{'id': 73165139, 'version': 2, 'username': 'jumbanho', 'changeset': 10475054, 'visible': True, 'osm_timestamp': 1327342614000000, 'geometry': 'bytearray(b"\\x01\\x02\\x00\\x00\\x00\\x0b\\x00\\x00\\x00o\\xdc\\x18\\xf1\\xd3 ^\\xc0\\xedf\\xa1\\xf8\\x8c\\xb6A@\\xfaA]\\xa4\\xd0 ^\\xc0~\\xee\\xbam\\x95\\xb6A@\\\'\\x07\\xfd\\x96\\xca ^\\xc07y\\x80\\xdd\\x9f\\xb6A@8$Z\\x97\\xbf ^\\xc0\\x17N-\\xb6\\xa4\\xb6A@qC\\x8c\\xd7\\xbc ^\\xc0c}\\xa8\\xd9\\xa8\\xb6A@/Ie\\x8a\\xb9 ^\\xc0\\xff\\xb2{\\xf2\\xb0\\xb6A@\\xcex[\\xe9\\xb5 ^\\xc0\\\\g\\x8d\\x8b\\xb4\\xb6A@d\\xbakd\\xb2 ^\\xc0\\xbb\\xf9\\xfc\\xe6\\xb4\\xb6A@U0t6\\xae ^\\xc0\\x7f\\xf5\\xb8o\\xb5\\xb6A@cL\\xfa{\\xa9 ^\\xc0\\x1f\\xe7G\\r\\xb7\\xb6A@\\x9a\\xab\\xe69\\xa2 ^\\xc0\\xd74J\\xf2\\xb7\\xb6A@")', 'all_tags': '[\n  {\n    "key": "gnis:fcode",\n    "value": "46003"\n  },\n  {\n    "key": "gnis:ftype",\n    "value": "StreamRiver"\n  },\n  {\n    "key": "intermittent",\n    "value": "yes"\n  },\n  {\n    "key": "nhd:com_id",\n    "value": "37346853"\n  },\n  {\n    "key": "nhd:fdate",\n    "value": "Thu Mar 28 00:00:00 PST 2002"\n  },\n  {\n    "key": "nhd:reach_code",\n    "value": "18060005017843"\n  },\n  {\n    "key": "source",\n    "value": "NHD"\n  },\n  {\n    "key": "waterway",\n    "value": "stream"\n  }\n]', 'nodes': '[\n  {\n    "id": 866315580\n  },\n  {\n    "id": 866469140\n  },\n  {\n    "id": 867906160\n  },\n  {\n    "id": 866405284\n  },\n  {\n    "id": 866497492\n  },\n  {\n    "id": 866302007\n  },\n  {\n    "id": 866449818\n  },\n  {\n    "id": 867897625\n  },\n  {\n    "id": 867903637\n  },\n  {\n    "id": 866402859\n  },\n  {\n    "id": 866540640\n  }\n]'}, {'id': 75218666, 'version': 3, 'username': 'jumbanho', 'changeset': 10475054, 'visible': True, 'osm_timestamp': 1327337045000000, 'geometry': 'bytearray(b\'\\x01\\x02\\x00\\x00\\x00m\\x00\\x00\\x00g\\x11@ \\x86\\xeb]\\xc0\\xff\\x9e\\x0e\\x1a\\xb0\\x99A@E\\x9a\\x1dN\\x85\\xeb]\\xc0\\x1c\\xb2\\x81t\\xb1\\x99A@\\xc21\\xcb\\x9e\\x84\\xeb]\\xc0\\xb0\\x992&\\xb3\\x99A@#\\xfe\\xbc\\x04\\x82\\xeb]\\xc0O\\xadc\\x01\\xb8\\x99A@\\xca\\xb8\\xf3\\x0e\\x81\\xeb]\\xc0\\x00\\xf0>}\\xba\\x99A@\\xa7A\\xd1<\\x80\\xeb]\\xc0\\xee\\x08LL\\xbc\\x99A@Z\\xa7%\\xb1\\x7f\\xeb]\\xc0\\x14H?\\xd0\\xc0\\x99A@\\xe3\\xbb\\xdeG\\x7f\\xeb]\\xc0n1\\xe4}\\xc1\\x99A@\\xc6\\xf0"]}\\xeb]\\xc0 t\\xbf\\xf9\\xc3\\x99A@U\\xb1B\\xdb{\\xeb]\\xc0\\xd2\\x8e\\xc0\\xc4\\xc4\\x99A@\\x0f\\xac\\xf4$z\\xeb]\\xc0\\xee\\xa13\\x1f\\xc6\\x99A@W\\x8c\\x04dy\\xeb]\\xc0G\\xd3\\x8f<\\xc6\\x99A@\\xbe)\\x9b(x\\xeb]\\xc0\\x82\\x89\\xe4\\xd0\\xc7\\x99A@#\\xc71\\xedv\\xeb]\\xc04\\\\.,\\xc9\\x99A@6\\xf0\\xa3\\x1av\\xeb]\\xc0R\\xff\\x0ff\\xc9\\x99A@\\r\\xa8\\xdc\\xe9s\\xeb]\\xc0\\x97\\x01\\xc2\\xe2\\xcb\\x99A@O\\xb7G\\xcaq\\xeb]\\xc0\\x0e\\xfe\\xd9\\xea\\xcd\\x99A@\\r\\x83\\x9erq\\xeb]\\xc0ID\\x9d^\\xce\\x99A@\\x98\\x97W\\tq\\xeb]\\xc0JD\\x9d^\\xce\\x99A@\\x92\\xc6\\xb2\\xaao\\xeb]\\xc0\\x1a\\xba\\xc8\\xf3\\xcf\\x99A@\\xf8\\\'\\x02\\xe6k\\xeb]\\xc0\\x06\\x8b\\x1eS\\xd2\\x99A@v\\xd6\\xb8Hk\\xeb]\\xc0\\xca\\xfc\\xa3o\\xd2\\x99A@\\x11\\x14\\xe4\\x0cj\\xeb]\\xc0\\x11\\x8f\\xc4\\xcb\\xd3\\x99A@$=V:i\\xeb]\\xc0\\x99r\\xcf\\x04\\xd4\\x99A@\\x89\\xda\\xec\\xfeg\\xeb]\\xc0i\\xe8\\xfa\\x99\\xd5\\x99A@\\xd0\\xba\\xfc=g\\xeb]\\xc0\\xc2\\xd1\\x9fG\\xd6\\x99A@I\\x98\\x0eBe\\xeb]\\xc0\\xcc\\xfd\\x1fq\\xd9\\x99A@\\xc7/\\xbc\\x92d\\xeb]\\xc0\\x91\\\'\\xee\\x1d\\xda\\x99A@\\x84\\xe4\\t)d\\xeb]\\xc0~\\xd0i\\xcc\\xda\\x99A@\\xb5\\xe1\\x0b\\xeeb\\xeb]\\xc0\\x9bSnG\\xdd\\x99A@"+\\t\\x9a`\\xeb]\\xc0\\x93(j\\x1f\\xe1\\x99A@\\x94E\\xab\\xa4_\\xeb]\\xc0(X\\xd2@\\xe2\\x99A@\\xa7I\\xdfZ\\\\\\xeb]\\xc0b\\x0e\\\'\\xd5\\xe3\\x99A@\\xc4\\x06f\\xe0[\\xeb]\\xc0\\xda\\xe2d,\\xe4\\x99A@\\xd4"\\xec%W\\xeb]\\xc0\\x8b\\xfde\\xf7\\xe4\\x99A@\\xe7=)\\xeeS\\xeb]\\xc0<\\x88\\xf8\\xe2\\xe6\\x99A@O\\x9fx)P\\xeb]\\xc0f\\xbf\\xeet\\xe7\\x99A@\\xa2\\xee^IM\\xeb]\\xc0\\xa1uC\\t\\xe9\\x99A@\\x8d\\xcf\\tFJ\\xeb]\\xc0\\x05\\xe7\\x8c(\\xed\\x99A@\\xe7_&\\xe5I\\xeb]\\xc0\\x9a\\xa6c)\\xed\\x99A@#<\\x90\\xabG\\xeb]\\xc0\\xa3v\\xbf\\n\\xf0\\x99A@B\\xe2\\r\\x1fG\\xeb]\\xc0\\x0e\\xb7\\xe8\\t\\xf0\\x99A@\\x06q\\xd4\\xc0E\\xeb]\\xc0\\xfb\\xcf\\xf5\\xd8\\xf1\\x99A@\\x19\\x9aF\\xeeD\\xeb]\\xc0r\\\\|\\xc0\\xf2\\x99A@\\x971\\xf4>D\\xeb]\\xc0\\x90\\xff]\\xfa\\xf2\\x99A@\\x13\\xc9\\xa1\\x8fC\\xeb]\\xc0$\\xe7\\x0e\\xac\\xf4\\x99A@\\xd92*\\xba?\\xeb]\\xc0t\\xcd\\x89\\xe2\\xfa\\x99A@\\xf9\\xcar\\xc8<\\xeb]\\xc0C\\xb3F\\x98\\xfd\\x99A@\\xb2\\xc5$\\x12;\\xeb]\\xc0\\x89\\xb5\\xf8\\x14\\x00\\x9aA@\\xb9q\\x8b\\xf99\\xeb]\\xc0\\xa7X\\xdaN\\x00\\x9aA@g\\xd8(\\xeb7\\xeb]\\xc0\\xc2#\\x969\\x02\\x9aA@\\xd7\\xf2\\xca\\xf56\\xeb]\\xc0\\x1eU\\xf2V\\x02\\x9aA@\\xfe[\\xb8b5\\xeb]\\xc0\\n\\xb6\\xb6\\x95\\x03\\x9aA@D<\\xc8\\xa14\\xeb]\\xc0\\xcf\\\'<\\xb2\\x03\\x9aA@\\xb6H5G1\\xeb]\\xc0\\xe4\\x0f\\xab\\xe4\\x08\\x9aA@\\x0b\\xa6P\\xcc0\\xeb]\\xc0\\xc5\\xdcZ\\xcb\\t\\x9aA@_\\x1auc0\\xeb]\\xc0\\xb3=\\x1f\\n\\x0b\\x9aA@\\x83lY\\xbe.\\xeb]\\xc0\\xa0j\\x99\\xb1\\r\\x9aA@\\xff\\x03\\x07\\x0f.\\xeb]\\xc0\\xbd\\xb1V\\xa3\\r\\x9aA@w\\xca\\x0f\\x01,\\xeb]\\xc0\\x16\\x9b\\xfbP\\x0e\\x9aA@3\\xc5\\xc1J*\\xeb]\\xc0\\\\\\r?\\xee\\x11\\x9aA@o(\\xc6C)\\xeb]\\xc0\\xefd\\x81\\xc0\\x14\\x9aA@\\xe0BhN(\\xeb]\\xc0ea\\x99\\xc8\\x16\\x9aA@W\\tq@&\\xeb]\\xc0"\\xa8\\x1a\\xbd\\x1a\\x9aA@\\xc2w\\xacc&\\xeb]\\xc0!\\x18\\xac\\xdd\\x1b\\x9aA@\\xf8j\\x91\\xfe(\\xeb]\\xc0*\\xb4\\xbd\\\' \\x9aA@\\xceG\\x08E)\\xeb]\\xc0\\xdc\\xf6\\x98\\xa3"\\x9aA@\\xceG\\x08E)\\xeb]\\xc0\\x04\\xc6\\xfa\\x06&\\x9aA@\\xc0\\xca\\xfc\\xfe(\\xeb]\\xc0"\\xd9ma\\\'\\x9aA@3\\xe5\\x9e\\t(\\xeb]\\xc0\\xd3c\\x00M)\\x9aA@\\xfe\\x1f\\xcc\\x92%\\xeb]\\xc0\\x90\\xaa\\x81A-\\x9aA@|\\xb7y\\xe3$\\xeb]\\xc0\\xadMc{-\\x9aA@*\\x1e\\x17\\xd5"\\xeb]\\xc0Ud\\xbe\\xcd,\\x9aA@\\xb42\\xd0k"\\xeb]\\xc0\\x90:\\xf0 ,\\x9aA@\\xa2\\xe4\\x1f\\xc7 \\xeb]\\xc0\\xaem@:+\\x9aA@="K\\x8b\\x1f\\xeb]\\xc0t\\\'}\\xc6*\\x9aA@Q&\\x7fA\\x1c\\xeb]\\xc0\\xaem@:+\\x9aA@\\xac/\\x01\\xae\\x1a\\xeb]\\xc0\\x7f+#?,\\x9aA@\\x81\\xe79}\\x18\\xeb]\\xc0\\xbaq\\xe6\\xb2,\\x9aA@\\x0c\\xe5\\xe9\\x01\\x18\\xeb]\\xc0`@\\x8a\\x95,\\x9aA@Z\\x88i:\\x16\\xeb]\\xc0\\xa6B<\\x12/\\x9aA@\\xd8\\x1f\\x17\\x8b\\x15\\xeb]\\xc0\\xa6B<\\x12/\\x9aA@\\xc6\\xd1f\\xe6\\x13\\xeb]\\xc0\\xedD\\xee\\x8e1\\x9aA@\\xa9\\x06\\xab\\xfb\\x11\\xeb]\\xc0\\x93\\xcb\\xda\\x012\\x9aA@\\xe6R\\xa6\\xe2\\x10\\xeb]\\xc0\\x81tV\\xb02\\x9aA@(y\\x1a\\xd5\\x0e\\xeb]\\xc0\\x8b\\xa0\\xd6\\xd95\\x9aA@\\xa0?#\\xc7\\x0c\\xeb]\\xc0\\x8b\\xa0\\xd6\\xd95\\x9aA@\\xb2h\\x95\\xf4\\x0b\\xeb]\\xc0\\x8b\\x10h\\xfa6\\x9aA@/\\x00CE\\x0b\\xeb]\\xc0x)u\\xc98\\x9aA@\\xad\\x97\\xf0\\x95\\n\\xeb]\\xc0\\x0cY\\xdd\\xea9\\x9aA@ \\xb2\\x92\\xa0\\t\\xeb]\\xc0\\x0b\\xc9n\\x0b;\\x9aA@8\\x87k\\xb5\\x07\\xeb]\\xc0\\xdc\\xce\\x08\\x80;\\x9aA@\\x1f\\x8dT)\\x07\\xeb]\\xc0R[\\x8fg<\\x9aA@\\xaa\\xb8\\x16\\xd2\\x06\\xeb]\\xc0\\x04\\x9ej\\xe3>\\x9aA@\\x9d$\\x02z\\x06\\xeb]\\xc0!\\xb1\\xdd=@\\x9aA@\\x10?\\xa4\\x84\\x05\\xeb]\\xc0\\xd2;p)B\\x9aA@\\xfe\\xf0\\xf3\\xdf\\x03\\xeb]\\xc0f\\x93\\xb2\\xfbD\\x9aA@_\\xbd\\xe5E\\x01\\xeb]\\xc0]h\\xae\\xd3H\\x9aA@\\xddT\\x93\\x96\\x00\\xeb]\\xc0\\x98\\x1e\\x03hJ\\x9aA@\\xd0\\xd7\\x87P\\x00\\xeb]\\xc0gtQ>N\\x9aA@\\xb8\\xddp\\xc4\\xff\\xea]\\xc0\\x90c\\x90`O\\x9aA@\\x01\\xd5\\x89\\x15\\xff\\xea]\\xc0\\x90\\xd3!\\x81P\\x9aA@\\xb2\\x0c\\xcce\\xfe\\xea]\\xc0\\x07`\\xa8hQ\\x9aA@\\xbc1\\x98\\x1a\\xfc\\xea]\\xc0\\xb9\\x1e\\x85\\xebQ\\x9aA@\\x9d\\xedvb\\xfb\\xea]\\xc0\\xb82\\xf2\\xc3R\\x9aA@ \\xb8%\\xcd\\xfa\\xea]\\xc0\\xd41\\xf8ES\\x9aA@\\xe0\\x83|u\\xfa\\xea]\\xc0/cTcS\\x9aA@X\\xd1\\x1f\\x9a\\xf9\\xea]\\xc0L\\x1a\\xa3uT\\x9aA@\\x11\\xe3\\xda\\xf5\\xf7\\xea]\\xc0\\xcd\\x1aa\\xf6W\\x9aA@\')', 'all_tags': '[\n  {\n    "key": "gnis:fcode",\n    "value": "46003"\n  },\n  {\n    "key": "gnis:ftype",\n    "value": "StreamRiver"\n  },\n  {\n    "key": "intermittent",\n    "value": "yes"\n  },\n  {\n    "key": "nhd:com_id",\n    "value": "146070088"\n  },\n  {\n    "key": "nhd:fdate",\n    "value": "Wed Jun 02 00:00:00 PDT 2010"\n  },\n  {\n    "key": "nhd:reach_code",\n    "value": "18030003021991"\n  },\n  {\n    "key": "source",\n    "value": "NHD"\n  },\n  {\n    "key": "waterway",\n    "value": "stream"\n  }\n]', 'nodes': '[\n  {\n    "id": 887696362\n  },\n  {\n    "id": 887829439\n  },\n  {\n    "id": 887997465\n  },\n  {\n    "id": 887771891\n  },\n  {\n    "id": 887946345\n  },\n  {\n    "id": 887733187\n  },\n  {\n    "id": 887896126\n  },\n  {\n    "id": 887683316\n  },\n  {\n    "id": 887809856\n  },\n  {\n    "id": 887983189\n  },\n  {\n    "id": 887761266\n  },\n  {\n    "id": 887934769\n  },\n  {\n    "id": 887725502\n  },\n  {\n    "id": 887879212\n  },\n  {\n    "id": 887671531\n  },\n  {\n    "id": 887796830\n  },\n  {\n    "id": 887972053\n  },\n  {\n    "id": 887749910\n  },\n  {\n    "id": 887923069\n  },\n  {\n    "id": 887711659\n  },\n  {\n    "id": 887857327\n  },\n  {\n    "id": 888014154\n  },\n  {\n    "id": 887785787\n  },\n  {\n    "id": 887960678\n  },\n  {\n    "id": 887742561\n  },\n  {\n    "id": 887911649\n  },\n  {\n    "id": 887698676\n  },\n  {\n    "id": 887833997\n  },\n  {\n    "id": 888000588\n  },\n  {\n    "id": 887774554\n  },\n  {\n    "id": 887949557\n  },\n  {\n    "id": 887735182\n  },\n  {\n    "id": 887899156\n  },\n  {\n    "id": 887685989\n  },\n  {\n    "id": 887813680\n  },\n  {\n    "id": 887986154\n  },\n  {\n    "id": 887764148\n  },\n  {\n    "id": 887937460\n  },\n  {\n    "id": 887727506\n  },\n  {\n    "id": 887882026\n  },\n  {\n    "id": 887673165\n  },\n  {\n    "id": 887799183\n  },\n  {\n    "id": 887974727\n  },\n  {\n    "id": 887752101\n  },\n  {\n    "id": 887925711\n  },\n  {\n    "id": 887715684\n  },\n  {\n    "id": 887861251\n  },\n  {\n    "id": 887728936\n  },\n  {\n    "id": 887884755\n  },\n  {\n    "id": 887675711\n  },\n  {\n    "id": 887802119\n  },\n  {\n    "id": 887977397\n  },\n  {\n    "id": 887755109\n  },\n  {\n    "id": 887928546\n  },\n  {\n    "id": 887719609\n  },\n  {\n    "id": 887867409\n  },\n  {\n    "id": 887667103\n  },\n  {\n    "id": 887791085\n  },\n  {\n    "id": 887965560\n  },\n  {\n    "id": 887746088\n  },\n  {
--------------------------------------------------
Table full name: GEO_OPENSTREETMAP_WORLDPOP.GEO_OPENSTREETMAP.PLANET_LAYERS
Column name: layer_code Type: NUMBER
Column name: osm_id Type: NUMBER
Column name: osm_timestamp Type: NUMBER
Column name: osm_way_id Type: NUMBER
Column name: layer_class Type: TEXT
Column name: all_tags Type: VARIANT
Column name: layer_name Type: TEXT
Column name: geometry Type: BINARY
Column name: gdal_type Type: TEXT
Column name: osm_version Type: NUMBER
Sample rows:
[{'layer_code': 1500, 'layer_class': 'building', 'layer_name': 'building', 'gdal_type': 'multipolygons', 'osm_id': None, 'osm_way_id': 80820903, 'osm_timestamp': 1286621389000000, 'osm_version': 1, 'all_tags': '[\n  {\n    "key": "building",\n    "value": "yes"\n  },\n  {\n    "key": "source",\n    "value": "extraction vectorielle v1 cadastre-dgi-fr source : Direction Générale des Impôts - Cadas. Mise à jour : 2010"\n  },\n  {\n    "key": "wall",\n    "value": "no"\n  }\n]', 'geometry': "bytearray(b'\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x06\\x00\\x00\\x00\\xa5\\xa8\\x8e\\xb0\\x03\\xb2\\x03@\\xae\\xdf\\x02\\xbf\\xfceH@<\\x1e\\xe9\\xc2\\xfe\\xb1\\x03@\\rrr\\x1a\\xfdeH@\\xf7\\xe7\\xa2!\\xe3\\xb1\\x03@\\xfc|J\\x84\\xfceH@Z\\xb5\\x10\\x89\\xe7\\xb1\\x03@H\\xec\\x7f%\\xfceH@\\x80\\xdd\\x9fA\\xf9\\xb1\\x03@%\\xfc\\xf7\\x85\\xfceH@\\xa5\\xa8\\x8e\\xb0\\x03\\xb2\\x03@\\xae\\xdf\\x02\\xbf\\xfceH@')"}, {'layer_code': 1500, 'layer_class': 'building', 'layer_name': 'building', 'gdal_type': 'multipolygons', 'osm_id': None, 'osm_way_id': 159980615, 'osm_timestamp': 1334665988000000, 'osm_version': 1, 'all_tags': '[\n  {\n    "key": "building",\n    "value": "yes"\n  },\n  {\n    "key": "source",\n    "value": "cadastre-dgi-fr source : Direction Générale des Impôts - Cadastre. Mise à jour : 2012"\n  },\n  {\n    "key": "wall",\n    "value": "no"\n  }\n]', 'geometry': 'bytearray(b\'\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x06\\x00\\x00\\x00\\x89\\x8e\\xe4\\xf2\\x1f"\\x1b@\\x06\\xf0\\x16HP\\xc6E@\\xbf3\\xda\\xaa$"\\x1b@+\\xfaC3O\\xc6E@Qf\\x83L2"\\x1b@\\x90\\xbf\\xb4\\xa8O\\xc6E@\\x1e\\xc1\\x8d\\x94-"\\x1b@=1\\xeb\\xc5P\\xc6E@]\\xc3\\x0c\\x8d\\\'"\\x1b@\\x89\\xce2\\x8bP\\xc6E@\\x89\\x8e\\xe4\\xf2\\x1f"\\x1b@\\x06\\xf0\\x16HP\\xc6E@\')'}, {'layer_code': 1500, 'layer_class': 'building', 'layer_name': 'building', 'gdal_type': 'multipolygons', 'osm_id': None, 'osm_way_id': 83833925, 'osm_timestamp': 1491340214000000, 'osm_version': 2, 'all_tags': '[\n  {\n    "key": "building",\n    "value": "yes"\n  },\n  {\n    "key": "source",\n    "value": "cadastre-dgi-fr source : Direction Générale des Finances Publiques - Cadastre. Mise à jour : 2017"\n  },\n  {\n    "key": "wall",\n    "value": "no"\n  }\n]', 'geometry': "bytearray(b'\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x9c\\x9c\\xebE\\xfe\\xea\\x12@W\\x9b\\xffW\\x1dJF@\\x0b\\xca\\xd9\\xe0\\xe9\\xea\\x12@\\x02\\xcb\\xb6x\\x1dJF@\\xa0\\xffyu\\xe9\\xea\\x12@I\\x07\\xeb\\xff\\x1cJF@\\x89\\xd5\\xd5\\xd3\\xfd\\xea\\x12@\\x9e\\xd73\\xdf\\x1cJF@\\x9c\\x9c\\xebE\\xfe\\xea\\x12@W\\x9b\\xffW\\x1dJF@')"}, {'layer_code': 1500, 'layer_class': 'building', 'layer_name': 'building', 'gdal_type': 'multipolygons', 'osm_id': None, 'osm_way_id': 79298576, 'osm_timestamp': 1285485333000000, 'osm_version': 1, 'all_tags': '[\n  {\n    "key": "building",\n    "value": "yes"\n  },\n  {\n    "key": "source",\n    "value": "cadastre-dgi-fr source : Direction Générale des Impôts - Cadastre ; mise à jour :2010"\n  },\n  {\n    "key": "wall",\n    "value": "no"\n  }\n]', 'geometry': 'bytearray(b\'\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\xd8(\\x90~\\xa0\\x91\\x15@q\\xfc\\xf5\\xafQ\\xb6F@\\xa9=\\xdbY\\xaa\\x91\\x15@\\x9d\\xcf\\xca\\x07N\\xb6F@\\xbc\\xd1"6\\xb3\\x91\\x15@\\xce\\xd5\\xa0yJ\\xb6F@~\\x9d\\xe5\\xc3\\xfd\\x91\\x15@\\xa4\\xf4\\x96\\xbcK\\xb6F@n\\xf9\\xa3\\x03\\xed\\x91\\x15@\\xf2x\\xb57S\\xb6F@\\x05\\xbf\\xb2w\\xeb\\x91\\x15@5:15S\\xb6F@^RkP\\xea\\x91\\x15@\\n\\x8dq\\x0fS\\xb6F@\\xd8(\\x90~\\xa0\\x91\\x15@q\\xfc\\xf5\\xafQ\\xb6F@\')'}, {'layer_code': 1500, 'layer_class': 'building', 'layer_name': 'building', 'gdal_type': 'multipolygons', 'osm_id': None, 'osm_way_id': 258762175, 'osm_timestamp': 1390915954000000, 'osm_version': 1, 'all_tags': '[\n  {\n    "key": "building",\n    "value": "yes"\n  },\n  {\n    "key": "source",\n    "value": "cadastre-dgi-fr source : Direction Générale des Finances Publiques - Cadastre. Mise à jour : 2014"\n  },\n  {\n    "key": "wall",\n    "value": "no"\n  }\n]', 'geometry': 'bytearray(b"\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x06\\x00\\x00\\x00\\xc7\\xca/\\x831\\xa2\\xed\\xbfbL\\xfa{)jG@P\\x83i\\x18>\\xa2\\xed\\xbf\\x91\\xd0\\x96s)jG@\\r\\xa7\\xcc\\xcd7\\xa2\\xed\\xbf\\t5C\\xaa(jG@\\xcfM\\x9bq\\x1a\\xa2\\xed\\xbf\\x86V\\\'g(jG@\\t<0\\x80\\xf0\\xa1\\xed\\xbf\\x8c\\x13_\\xed(jG@\\xc7\\xca/\\x831\\xa2\\xed\\xbfbL\\xfa{)jG@")'}]
--------------------------------------------------
Table full name: GEO_OPENSTREETMAP_WORLDPOP.WORLDPOP.POPULATION_GRID_1KM
Column name: alpha_3_code Type: TEXT
Column name: last_updated Type: DATE
Column name: longitude_centroid Type: FLOAT
Column name: latitude_centroid Type: FLOAT
Column name: geo_id Type: TEXT
Column name: population Type: FLOAT
Column name: country_name Type: TEXT
Column name: geog Type: BINARY
Sample rows:
[{'country_name': 'Gibraltar', 'geo_id': 'wpeykjqrd2ev', 'population': 1650.8153076171875, 'longitude_centroid': -5.347083296988231, 'latitude_centroid': 36.120416721983034, 'alpha_3_code': 'GIB', 'geog': "bytearray(b'\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x05\\x00\\x00\\x00W\\x88\\t\\x12\\xaeg\\x15\\xc0\\x19K(H\\xe1\\x0eB@h\\x92\\x81\\x89%_\\x15\\xc0\\x19K(H\\xe1\\x0eB@h\\x92\\x81\\x89%_\\x15\\xc0\\xd6I9Y\\xf2\\x0fB@V\\x88\\t\\x12\\xaeg\\x15\\xc0\\xd7I9Y\\xf2\\x0fB@W\\x88\\t\\x12\\xaeg\\x15\\xc0\\x19K(H\\xe1\\x0eB@')", 'last_updated': '2018-01-01'}, {'country_name': 'Gibraltar', 'geo_id': 'wpeykjqrd2ev', 'population': 1161.977783203125, 'longitude_centroid': -5.347083296988231, 'latitude_centroid': 36.120416721983034, 'alpha_3_code': 'GIB', 'geog': "bytearray(b'\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x05\\x00\\x00\\x00W\\x88\\t\\x12\\xaeg\\x15\\xc0\\x19K(H\\xe1\\x0eB@h\\x92\\x81\\x89%_\\x15\\xc0\\x19K(H\\xe1\\x0eB@h\\x92\\x81\\x89%_\\x15\\xc0\\xd6I9Y\\xf2\\x0fB@V\\x88\\t\\x12\\xaeg\\x15\\xc0\\xd7I9Y\\xf2\\x0fB@W\\x88\\t\\x12\\xaeg\\x15\\xc0\\x19K(H\\xe1\\x0eB@')", 'last_updated': '2005-01-01'}, {'country_name': 'Gibraltar', 'geo_id': 'wpeykjqrd2ev', 'population': 956.6270751953125, 'longitude_centroid': -5.347083296988231, 'latitude_centroid': 36.120416721983034, 'alpha_3_code': 'GIB', 'geog': "bytearray(b'\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x05\\x00\\x00\\x00W\\x88\\t\\x12\\xaeg\\x15\\xc0\\x19K(H\\xe1\\x0eB@h\\x92\\x81\\x89%_\\x15\\xc0\\x19K(H\\xe1\\x0eB@h\\x92\\x81\\x89%_\\x15\\xc0\\xd6I9Y\\xf2\\x0fB@V\\x88\\t\\x12\\xaeg\\x15\\xc0\\xd7I9Y\\xf2\\x0fB@W\\x88\\t\\x12\\xaeg\\x15\\xc0\\x19K(H\\xe1\\x0eB@')", 'last_updated': '2006-01-01'}, {'country_name': 'Gibraltar', 'geo_id': 'wpeykjqrd2ev', 'population': 1322.216796875, 'longitude_centroid': -5.347083296988231, 'latitude_centroid': 36.120416721983034, 'alpha_3_code': 'GIB', 'geog': "bytearray(b'\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x05\\x00\\x00\\x00W\\x88\\t\\x12\\xaeg\\x15\\xc0\\x19K(H\\xe1\\x0eB@h\\x92\\x81\\x89%_\\x15\\xc0\\x19K(H\\xe1\\x0eB@h\\x92\\x81\\x89%_\\x15\\xc0\\xd6I9Y\\xf2\\x0fB@V\\x88\\t\\x12\\xaeg\\x15\\xc0\\xd7I9Y\\xf2\\x0fB@W\\x88\\t\\x12\\xaeg\\x15\\xc0\\x19K(H\\xe1\\x0eB@')", 'last_updated': '2002-01-01'}, {'country_name': 'Gibraltar', 'geo_id': 'wpeykjqrd2ev', 'population': 1687.7110595703125, 'longitude_centroid': -5.347083296988231, 'latitude_centroid': 36.120416721983034, 'alpha_3_code': 'GIB', 'geog': "bytearray(b'\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x05\\x00\\x00\\x00W\\x88\\t\\x12\\xaeg\\x15\\xc0\\x19K(H\\xe1\\x0eB@h\\x92\\x81\\x89%_\\x15\\xc0\\x19K(H\\xe1\\x0eB@h\\x92\\x81\\x89%_\\x15\\xc0\\xd6I9Y\\xf2\\x0fB@V\\x88\\t\\x12\\xaeg\\x15\\xc0\\xd7I9Y\\xf2\\x0fB@W\\x88\\t\\x12\\xaeg\\x15\\xc0\\x19K(H\\xe1\\x0eB@')", 'last_updated': '2017-01-01'}]
--------------------------------------------------
External knowledge that might be helpful: 
# OpenStreetMap Data in Layered GIS Format

## Point Features

### 1. Places (“places”)

Location for cities, towns, etc. Typically somewhere in the centre of the town.

Additional attributes:

| Attribute  | PostGIS Type | Description                           | OSM Tags     |
| ---------- | ------------ | ------------------------------------- | ------------ |
| population | INTEGER      | Number of people living in this place | population=* |

Note that for many places the population is not available and will be set to 0. For islands the population is always 0.

The following feature classes exist in this layer:

| code | Layer | fclass | Description                                                  | OSM Tags                  |
| ---- | ----- | ------ | ------------------------------------------------------------ | ------------------------- |
| 1000 | place |        |                                                              |                           |
| 1001 | place | city   | As defined by national/state/provincial government. Often over 100,000 people | place=city (but see 1005) |                       |
| 1002 | place | town   | As defined by national/state/provincial government. Generally smaller than a city, between 10,000 and 100,000 people | place=town                |

| code | Layer | fclass           | Description                                                  | OSM Tags                                                     |
| ---- | ----- | ---------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |
| 1003 | place | village          | As defined by national/state/provincial government. Generally smaller than a town, below 10,000 people | place=village                                                |                                                          |
| 1004 | place | hamlet           | As defined by national/state/provincial government. Generally smaller than a village, just a few houses | place=hamlet                                                 |                                                           |
| 1005 | place | national_capital | A national capital                                           | place=city<br />- is_capital=country or<br />- admin_level=2 or<br />- capital=yes and no <br />admin_level set |                                                           |
| 1010 | place | suburb           | Named area of town or city                                   | place=suburb                                                 |
| 1020 | place | island           | Identifies an island                                         | place=island                                                 |
| 1030 | place | farm             | Named farm                                                   | place=farm                                                   |
| 1031 | place | dwelling         | Isolated dwelling (1 or 2 houses, smaller than hamlet)       | place=isolated_dwelling                                      |
| 1040 | place | region           | A region label (used in some areas only)                     | place=region                                                 |
| 1041 | place | county           | A county label (used in some areas only)                     | place=county                                                 |
| 1050 | place | locality         | Other kind of named place                                    | place=locality                                               |

### 2. Points of Interest

The following feature classes exist in this layer:

| code | layer  | fclass           | Description                                                  | OSM Tags                               |
| ---- | ------ | ---------------- | ------------------------------------------------------------ | -------------------------------------- |
| 20xx | public |                  |                                                              |                                        |
| 2001 |        | police           | A police post or station.                                    | amenity=police                         |
| 2002 |        | fire_station     | A fire station.                                              | amenity=fire_station                   |
| 2004 |        | post_box         | A post box (for letters).                                    | amenity=post_box                       |
| 2005 |        | post_office      | A post office.                                               | amenity=post_office                    |
| 2006 |        | telephone        | A public telephone booth.                                    | amenity=telephone                      |
| 2007 |        | library          | A library.                                                   | amenity=library                        |
| 2008 |        | town_hall        | A town hall.                                                 | amenity=townhall                       |
| 2009 |        | courthouse       | A court house.                                               | amenity=courthouse                     |
| 2010 |        | prison           | A prison.                                                    | amenity=prison                         |
| 2011 |        | embassy          | An embassy or consulate.                                     | amenity=embassy or office=diplomatic   |
| 2012 |        | community_centre | A public facility which is mostly used by local associations for events and festivities. | amenity=community_centre               |
| 2013 |        | nursing_home     | A home for disabled or elderly persons who need permanent care. | amenity=nursing_home                   |
| 2014 |        | arts_centre      | A venue at which a variety of arts are performed or conducted, and may well be involved with the creation of those works, and run occasional courses. | amenity=arts_centre                    |
| 2015 |        | graveyard        | A graveyard.                                                 | amenity=grave_yard or landuse=cemetery |

| code | layer   | fclass            | Description                                                  | OSM Tags                                                     |
| ---- | ------- | ----------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |
| 2016 |         | market_place      | A place where markets are held.                              | amenity=marketplace                                          |
| 2030 |         | recycling         | A place (usually a container) where you can drop waste for recycling. | amenity=recycling                                            |
| 2031 |         | recycling_glass   | A place for recycling glass.                                 | recycling:glass=yes or recycling:glass_bottles=yes           |
| 2032 |         | recycling_paper   | A place for recycling paper.                                 | recycling:paper=yes                                          |
| 2033 |         | recycling_clothes | A place for recycling clothes.                               | recycling:clothes=yes                                        |
| 2034 |         | recycling_metal   | A place for recycling metal.                                 | recycling:scrap_metal=yes                                    |
| 208x |         |                   | Education                                                    |                                                              |
| 2081 |         | university        | A university.                                                | amenity=university                                           |
| 2082 |         | school            | A school.                                                    | amenity=school                                               |
| 2083 |         | kindergarten      | A kindergarten (nursery).                                    | amenity=kindergarten                                         |
| 2084 |         | college           | A college.                                                   | amenity=college                                              |
| 2099 |         | public_building   | An unspecified public building.                              | amenity=public_building                                      |
| 21xx | health  |                   |                                                              |                                                              |
| 2101 |         | pharmacy          | A pharmacy.                                                  | amenity=pharmacy                                             |
| 2110 |         | hospital          | A hospital.                                                  | amenity=hospital                                             |
| 2111 |         | clinic            | A medical centre that does not admit inpatients.             | amenity=clinic                                               |
| 2120 |         | doctors           | A medical practice.                                          | amenity=doctors                                              |
| 2121 |         | dentist           | A dentist's practice.                                        | amenity=dentist                                              |
| 2129 |         | veterinary        | A veterinary (animal doctor).                                | amenity=veterinary                                           |
| 22xx | leisure |                   |                                                              |                                                              |
| 2201 |         | theatre           | A theatre.                                                   | amenity=theatre                                              |
| 2202 |         | nightclub         | A night club, or disco.                                      | amenity=nightclub                                            |
| 2203 |         | cinema            | A cinema.                                                    | amenity=cinema                                               |
| 2204 |         | park              | A park.                                                      | leisure=park                                                 |
| 2205 |         | playground        | A playground for children.                                   | leisure=playground                                           |
| 2206 |         | dog_park          | An area where dogs are allowed to run free without a leash.  | leisure=dog_park                                             |
| 225x |         |                   | Sports                                                       |                                                              |
| 2251 |         | sports_centre     | A facility where a range of sports activities can be pursued. | leisure=sports_centre                                        |
| 2252 |         | pitch             | An area set aside for a specific sport.                      | leisure=pitch                                                |
| 2253 |         | swimming_pool     | A swimming pool or water park.                               | amenity=swimming_pool,leisure=swimming_pool,sport=swimming, leisure=water_park |
| 2254 |         | tennis_court      | A tennis court.                                              | sport=tennis                                                 |
| 2255 |         | golf_course       | A golf course.                                               | leisure=golf_course                                          |
| 2256 |         | stadium           | A stadium. The area of the stadium may contain one or several pitches. | leisure=stadium                                              |
| 2257 |         | ice_rink          | An ice rink.                                                 | leisure=ice_rink                                             |

| code | layer         | fclass            | Description                                                  | OSM Tags                  |
| ---- | ------------- | ----------------- | ------------------------------------------------------------ | ------------------------- |
| 23xx | catering      |                   | Catering services                                            |                           |
| 2301 |               | restaurant        | A normal restaurant.                                         | amenity=restaurant        |
| 2302 |               | fast_food         | A fast-food restaurant.                                      | amenity=fast_food         |
| 2303 |               | cafe              | A cafe.                                                      | amenity=cafe              |
| 2304 |               | pub               | A pub.                                                       | amenity=pub               |
| 2305 |               | bar               | A bar. The difference between a pub and a bar is not clear but pubs tend to offer food while bars do not. | amenity=bar               |
| 2306 |               | food_court        | A common seating area with various fast-food vendors.        | amenity=food_court        |
| 2307 |               | biergarten        | An open-air area where food and drinks are served.           | amenity=biergarten        |
| 24xx | accommodation |                   | (indoor)                                                     |                           |
| 2401 |               | hotel             | A hotel.                                                     | tourism=hotel             |
| 2402 |               | motel             | A motel.                                                     | tourism=motel             |
| 2403 |               | bed_and_breakfast | A facility offering bed and breakfast.                       | tourism=bed_and_breakfast |
| 2404 |               | guesthouse        | A guesthouse. The difference between hotel, bed and breakfast, and guest houses is not a strict one and OSM tends to use whatever the facility calls itself. | tourism=guest_house       |
| 2405 |               | hostel            | A hostel (offering cheap accommodation, often bunk beds in dormitories). | tourism=hostel            |
| 2406 |               | chalet            | A detached cottage, usually self-catering.                   | tourism=chalet            |
| 2420 |               |                   | (outdoor)                                                    |                           |
| 2421 |               | shelter           | All sorts of small shelters to protect against bad weather conditions. | amenity=shelter           |
| 2422 |               | camp_site         | A camp site or camping ground.                               | tourism=camp_site         |
| 2423 |               | alpine_hut        | An alpine hut is a building typically situated in mountains providing shelter and often food and beverages to visitors. | tourism=alpine_hut        |
| 2424 |               | caravan_site      | A place where people with caravans or motorhomes can stay overnight or longer. | tourism=caravan_site      |
| 25xx | shopping      |                   |                                                              |                           |
| 2501 |               | supermarket       | A supermarket.                                               | shop=supermarket          |
| 2502 |               | bakery            | A bakery.                                                    | shop=bakery               |
| 2503 |               | kiosk             | A very small shop usually selling cigarettes, newspapers, sweets, snacks and beverages. | shop=kiosk                |
| 2504 |               | mall              | A shopping mall.                                             | shop=mall                 |
| 2505 |               | department_store  | A department store.                                          | shop=department_store     |

| code | layer | fclass            | Description                                                  | OSM Tags                         |
| ---- | ----- | ----------------- | ------------------------------------------------------------ | -------------------------------- |
| 2510 |       | general           | A general store, offering a broad range of products on a small area. Exists usually in rural and remote areas. | shop=general                     |
| 2511 |       | convenience       | A convenience store is a small shop selling a subset of items you might find at a supermarket. | shop=convenience                 |
| 2512 |       | clothes           | A clothes or fashion store.                                  | shop=clothes                     |
| 2513 |       | florist           | A store selling flowers.                                     | shop=florist                     |
| 2514 |       | chemist           | A shop selling articles of personal hygiene, cosmetics, and household cleaning products. | shop=chemist                     |
| 2515 |       | bookshop          | A book shop.                                                 | shop=books                       |
| 2516 |       | butcher           | A butcher.                                                   | shop=butcher                     |
| 2517 |       | shoe_shop         | A shoe shop.                                                 | shop=shoes                       |
| 2518 |       | beverages         | A place where you can buy alcoholic and non-alcoholic beverages. | shop=alcohol, shop=beverages     |
| 2519 |       | optician          | A place where you can buy glasses.                           | shop=optician                    |
| 2520 |       | jeweller          | A jewelry shop.                                              | shop=jewelry                     |
| 2521 |       | gift_shop         | A gift shop.                                                 | shop=gift                        |
| 2522 |       | sports_shop       | A shop selling sports equipment.                             | shop=sports                      |
| 2523 |       | stationery        | A shop selling stationery for private and office use.        | shop=stationery                  |
| 2524 |       | outdoor_shop      | A shop selling outdoor equipment.                            | shop=outdoor                     |
| 2525 |       | mobile_phone_shop | A shop for mobile phones.                                    | shop=mobile_phone                |
| 2526 |       | toy_shop          | A toy store.                                                 | shop=toys                        |
| 2527 |       | newsagent         | A shop selling mainly newspapers and magazines.              | shop=newsagent                   |
| 2528 |       | greengrocer       | A shop selling fruit and vegetables.                         | shop=greengrocer                 |
| 2529 |       | beauty_shop       | A shop that provides personal beauty services like a nail salon or tanning salon. | shop=beauty                      |
| 2530 |       | video_shop        | A place where you can buy films.                             | shop=video                       |
| 2541 |       | car_dealership    | A car dealership.                                            | shop=car                         |
| 2542 |       | bicycle_shop      | A bicycle shop.                                              | shop=bicycle                     |
| 2543 |       | doityourself      | A do-it-yourself shop where you can buy tools and building materials. | shop=doityourself, shop=hardware |
| 2544 |       | furniture_shop    | A furniture store.                                           | shop=furniture                   |
| 2546 |       | computer_shop     | A computer shop.                                             | shop=computer                    |
| 2547 |       | garden_centre     | A place selling plants and gardening goods.                  | shop=garden_centre               |
| 2561 |       | hairdresser       | A hair salon.                                                | shop=hairdresser                 |
| 2562 |       | car_repair        | A car garage.                                                | shop=car_repair                  |
| 2563 |       | car_rental        | A place where you can rent a car.                            | amenity=car_rental               |
| 2564 |       | car_wash          | A car wash.                                                  | amenity=car_wash                 |
| 2565 |       | car_sharing       | A car sharing station.                                       | amenity=car_sharing              |

| code | layer   | fclass            | Description                                                  | OSM Tags                                   |
| ---- | ------- | ----------------- | ------------------------------------------------------------ | ------------------------------------------ |
| 2566 |         | bicycle_rental    | A place where you can rent bicycles.                         | amenity=bicycle_rental                     |
| 2567 |         | travel_agent      | A travel agency.                                             | shop=travel_agency                         |
| 2568 |         | laundry           | A place where you can wash clothes or have them cleaned.     | shop=laundry, shop=dry_cleaning            |
| 2590 |         | vending_machine   | An unspecified vending machine with none of the specifics below. | amenity=vending_machine                    |
| 2591 |         | vending_cigarette | A cigarette vending machine.                                 | vending=cigarettes                         |
| 2592 |         | vending_parking   | A vending machine for parking tickets.                       | vending=parking_tickets                    |
| 2600 | money   |                   |                                                              |                                            |
| 2601 |         | bank              | A bank.                                                      | amenity=bank                               |
| 2602 |         | atm               | A machine that lets you withdraw cash from your bank account. | amenity=atm                                |
| 2700 | tourism |                   | information                                                  |                                            |
| 2701 |         | tourist_info      | Something that provides information to tourists; may or may not be manned. | tourism=information                        |
| 2704 |         | tourist_map       | A map displayed to inform tourists.                          | tourism=information, information=map       |
| 2705 |         | tourist_board     | A board with explanations aimed at tourists.                 | tourism=information, information=board     |
| 2706 |         | tourist_guidepost | A guide post.                                                | tourism=information, information=guidepost |
|      |         |                   | destinations                                                 |                                            |
| 2721 |         | attraction        | A tourist attraction.                                        | tourism=attraction                         |
| 2722 |         | museum            | A museum.                                                    | tourism=museum                             |
| 2723 |         | monument          | A monument.                                                  | historic=monument                          |
| 2724 |         | memorial          | A memorial.                                                  | historic=memorial                          |
| 2725 |         | art               | A permanent work of art.                                     | tourism=artwork                            |
| 2731 |         | castle            | A castle.                                                    | historic=castle                            |
| 2732 |         | ruins             | Ruins of historic significance.                              | historic=ruins                             |
| 2733 |         | archaeological    | An excavation site.                                          | historic=archaeological_site               |
| 2734 |         | wayside_cross     | A wayside cross, not necessarily old.                        | historic=wayside_cross                     |
| 2735 |         | wayside_shrine    | A wayside shrine.                                            | historic=wayside_shrine                    |
| 2736 |         | battlefield       | A historic battlefield.                                      | historic=battlefield                       |
| 2737 |         | fort              | A fort.                                                      | historic=fort                              |
| 2741 |         | picnic_site       | A picnic site.                                               | tourism=picnic_site                        |
| 2742 |         | viewpoint         | A viewpoint.                                                 | tourism=viewpoint                          |
| 2743 |         | zoo               | A zoo.                                                       | tourism=zoo                                |
| 2744 |         | theme_park        | A theme park.                                                | tourism=theme_park                         |
| 2900 | miscpoi |                   |                                                              |                                            |
| 2901 |         | toilet            | Public toilets.                                              | amenity=toilets                            |
| 2902 |         | bench             | A public bench.                                              | amenity=bench                              |
| 2903 |         | drinking_water    | A tap or other source of drinking water.                     | amenity=drinking_water                     |

| code | layer | fclass              | Description                                                  | OSM Tags                                       |
| ---- | ----- | ------------------- | ------------------------------------------------------------ | ---------------------------------------------- |
| 2904 |       | fountain            | A fountain for cultural, decorative, or recreational purposes. | amenity=fountain                               |
| 2905 |       | hunting_stand       | A hunting stand.                                             | amenity=hunting_stand                          |
| 2906 |       | waste_basket        | A waste basket.                                              | amenity=waste_basket                           |
| 2907 |       | camera_surveillance | A surveillance camera.                                       | man_made=surveillance                          |
| 2921 |       | emergency_phone     | An emergency telephone.                                      | amenity=emergency_phone, emergency=phone       |
| 2922 |       | fire_hydrant        | A fiery hydrant.                                             | amenity=fire_hydrant, emergency=fire_hydrant   |
| 2923 |       | emergency_access    | An emergency access point (signposted place in e.g., woods the location of which is known to emergency services). | highway=emergency_access_point                 |
| 2950 |       | tower               | A tower of some kind.                                        | man_made=tower and none of the specifics below |
| 2951 |       | tower_comms         | A communications tower.                                      | man_made=tower and tower:type=communication    |
| 2952 |       | water_tower         | A water tower.                                               | man_made=water_tower                           |
| 2953 |       | tower_observation   | An observation tower.                                        | man_made=tower and tower:type=observation      |
| 2954 |       | windmill            | A windmill.                                                  | man_made=windmill                              |
| 2955 |       | lighthouse          | A lighthouse.                                                | man_made=lighthouse                            |
| 2961 |       | wastewater_plant    | A wastewater treatment plant.                                | man_made=wastewater_plant                      |
| 2962 |       | water_well          | A facility to access underground aquifers.                   | man_made=water_well                            |
| 2963 |       | water_mill          | A mill driven by water. Often historic.                      | man_made=watermill                             |
| 2964 |       | water_works         | A place where drinking water is processed.                   | man_made=water_works                           |

### 3. Places of Worship (“pofw”)

The following feature classes exist in this layer:

| code | layer | fclass                | Description                                                  | OSM Tags                                     |
| ---- | ----- | --------------------- | ------------------------------------------------------------ | -------------------------------------------- |
| 3000 | pofw  |                       | Places of worship                                            |                                              |
| 3100 | pofw  | christian             | A christian place of worship (usually a church) without one of the denominations below. | amenity=place_of_worship, religion=christian |
| 3101 | pofw  | christian_anglican    | A christian place of worship where the denomination is known. (Note to German users: “protestant” is “evangelisch” in German; “evangelical” is “evangelikal” in German.) | + denomination=anglican                      |
| 3102 | pofw  | christian_catholic    |                                                              | + denomination=catholic                      |
| 3103 | pofw  | christian_evangelical |                                                              | + denomination=evangelical                   |
| 3104 | pofw  | christian_lutheran    |                                                              | + denomination=lutheran                      |
| 3105 | pofw  | christian_methodist   |                                                              | + denomination=methodist                     |
| 3106 | pofw  | christian_orthodox    |                                                              | + denomination=orthodox                      |
| 3107 | pofw  | christian_protestant  |                                                              | + denomination=protestant                    |
| 3108 | pofw  | christian_baptist     |                                                              | + denomination=baptist                       |
| 3109 | pofw  | christian_mormon      |                                                              | + denomination=mormon                        |

| code | layer | fclass       | Description                                                  | OSM Tags                                     |
| ---- | ----- | ------------ | ------------------------------------------------------------ | -------------------------------------------- |
| 3200 | pofw  | jewish       | A Jewish place of worship (usually a synagogue).             | amenity=place_of_worship, religion=jewish    |
| 3300 | pofw  | muslim       | A Muslim place of worship (usually a mosque) without one of the denominations below. | amenity=place_of_worship, religion=muslim    |
| 3301 | pofw  | muslim_sunni | A Sunni Muslim place of worship.                             | + denomination=sunni                         |
| 3302 | pofw  | muslim_shia  | A Shia Muslim place of worship.                              | + denomination=shia                          |
| 3400 | pofw  | buddhist     | A Buddhist place of worship.                                 | amenity=place_of_worship, religion=buddhist  |
| 3500 | pofw  | hindu        | A Hindu place of worship.                                    | amenity=place_of_worship, religion=hindu     |
| 3600 | pofw  | taoist       | A Taoist place of worship.                                   | amenity=place_of_worship, religion=taoist    |
| 3700 | pofw  | shintoist    | A Shintoist place of worship.                                | amenity=place_of_worship, religion=shintoist |
| 3800 | pofw  | sikh         | A Sikh place of worship.                                     | amenity=place_of_worship, religion=sikh      |

### 4. Natural Features (“natural”)

The following feature classes exist in this layer:

| code | layer   | fclass        | Description                                                  | OSM Tags              |
| ---- | ------- | ------------- | ------------------------------------------------------------ | --------------------- |
| 4101 | natural | spring        | A spring, possibly source of a stream.                       | natural=spring        |
| 4103 | natural | glacier       | A glacier.                                                   | natural=glacier       |
| 4111 | natural | peak          | A mountain peak.                                             | natural=peak          |
| 4112 | natural | cliff         | A cliff.                                                     | natural=cliff         |
| 4113 | natural | volcano       | A volcano.                                                   | natural=volcano       |
| 4121 | natural | tree          | A tree.                                                      | natural=tree          |
| 4131 | natural | mine          | A mine.                                                      | natural=mine          |
| 4132 | natural | cave_entrance | A cave entrance.                                             | natural=cave_entrance |
| 4141 | natural | beach         | A beach. (Note that beaches are only rarely mapped as point features.) | natural=beach         |

### 5. Traffic Related (“traffic”)

The following feature classes exist in this layer:

| code | layer   | fclass          | Description                                                  | OSM Tags                                 |
| ---- | ------- | --------------- | ------------------------------------------------------------ | ---------------------------------------- |
| 5201 | traffic | traffic_signals | Traffic lights.                                              | highway=traffic_signals                  |
| 5202 | traffic | mini_roundabout | A small roundabout without physical structure, usually just painted onto the road surface. | highway=mini_roundabout                  |
| 5203 | traffic | stop            | A stop sign.                                                 | highway=stop                             |
| 5204 | traffic | crossing        | A place where the street is crossed by pedestrians or a railway. | highway=crossing, railway=level_crossing |

| code | layer   | fclass              | Description                                             | OSM Tags                      |
| ---- | ------- | ------------------- | ------------------------------------------------------- | ----------------------------- |
| 5205 | traffic | ford                | A place where the road runs through a river or stream.  | highway=ford                  |
| 5206 | traffic | motorway_junction   | The place where a slipway enters or leaves a motorway.  | highway=motorway_junction     |
| 5207 | traffic | turning_circle      | An area at the end of a street where vehicles can turn. | highway=turning_circle        |
| 5208 | traffic | speed_camera        | A camera that photographs speeding vehicles.            | highway=speed_camera          |
| 5209 | traffic | street_lamp         | A lamp illuminating the road.                           | highway=street_lamp           |
|      |         |            |Fuel and Parking||
| 5250 | traffic | fuel                | A gas station.                                          | amenity=fuel                  |
| 5251 | traffic | service             | A service area, usually along motorways.                | highway=services              |
| 5260 | traffic | parking             | A car park of unknown type.                             | amenity=parking               |
| 5261 | traffic | parking_site        | A surface car park.                                     | amenity=parking, parking=site |
| 5262 | traffic | parking_multistorey | A multi-storey car park.                                | parking=multi-storey          |
| 5263 | traffic | parking_underground | An underground car park.                                | parking=underground           |
| 5270 | traffic | parking_bicycle     | A place to park your bicycle.                           | amenity=bicycle_parking       |
|      |         |                     |Water Traffic||
| 5301 | traffic | slipway             | A slipway.                                              | leisure=slipway               |
| 5302 | traffic | marina              | A marina.                                               | leisure=marina                |
| 5303 | traffic | pier                | A pier.                                                 | man_made=pier                 |
| 5311 | traffic | dam                 | A dam.                                                  | waterway=dam                  |
| 5321 | traffic | waterfall           | A waterfall.                                            | waterway=waterfall            |
| 5331 | traffic | lock_gate           | A lock gate.                                            | waterway=lock_gate            |
| 5332 | traffic | weir                | A barrier built across a river or stream.               | waterway=weir                 |

Note: Most of the 53xx type objects do sometimes appear as linear features in OSM as well but those are not yet available in the shape files.

### 6. Transport Infrastructure (“transport”)

The following feature classes exist in this layer:

| code | layer     | fclass          | Description                                          | OSM Tags                                                     |
| ---- | --------- | --------------- | ---------------------------------------------------- | ------------------------------------------------------------ |
| 5601 | transport | railway_station | A larger railway station of mainline rail services.  | railway=station                                              |
| 5602 | transport | railway_halt    | A smaller, local railway station, or subway station. | railway=halt, or public_transport=stop_position + train=yes  |
| 5603 | transport | tram_stop       | A tram stop.                                         | railway=tram_stop, or public_transport=stop_position + tram=yes |
| 5621 | transport | bus_stop        | A bus stop.                                          | highway=bus_stop, or public_transport=stop_position + bus=yes |

| code | layer     | fclass            | Description                                  | OSM Tags                                                     |
| ---- | --------- | ----------------- | -------------------------------------------- | ------------------------------------------------------------ |
| 5622 | transport | bus_station       | A large bus station with multiple platforms. | amenity=bus_station                                          |
| 5641 | transport | taxi_rank         | A taxi rank.                                 | amenity=taxi                                                 |
| 565x |           |                   | Air Traffic                                  |                                                              |
| 5651 | transport | airport           | A large airport.                             | amenity=airport or aeroway=aerodrome unless type=airstrip    |
| 5652 | transport | airfield          | A small airport or airfield.                 | aeroway=airfield, military=airfield, aeroway=aeroway with type=airstrip |
| 5655 | transport | helipad           | A place for landing helicopters.             | aeroway=helipad                                              |
| 5656 | transport | apron             | An apron (area where aircraft are parked)    | aeroway=apron                                                |
| 566x |           |                   | Water Traffic                                |                                                              |
| 5661 | transport | ferry_terminal    | A ferry terminal.                            | amenity=ferry_terminal                                       |
| 567x |           |                   | Other Traffic                                |                                                              |
| 5671 | transport | aerialway_station | A station where cable cars or lifts alight.  | aerialway=station                                            |






The table structure information is ({database name: {schema name: [table name]}}): 
{'GEO_OPENSTREETMAP_WORLDPOP': {'GEO_OPENSTREETMAP': ['HISTORY_CHANGESETS', 'HISTORY_NODES', 'PLANET_FEATURES_POINTS', 'PLANET_FEATURES', 'PLANET_NODES', 'PLANET_RELATIONS', 'HISTORY_LAYERS', 'HISTORY_RELATIONS', 'PLANET_WAYS', 'PLANET_LAYERS'], 'WORLDPOP': ['POPULATION_GRID_1KM']}}
Task: Based on the most recent 1km population grid data in Singapore before January 2023, using ST_CONVEXHULL to aggregate all population grid centroids into a bounding region and ST_INTERSECTS to identify hospitals from OpenStreetMap’s planet layer (layer_code in (2110, 2120)) that fall within this region, then calculating the distance from each grid cell to its nearest hospital, what is the total population of the grid cell that is farthest from any hospital?

Please think step by step and answer only one complete SQL in snowflake dialect in ```sql``` format.
SQL usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: The table structure information is ({database name: {schema name: [table name]}}): 
{'GEO_OPENSTREETMAP_WORLDPOP': {'GEO_OPENSTREETMAP': ['HISTORY_CHANGESETS', 'HISTORY_NODES', 'PLANET_FEATURES_POINTS', 'PLANET_FEATURES', 'PLANET_NODES', 'PLANET_RELATIONS', 'HISTORY_LAYERS', 'HISTORY_RELATIONS', 'PLANET_WAYS', 'PLANET_LAYERS'], 'WORLDPOP': ['POPULATION_GRID_1KM']}}

When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
If the task description does not specify the number of decimal places, retain all decimals to four places.

[Self-refine]
2025-05-06 23:04:45 - Thread-816 (execute) - INFO - [Try to run SQL in self-refine]
```sql
/* 1.  Most-recent (before 2023-01-01) 1-km population grid of Singapore
   2.  Build one convex-hull around all grid centroids
   3.  Keep OSM “hospital” geometries (layer_code 2110 & 2120) that fall inside the hull
   4.  For every grid cell get distance to the nearest hospital
   5.  Return the population of the cell that is farthest from any hospital          */
WITH sgp_grid AS (        -- latest Singapore grid before 2023-01-01
    SELECT
        "geo_id",
        "population",
        ST_MAKEPOINT("longitude_centroid","latitude_centroid")   AS centroid_geo
    FROM GEO_OPENSTREETMAP_WORLDPOP.WORLDPOP.POPULATION_GRID_1KM
    WHERE "alpha_3_code" = 'SGP'
      AND "last_updated"  < DATE '2023-01-01'
      AND "last_updated"  = (
            SELECT MAX("last_updated")
            FROM GEO_OPENSTREETMAP_WORLDPOP.WORLDPOP.POPULATION_GRID_1KM
            WHERE "alpha_3_code" = 'SGP'
              AND "last_updated" < DATE '2023-01-01'
          )
),
convex_hull AS (          -- bounding region around all centroids
    SELECT ST_CONVEXHULL(ST_UNIONAGG(centroid_geo)) AS hull_geo
    FROM   sgp_grid
),
hospitals AS (            -- all hospital geometries
    SELECT TO_GEOGRAPHY("geometry") AS hosp_geo
    FROM   GEO_OPENSTREETMAP_WORLDPOP.GEO_OPENSTREETMAP.PLANET_LAYERS
    WHERE  "layer_code" IN (2110,2120)
),
hosp_in_sgp AS (          -- hospitals inside the bounding region
    SELECT h.hosp_geo
    FROM   hospitals h, convex_hull c
    WHERE  ST_INTERSECTS(h.hosp_geo, c.hull_geo)
),
grid_nearest_dist AS (    -- distance from each grid centroid to its nearest hospital
    SELECT
        g."geo_id",
        g."population",
        MIN(ST_DISTANCE(g.centroid_geo, h.hosp_geo)) AS nearest_dist_m
    FROM sgp_grid g
    CROSS JOIN hosp_in_sgp h
    GROUP BY g."geo_id", g."population"
),
farthest_cell AS (        -- grid cell farthest from any hospital
    SELECT *
    FROM   grid_nearest_dist
    ORDER BY nearest_dist_m DESC NULLS LAST
    LIMIT  1
)
SELECT "population"
FROM   farthest_cell;
```
[Try to run SQL in self-refine]
2025-05-06 23:04:46 - Thread-816 (execute) - INFO - itercount: 1
2025-05-06 23:04:46 - Thread-816 (execute) - INFO - [Self-refine]
Input sql:
/* 1.  Most-recent (before 2023-01-01) 1-km population grid of Singapore
   2.  Build one convex-hull around all grid centroids
   3.  Keep OSM “hospital” geometries (layer_code 2110 & 2120) that fall inside the hull
   4.  For every grid cell get distance to the nearest hospital
   5.  Return the population of the cell that is farthest from any hospital          */
WITH sgp_grid AS (        -- latest Singapore grid before 2023-01-01
    SELECT
        "geo_id",
        "population",
        ST_MAKEPOINT("longitude_centroid","latitude_centroid")   AS centroid_geo
    FROM GEO_OPENSTREETMAP_WORLDPOP.WORLDPOP.POPULATION_GRID_1KM
    WHERE "alpha_3_code" = 'SGP'
      AND "last_updated"  < DATE '2023-01-01'
      AND "last_updated"  = (
            SELECT MAX("last_updated")
            FROM GEO_OPENSTREETMAP_WORLDPOP.WORLDPOP.POPULATION_GRID_1KM
            WHERE "alpha_3_code" = 'SGP'
              AND "last_updated" < DATE '2023-01-01'
          )
),
convex_hull AS (          -- bounding region around all centroids
    SELECT ST_CONVEXHULL(ST_UNIONAGG(centroid_geo)) AS hull_geo
    FROM   sgp_grid
),
hospitals AS (            -- all hospital geometries
    SELECT TO_GEOGRAPHY("geometry") AS hosp_geo
    FROM   GEO_OPENSTREETMAP_WORLDPOP.GEO_OPENSTREETMAP.PLANET_LAYERS
    WHERE  "layer_code" IN (2110,2120)
),
hosp_in_sgp AS (          -- hospitals inside the bounding region
    SELECT h.hosp_geo
    FROM   hospitals h, convex_hull c
    WHERE  ST_INTERSECTS(h.hosp_geo, c.hull_geo)
),
grid_nearest_dist AS (    -- distance from each grid centroid to its nearest hospital
    SELECT
        g."geo_id",
        g."population",
        MIN(ST_DISTANCE(g.centroid_geo, h.hosp_geo)) AS nearest_dist_m
    FROM sgp_grid g
    CROSS JOIN hosp_in_sgp h
    GROUP BY g."geo_id", g."population"
),
farthest_cell AS (        -- grid cell farthest from any hospital
    SELECT *
    FROM   grid_nearest_dist
    ORDER BY nearest_dist_m DESC NULLS LAST
    LIMIT  1
)
SELECT "population"
FROM   farthest_cell;
The error information is:
{'status': 'error', 'error_msg': '##ERROR##002140 (42601): SQL compilation error:\nUnknown functions ST_UNIONAGG, ST_CONVEXHULL'}
Please correct it and output only 1 complete SQL query.
[Self-refine]
2025-05-06 23:05:07 - Thread-816 (execute) - INFO - [Try to run SQL in self-refine]
```sql
/* 1.  Latest (before 2023-01-01) 1-km population grid of Singapore
   2.  Build convex-hull around all grid-cell centroids
   3.  Keep OSM hospital geometries (layer_code 2110, 2120) that lie inside the hull
   4.  For every grid cell compute distance to its nearest hospital
   5.  Return the population of the grid cell farthest from any hospital            */
WITH sgp_grid AS (                 -- newest Singapore grid prior to 2023-01-01
    SELECT  "geo_id",
            "population",
            ST_MAKEPOINT("longitude_centroid", "latitude_centroid") AS centroid_geo
    FROM    GEO_OPENSTREETMAP_WORLDPOP.WORLDPOP.POPULATION_GRID_1KM
    WHERE   "alpha_3_code" = 'SGP'
      AND   "last_updated" < DATE '2023-01-01'
      QUALIFY "last_updated" = MAX("last_updated") OVER ()          -- pick latest snapshot
),
convex_hull AS (                   -- one polygon enclosing all centroids
    SELECT ST_CONVEXHULL(ST_UNION_AGG(centroid_geo)) AS hull_geo
    FROM   sgp_grid
),
hospitals AS (                     -- hospital geometries in OSM planet layer
    SELECT TO_GEOGRAPHY("geometry") AS hosp_geo
    FROM   GEO_OPENSTREETMAP_WORLDPOP.GEO_OPENSTREETMAP.PLANET_LAYERS
    WHERE  "layer_code" IN (2110, 2120)
),
hosp_in_sgp AS (                   -- hospitals that fall within Singapore hull
    SELECT h.hosp_geo
    FROM   hospitals h
           CROSS JOIN convex_hull c
    WHERE  ST_INTERSECTS(h.hosp_geo, c.hull_geo)
),
grid_nearest_dist AS (             -- distance (metres) from each grid to nearest hospital
    SELECT  g."geo_id",
            g."population",
            MIN(ST_DISTANCE(g.centroid_geo, h.hosp_geo)) AS nearest_dist_m
    FROM    sgp_grid        g
    CROSS JOIN hosp_in_sgp  h
    GROUP BY g."geo_id", g."population"
),
farthest_cell AS (                 -- grid cell farthest from any hospital
    SELECT *
    FROM   grid_nearest_dist
    ORDER BY nearest_dist_m DESC NULLS LAST
    LIMIT  1
)
SELECT "population"
FROM   farthest_cell;
```
[Try to run SQL in self-refine]
2025-05-06 23:05:08 - Thread-816 (execute) - INFO - itercount: 2
2025-05-06 23:05:08 - Thread-816 (execute) - INFO - [Self-refine]
Input sql:
/* 1.  Latest (before 2023-01-01) 1-km population grid of Singapore
   2.  Build convex-hull around all grid-cell centroids
   3.  Keep OSM hospital geometries (layer_code 2110, 2120) that lie inside the hull
   4.  For every grid cell compute distance to its nearest hospital
   5.  Return the population of the grid cell farthest from any hospital            */
WITH sgp_grid AS (                 -- newest Singapore grid prior to 2023-01-01
    SELECT  "geo_id",
            "population",
            ST_MAKEPOINT("longitude_centroid", "latitude_centroid") AS centroid_geo
    FROM    GEO_OPENSTREETMAP_WORLDPOP.WORLDPOP.POPULATION_GRID_1KM
    WHERE   "alpha_3_code" = 'SGP'
      AND   "last_updated" < DATE '2023-01-01'
      QUALIFY "last_updated" = MAX("last_updated") OVER ()          -- pick latest snapshot
),
convex_hull AS (                   -- one polygon enclosing all centroids
    SELECT ST_CONVEXHULL(ST_UNION_AGG(centroid_geo)) AS hull_geo
    FROM   sgp_grid
),
hospitals AS (                     -- hospital geometries in OSM planet layer
    SELECT TO_GEOGRAPHY("geometry") AS hosp_geo
    FROM   GEO_OPENSTREETMAP_WORLDPOP.GEO_OPENSTREETMAP.PLANET_LAYERS
    WHERE  "layer_code" IN (2110, 2120)
),
hosp_in_sgp AS (                   -- hospitals that fall within Singapore hull
    SELECT h.hosp_geo
    FROM   hospitals h
           CROSS JOIN convex_hull c
    WHERE  ST_INTERSECTS(h.hosp_geo, c.hull_geo)
),
grid_nearest_dist AS (             -- distance (metres) from each grid to nearest hospital
    SELECT  g."geo_id",
            g."population",
            MIN(ST_DISTANCE(g.centroid_geo, h.hosp_geo)) AS nearest_dist_m
    FROM    sgp_grid        g
    CROSS JOIN hosp_in_sgp  h
    GROUP BY g."geo_id", g."population"
),
farthest_cell AS (                 -- grid cell farthest from any hospital
    SELECT *
    FROM   grid_nearest_dist
    ORDER BY nearest_dist_m DESC NULLS LAST
    LIMIT  1
)
SELECT "population"
FROM   farthest_cell;
The error information is:
{'status': 'error', 'error_msg': '##ERROR##002140 (42601): SQL compilation error:\nUnknown function ST_CONVEXHULL'}
Please correct it and output only 1 complete SQL query.
[Self-refine]
2025-05-06 23:07:08 - Thread-816 (execute) - INFO - [Try to run SQL in self-refine]
```sql
/*  Find the 1-km population grid cell in Singapore (latest data before 2023-01-01)
    that is farthest from any hospital (layer_code 2110 or 2120).                */
WITH sgp_grid AS (          /* newest Singapore grid snapshot before 2023-01-01 */
    SELECT
        "geo_id",
        "population",
        ST_POINT("longitude_centroid","latitude_centroid")      AS centroid_geom,  -- GEOMETRY
        ST_MAKEPOINT("longitude_centroid","latitude_centroid")  AS centroid_geog   -- GEOGRAPHY
    FROM  GEO_OPENSTREETMAP_WORLDPOP.WORLDPOP.POPULATION_GRID_1KM
    WHERE "alpha_3_code" = 'SGP'
      AND "last_updated"  < DATE '2023-01-01'
    QUALIFY "last_updated" = MAX("last_updated") OVER ()        -- keep latest date
),
convex_hull AS (            /* convex hull around all centroids (GEOMETRY) */
    SELECT ST_CONVEXHULL(ST_UNION_AGG(centroid_geom)) AS hull_geom
    FROM   sgp_grid
),
hospitals AS (              /* OSM hospitals */
    SELECT 
        TO_GEOMETRY("geometry")                 AS hosp_geom,      -- GEOMETRY
        TO_GEOGRAPHY(TO_GEOMETRY("geometry"))   AS hosp_geog       -- GEOGRAPHY
    FROM   GEO_OPENSTREETMAP_WORLDPOP.GEO_OPENSTREETMAP.PLANET_LAYERS
    WHERE  "layer_code" IN (2110, 2120)
),
hosp_in_sgp AS (            /* hospitals inside Singapore convex hull */
    SELECT h.hosp_geom,
           h.hosp_geog
    FROM   hospitals h
    CROSS JOIN convex_hull c
    WHERE  ST_INTERSECTS(h.hosp_geom, c.hull_geom)
),
grid_nearest_dist AS (      /* distance (metres) from each grid cell to nearest hospital */
    SELECT
        g."geo_id",
        g."population",
        MIN(ST_DISTANCE(g.centroid_geog, h.hosp_geog)) AS nearest_dist_m
    FROM sgp_grid g
    CROSS JOIN hosp_in_sgp h
    GROUP BY g."geo_id", g."population"
),
farthest_cell AS (          /* grid cell farthest from any hospital */
    SELECT *
    FROM   grid_nearest_dist
    ORDER BY nearest_dist_m DESC NULLS LAST
    LIMIT  1
)
SELECT "population"
FROM   farthest_cell;
```
[Try to run SQL in self-refine]
2025-05-06 23:07:08 - Thread-816 (execute) - INFO - itercount: 3
2025-05-06 23:07:08 - Thread-816 (execute) - INFO - [Self-refine]
Input sql:
/*  Find the 1-km population grid cell in Singapore (latest data before 2023-01-01)
    that is farthest from any hospital (layer_code 2110 or 2120).                */
WITH sgp_grid AS (          /* newest Singapore grid snapshot before 2023-01-01 */
    SELECT
        "geo_id",
        "population",
        ST_POINT("longitude_centroid","latitude_centroid")      AS centroid_geom,  -- GEOMETRY
        ST_MAKEPOINT("longitude_centroid","latitude_centroid")  AS centroid_geog   -- GEOGRAPHY
    FROM  GEO_OPENSTREETMAP_WORLDPOP.WORLDPOP.POPULATION_GRID_1KM
    WHERE "alpha_3_code" = 'SGP'
      AND "last_updated"  < DATE '2023-01-01'
    QUALIFY "last_updated" = MAX("last_updated") OVER ()        -- keep latest date
),
convex_hull AS (            /* convex hull around all centroids (GEOMETRY) */
    SELECT ST_CONVEXHULL(ST_UNION_AGG(centroid_geom)) AS hull_geom
    FROM   sgp_grid
),
hospitals AS (              /* OSM hospitals */
    SELECT 
        TO_GEOMETRY("geometry")                 AS hosp_geom,      -- GEOMETRY
        TO_GEOGRAPHY(TO_GEOMETRY("geometry"))   AS hosp_geog       -- GEOGRAPHY
    FROM   GEO_OPENSTREETMAP_WORLDPOP.GEO_OPENSTREETMAP.PLANET_LAYERS
    WHERE  "layer_code" IN (2110, 2120)
),
hosp_in_sgp AS (            /* hospitals inside Singapore convex hull */
    SELECT h.hosp_geom,
           h.hosp_geog
    FROM   hospitals h
    CROSS JOIN convex_hull c
    WHERE  ST_INTERSECTS(h.hosp_geom, c.hull_geom)
),
grid_nearest_dist AS (      /* distance (metres) from each grid cell to nearest hospital */
    SELECT
        g."geo_id",
        g."population",
        MIN(ST_DISTANCE(g.centroid_geog, h.hosp_geog)) AS nearest_dist_m
    FROM sgp_grid g
    CROSS JOIN hosp_in_sgp h
    GROUP BY g."geo_id", g."population"
),
farthest_cell AS (          /* grid cell farthest from any hospital */
    SELECT *
    FROM   grid_nearest_dist
    ORDER BY nearest_dist_m DESC NULLS LAST
    LIMIT  1
)
SELECT "population"
FROM   farthest_cell;
The error information is:
{'status': 'error', 'error_msg': '##ERROR##002140 (42601): SQL compilation error:\nUnknown function ST_CONVEXHULL'}
Please correct it and output only 1 complete SQL query.
[Self-refine]
2025-05-06 23:10:08 - Thread-816 (execute) - INFO - [Try to run SQL in self-refine]
```sql
/*  Find the 1-km population-grid cell in Singapore (latest data before 2023-01-01)
    that is farthest from any hospital (layer_code 2110 or 2120)               */
WITH sgp_grid AS (       /* newest Singapore grid snapshot prior to 2023-01-01 */
    SELECT  "geo_id",
            "population",
            ST_MAKEPOINT("longitude_centroid","latitude_centroid") AS centroid_geog
    FROM    GEO_OPENSTREETMAP_WORLDPOP.WORLDPOP.POPULATION_GRID_1KM
    WHERE   "alpha_3_code" = 'SGP'
      AND   "last_updated" < DATE '2023-01-01'
    QUALIFY "last_updated" = MAX("last_updated") OVER ()          -- latest date
),
bounding_box AS (        /* simple rectangle covering all centroids            */
    SELECT ST_GEOGFROMTEXT(
             'POLYGON((' ||
             MIN(ST_X(centroid_geog)) || ' ' || MIN(ST_Y(centroid_geog)) || ', ' ||
             MIN(ST_X(centroid_geog)) || ' ' || MAX(ST_Y(centroid_geog)) || ', ' ||
             MAX(ST_X(centroid_geog)) || ' ' || MAX(ST_Y(centroid_geog)) || ', ' ||
             MAX(ST_X(centroid_geog)) || ' ' || MIN(ST_Y(centroid_geog)) || ', ' ||
             MIN(ST_X(centroid_geog)) || ' ' || MIN(ST_Y(centroid_geog)) || '))'
           ) AS hull_geog
    FROM   sgp_grid
),
hospitals AS (           /* OSM hospital geometries                            */
    SELECT TO_GEOGRAPHY("geometry") AS hosp_geog
    FROM   GEO_OPENSTREETMAP_WORLDPOP.GEO_OPENSTREETMAP.PLANET_LAYERS
    WHERE  "layer_code" IN (2110, 2120)
),
hosp_in_sgp AS (         /* hospitals inside the bounding region               */
    SELECT h.hosp_geog
    FROM   hospitals h
    CROSS JOIN bounding_box b
    WHERE  ST_INTERSECTS(h.hosp_geog, b.hull_geog)
),
grid_nearest_dist AS (   /* distance (metres) from each grid cell to nearest hospital */
    SELECT  g."geo_id",
            g."population",
            MIN(ST_DISTANCE(g.centroid_geog, h.hosp_geog)) AS nearest_dist_m
    FROM    sgp_grid g
    CROSS JOIN hosp_in_sgp h
    GROUP BY g."geo_id", g."population"
),
farthest_cell AS (       /* grid cell farthest from any hospital               */
    SELECT *
    FROM   grid_nearest_dist
    ORDER BY nearest_dist_m DESC NULLS LAST
    LIMIT  1
)
SELECT "population"
FROM   farthest_cell;
```
[Try to run SQL in self-refine]
2025-05-06 23:10:46 - Thread-816 (execute) - INFO - Total iteration counts: 3
