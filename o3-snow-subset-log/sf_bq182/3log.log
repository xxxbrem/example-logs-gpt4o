2025-05-07 01:32:56 - Thread-29 (execute) - INFO - [Exploration]
```sql
--Description: 1) Peek at the 2023 events table to understand the column layout,  
--especially "type" and the micro-second epoch stored in "created_at".
SELECT *
FROM "GITHUB_REPOS_DATE"."YEAR"."_2023"
LIMIT 20;
```

```sql
--Description: 2) Inspect only PullRequestEvent rows to confirm the values of  
--"created_at" we will be dealing with.
SELECT
  "type",
  "repo",
  "created_at"
FROM "GITHUB_REPOS_DATE"."YEAR"."_2023"
WHERE "type" = 'PullRequestEvent'
LIMIT 20;
```

```sql
--Description: 3) PullRequestEvents that happened on 18-Jan-2023 (UTC).  
--The unix-epoch micro-second range used here is  
--1674009600000000 (2023-01-18 00:00:00)  to  
--1674095999000000 (2023-01-18 23:59:59).
SELECT
  "repo",
  "created_at"
FROM "GITHUB_REPOS_DATE"."YEAR"."_2023"
WHERE "type" = 'PullRequestEvent'
  AND "created_at" BETWEEN 1674009600000000 AND 1674095999000000
LIMIT 20;
```

```sql
--Description: 4) List all distinct repositories that had a PullRequestEvent  
--on 18-Jan-2023.
SELECT DISTINCT
  r.value::VARIANT:"name"::STRING AS "repo_name"
FROM (
  SELECT "repo"
  FROM "GITHUB_REPOS_DATE"."YEAR"."_2023"
  WHERE "type" = 'PullRequestEvent'
    AND "created_at" BETWEEN 1674009600000000 AND 1674095999000000
) t,
LATERAL FLATTEN (input => t."repo") r
LIMIT 20;
```

```sql
--Description: 5) Inspect the structure of the "language" column in
--GITHUB_REPOS.LANGUAGES for a few repositories (JSON object with
--language-byte pairs is expected).
SELECT
  "repo_name",
  "language"
FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES"
WHERE "language" IS NOT NULL
  AND "language" NOT IN ('[]', '')
LIMIT 20;
```

```sql
--Description: 6) Flatten the language JSON to get language-byte pairs  
--for a sample repo to verify the key/value layout.
SELECT
  l."repo_name",
  f.key::STRING  AS "language",
  f.value::NUMBER AS "bytes"
FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES" l,
     LATERAL FLATTEN (input => l."language") f
WHERE l."repo_name" ILIKE '%linux%'
LIMIT 20;
```

```sql
--Description: 7) Derive the “primary” language (max bytes) for every repo.
WITH lang_pairs AS (
  SELECT
    l."repo_name",
    f.key::STRING  AS "language",
    f.value::NUMBER AS "bytes"
  FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES" l,
       LATERAL FLATTEN (input => l."language") f
)
SELECT
  lp."repo_name",
  lp."language" AS "primary_language"
FROM lang_pairs lp
QUALIFY ROW_NUMBER() OVER (PARTITION BY lp."repo_name"
                           ORDER BY lp."bytes" DESC) = 1
LIMIT 20;
```

```sql
--Description: 8) Count PullRequestEvents per repository on 18-Jan-2023.
WITH pr_20230118 AS (
  SELECT
    r.value::VARIANT:"name"::STRING AS "repo_name"
  FROM "GITHUB_REPOS_DATE"."YEAR"."_2023" e,
       LATERAL FLATTEN (input => e."repo") r
  WHERE e."type" = 'PullRequestEvent'
    AND e."created_at" BETWEEN 1674009600000000 AND 1674095999000000
)
SELECT
  "repo_name",
  COUNT(*) AS "pull_request_events"
FROM pr_20230118
GROUP BY "repo_name"
LIMIT 20;
```

```sql
--Description: 9) Join PullRequestEvent counts with primary language  
--and aggregate by language.
WITH pr_20230118 AS (
  SELECT
    r.value::VARIANT:"name"::STRING AS "repo_name"
  FROM "GITHUB_REPOS_DATE"."YEAR"."_2023" e,
       LATERAL FLATTEN (input => e."repo") r
  WHERE e."type" = 'PullRequestEvent'
    AND e."created_at" BETWEEN 1674009600000000 AND 1674095999000000
),
lang_primary AS (
  SELECT
    lp."repo_name",
    lp."language"
  FROM (
    SELECT
      l."repo_name",
      f.key::STRING  AS "language",
      f.value::NUMBER AS "bytes",
      ROW_NUMBER() OVER (PARTITION BY l."repo_name"
                         ORDER BY f.value::NUMBER DESC) AS rn
    FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES" l,
         LATERAL FLATTEN (input => l."language") f
  ) lp
  WHERE lp.rn = 1
)
SELECT
  lp."language",
  COUNT(*) AS "pull_request_events"
FROM pr_20230118 p
JOIN lang_primary lp
  ON p."repo_name" = lp."repo_name"
GROUP BY lp."language"
LIMIT 20;
```

```sql
--Description: 10) Languages whose summed PullRequestEvents on 18-Jan-2023
--reach or exceed the threshold of 100 (final answer set).
WITH pr_20230118 AS (
  SELECT
    r.value::VARIANT:"name"::STRING AS "repo_name"
  FROM "GITHUB_REPOS_DATE"."YEAR"."_2023" e,
       LATERAL FLATTEN (input => e."repo") r
  WHERE e."type" = 'PullRequestEvent'
    AND e."created_at" BETWEEN 1674009600000000 AND 1674095999000000
),
lang_primary AS (
  SELECT
    lp."repo_name",
    lp."language"
  FROM (
    SELECT
      l."repo_name",
      f.key::STRING  AS "language",
      f.value::NUMBER AS "bytes",
      ROW_NUMBER() OVER (PARTITION BY l."repo_name"
                         ORDER BY f.value::NUMBER DESC) AS rn
    FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES" l,
         LATERAL FLATTEN (input => l."language") f
  ) lp
  WHERE lp.rn = 1
)
SELECT
  lp."language"   AS "primary_programming_language",
  COUNT(*)        AS "pull_request_events_on_2023_01_18"
FROM pr_20230118 p
JOIN lang_primary lp
  ON p."repo_name" = lp."repo_name"
GROUP BY lp."language"
HAVING COUNT(*) >= 100;
```
[Exploration]
2025-05-07 01:32:56 - Thread-29 (execute) - INFO - [Try to execute]
--Description: 1) Peek at the 2023 events table to understand the column layout,  
--especially "type" and the micro-second epoch stored in "created_at".
SELECT *
FROM "GITHUB_REPOS_DATE"."YEAR"."_2023"
LIMIT 20;
[Try to execute]
2025-05-07 01:32:58 - Thread-29 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 1) Peek at the 2023 events table to understand the column layout,  
--especially "type" and the micro-second epoch stored in "created_at".
SELECT *
FROM "GITHUB_REPOS_DATE"."YEAR"."_2023"
LIMIT 20;
Results:
type,public,payload,repo,actor,org,created_at,id,other
IssueCommentEvent,True,"{""action"":""created"",""issue"":{""url"":""https://api.github.com/repos/getsentry/sentry-laravel/issues/802"",""repository_url"":""https://api.github.com/repos/getsentry/sentry-laravel"",""labels_url"":""https://api.github.com/repos/getsentry/sentry-laravel/issues/802/labels{/name}"",""comments_url"":""https://api.github.com/repos/getsentry/sentry-laravel/issues/802/comments"",""events_url"":""https://api.github.co

[Successfully executed]
2025-05-07 01:32:58 - Thread-29 (execute) - INFO - [Try to execute]
--Description: 2) Inspect only PullRequestEvent rows to confirm the values of  
--"created_at" we will be dealing with.
SELECT
  "type",
  "repo",
  "created_at"
FROM "GITHUB_REPOS_DATE"."YEAR"."_2023"
WHERE "type" = 'PullRequestEvent'
LIMIT 20;
[Try to execute]
2025-05-07 01:33:02 - Thread-29 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 2) Inspect only PullRequestEvent rows to confirm the values of  
--"created_at" we will be dealing with.
SELECT
  "type",
  "repo",
  "created_at"
FROM "GITHUB_REPOS_DATE"."YEAR"."_2023"
WHERE "type" = 'PullRequestEvent'
LIMIT 20;
Results:
type,repo,created_at
PullRequestEvent,"{
  ""id"": 625520869,
  ""name"": ""Mike7323/Mike-s-construction"",
  ""url"": ""https://api.github.com/repos/Mike7323/Mike-s-construction""
}",1685599179000000
PullRequestEvent,"{
  ""id"": 591279566,
  ""name"": ""simonrw/github-inbox"",
  ""url"": ""https://api.github.com/repos/simonrw/github-inbox""
}",1674381448000000
PullRequestEvent,"{
  ""id"": 685941384,
  ""name"": ""forgerlil/wd-043"",
  ""url"": ""https://api.github.com/repos/forgerlil/wd-04

[Successfully executed]
2025-05-07 01:33:02 - Thread-29 (execute) - INFO - [Try to execute]
--Description: 3) PullRequestEvents that happened on 18-Jan-2023 (UTC).  
--The unix-epoch micro-second range used here is  
--1674009600000000 (2023-01-18 00:00:00)  to  
--1674095999000000 (2023-01-18 23:59:59).
SELECT
  "repo",
  "created_at"
FROM "GITHUB_REPOS_DATE"."YEAR"."_2023"
WHERE "type" = 'PullRequestEvent'
  AND "created_at" BETWEEN 1674009600000000 AND 1674095999000000
LIMIT 20;
[Try to execute]
2025-05-07 01:33:06 - Thread-29 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 3) PullRequestEvents that happened on 18-Jan-2023 (UTC).  
--The unix-epoch micro-second range used here is  
--1674009600000000 (2023-01-18 00:00:00)  to  
--1674095999000000 (2023-01-18 23:59:59).
SELECT
  "repo",
  "created_at"
FROM "GITHUB_REPOS_DATE"."YEAR"."_2023"
WHERE "type" = 'PullRequestEvent'
  AND "created_at" BETWEEN 1674009600000000 AND 1674095999000000
LIMIT 20;
Results:
repo,created_at
"{
  ""id"": 582762621,
  ""name"": ""MuhammadSodiqMarupov/buxoro-shahar"",
  ""url"": ""https://api.github.com/repos/MuhammadSodiqMarupov/buxoro-shahar""
}",1674051830000000
"{
  ""id"": 470064146,
  ""name"": ""KimYangOfCat/TypeScript-Website"",
  ""url"": ""https://api.github.com/repos/KimYangOfCat/TypeScript-Website""
}",1674027782000000
"{
  ""id"": 584434355,
  ""name"": ""Satch5918/minga-back"",
  ""url"": ""https://api.github.com/repos/Satch5918/minga-back""
}",1674079

[Successfully executed]
2025-05-07 01:33:06 - Thread-29 (execute) - INFO - [Try to execute]
--Description: 4) List all distinct repositories that had a PullRequestEvent  
--on 18-Jan-2023.
SELECT DISTINCT
  r.value::VARIANT:"name"::STRING AS "repo_name"
FROM (
  SELECT "repo"
  FROM "GITHUB_REPOS_DATE"."YEAR"."_2023"
  WHERE "type" = 'PullRequestEvent'
    AND "created_at" BETWEEN 1674009600000000 AND 1674095999000000
) t,
LATERAL FLATTEN (input => t."repo") r
LIMIT 20;
[Try to execute]
2025-05-07 01:33:13 - Thread-29 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 4) List all distinct repositories that had a PullRequestEvent  
--on 18-Jan-2023.
SELECT DISTINCT
  r.value::VARIANT:"name"::STRING AS "repo_name"
FROM (
  SELECT "repo"
  FROM "GITHUB_REPOS_DATE"."YEAR"."_2023"
  WHERE "type" = 'PullRequestEvent'
    AND "created_at" BETWEEN 1674009600000000 AND 1674095999000000
) t,
LATERAL FLATTEN (input => t."repo") r
LIMIT 20;
Results:
repo_name
""

[Successfully executed]
2025-05-07 01:33:13 - Thread-29 (execute) - INFO - [Try to execute]
--Description: 5) Inspect the structure of the "language" column in
--GITHUB_REPOS.LANGUAGES for a few repositories (JSON object with
--language-byte pairs is expected).
SELECT
  "repo_name",
  "language"
FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES"
WHERE "language" IS NOT NULL
  AND "language" NOT IN ('[]', '')
LIMIT 20;
[Try to execute]
2025-05-07 01:33:13 - Thread-29 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 5) Inspect the structure of the "language" column in
--GITHUB_REPOS.LANGUAGES for a few repositories (JSON object with
--language-byte pairs is expected).
SELECT
  "repo_name",
  "language"
FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES"
WHERE "language" IS NOT NULL
  AND "language" NOT IN ('[]', '')
LIMIT 20;
Results:
repo_name,language
nerocool996/sortMulti,"[
  {
    ""bytes"": 5202,
    ""name"": ""C""
  }
]"
Teyras/flowly,"[
  {
    ""bytes"": 56747,
    ""name"": ""C""
  }
]"
lumag/nemu,"[
  {
    ""bytes"": 30170,
    ""name"": ""C""
  }
]"
Mehanik/i2c-servo-controller,"[
  {
    ""bytes"": 25411,
    ""name"": ""C""
  }
]"
moonmilk/snowblossoms,"[
  {
    ""bytes"": 3967,
    ""name"": ""C""
  }
]"
alattari/lab4,"[
  {
    ""bytes"": 6399,
    ""name"": ""C""
  }
]"
andys/mozzio,"[
  {
    ""byt

[Successfully executed]
2025-05-07 01:33:13 - Thread-29 (execute) - INFO - [Try to execute]
--Description: 6) Flatten the language JSON to get language-byte pairs  
--for a sample repo to verify the key/value layout.
SELECT
  l."repo_name",
  f.key::STRING  AS "language",
  f.value::NUMBER AS "bytes"
FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES" l,
     LATERAL FLATTEN (input => l."language") f
WHERE l."repo_name" ILIKE '%linux%'
LIMIT 20;
[Try to execute]
2025-05-07 01:33:14 - Thread-29 (execute) - INFO - [Error occurred]
{'status': 'error', 'error_msg': '##ERROR##100071 (22000): Failed to cast variant value {"bytes":19747,"name":"C"} to FIXED'}
[Error occurred]
2025-05-07 01:33:58 - Thread-29 (execute) - INFO - [Corrected SQL]
```sql
--Description: We need to flatten the JSON array stored in "language".
--Each array element is a JSON object like {"bytes": 1234, "name": "C"}.
--LATERAL FLATTEN will return each element in column f.value (type VARIANT).
--To obtain the two fields, we reference them as f.value:"name" and
--f.value:"bytes", casting to STRING and NUMBER respectively.  Using f.key
--is wrong here because the key would be the array index, not the object’s
--property.  This corrected query lists, for repos whose names contain
--“linux”, the primary language information without the casting error.
SELECT
    l."repo_name",
    f.value:"name"::STRING  AS "language",
    f.value:"bytes"::NUMBER AS "bytes"
FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES" l,
     LATERAL FLATTEN(input => l."language") f
WHERE l."repo_name" ILIKE '%linux%'
LIMIT 20;
```
[Corrected SQL]
2025-05-07 01:33:59 - Thread-29 (execute) - INFO - [Results for corrected sql]
repo_name,language,bytes
winlin/LINUX_WINDOWS_UUID,C,51081
csluder/Linux-drivers,C,26897
rendaduiyan/android-screen-montior-for-linux,C,59451
ArkanaExitium/hash-table-prograII-linux,C,29419
farwish/linux-io-program,C,8374
srdjanfurman/Linux_benchmarking,C,22413
yurchor/util-linux,C,5158107
yurchor/util-linux,M4,114629
yurchor/util-linux,Makefile,33498
yurchor/util-linux,Meson,110003
yurchor/util-linux,Perl,528
yurchor/util-linux,Python,8511

[Results for corrected sql]
2025-05-07 01:35:03 - Thread-29 (execute) - INFO - [Corrected other sqls]
```sql
--Description: 7) Derive the “primary” language (max bytes) for every repo,
--using correct JSON-field extraction instead of f.key / f.value casting.
WITH lang_pairs AS (
    SELECT
        l."repo_name",
        f.value:"name"::STRING  AS "language",
        f.value:"bytes"::NUMBER AS "bytes"
    FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES" l,
         LATERAL FLATTEN(input => l."language") f
)
SELECT
    lp."repo_name",
    lp."language" AS "primary_language"
FROM lang_pairs lp
QUALIFY ROW_NUMBER() OVER (PARTITION BY lp."repo_name"
                           ORDER BY lp."bytes" DESC) = 1
LIMIT 20;
```

```sql
--Description: 8) Count PullRequestEvents per repository on 18-Jan-2023.
WITH pr_20230118 AS (
    SELECT
        r.value::VARIANT:"name"::STRING AS "repo_name"
    FROM "GITHUB_REPOS_DATE"."YEAR"."_2023" e,
         LATERAL FLATTEN(input => e."repo") r
    WHERE e."type" = 'PullRequestEvent'
      AND e."created_at" BETWEEN 1674009600000000 AND 1674095999000000
)
SELECT
    "repo_name",
    COUNT(*) AS "pull_request_events"
FROM pr_20230118
GROUP BY "repo_name"
LIMIT 20;
```

```sql
--Description: 9) Join PullRequestEvent counts with each repo’s primary
--language, then aggregate by language; fixed JSON extraction inside
--lang_primary CTE.
WITH pr_20230118 AS (
    SELECT
        r.value::VARIANT:"name"::STRING AS "repo_name"
    FROM "GITHUB_REPOS_DATE"."YEAR"."_2023" e,
         LATERAL FLATTEN(input => e."repo") r
    WHERE e."type" = 'PullRequestEvent'
      AND e."created_at" BETWEEN 1674009600000000 AND 1674095999000000
),
lang_primary AS (
    SELECT
        lp."repo_name",
        lp."language"
    FROM (
        SELECT
            l."repo_name",
            f.value:"name"::STRING  AS "language",
            f.value:"bytes"::NUMBER AS "bytes",
            ROW_NUMBER() OVER (PARTITION BY l."repo_name"
                               ORDER BY f.value:"bytes"::NUMBER DESC) AS rn
        FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES" l,
             LATERAL FLATTEN(input => l."language") f
    ) lp
    WHERE lp.rn = 1
)
SELECT
    lp."language",
    COUNT(*) AS "pull_request_events"
FROM pr_20230118 p
JOIN lang_primary lp
  ON p."repo_name" = lp."repo_name"
GROUP BY lp."language"
LIMIT 20;
```

```sql
--Description: 10) Languages whose summed PullRequestEvents on 18-Jan-2023
--reach or exceed the threshold of 100; JSON extraction corrected exactly as
--in query 9.
WITH pr_20230118 AS (
    SELECT
        r.value::VARIANT:"name"::STRING AS "repo_name"
    FROM "GITHUB_REPOS_DATE"."YEAR"."_2023" e,
         LATERAL FLATTEN(input => e."repo") r
    WHERE e."type" = 'PullRequestEvent'
      AND e."created_at" BETWEEN 1674009600000000 AND 1674095999000000
),
lang_primary AS (
    SELECT
        lp."repo_name",
        lp."language"
    FROM (
        SELECT
            l."repo_name",
            f.value:"name"::STRING  AS "language",
            f.value:"bytes"::NUMBER AS "bytes",
            ROW_NUMBER() OVER (PARTITION BY l."repo_name"
                               ORDER BY f.value:"bytes"::NUMBER DESC) AS rn
        FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES" l,
             LATERAL FLATTEN(input => l."language") f
    ) lp
    WHERE lp.rn = 1
)
SELECT
    lp."language"   AS "primary_programming_language",
    COUNT(*)        AS "pull_request_events_on_2023_01_18"
FROM pr_20230118 p
JOIN lang_primary lp
  ON p."repo_name" = lp."repo_name"
GROUP BY lp."language"
HAVING COUNT(*) >= 100;
```
[Corrected other sqls]
2025-05-07 01:35:03 - Thread-29 (execute) - INFO - [Successfully corrected]
Successfully corrected. SQL:
--Description: We need to flatten the JSON array stored in "language".
--Each array element is a JSON object like {"bytes": 1234, "name": "C"}.
--LATERAL FLATTEN will return each element in column f.value (type VARIANT).
--To obtain the two fields, we reference them as f.value:"name" and
--f.value:"bytes", casting to STRING and NUMBER respectively.  Using f.key
--is wrong here because the key would be the array index, not the object’s
--property.  This corrected query lists, for repos whose names contain
--“linux”, the primary language information without the casting error.
SELECT
    l."repo_name",
    f.value:"name"::STRING  AS "language",
    f.value:"bytes"::NUMBER AS "bytes"
FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES" l,
     LATERAL FLATTEN(input => l."language") f
WHERE l."repo_name" ILIKE '%linux%'
LIMIT 20;
Results:
repo_name,language,bytes
winlin/LINUX_WINDOWS_UUID,C,51081
csluder/Linux-drivers,C,26897
rendaduiyan/android-screen-montior-for-linux,C,59451
ArkanaExitium/hash-table-prograII-linux,C,29419
farwish/linux-io-program,C,8374
srdjanfurman/Linux_benchmarking,C,22413
yurchor/util-linux,C,5158107
yurchor/util-linux,M4,114629
yurchor/util-linux,Makefile,33498
yurchor/util-linux,Meson,110003
yurchor/util-linux,Perl,528
yurchor/util-linux,Python,8511

[Successfully corrected]
2025-05-07 01:35:03 - Thread-29 (execute) - INFO - [Try to execute]
--Description: 7) Derive the “primary” language (max bytes) for every repo,
--using correct JSON-field extraction instead of f.key / f.value casting.
WITH lang_pairs AS (
    SELECT
        l."repo_name",
        f.value:"name"::STRING  AS "language",
        f.value:"bytes"::NUMBER AS "bytes"
    FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES" l,
         LATERAL FLATTEN(input => l."language") f
)
SELECT
    lp."repo_name",
    lp."language" AS "primary_language"
FROM lang_pairs lp
QUALIFY ROW_NUMBER() OVER (PARTITION BY lp."repo_name"
                           ORDER BY lp."bytes" DESC) = 1
LIMIT 20
[Try to execute]
2025-05-07 01:35:06 - Thread-29 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 7) Derive the “primary” language (max bytes) for every repo,
--using correct JSON-field extraction instead of f.key / f.value casting.
WITH lang_pairs AS (
    SELECT
        l."repo_name",
        f.value:"name"::STRING  AS "language",
        f.value:"bytes"::NUMBER AS "bytes"
    FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES" l,
         LATERAL FLATTEN(input => l."language") f
)
SELECT
    lp."repo_name",
    lp."language" AS "primary_language"
FROM lang_pairs lp
QUALIFY ROW_NUMBER() OVER (PARTITION BY lp."repo_name"
                           ORDER BY lp."bytes" DESC) = 1
LIMIT 20
Results:
repo_name,primary_language
diapluscn/taijiaward-theme,PHP
jmcjacob/EmotionalExpressionClassifier,Python
jairov4/lt-web-server,D
biclon/Twitter-Typeahead.js-.NET-Demo,JavaScript
typesettin/stylie,CSS
chfoo/pbrchase,HTML
brethash/magmi-datapump,PHP
stevecrozz/test-directory-client,JavaScript
lichenq/dubbo,Java
gene-hightower/hbxx,C++
baileyspace/Beatles-Live-Sandbox,PHP
Fab-IT-ApS/dokku-dokuwiki,Shell
claytonbrown/dokku,Shell
zzhopen/SwipeRefreshLayout,Java

[Successfully executed]
2025-05-07 01:35:06 - Thread-29 (execute) - INFO - [Try to execute]
--Description: 8) Count PullRequestEvents per repository on 18-Jan-2023.
WITH pr_20230118 AS (
    SELECT
        r.value::VARIANT:"name"::STRING AS "repo_name"
    FROM "GITHUB_REPOS_DATE"."YEAR"."_2023" e,
         LATERAL FLATTEN(input => e."repo") r
    WHERE e."type" = 'PullRequestEvent'
      AND e."created_at" BETWEEN 1674009600000000 AND 1674095999000000
)
SELECT
    "repo_name",
    COUNT(*) AS "pull_request_events"
FROM pr_20230118
GROUP BY "repo_name"
LIMIT 20
[Try to execute]
2025-05-07 01:36:47 - Thread-29 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 8) Count PullRequestEvents per repository on 18-Jan-2023.
WITH pr_20230118 AS (
    SELECT
        r.value::VARIANT:"name"::STRING AS "repo_name"
    FROM "GITHUB_REPOS_DATE"."YEAR"."_2023" e,
         LATERAL FLATTEN(input => e."repo") r
    WHERE e."type" = 'PullRequestEvent'
      AND e."created_at" BETWEEN 1674009600000000 AND 1674095999000000
)
SELECT
    "repo_name",
    COUNT(*) AS "pull_request_events"
FROM pr_20230118
GROUP BY "repo_name"
LIMIT 20
Results:
repo_name,pull_request_events
,13185

[Successfully executed]
2025-05-07 01:36:47 - Thread-29 (execute) - INFO - [Try to execute]
--Description: 9) Join PullRequestEvent counts with each repo’s primary
--language, then aggregate by language; fixed JSON extraction inside
--lang_primary CTE.
WITH pr_20230118 AS (
    SELECT
        r.value::VARIANT:"name"::STRING AS "repo_name"
    FROM "GITHUB_REPOS_DATE"."YEAR"."_2023" e,
         LATERAL FLATTEN(input => e."repo") r
    WHERE e."type" = 'PullRequestEvent'
      AND e."created_at" BETWEEN 1674009600000000 AND 1674095999000000
),
lang_primary AS (
    SELECT
        lp."repo_name",
        lp."language"
    FROM (
        SELECT
            l."repo_name",
            f.value:"name"::STRING  AS "language",
            f.value:"bytes"::NUMBER AS "bytes",
            ROW_NUMBER() OVER (PARTITION BY l."repo_name"
                               ORDER BY f.value:"bytes"::NUMBER DESC) AS rn
        FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES" l,
             LATERAL FLATTEN(input => l."language") f
    ) lp
    WHERE lp.rn = 1
)
SELECT
    lp."language",
    COUNT(*) AS "pull_request_events"
FROM pr_20230118 p
JOIN lang_primary lp
  ON p."repo_name" = lp."repo_name"
GROUP BY lp."language"
LIMIT 20
[Try to execute]
2025-05-07 01:37:53 - Thread-29 (execute) - INFO - [Error occurred]
No data found for the specified query.

[Error occurred]
2025-05-07 01:40:22 - Thread-29 (execute) - INFO - [Corrected SQL]
```sql
--Description: Identify languages whose repositories received ≥ 100
--PullRequestEvents on 18 Jan 2023.  
--Step 1 (pr_day): pull all PR events that day and extract the repo name
--directly from the JSON object (`"repo":"name"`).  
--Step 2 (lang_primary): determine each repo’s primary language by
--flattening its `language` JSON array and keeping the entry with the
--largest `"bytes"`.  
--Step 3: join the two CTEs and aggregate counts per language, keeping
--those with at least 100 events.
WITH pr_day AS (
    SELECT
        e."repo":"name"::STRING AS repo_name
    FROM "GITHUB_REPOS_DATE"."YEAR"."_2023" e
    WHERE e."type" = 'PullRequestEvent'
      AND e."created_at" BETWEEN 1674009600000000 AND 1674095999000000
      AND e."repo":"name" IS NOT NULL
),
lang_primary AS (
    SELECT
        t.repo_name,
        t.language
    FROM (
        SELECT
            l."repo_name"                         AS repo_name,
            f.value:"name"::STRING               AS language,
            f.value:"bytes"::NUMBER              AS bytes,
            ROW_NUMBER() OVER (
                PARTITION BY l."repo_name"
                ORDER BY f.value:"bytes"::NUMBER DESC
            ) AS rn
        FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES" l,
             LATERAL FLATTEN(input => l."language") f
    ) t
    WHERE t.rn = 1
)
SELECT
    lp.language  AS primary_programming_language,
    COUNT(*)     AS pull_request_events_on_2023_01_18
FROM pr_day p
JOIN lang_primary lp
  ON p.repo_name = lp.repo_name
GROUP BY lp.language
HAVING COUNT(*) >= 100;
```
[Corrected SQL]
2025-05-07 01:41:06 - Thread-29 (execute) - INFO - [Results for corrected sql]
No data found for the specified query.

[Results for corrected sql]
2025-05-07 01:43:35 - Thread-29 (execute) - INFO - [Corrected SQL]
```sql
--Description: Join 2023 PullRequestEvents with each repository’s primary
--language (largest “bytes” entry) and show the first 20 language counts.  
--Key points  
--  • The "repo" column is a JSON object, so we extract its "name" field
--    directly (e."repo":"name"). No FLATTEN is required here.  
--  • To obtain the primary language we FLATTEN the LANGUAGES JSON array,
--    then keep the row with the greatest "bytes" per repo via ROW_NUMBER().  
--  • Finally we aggregate counts of PR events per language.
WITH pr_2023 AS (                           -- all PullRequestEvents in 2023
    SELECT
        e."repo":"name"::STRING AS repo_name
    FROM "GITHUB_REPOS_DATE"."YEAR"."_2023" e
    WHERE e."type" = 'PullRequestEvent'
      AND e."repo":"name" IS NOT NULL
),
lang_primary AS (                           -- primary language per repo
    SELECT
        x.repo_name,
        x.language
    FROM (
        SELECT
            l."repo_name"                     AS repo_name,
            f.value:"name"::STRING            AS language,
            f.value:"bytes"::NUMBER           AS bytes,
            ROW_NUMBER() OVER (
                PARTITION BY l."repo_name"
                ORDER BY f.value:"bytes"::NUMBER DESC
            ) AS rn
        FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES" l,
             LATERAL FLATTEN(input => l."language") f
    ) x
    WHERE x.rn = 1
)
SELECT
    lp.language,
    COUNT(*) AS pull_request_events_2023
FROM pr_2023 p
JOIN lang_primary lp
  ON p.repo_name = lp.repo_name
GROUP BY lp.language
LIMIT 20;
```
[Corrected SQL]
2025-05-07 01:43:35 - Thread-29 (execute) - INFO - [Results for corrected sql]
LANGUAGE,PULL_REQUEST_EVENTS_2023
VimL,1
LookML,1
Perl,87
Erlang,46
Fortran,8
Mustache,5
Handlebars,2
Modelica,1
Vim script,3
Bicep,6
Elm,13
Bluespec,1
Cucumber,1
PLpgSQL,10
AspectJ,1
F*,2
C#,1210
Dart,439
Elixir,73
Sass,12

[Results for corrected sql]
2025-05-07 01:44:03 - Thread-29 (execute) - INFO - [Corrected other sqls]
```sql
--Description: Languages with ≥ 100 PullRequestEvents on 18-Jan-2023.
--Fixes applied:
--  • Extract repository name directly from the JSON object (e."repo":"name"); no FLATTEN.
--  • Determine each repository’s primary language by flattening its
--    "language" array and selecting the element with the greatest "bytes".
WITH pr_20230118 AS (                       -- PR events on 2023-01-18
    SELECT
        e."repo":"name"::STRING AS repo_name
    FROM "GITHUB_REPOS_DATE"."YEAR"."_2023" e
    WHERE e."type" = 'PullRequestEvent'
      AND e."created_at" BETWEEN 1674009600000000   -- 2023-01-18 00:00 UTC
                          AND 1674095999000000      -- 2023-01-18 23:59 UTC
      AND e."repo":"name" IS NOT NULL
),
lang_primary AS (                            -- primary language per repo
    SELECT
        s.repo_name,
        s.language
    FROM (
        SELECT
            l."repo_name"                   AS repo_name,
            f.value:"name"::STRING          AS language,
            f.value:"bytes"::NUMBER         AS bytes,
            ROW_NUMBER() OVER (
                PARTITION BY l."repo_name"
                ORDER BY f.value:"bytes"::NUMBER DESC
            ) AS rn
        FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES" l,
             LATERAL FLATTEN(input => l."language") f
    ) s
    WHERE s.rn = 1
)
SELECT
    lp.language  AS primary_programming_language,
    COUNT(*)     AS pull_request_events_on_2023_01_18
FROM pr_20230118 p
JOIN lang_primary lp
  ON p.repo_name = lp.repo_name
GROUP BY lp.language
HAVING COUNT(*) >= 100;
```
[Corrected other sqls]
2025-05-07 01:44:03 - Thread-29 (execute) - INFO - [Successfully corrected]
Successfully corrected. SQL:
--Description: Join 2023 PullRequestEvents with each repository’s primary
--language (largest “bytes” entry) and show the first 20 language counts.  
--Key points  
--  • The "repo" column is a JSON object, so we extract its "name" field
--    directly (e."repo":"name"). No FLATTEN is required here.  
--  • To obtain the primary language we FLATTEN the LANGUAGES JSON array,
--    then keep the row with the greatest "bytes" per repo via ROW_NUMBER().  
--  • Finally we aggregate counts of PR events per language.
WITH pr_2023 AS (                           -- all PullRequestEvents in 2023
    SELECT
        e."repo":"name"::STRING AS repo_name
    FROM "GITHUB_REPOS_DATE"."YEAR"."_2023" e
    WHERE e."type" = 'PullRequestEvent'
      AND e."repo":"name" IS NOT NULL
),
lang_primary AS (                           -- primary language per repo
    SELECT
        x.repo_name,
        x.language
    FROM (
        SELECT
            l."repo_name"                     AS repo_name,
            f.value:"name"::STRING            AS language,
            f.value:"bytes"::NUMBER           AS bytes,
            ROW_NUMBER() OVER (
                PARTITION BY l."repo_name"
                ORDER BY f.value:"bytes"::NUMBER DESC
            ) AS rn
        FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES" l,
             LATERAL FLATTEN(input => l."language") f
    ) x
    WHERE x.rn = 1
)
SELECT
    lp.language,
    COUNT(*) AS pull_request_events_2023
FROM pr_2023 p
JOIN lang_primary lp
  ON p.repo_name = lp.repo_name
GROUP BY lp.language
LIMIT 20;
Results:
LANGUAGE,PULL_REQUEST_EVENTS_2023
VimL,1
LookML,1
Perl,87
Erlang,46
Fortran,8
Mustache,5
Handlebars,2
Modelica,1
Vim script,3
Bicep,6
Elm,13
Bluespec,1
Cucumber,1
PLpgSQL,10
AspectJ,1
F*,2
C#,1210
Dart,439
Elixir,73
Sass,12

[Successfully corrected]
2025-05-07 01:44:03 - Thread-29 (execute) - INFO - [Try to execute]
--Description: Languages with ≥ 100 PullRequestEvents on 18-Jan-2023.
--Fixes applied:
--  • Extract repository name directly from the JSON object (e."repo":"name"); no FLATTEN.
--  • Determine each repository’s primary language by flattening its
--    "language" array and selecting the element with the greatest "bytes".
WITH pr_20230118 AS (                       -- PR events on 2023-01-18
    SELECT
        e."repo":"name"::STRING AS repo_name
    FROM "GITHUB_REPOS_DATE"."YEAR"."_2023" e
    WHERE e."type" = 'PullRequestEvent'
      AND e."created_at" BETWEEN 1674009600000000   -- 2023-01-18 00:00 UTC
                          AND 1674095999000000      -- 2023-01-18 23:59 UTC
      AND e."repo":"name" IS NOT NULL
),
lang_primary AS (                            -- primary language per repo
    SELECT
        s.repo_name,
        s.language
    FROM (
        SELECT
            l."repo_name"                   AS repo_name,
            f.value:"name"::STRING          AS language,
            f.value:"bytes"::NUMBER         AS bytes,
            ROW_NUMBER() OVER (
                PARTITION BY l."repo_name"
                ORDER BY f.value:"bytes"::NUMBER DESC
            ) AS rn
        FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES" l,
             LATERAL FLATTEN(input => l."language") f
    ) s
    WHERE s.rn = 1
)
SELECT
    lp.language  AS primary_programming_language,
    COUNT(*)     AS pull_request_events_on_2023_01_18
FROM pr_20230118 p
JOIN lang_primary lp
  ON p.repo_name = lp.repo_name
GROUP BY lp.language
HAVING COUNT(*) >= 100
[Try to execute]
2025-05-07 01:44:04 - Thread-29 (execute) - INFO - [Error occurred]
No data found for the specified query.

[Error occurred]
2025-05-07 01:45:54 - Thread-29 (execute) - INFO - [Corrected SQL]
```sql
--Description:  Determine which primary languages (largest-byte share per
--repository) accumulated at least 100 PullRequestEvents on 18 Jan 2023.
-- 1) pr_day      – collect every PullRequestEvent on that day and pull the
--                  repository name directly from the JSON "repo" object.
-- 2) lang_primary– flatten each repo’s LANGUAGES array, rank by "bytes",
--                  and keep the row with rn = 1 → primary language.
-- 3) Join and aggregate; keep languages with ≥ 100 events.
WITH pr_day AS (         -- PullRequestEvents on 2023-01-18 (UTC)
    SELECT
        e."repo":"name"::STRING AS repo_name
    FROM "GITHUB_REPOS_DATE"."YEAR"."_2023" e
    WHERE e."type" = 'PullRequestEvent'
      AND e."created_at" BETWEEN 1674009600000000   -- 2023-01-18 00:00:00
                          AND 1674095999000000      -- 2023-01-18 23:59:59
      AND e."repo":"name" IS NOT NULL
),
lang_primary AS (        -- highest-byte language per repo
    SELECT
        l."repo_name",
        f.value:"name"::STRING  AS language,
        ROW_NUMBER() OVER (PARTITION BY l."repo_name"
                           ORDER BY f.value:"bytes"::NUMBER DESC) AS rn
    FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES" l,
         LATERAL FLATTEN(input => l."language") f
    WHERE l."language" IS NOT NULL
)
SELECT
    lp.language                          AS primary_programming_language,
    COUNT(*)                             AS pull_request_events_on_2023_01_18
FROM pr_day p
JOIN lang_primary lp
  ON p.repo_name = lp."repo_name"
WHERE lp.rn = 1                          -- retain only primary language rows
GROUP BY lp.language
HAVING COUNT(*) >= 100
ORDER BY pull_request_events_on_2023_01_18 DESC;
```
[Corrected SQL]
2025-05-07 01:48:47 - Thread-29 (execute) - INFO - [Results for corrected sql]
No data found for the specified query.

[Results for corrected sql]
2025-05-07 01:51:00 - Thread-29 (execute) - INFO - [Corrected SQL]
```sql
--Description: Determine which primary programming languages (largest-byte
--language per repository) accumulated at least 100 PullRequestEvents on
--18 Jan 2023.  
--Step 1  (pr_day):   collect every PullRequestEvent on 2023-01-18 and pull
--                    the repository name directly from the JSON "repo"
--                    object (no FLATTEN required).  
--Step 2  (lang_primary): flatten each repo’s LANGUAGES array, rank by the
--                    "bytes" field, and keep the element with the greatest
--                    byte count (rn = 1) → primary language.  
--Step 3:  join the two CTEs, aggregate counts per language, and filter to
--         languages with ≥ 100 events.
WITH pr_day AS (                          -- PullRequestEvents on 18-Jan-2023
    SELECT
        e."repo":"name"::STRING AS repo_name
    FROM "GITHUB_REPOS_DATE"."YEAR"."_2023" e
    WHERE e."type" = 'PullRequestEvent'
      AND e."created_at" BETWEEN 1674009600000000   -- 2023-01-18 00:00:00 UTC
                          AND 1674095999000000      -- 2023-01-18 23:59:59 UTC
      AND e."repo":"name" IS NOT NULL
),
lang_primary AS (                         -- primary language per repository
    SELECT
        l."repo_name",
        f.value:"name"::STRING  AS language,
        ROW_NUMBER() OVER (
            PARTITION BY l."repo_name"
            ORDER BY f.value:"bytes"::NUMBER DESC
        ) AS rn
    FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES" l,
         LATERAL FLATTEN(input => l."language") f
    WHERE l."language" IS NOT NULL
)
SELECT
    lp.language  AS primary_programming_language,
    COUNT(*)     AS pull_request_events_on_2023_01_18
FROM pr_day p
JOIN lang_primary lp
  ON p.repo_name = lp."repo_name"
WHERE lp.rn = 1                            -- keep only the primary language
GROUP BY lp.language
HAVING COUNT(*) >= 100
ORDER BY pull_request_events_on_2023_01_18 DESC;
```
[Corrected SQL]
2025-05-07 01:51:00 - Thread-29 (execute) - INFO - [Results for corrected sql]
No data found for the specified query.

[Results for corrected sql]
2025-05-07 01:55:17 - Thread-29 (execute) - INFO - [Corrected SQL]
```sql
--Description: Retrieve the number of PullRequestEvents each repository’s
--primary language received on 18 Jan 2023.  
--Procedure  
-- 1. pr_events – select all PullRequestEvents that occurred on 2023-01-18 and
--    pull the repository name directly from the JSON “repo” object
--    (no FLATTEN needed).  
-- 2. lang_primary – for every repository, FLATTEN its “language” JSON array
--    from the LANGUAGES table, rank the elements by “bytes”, and keep the one
--    with ROW_NUMBER() = 1 (largest share) to identify the primary language.  
-- 3. LEFT JOIN the two sets so that repos with no language data are still
--    included (labeled “Unknown”).  
-- 4. Aggregate PullRequestEvent counts per language and display the top 20 so
--    we can see the actual distribution; no minimum-count filter is applied.
WITH pr_events AS (   -- all PullRequestEvents on 2023-01-18 (UTC)
    SELECT
        e."repo":"name"::STRING AS repo_name
    FROM "GITHUB_REPOS_DATE"."YEAR"."_2023" e
    WHERE e."type" = 'PullRequestEvent'
      AND e."created_at" BETWEEN 1674009600000000   -- 2023-01-18 00:00:00
                          AND 1674095999000000      -- 2023-01-18 23:59:59
      AND e."repo":"name" IS NOT NULL
),
lang_primary AS (     -- determine primary language for each repository
    SELECT
        l."repo_name",
        f.value:"name"::STRING  AS language,
        ROW_NUMBER() OVER (
            PARTITION BY l."repo_name"
            ORDER BY f.value:"bytes"::NUMBER DESC
        ) AS rn
    FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES" l,
         LATERAL FLATTEN(input => l."language") f
)
SELECT
    COALESCE(lp.language, 'Unknown') AS primary_programming_language,
    COUNT(*)                         AS pull_request_events_on_2023_01_18
FROM pr_events pe
LEFT JOIN lang_primary lp
       ON pe.repo_name = lp."repo_name" AND lp.rn = 1
GROUP BY COALESCE(lp.language, 'Unknown')
ORDER BY pull_request_events_on_2023_01_18 DESC
LIMIT 20;
```
[Corrected SQL]
2025-05-07 01:55:20 - Thread-29 (execute) - INFO - [Results for corrected sql]
PRIMARY_PROGRAMMING_LANGUAGE,PULL_REQUEST_EVENTS_ON_2023_01_18
Unknown,4236
Python,28
Ruby,21
Go,17
Java,15
JavaScript,14
TypeScript,12
C++,7
PHP,6
Scala,5
Kotlin,4
Lean,3
C#,3
C,2
Shell,2
Rust,2
Jupyter Notebook,2
HTML,2
CodeQL,2
Jinja,1

[Results for corrected sql]
2025-05-07 01:55:20 - Thread-29 (execute) - INFO - [Successfully corrected]
Successfully corrected. SQL:
--Description: Retrieve the number of PullRequestEvents each repository’s
--primary language received on 18 Jan 2023.  
--Procedure  
-- 1. pr_events – select all PullRequestEvents that occurred on 2023-01-18 and
--    pull the repository name directly from the JSON “repo” object
--    (no FLATTEN needed).  
-- 2. lang_primary – for every repository, FLATTEN its “language” JSON array
--    from the LANGUAGES table, rank the elements by “bytes”, and keep the one
--    with ROW_NUMBER() = 1 (largest share) to identify the primary language.  
-- 3. LEFT JOIN the two sets so that repos with no language data are still
--    included (labeled “Unknown”).  
-- 4. Aggregate PullRequestEvent counts per language and display the top 20 so
--    we can see the actual distribution; no minimum-count filter is applied.
WITH pr_events AS (   -- all PullRequestEvents on 2023-01-18 (UTC)
    SELECT
        e."repo":"name"::STRING AS repo_name
    FROM "GITHUB_REPOS_DATE"."YEAR"."_2023" e
    WHERE e."type" = 'PullRequestEvent'
      AND e."created_at" BETWEEN 1674009600000000   -- 2023-01-18 00:00:00
                          AND 1674095999000000      -- 2023-01-18 23:59:59
      AND e."repo":"name" IS NOT NULL
),
lang_primary AS (     -- determine primary language for each repository
    SELECT
        l."repo_name",
        f.value:"name"::STRING  AS language,
        ROW_NUMBER() OVER (
            PARTITION BY l."repo_name"
            ORDER BY f.value:"bytes"::NUMBER DESC
        ) AS rn
    FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES" l,
         LATERAL FLATTEN(input => l."language") f
)
SELECT
    COALESCE(lp.language, 'Unknown') AS primary_programming_language,
    COUNT(*)                         AS pull_request_events_on_2023_01_18
FROM pr_events pe
LEFT JOIN lang_primary lp
       ON pe.repo_name = lp."repo_name" AND lp.rn = 1
GROUP BY COALESCE(lp.language, 'Unknown')
ORDER BY pull_request_events_on_2023_01_18 DESC
LIMIT 20;
Results:
PRIMARY_PROGRAMMING_LANGUAGE,PULL_REQUEST_EVENTS_ON_2023_01_18
Unknown,4236
Python,28
Ruby,21
Go,17
Java,15
JavaScript,14
TypeScript,12
C++,7
PHP,6
Scala,5
Kotlin,4
Lean,3
C#,3
C,2
Shell,2
Rust,2
Jupyter Notebook,2
HTML,2
CodeQL,2
Jinja,1

[Successfully corrected]
2025-05-07 01:55:20 - Thread-29 (execute) - INFO - itercount: 0
2025-05-07 01:55:20 - Thread-29 (execute) - INFO - [Self-refine]
Table full name: GITHUB_REPOS_DATE.GITHUB_REPOS.SAMPLE_FILES
Column name: symlink_target Type: TEXT
Column name: id Type: TEXT
Column name: mode Type: NUMBER
Column name: path Type: TEXT
Column name: ref Type: TEXT
Column name: repo_name Type: TEXT
Sample rows:
[{'repo_name': 'dorimanx/DORIMANX_LG_STOCK_LP_KERNEL', 'ref': 'refs/heads/master', 'path': 'drivers/isdn/hisax/elsa.c', 'mode': 33188, 'id': '64ba26a4afe649818a23565fc4ae6631eaf9d9b1', 'symlink_target': None}, {'repo_name': 'dorimanx/DORIMANX_LG_STOCK_LP_KERNEL', 'ref': 'refs/heads/master', 'path': 'arch/arm/mach-pxa/include/mach/smemc.h', 'mode': 33188, 'id': 'b802f285fe00e6dd3b39af77e3b351d3a4343316', 'symlink_target': None}, {'repo_name': 'dorimanx/DORIMANX_LG_STOCK_LP_KERNEL', 'ref': 'refs/heads/master', 'path': 'drivers/i2c/busses/i2c-eg20t.c', 'mode': 33188, 'id': 'c811289b61e21628f28d79b71f27651c39e3e024', 'symlink_target': None}, {'repo_name': 'dorimanx/DORIMANX_LG_STOCK_LP_KERNEL', 'ref': 'refs/heads/master', 'path': 'Documentation/00-INDEX', 'mode': 33188, 'id': '755d8170529c024895c79f0db895f90b3fdd887b', 'symlink_target': None}, {'repo_name': 'dorimanx/DORIMANX_LG_STOCK_LP_KERNEL', 'ref': 'refs/heads/master', 'path': 'drivers/acpi/apei/Kconfig', 'mode': 33188, 'id': 'f0c1ce95a0eccf1bc3987d688ad9bb1cdfd66532', 'symlink_target': None}]

--------------------------------------------------
Table full name: GITHUB_REPOS_DATE.GITHUB_REPOS.LANGUAGES
Column name: repo_name Type: TEXT
Column name: language Type: VARIANT
Sample rows:
[{'repo_name': 'wzrdtales/docker-pixz', 'language': '[]'}, {'repo_name': 'MarQuisKnox/jNotice', 'language': '[]'}, {'repo_name': 'esxgx/highway', 'language': '[]'}, {'repo_name': 'tuffrabit/LivestreamBuddy', 'language': '[]'}, {'repo_name': 'FABMoney/fabmoney.org-website', 'language': '[]'}]

--------------------------------------------------
Table full name: GITHUB_REPOS_DATE.GITHUB_REPOS.LICENSES
Column name: repo_name Type: TEXT
Column name: license Type: TEXT
Sample rows:
[{'repo_name': 'hesenp/dag-runner', 'license': 'epl-1.0'}, {'repo_name': 'stania1/4clojure-answers', 'license': 'epl-1.0'}, {'repo_name': 'JacobGood1/lispcast-intro', 'license': 'epl-1.0'}, {'repo_name': 'kolov/friend-oauth2-google-demo', 'license': 'epl-1.0'}, {'repo_name': 'jeffrey0617/test', 'license': 'epl-1.0'}]

--------------------------------------------------
Table full name: GITHUB_REPOS_DATE.GITHUB_REPOS.SAMPLE_CONTENTS
Column name: size Type: NUMBER
Column name: binary Type: BOOLEAN
Column name: sample_symlink_target Type: TEXT
Column name: copies Type: NUMBER
Column name: sample_mode Type: NUMBER
Column name: sample_path Type: TEXT
Column name: content Type: TEXT
Column name: sample_ref Type: TEXT
Column name: sample_repo_name Type: TEXT
Column name: id Type: TEXT
Sample rows:
[{'id': '2808cc7dad1e963456a33387816a60edcd14e3c2', 'size': 2743, 'content': '// Copyright (c) 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n#include "net/tools/quic/synchronous_host_resolver.h"\n\n#include "base/at_exit.h"\n#include "base/location.h"\n#include "base/macros.h"\n#include "base/memory/weak_ptr.h"\n#include "base/single_thread_task_runner.h"\n#include "base/thread_task_runner_handle.h"\n#include "base/threading/simple_thread.h"\n#include "net/base/host_port_pair.h"\n#include "net/base/net_errors.h"\n#include "net/dns/host_resolver_impl.h"\n#include "net/dns/single_request_host_resolver.h"\n\nnamespace net {\n\n\nnamespace {\n\nclass ResolverThread : public base::SimpleThread {\n public:\n  ResolverThread();\n\n  ~ResolverThread() override;\n\n  // Called on the main thread.\n  int Resolve(const std::string& host, AddressList* addresses);\n\n  // SimpleThread methods:\n  void Run() override;\n\n private:\n  void OnResolutionComplete(int rv);\n\n  AddressList* addresses_;\n  std::string host_;\n  int rv_;\n\n  base::WeakPtrFactory<ResolverThread> weak_factory_;\n\n  DISALLOW_COPY_AND_ASSIGN(ResolverThread);\n};\n\nResolverThread::ResolverThread()\n    : SimpleThread("resolver_thread"),\n      rv_(ERR_UNEXPECTED),\n      weak_factory_(this) {}\n\nResolverThread::~ResolverThread() {}\n\nvoid ResolverThread::Run() {\n  base::MessageLoopForIO loop;\n\n  net::NetLog net_log;\n  net::HostResolver::Options options;\n  options.max_concurrent_resolves = 6;\n  options.max_retry_attempts = 3u;\n  scoped_ptr<net::HostResolverImpl> resolver_impl(\n      new net::HostResolverImpl(options, &net_log));\n  SingleRequestHostResolver resolver(resolver_impl.get());\n\n  HostPortPair host_port_pair(host_, 80);\n  rv_ = resolver.Resolve(HostResolver::RequestInfo(host_port_pair),\n                         DEFAULT_PRIORITY, addresses_,\n                         base::Bind(&ResolverThread::OnResolutionComplete,\n                                    weak_factory_.GetWeakPtr()),\n                         BoundNetLog());\n\n  if (rv_ != ERR_IO_PENDING)\n    return;\n\n  // Run the mesage loop until OnResolutionComplete quits it.\n  base::MessageLoop::current()->Run();\n}\n\nint ResolverThread::Resolve(const std::string& host, AddressList* addresses) {\n  host_ = host;\n  addresses_ = addresses;\n  this->Start();\n  this->Join();\n  return rv_;\n}\n\nvoid ResolverThread::OnResolutionComplete(int rv) {\n  rv_ = rv;\n  base::ThreadTaskRunnerHandle::Get()->PostTask(\n      FROM_HERE, base::MessageLoop::QuitWhenIdleClosure());\n}\n\n}  // namespace\n\n// static\nint SynchronousHostResolver::Resolve(const std::string& host,\n                                     AddressList* addresses) {\n  ResolverThread resolver;\n  return resolver.Resolve(host, addresses);\n}\n\n}  // namespace net\n', 'binary': False, 'copies': 8, 'sample_repo_name': 'nwjs/chromium.src', 'sample_ref': 'refs/heads/nw15', 'sample_path': 'net/tools/quic/synchronous_host_resolver.cc', 'sample_mode': 33188, 'sample_symlink_target': None}, {'id': 'b5d98c4d7b90b473fdf470a29b2562c7c6b70c67', 'size': 636, 'content': '{\n  "organization" : "net.databinder",\n  "name" : "unfiltered-json",\n  "version" : "0.6.5",\n  "description" : "Json requset matchers and response functions",\n  "site" : "http://unfiltered.databinder.net/",\n  "tags" : [ ],\n  "docs" : "",\n  "resolvers" : [ "https://oss.sonatype.org/content/repositories/releases" ],\n  "dependencies" : [ {\n    "organization" : "net.liftweb",\n    "name" : "lift-json_2.9.1",\n    "version" : "2.4"\n  } ],\n  "scalas" : [ "2.8.1", "2.8.2", "2.9.0-1", "2.9.1", "2.9.1-1", "2.9.2", "2.10.0" ],\n  "licenses" : [ {\n    "name" : "MIT",\n    "url" : "http://www.opensource.org/licenses/MIT"\n  } ],\n  "sbt" : false\n}', 'binary': False, 'copies': 8, 'sample_repo_name': 'unfiltered/unfiltered', 'sample_ref': 'refs/heads/0.9.0', 'sample_path': 'json4s/src/main/ls/0.6.5.json', 'sample_mode': 33188, 'sample_symlink_target': None}, {'id': 'feb55b7e02a74beed6b06ed165c8ba65cb76bd75', 'size': 2954, 'content': '<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc="http://purl.org/dc/elements/1.1/"\n   xmlns:cc="http://creativecommons.org/ns#"\n   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"\n   xmlns:svg="http://www.w3.org/2000/svg"\n   xmlns="http://www.w3.org/2000/svg"\n   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"\n   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"\n   width="130"\n   height="130"\n   id="svg4682"\n   version="1.1"\n   inkscape:version="0.48.4 r9939"\n   sodipodi:docname="ic_menu_folder_w.svg"\n   inkscape:export-filename="/home/corbax/Dev/android/Icons/Test 1/ic_play_normal.png"\n   inkscape:export-xdpi="90"\n   inkscape:export-ydpi="90">\n  <defs\n     id="defs4684" />\n  <sodipodi:namedview\n     id="base"\n     pagecolor="#ffffff"\n     bordercolor="#666666"\n     borderopacity="1.0"\n     inkscape:pageopacity="0.0"\n     inkscape:pageshadow="2"\n     inkscape:zoom="3.959798"\n     inkscape:cx="-23.979132"\n     inkscape:cy="74.339893"\n     inkscape:document-units="px"\n     inkscape:current-layer="layer1"\n     showgrid="false"\n     inkscape:window-width="1680"\n     inkscape:window-height="1026"\n     inkscape:window-x="1920"\n     inkscape:window-y="54"\n     inkscape:window-maximized="1" />\n  <metadata\n     id="metadata4687">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about="">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />\n        <dc:title></dc:title>\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label="Layer 1"\n     inkscape:groupmode="layer"\n     id="layer1"\n     transform="translate(0,-922.36218)">\n    <path\n       style="fill:#fafafa;fill-opacity:1;stroke:none"\n       d="m 19.492496,942.36737 a 3.3263094,3.252294 0 0 0 -0.169259,0.0414 c -3.826704,0.40353 -6.652854,3.43651 -6.644107,7.19958 l 0,66.74095 a 3.3263094,3.252294 0 0 0 6.559548,0.7862 l 12.314601,-48.16268 c 0.172451,-0.68137 1.147456,-1.50277 1.862116,-1.57235 0.01389,4.2e-4 0.02916,-6.7e-4 0.04165,0 a 3.3263094,3.252294 0 0 0 0.169259,0.0414 l 65.001203,0 a 3.3263094,3.252294 0 0 0 3.343363,-3.26878 l 0,-1.32406 a 3.3263094,3.252294 0 0 0 0,-0.0414 c -0.0264,-4.028 -3.273943,-7.18577 -7.405973,-7.19957 l -37.536551,0 -11.38361,-11.13039 a 3.3263094,3.252294 0 0 0 -0.04304,0 c -1.400718,-1.36081 -3.23076,-2.11222 -5.205205,-2.11022 l -20.143515,0 c -0.05554,-0.003 -0.115245,0.001 -0.169397,0 -0.192446,-0.006 -0.400165,-0.008 -0.592472,0 z m 19.170315,29.58449 a 3.8114006,3.726591 0 0 0 -3.300879,2.81363 l -13.542033,52.96231 a 3.8114006,3.726591 0 0 0 3.681883,4.6344 l 74.480629,0 a 3.8114006,3.726591 0 0 0 3.681879,-2.8137 l 13.54188,-52.96242 a 3.8114006,3.726591 0 0 0 -3.68174,-4.63422 l -74.480753,0 a 3.8114006,3.726591 0 0 0 -0.380866,0 z"\n       id="path3933"\n       inkscape:connector-curvature="0" />\n  </g>\n</svg>\n', 'binary': False, 'copies': 8, 'sample_repo_name': 'JosefRypacek/PrimeTV', 'sample_ref': 'refs/heads/1.0.x', 'sample_path': 'assets/images/svg/ic_menu_folder_w.svg', 'sample_mode': 33188, 'sample_symlink_target': None}, {'id': '814343a33660c53403791055ac5f502cee0644bd', 'size': 4802, 'content': '/*!\n@file\nDefines `boost::hana::monadic_fold_right`.\n\n@copyright Louis Dionne 2013-2016\nDistributed under the Boost Software License, Version 1.0.\n(See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)\n */\n\n#ifndef BOOST_HANA_MONADIC_FOLD_RIGHT_HPP\n#define BOOST_HANA_MONADIC_FOLD_RIGHT_HPP\n\n#include <boost/hana/fwd/monadic_fold_right.hpp>\n\n#include <boost/hana/chain.hpp>\n#include <boost/hana/concept/foldable.hpp>\n#include <boost/hana/concept/monad.hpp>\n#include <boost/hana/config.hpp>\n#include <boost/hana/core/dispatch.hpp>\n#include <boost/hana/fold_left.hpp>\n#include <boost/hana/functional/curry.hpp>\n#include <boost/hana/functional/partial.hpp>\n#include <boost/hana/lift.hpp>\n\n#include <type_traits>\n\n\nBOOST_HANA_NAMESPACE_BEGIN\n    template <typename M>\n    struct monadic_fold_right_t {\n    #ifndef BOOST_HANA_CONFIG_DISABLE_CONCEPT_CHECKS\n        static_assert(hana::Monad<M>::value,\n        "hana::monadic_fold_right<M> requires \'M\' to be a Monad");\n    #endif\n\n        template <typename Xs, typename State, typename F>\n        constexpr decltype(auto) operator()(Xs&& xs, State&& state, F&& f) const {\n            using S = typename hana::tag_of<Xs>::type;\n            using MonadicFoldRight = BOOST_HANA_DISPATCH_IF(monadic_fold_right_impl<S>,\n                hana::Foldable<S>::value\n            );\n\n        #ifndef BOOST_HANA_CONFIG_DISABLE_CONCEPT_CHECKS\n            static_assert(hana::Foldable<S>::value,\n            "hana::monadic_fold_right<M>(xs, state, f) requires \'xs\' to be Foldable");\n        #endif\n\n            return MonadicFoldRight::template apply<M>(static_cast<Xs&&>(xs),\n                                                       static_cast<State&&>(state),\n                                                       static_cast<F&&>(f));\n        }\n\n        template <typename Xs, typename F>\n        constexpr decltype(auto) operator()(Xs&& xs, F&& f) const {\n            using S = typename hana::tag_of<Xs>::type;\n            using MonadicFoldRight = BOOST_HANA_DISPATCH_IF(monadic_fold_right_impl<S>,\n                hana::Foldable<S>::value\n            );\n\n        #ifndef BOOST_HANA_CONFIG_DISABLE_CONCEPT_CHECKS\n            static_assert(hana::Foldable<S>::value,\n            "hana::monadic_fold_right<M>(xs, f) requires \'xs\' to be Foldable");\n        #endif\n            return MonadicFoldRight::template apply<M>(static_cast<Xs&&>(xs),\n                                                       static_cast<F&&>(f));\n        }\n    };\n\n    namespace detail {\n        struct foldrM_helper {\n            template <typename F, typename K, typename X, typename Z>\n            constexpr decltype(auto) operator()(F&& f, K&& k, X&& x, Z&& z) const {\n                return hana::chain(\n                    static_cast<F&&>(f)(\n                        static_cast<X&&>(x),\n                        static_cast<Z&&>(z)\n                    ),\n                    static_cast<K&&>(k)\n                );\n            }\n        };\n\n        template <typename End, typename M, typename F>\n        struct monadic_foldr1_helper {\n            F f;\n            template <typename X, typename Y>\n            constexpr decltype(auto) operator()(X&& x, Y&& y) const\n            { return f(static_cast<X&&>(x), static_cast<Y&&>(y)); }\n            template <typename X>\n            constexpr decltype(auto) operator()(X&& x, End) const\n            { return hana::lift<M>(static_cast<X&&>(x)); }\n        };\n    }\n\n    template <typename T, bool condition>\n    struct monadic_fold_right_impl<T, when<condition>> : default_ {\n        // with state\n        template <typename M, typename Xs, typename S, typename F>\n        static constexpr decltype(auto) apply(Xs&& xs, S&& s, F&& f) {\n            return hana::fold_left(\n                static_cast<Xs&&>(xs),\n                hana::lift<M>,\n                hana::curry<3>(hana::partial(\n                    detail::foldrM_helper{}, static_cast<F&&>(f)\n                ))\n            )(static_cast<S&&>(s));\n        }\n\n        // without state\n        template <typename M, typename Xs, typename F>\n        static constexpr decltype(auto) apply(Xs&& xs, F&& f) {\n            struct end { };\n            using G = detail::monadic_foldr1_helper<end, M, typename std::decay<F>::type>;\n            decltype(auto) result = hana::monadic_fold_right<M>(\n                static_cast<Xs&&>(xs),\n                end{},\n                G{static_cast<F&&>(f)}\n            );\n\n            static_assert(!std::is_same<\n                std::remove_reference_t<decltype(result)>,\n                decltype(hana::lift<M>(end{}))\n            >{},\n            "hana::monadic_fold_right<M>(xs, f) requires \'xs\' to be non-empty");\n            return result;\n        }\n    };\nBOOST_HANA_NAMESPACE_END\n\n#endif // !BOOST_HANA_MONADIC_FOLD_RIGHT_HPP\n', 'binary': False, 'copies': 8, 'sample_repo_name': 'arangodb/arangodb', 'sample_ref': 'refs/heads/devel', 'sample_path': '3rdParty/boost/1.61.0b1/boost/hana/monadic_fold_right.hpp', 'sample_mode': 33188, 'sample_symlink_target': None}, {'id': 'bb50f15deb162b39542ee69056036a8d659d5fc6', 'size': 588, 'content': '#ifndef BOOST_METAPARSE_V1_ITERATE_C_HPP\n#define BOOST_METAPARSE_V1_ITERATE_C_HPP\n\n// Copyright Abel Sinkovics (abel@sinkovics.hu)  2011.\n// Distributed under the Boost Software License, Version 1.0.\n//    (See accompanying file LICENSE_1_0.txt or copy at\n//          http://www.boost.org/LICENSE_1_0.txt)\n\n#include <boost/metaparse/v1/impl/iterate_impl.hpp>\n\n#include <boost/mpl/deque.hpp>\n\nnamespace boost\n{\n  namespace metaparse\n  {\n    namespace v1\n    {\n      template <class P, int N>\n      struct iterate_c : impl::iterate_impl<N, P, boost::mpl::deque<> > {};\n    }\n  }\n}\n\n#endif\n\n', 'binary': False, 'copies': 8, 'sample_repo_name': 'arangodb/arangodb', 'sample_ref': 'refs/heads/devel', 'sample_path': '3rdParty/boost/1.61.0b1/boost/metaparse/v1/iterate_c.hpp', 'sample_mode': 33188, 'sample_symlink_target': None}]

--------------------------------------------------
Table full name: GITHUB_REPOS_DATE.GITHUB_REPOS.SAMPLE_COMMITS
Column name: parent Type: VARIANT
Column name: committer Type: VARIANT
Column name: difference Type: VARIANT
Column name: message Type: TEXT
Column name: author Type: VARIANT
Column name: difference_truncated Type: BOOLEAN
Column name: subject Type: TEXT
Column name: trailer Type: VARIANT
Column name: encoding Type: TEXT
Column name: commit Type: TEXT
Column name: repo_name Type: TEXT
Column name: tree Type: TEXT
Sample rows:
[{'commit': 'b7ac233515c6263d6cb471d9e0f57bdd7ea36894', 'tree': 'd2bd3ac03c272a90e9e679fc727513beb61a99b8', 'parent': '[\n  "01c6222f876062355599e5a63560c514b6de25d2"\n]', 'author': '{\n  "date": 1401923175000000,\n  "email": "88260f35dd98758635dbbf2145383e817a86f01c@huawei.com",\n  "name": "Joseph Qi",\n  "time_sec": 1401923175,\n  "tz_offset": -420\n}', 'committer': '{\n  "date": 1401926034000000,\n  "email": "69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org",\n  "name": "Linus Torvalds",\n  "time_sec": 1401926034,\n  "tz_offset": -420\n}', 'subject': 'ocfs2: cleanup unused paramters in ocfs2_calc_new_backup_super', 'message': 'ocfs2: cleanup unused paramters in ocfs2_calc_new_backup_super\n\nParameters new_clusters and first_new_cluster are not used in\nocfs2_update_last_group_and_inode, so remove them.\n\nSigned-off-by: Joseph Qi <88260f35dd98758635dbbf2145383e817a86f01c@huawei.com>\nReviewed-by: joyce.xue <e513a8cfffdd1761b5c8047b6b6cbe23f11326f2@huawei.com>\nCc: Mark Fasheh <8f0bc92cac940f3e83deb53ced7a1f201bce5732@suse.com>\nCc: Joel Becker <9d3d88cacb47f143c6cf36b9a61c09b528b2c49a@evilplan.org>\nSigned-off-by: Andrew Morton <5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org>\nSigned-off-by: Linus Torvalds <69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org>\n', 'trailer': '[\n  {\n    "email": "88260f35dd98758635dbbf2145383e817a86f01c@huawei.com",\n    "key": "Signed-off-by",\n    "value": "Joseph Qi <88260f35dd98758635dbbf2145383e817a86f01c@huawei.com>"\n  },\n  {\n    "email": "e513a8cfffdd1761b5c8047b6b6cbe23f11326f2@huawei.com",\n    "key": "Reviewed-by",\n    "value": "joyce.xue <e513a8cfffdd1761b5c8047b6b6cbe23f11326f2@huawei.com>"\n  },\n  {\n    "email": "8f0bc92cac940f3e83deb53ced7a1f201bce5732@suse.com",\n    "key": "Cc",\n    "value": "Mark Fasheh <8f0bc92cac940f3e83deb53ced7a1f201bce5732@suse.com>"\n  },\n  {\n    "email": "9d3d88cacb47f143c6cf36b9a61c09b528b2c49a@evilplan.org",\n    "key": "Cc",\n    "value": "Joel Becker <9d3d88cacb47f143c6cf36b9a61c09b528b2c49a@evilplan.org>"\n  },\n  {\n    "email": "5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org",\n    "key": "Signed-off-by",\n    "value": "Andrew Morton <5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org>"\n  },\n  {\n    "email": "69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org",\n    "key": "Signed-off-by",\n    "value": "Linus Torvalds <69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org>"\n  }\n]', 'difference': '[\n  {\n    "new_mode": 33188,\n    "new_path": "fs/ocfs2/resize.c",\n    "new_sha1": "168739c2ad2bc7cb0d1049bb5027aea912695bd4",\n    "old_mode": 33188,\n    "old_path": "fs/ocfs2/resize.c",\n    "old_sha1": "822ebc10f281057d9c6f5adc01c246042ef01cfd"\n  }\n]', 'difference_truncated': None, 'repo_name': 'torvalds/linux', 'encoding': None}, {'commit': '71c11c378f46e42ca67c1e227646ce23bf43a8c6', 'tree': '5762c267801a47bc5efd54242661820472827960', 'parent': '[\n  "7d8bc2be51706152828164b305e969b4a8471041"\n]', 'author': '{\n  "date": 1231281725000000,\n  "email": "8c1011c9d06fc72acd93645d683782ab9543044d@us.ibm.com",\n  "name": "Michael Halcrow",\n  "time_sec": 1231281725,\n  "tz_offset": -480\n}', 'committer': '{\n  "date": 1231286362000000,\n  "email": "69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org",\n  "name": "Linus Torvalds",\n  "time_sec": 1231286362,\n  "tz_offset": -480\n}', 'subject': 'eCryptfs: Clean up ecryptfs_decode_from_filename()', 'message': 'eCryptfs: Clean up ecryptfs_decode_from_filename()\n\nFlesh out the comments for ecryptfs_decode_from_filename(). Remove the\nreturn condition, since it is always 0.\n\nSigned-off-by: Michael Halcrow <8c1011c9d06fc72acd93645d683782ab9543044d@us.ibm.com>\nCc: Dustin Kirkland <81003606aeb58a7381e4bb211f38072b7ea4a537@gmail.com>\nCc: Eric Sandeen <d55521028c14e0f378be5444e4ea388161c0d7e7@redhat.com>\nCc: Tyler Hicks <f69c264f60e3b997c7d27eb236d1230c0fc7e0a2@us.ibm.com>\nCc: David Kleikamp <9bc4ae2e83dabb4524fc335d7c1dac408a99dbe5@us.ibm.com>\nSigned-off-by: Andrew Morton <5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org>\nSigned-off-by: Linus Torvalds <69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org>\n', 'trailer': '[\n  {\n    "email": "8c1011c9d06fc72acd93645d683782ab9543044d@us.ibm.com",\n    "key": "Signed-off-by",\n    "value": "Michael Halcrow <8c1011c9d06fc72acd93645d683782ab9543044d@us.ibm.com>"\n  },\n  {\n    "email": "81003606aeb58a7381e4bb211f38072b7ea4a537@gmail.com",\n    "key": "Cc",\n    "value": "Dustin Kirkland <81003606aeb58a7381e4bb211f38072b7ea4a537@gmail.com>"\n  },\n  {\n    "email": "d55521028c14e0f378be5444e4ea388161c0d7e7@redhat.com",\n    "key": "Cc",\n    "value": "Eric Sandeen <d55521028c14e0f378be5444e4ea388161c0d7e7@redhat.com>"\n  },\n  {\n    "email": "f69c264f60e3b997c7d27eb236d1230c0fc7e0a2@us.ibm.com",\n    "key": "Cc",\n    "value": "Tyler Hicks <f69c264f60e3b997c7d27eb236d1230c0fc7e0a2@us.ibm.com>"\n  },\n  {\n    "email": "9bc4ae2e83dabb4524fc335d7c1dac408a99dbe5@us.ibm.com",\n    "key": "Cc",\n    "value": "David Kleikamp <9bc4ae2e83dabb4524fc335d7c1dac408a99dbe5@us.ibm.com>"\n  },\n  {\n    "email": "5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org",\n    "key": "Signed-off-by",\n    "value": "Andrew Morton <5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org>"\n  },\n  {\n    "email": "69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org",\n    "key": "Signed-off-by",\n    "value": "Linus Torvalds <69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org>"\n  }\n]', 'difference': '[\n  {\n    "new_mode": 33188,\n    "new_path": "fs/ecryptfs/crypto.c",\n    "new_sha1": "c01e043670e21300808dcd5d58e77f19bfccd076",\n    "old_mode": 33188,\n    "old_path": "fs/ecryptfs/crypto.c",\n    "old_sha1": "e935a2224982c267117cd9cafe3d62b024f284a1"\n  }\n]', 'difference_truncated': None, 'repo_name': 'torvalds/linux', 'encoding': None}, {'commit': '76cdd58e558669366adfaded436fda01b30cce3e', 'tree': 'deaccb499752c928919693edea65f9ea4c1fe756', 'parent': '[\n  "1c12c4cf9411eb130b245fa8d0fbbaf989477c7b"\n]', 'author': '{\n  "date": 1210806352000000,\n  "email": "8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com",\n  "name": "Heiko Carstens",\n  "time_sec": 1210806352,\n  "tz_offset": -420\n}', 'committer': '{\n  "date": 1210817475000000,\n  "email": "69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org",\n  "name": "Linus Torvalds",\n  "time_sec": 1210817475,\n  "tz_offset": -420\n}', 'subject': 'memory_hotplug: always initialize pageblock bitmap', 'message': 'memory_hotplug: always initialize pageblock bitmap\n\nTrying to online a new memory section that was added via memory hotplug\nsometimes results in crashes when the new pages are added via __free_page.\n Reason for that is that the pageblock bitmap isn\'t initialized and hence\ncontains random stuff.  That means that get_pageblock_migratetype()\nreturns also random stuff and therefore\n\n\tlist_add(&page->lru,\n\t\t&zone->free_area[order].free_list[migratetype]);\n\nin __free_one_page() tries to do a list_add to something that isn\'t even\nnecessarily a list.\n\nThis happens since 86051ca5eaf5e560113ec7673462804c54284456 ("mm: fix\nusemap initialization") which makes sure that the pageblock bitmap gets\nonly initialized for pages present in a zone.  Unfortunately for hot-added\nmemory the zones "grow" after the memmap and the pageblock memmap have\nbeen initialized.  Which means that the new pages have an unitialized\nbitmap.  To solve this the calls to grow_zone_span() and grow_pgdat_span()\nare moved to __add_zone() just before the initialization happens.\n\nThe patch also moves the two functions since __add_zone() is the only\ncaller and I didn\'t want to add a forward declaration.\n\nSigned-off-by: Heiko Carstens <8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com>\nCc: Andy Whitcroft <b4658fdd7fbd645c2859b0e39d71018f32058d12@shadowen.org>\nCc: Dave Hansen <e169c2064f54e292652f83bb35eed10e1aa33f38@us.ibm.com>\nCc: Gerald Schaefer <7a67bf9a8691f9f1ca8ce9577e14c37413ea5f58@de.ibm.com>\nCc: KAMEZAWA Hiroyuki <634f508bd7c47cf0ee4126243675c3e598920fbc@jp.fujitsu.com>\nCc: Yasunori Goto <5e8c143c1cccd8ccee45b5a7b90115158373a5d7@jp.fujitsu.com>\nCc: <4fbacc2fa0ffdbb11bf1ad6925b886ebd08dd15f@kernel.org>\nSigned-off-by: Andrew Morton <5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org>\nSigned-off-by: Linus Torvalds <69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org>\n', 'trailer': '[\n  {\n    "email": "8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com",\n    "key": "Signed-off-by",\n    "value": "Heiko Carstens <8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com>"\n  },\n  {\n    "email": "b4658fdd7fbd645c2859b0e39d71018f32058d12@shadowen.org",\n    "key": "Cc",\n    "value": "Andy Whitcroft <b4658fdd7fbd645c2859b0e39d71018f32058d12@shadowen.org>"\n  },\n  {\n    "email": "e169c2064f54e292652f83bb35eed10e1aa33f38@us.ibm.com",\n    "key": "Cc",\n    "value": "Dave Hansen <e169c2064f54e292652f83bb35eed10e1aa33f38@us.ibm.com>"\n  },\n  {\n    "email": "7a67bf9a8691f9f1ca8ce9577e14c37413ea5f58@de.ibm.com",\n    "key": "Cc",\n    "value": "Gerald Schaefer <7a67bf9a8691f9f1ca8ce9577e14c37413ea5f58@de.ibm.com>"\n  },\n  {\n    "email": "634f508bd7c47cf0ee4126243675c3e598920fbc@jp.fujitsu.com",\n    "key": "Cc",\n    "value": "KAMEZAWA Hiroyuki <634f508bd7c47cf0ee4126243675c3e598920fbc@jp.fujitsu.com>"\n  },\n  {\n    "email": "5e8c143c1cccd8ccee45b5a7b90115158373a5d7@jp.fujitsu.com",\n    "key": "Cc",\n    "value": "Yasunori Goto <5e8c143c1cccd8ccee45b5a7b90115158373a5d7@jp.fujitsu.com>"\n  },\n  {\n    "email": "4fbacc2fa0ffdbb11bf1ad6925b886ebd08dd15f@kernel.org",\n    "key": "Cc",\n    "value": "<4fbacc2fa0ffdbb11bf1ad6925b886ebd08dd15f@kernel.org>"\n  },\n  {\n    "email": "5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org",\n    "key": "Signed-off-by",\n    "value": "Andrew Morton <5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org>"\n  },\n  {\n    "email": "69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org",\n    "key": "Signed-off-by",\n    "value": "Linus Torvalds <69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org>"\n  }\n]', 'difference': '[\n  {\n    "new_mode": 33188,\n    "new_path": "mm/memory_hotplug.c",\n    "new_sha1": "833f854eabe50ad226696667db7e49d332840bb6",\n    "old_mode": 33188,\n    "old_path": "mm/memory_hotplug.c",\n    "old_sha1": "656ad1c65422f0440a56b422b8431891e5304827"\n  },\n  {\n    "new_mode": 33188,\n    "new_path": "mm/page_alloc.c",\n    "new_sha1": "63835579323a7ca70722154f5b3e6560872da409",\n    "old_mode": 33188,\n    "old_path": "mm/page_alloc.c",\n    "old_sha1": "bdd5c432c426fdf6714ff90e1eebdfccfdccee8c"\n  }\n]', 'difference_truncated': None, 'repo_name': 'torvalds/linux', 'encoding': None}, {'commit': '2565409fc0303f3ab8d66b8326702a687962a29b', 'tree': 'b57f238d77ee87a991371a7021462b8c71351659', 'parent': '[\n  "4156153c4daddf12dd386016f96a947a01e93bf4"\n]', 'author': '{\n  "date": 1326417453000000,\n  "email": "8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com",\n  "name": "Heiko Carstens",\n  "time_sec": 1326417453,\n  "tz_offset": -480\n}', 'committer': '{\n  "date": 1326427983000000,\n  "email": "69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org",\n  "name": "Linus Torvalds",\n  "time_sec": 1326427983,\n  "tz_offset": -480\n}', 'subject': 'mm,x86,um: move CMPXCHG_DOUBLE config option', 'message': 'mm,x86,um: move CMPXCHG_DOUBLE config option\n\nMove CMPXCHG_DOUBLE and rename it to HAVE_CMPXCHG_DOUBLE so architectures\ncan simply select the option if it is supported.\n\nSigned-off-by: Heiko Carstens <8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com>\nAcked-by: Christoph Lameter <ef3ecccf258fa062c5c6521a4887d40541963af7@linux.com>\nCc: Pekka Enberg <add4fcd06328a394f0ad91feda7ee057316dc5ed@kernel.org>\nCc: Ingo Molnar <9dbbbf0688fedc85ad4da37637f1a64b8c718ee2@elte.hu>\nCc: Thomas Gleixner <00e4cf8f46a57000a44449bf9dd8cbbcc209fd2a@linutronix.de>\nCc: "H. Peter Anvin" <8a453bad9912ffe59bc0f0b8abe03df9be19379e@zytor.com>\nSigned-off-by: Andrew Morton <5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org>\nSigned-off-by: Linus Torvalds <69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org>\n', 'trailer': '[\n  {\n    "email": "8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com",\n    "key": "Signed-off-by",\n    "value": "Heiko Carstens <8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com>"\n  },\n  {\n    "email": "ef3ecccf258fa062c5c6521a4887d40541963af7@linux.com",\n    "key": "Acked-by",\n    "value": "Christoph Lameter <ef3ecccf258fa062c5c6521a4887d40541963af7@linux.com>"\n  },\n  {\n    "email": "add4fcd06328a394f0ad91feda7ee057316dc5ed@kernel.org",\n    "key": "Cc",\n    "value": "Pekka Enberg <add4fcd06328a394f0ad91feda7ee057316dc5ed@kernel.org>"\n  },\n  {\n    "email": "9dbbbf0688fedc85ad4da37637f1a64b8c718ee2@elte.hu",\n    "key": "Cc",\n    "value": "Ingo Molnar <9dbbbf0688fedc85ad4da37637f1a64b8c718ee2@elte.hu>"\n  },\n  {\n    "email": "00e4cf8f46a57000a44449bf9dd8cbbcc209fd2a@linutronix.de",\n    "key": "Cc",\n    "value": "Thomas Gleixner <00e4cf8f46a57000a44449bf9dd8cbbcc209fd2a@linutronix.de>"\n  },\n  {\n    "email": "8a453bad9912ffe59bc0f0b8abe03df9be19379e@zytor.com",\n    "key": "Cc",\n    "value": "\\"H. Peter Anvin\\" <8a453bad9912ffe59bc0f0b8abe03df9be19379e@zytor.com>"\n  },\n  {\n    "email": "5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org",\n    "key": "Signed-off-by",\n    "value": "Andrew Morton <5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org>"\n  },\n  {\n    "email": "69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org",\n    "key": "Signed-off-by",\n    "value": "Linus Torvalds <69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org>"\n  }\n]', 'difference': '[\n  {\n    "new_mode": 33188,\n    "new_path": "arch/Kconfig",\n    "new_sha1": "4f55c736be11ea3aa3ac6762b0ec3d1371b872ce",\n    "old_mode": 33188,\n    "old_path": "arch/Kconfig",\n    "old_sha1": "22182a8cc62c9610edaaf5aefaef83b8de07af71"\n  },\n  {\n    "new_mode": 33188,\n    "new_path": "arch/x86/Kconfig",\n    "new_sha1": "6c14ecd851d0b3ae9d32cbd73ce97419b1cb4a48",\n    "old_mode": 33188,\n    "old_path": "arch/x86/Kconfig",\n    "old_sha1": "59717fd17bc738720860e0b3f9d67ad3af211441"\n  },\n  {\n    "new_mode": 33188,\n    "new_path": "arch/x86/Kconfig.cpu",\n    "new_sha1": "3c57033e22118f2ce7771d10fa8305193c94af20",\n    "old_mode": 33188,\n    "old_path": "arch/x86/Kconfig.cpu",\n    "old_sha1": "99d2ab8b77953bde375e44328604aee7473fdd59"\n  },\n  {\n    "new_mode": 33188,\n    "new_path": "arch/x86/um/Kconfig",\n    "new_sha1": "b2b54d2edf53979fb7daf770c0d4bf0215a73fe0",\n    "old_mode": 33188,\n    "old_path": "arch/x86/um/Kconfig",\n    "old_sha1": "a62bfc66239ec5bd7aac0d7b423e817c7ace85ce"\n  },\n  {\n    "new_mode": 33188,\n    "new_path": "mm/slub.c",\n    "new_sha1": "4907563ef7ff7e199577f5d2ffedda6fa358271e",\n    "old_mode": 33188,\n    "old_path": "mm/slub.c",\n    "old_sha1": "72aa8413460932bf0826cf3d40bf52798a0e9ab9"\n  }\n]', 'difference_truncated': None, 'repo_name': 'torvalds/linux', 'encoding': None}, {'commit': '3443ad095fc330ace0ef23bf965354a56298bf58', 'tree': '35f7457e947488d31fb41273f1bcc8b864b76135', 'parent': '[\n  "38a6276e2b56921a407e718079aee79919873d72"\n]', 'author': '{\n  "date": 1367277563000000,\n  "email": "8ef6cd53fa4ede16d655e2562b753173823989c1@nvidia.com",\n  "name": "Laxman Dewangan",\n  "time_sec": 1367277563,\n  "tz_offset": -420\n}', 'committer': '{\n  "date": 1367285308000000,\n  "email": "69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org",\n  "name": "Linus Torvalds",\n  "time_sec": 1367285308,\n  "tz_offset": -420\n}', 'subject': 'drivers/rtc/rtc-tegra.c: use struct dev_pm_ops for power management', 'message': 'drivers/rtc/rtc-tegra.c: use struct dev_pm_ops for power management\n\nMake the Tegra RTC controller driver define its PM callbacks through a\nstruct dev_pm_ops object rather than by using legacy PM hooks in struct\nplatform_driver.\n\nSigned-off-by: Laxman Dewangan <8ef6cd53fa4ede16d655e2562b753173823989c1@nvidia.com>\nReviewed-by: Thierry Reding <b75a4d02013b0e68ae2c6bb0dcfd4b7bec282dc9@avionic-design.de>\nReviewed-by: Stephen Warren <5ef2a23ba3aff51d1cfc8c113c1ec34b608b3b13@nvidia.com>\nCc: Jingoo Han <fc379137a64feb86ce38ec5811a14280acc1ccfc@samsung.com>\nSigned-off-by: Andrew Morton <5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org>\nSigned-off-by: Linus Torvalds <69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org>\n', 'trailer': '[\n  {\n    "email": "8ef6cd53fa4ede16d655e2562b753173823989c1@nvidia.com",\n    "key": "Signed-off-by",\n    "value": "Laxman Dewangan <8ef6cd53fa4ede16d655e2562b753173823989c1@nvidia.com>"\n  },\n  {\n    "email": "b75a4d02013b0e68ae2c6bb0dcfd4b7bec282dc9@avionic-design.de",\n    "key": "Reviewed-by",\n    "value": "Thierry Reding <b75a4d02013b0e68ae2c6bb0dcfd4b7bec282dc9@avionic-design.de>"\n  },\n  {\n    "email": "5ef2a23ba3aff51d1cfc8c113c1ec34b608b3b13@nvidia.com",\n    "key": "Reviewed-by",\n    "value": "Stephen Warren <5ef2a23ba3aff51d1cfc8c113c1ec34b608b3b13@nvidia.com>"\n  },\n  {\n    "email": "fc379137a64feb86ce38ec5811a14280acc1ccfc@samsung.com",\n    "key": "Cc",\n    "value": "Jingoo Han <fc379137a64feb86ce38ec5811a14280acc1ccfc@samsung.com>"\n  },\n  {\n    "email": "5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org",\n    "key": "Signed-off-by",\n    "value": "Andrew Morton <5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org>"\n  },\n  {\n    "email": "69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org",\n    "key": "Signed-off-by",\n    "value": "Linus Torvalds <69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org>"\n  }\n]', 'difference': '[\n  {\n    "new_mode": 33188,\n    "new_path": "drivers/rtc/rtc-tegra.c",\n    "new_sha1": "0ef028b54821610c3971287f0c33a364ca7ae1f1",\n    "old_mode": 33188,\n    "old_path": "drivers/rtc/rtc-tegra.c",\n    "old_sha1": "916802a58366452db6cff890532bfd00cf39aa5a"\n  }\n]', 'difference_truncated': None, 'repo_name': 'torvalds/linux', 'encoding': None}]

--------------------------------------------------
Table full name: GITHUB_REPOS_DATE.GITHUB_REPOS.SAMPLE_REPOS
Column name: watch_count Type: NUMBER
Column name: repo_name Type: TEXT
Sample rows:
[{'repo_name': 'leichunfeng/WXTabBarController', 'watch_count': 256}, {'repo_name': 'krisk/Fuse', 'watch_count': 256}, {'repo_name': 'brigade/react-waypoint', 'watch_count': 256}, {'repo_name': 'Quartz/mapquery', 'watch_count': 256}, {'repo_name': 'linkedin/gobblin', 'watch_count': 256}]

--------------------------------------------------
Table full name: GITHUB_REPOS_DATE.YEAR._2016
Column name: repo Type: VARIANT
Column name: id Type: TEXT
Column name: org Type: VARIANT
Column name: other Type: TEXT
Column name: created_at Type: NUMBER
Column name: type Type: TEXT
Column name: payload Type: TEXT
Column name: actor Type: VARIANT
Column name: public Type: BOOLEAN
Sample rows:
[{'type': 'PullRequestEvent', 'public': True, 'payload': '{"action":"closed","number":350,"pull_request":{"url":"https://api.github.com/repos/microcai/gentoo-zh/pulls/350","id":55531386,"html_url":"https://github.com/microcai/gentoo-zh/pull/350","diff_url":"https://github.com/microcai/gentoo-zh/pull/350.diff","patch_url":"https://github.com/microcai/gentoo-zh/pull/350.patch","issue_url":"https://api.github.com/repos/microcai/gentoo-zh/issues/350","number":350,"state":"closed","locked":false,"title":"update Manifest of ss-qt5 building","user":{"login":"haobug","id":1269309,"avatar_url":"https://avatars.githubusercontent.com/u/1269309?v=3","gravatar_id":"","url":"https://api.github.com/users/haobug","html_url":"https://github.com/haobug","followers_url":"https://api.github.com/users/haobug/followers","following_url":"https://api.github.com/users/haobug/following{/other_user}","gists_url":"https://api.github.com/users/haobug/gists{/gist_id}","starred_url":"https://api.github.com/users/haobug/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/haobug/subscriptions","organizations_url":"https://api.github.com/users/haobug/orgs","repos_url":"https://api.github.com/users/haobug/repos","events_url":"https://api.github.com/users/haobug/events{/privacy}","received_events_url":"https://api.github.com/users/haobug/received_events","type":"User","site_admin":false},"body":"","created_at":"2016-01-09T01:43:11Z","updated_at":"2016-01-09T07:43:12Z","closed_at":"2016-01-09T07:43:12Z","merged_at":null,"merge_commit_sha":"2ed2bb5d7f2e394df9c99cda5fd0aa3794f30d47","assignee":null,"milestone":null,"commits_url":"https://api.github.com/repos/microcai/gentoo-zh/pulls/350/commits","review_comments_url":"https://api.github.com/repos/microcai/gentoo-zh/pulls/350/comments","review_comment_url":"https://api.github.com/repos/microcai/gentoo-zh/pulls/comments{/number}","comments_url":"https://api.github.com/repos/microcai/gentoo-zh/issues/350/comments","statuses_url":"https://api.github.com/repos/microcai/gentoo-zh/statuses/3f7f52df8ea47a5a5713ed01817ec904cbcd15db","head":{"label":"haobug:ss-qt5","ref":"ss-qt5","sha":"3f7f52df8ea47a5a5713ed01817ec904cbcd15db","user":{"login":"haobug","id":1269309,"avatar_url":"https://avatars.githubusercontent.com/u/1269309?v=3","gravatar_id":"","url":"https://api.github.com/users/haobug","html_url":"https://github.com/haobug","followers_url":"https://api.github.com/users/haobug/followers","following_url":"https://api.github.com/users/haobug/following{/other_user}","gists_url":"https://api.github.com/users/haobug/gists{/gist_id}","starred_url":"https://api.github.com/users/haobug/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/haobug/subscriptions","organizations_url":"https://api.github.com/users/haobug/orgs","repos_url":"https://api.github.com/users/haobug/repos","events_url":"https://api.github.com/users/haobug/events{/privacy}","received_events_url":"https://api.github.com/users/haobug/received_events","type":"User","site_admin":false},"repo":{"id":47779251,"name":"gentoo-zh","full_name":"haobug/gentoo-zh","owner":{"login":"haobug","id":1269309,"avatar_url":"https://avatars.githubusercontent.com/u/1269309?v=3","gravatar_id":"","url":"https://api.github.com/users/haobug","html_url":"https://github.com/haobug","followers_url":"https://api.github.com/users/haobug/followers","following_url":"https://api.github.com/users/haobug/following{/other_user}","gists_url":"https://api.github.com/users/haobug/gists{/gist_id}","starred_url":"https://api.github.com/users/haobug/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/haobug/subscriptions","organizations_url":"https://api.github.com/users/haobug/orgs","repos_url":"https://api.github.com/users/haobug/repos","events_url":"https://api.github.com/users/haobug/events{/privacy}","received_events_url":"https://api.github.com/users/haobug/received_events","type":"User","site_admin":false},"private":false,"html_url":"https://github.com/haobug/gentoo-zh","description":"gentoo-zh is an overlay for China and Taiwan Users","fork":true,"url":"https://api.github.com/repos/haobug/gentoo-zh","forks_url":"https://api.github.com/repos/haobug/gentoo-zh/forks","keys_url":"https://api.github.com/repos/haobug/gentoo-zh/keys{/key_id}","collaborators_url":"https://api.github.com/repos/haobug/gentoo-zh/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/haobug/gentoo-zh/teams","hooks_url":"https://api.github.com/repos/haobug/gentoo-zh/hooks","issue_events_url":"https://api.github.com/repos/haobug/gentoo-zh/issues/events{/number}","events_url":"https://api.github.com/repos/haobug/gentoo-zh/events","assignees_url":"https://api.github.com/repos/haobug/gentoo-zh/assignees{/user}","branches_url":"https://api.github.com/repos/haobug/gentoo-zh/branches{/branch}","tags_url":"https://api.github.com/repos/haobug/gentoo-zh/tags","blobs_url":"https://api.github.com/repos/haobug/gentoo-zh/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/haobug/gentoo-zh/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/haobug/gentoo-zh/git/refs{/sha}","trees_url":"https://api.github.com/repos/haobug/gentoo-zh/git/trees{/sha}","statuses_url":"https://api.github.com/repos/haobug/gentoo-zh/statuses/{sha}","languages_url":"https://api.github.com/repos/haobug/gentoo-zh/languages","stargazers_url":"https://api.github.com/repos/haobug/gentoo-zh/stargazers","contributors_url":"https://api.github.com/repos/haobug/gentoo-zh/contributors","subscribers_url":"https://api.github.com/repos/haobug/gentoo-zh/subscribers","subscription_url":"https://api.github.com/repos/haobug/gentoo-zh/subscription","commits_url":"https://api.github.com/repos/haobug/gentoo-zh/commits{/sha}","git_commits_url":"https://api.github.com/repos/haobug/gentoo-zh/git/commits{/sha}","comments_url":"https://api.github.com/repos/haobug/gentoo-zh/comments{/number}","issue_comment_url":"https://api.github.com/repos/haobug/gentoo-zh/issues/comments{/number}","contents_url":"https://api.github.com/repos/haobug/gentoo-zh/contents/{+path}","compare_url":"https://api.github.com/repos/haobug/gentoo-zh/compare/{base}...{head}","merges_url":"https://api.github.com/repos/haobug/gentoo-zh/merges","archive_url":"https://api.github.com/repos/haobug/gentoo-zh/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/haobug/gentoo-zh/downloads","issues_url":"https://api.github.com/repos/haobug/gentoo-zh/issues{/number}","pulls_url":"https://api.github.com/repos/haobug/gentoo-zh/pulls{/number}","milestones_url":"https://api.github.com/repos/haobug/gentoo-zh/milestones{/number}","notifications_url":"https://api.github.com/repos/haobug/gentoo-zh/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/haobug/gentoo-zh/labels{/name}","releases_url":"https://api.github.com/repos/haobug/gentoo-zh/releases{/id}","created_at":"2015-12-10T18:14:52Z","updated_at":"2015-12-10T18:14:55Z","pushed_at":"2016-01-09T01:42:01Z","git_url":"git://github.com/haobug/gentoo-zh.git","ssh_url":"git@github.com:haobug/gentoo-zh.git","clone_url":"https://github.com/haobug/gentoo-zh.git","svn_url":"https://github.com/haobug/gentoo-zh","homepage":"http://gentoo.org.cn","size":18973,"stargazers_count":0,"watchers_count":0,"language":"Shell","has_issues":false,"has_downloads":true,"has_wiki":true,"has_pages":false,"forks_count":0,"mirror_url":null,"open_issues_count":0,"forks":0,"open_issues":0,"watchers":0,"default_branch":"master"}},"base":{"label":"microcai:master","ref":"master","sha":"aea1d069fe082ee20f7503cf873d71a4b7b1bd86","user":{"login":"microcai","id":172208,"avatar_url":"https://avatars.githubusercontent.com/u/172208?v=3","gravatar_id":"","url":"https://api.github.com/users/microcai","html_url":"https://github.com/microcai","followers_url":"https://api.github.com/users/microcai/followers","following_url":"https://api.github.com/users/microcai/following{/other_user}","gists_url":"https://api.github.com/users/microcai/gists{/gist_id}","starred_url":"https://api.github.com/users/microcai/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/microcai/subscriptions","organizations_url":"https://api.github.com/users/microcai/orgs","repos_url":"https://api.github.com/users/microcai/repos","events_url":"https://api.github.com/users/microcai/events{/privacy}","received_events_url":"https://api.github.com/users/microcai/received_events","type":"User","site_admin":false},"repo":{"id":1879998,"name":"gentoo-zh","full_name":"microcai/gentoo-zh","owner":{"login":"microcai","id":172208,"avatar_url":"https://avatars.githubusercontent.com/u/172208?v=3","gravatar_id":"","url":"https://api.github.com/users/microcai","html_url":"https://github.com/microcai","followers_url":"https://api.github.com/users/microcai/followers","following_url":"https://api.github.com/users/microcai/following{/other_user}","gists_url":"https://api.github.com/users/microcai/gists{/gist_id}","starred_url":"https://api.github.com/users/microcai/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/microcai/subscriptions","organizations_url":"https://api.github.com/users/microcai/orgs","repos_url":"https://api.github.com/users/microcai/repos","events_url":"https://api.github.com/users/microcai/events{/privacy}","received_events_url":"https://api.github.com/users/microcai/received_events","type":"User","site_admin":false},"private":false,"html_url":"https://github.com/microcai/gentoo-zh","description":"gentoo-zh is an overlay for China and Taiwan Users","fork":false,"url":"https://api.github.com/repos/microcai/gentoo-zh","forks_url":"https://api.github.com/repos/microcai/gentoo-zh/forks","keys_url":"https://api.github.com/repos/microcai/gentoo-zh/keys{/key_id}","collaborators_url":"https://api.github.com/repos/microcai/gentoo-zh/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/microcai/gentoo-zh/teams","hooks_url":"https://api.github.com/repos/microcai/gentoo-zh/hooks","issue_events_url":"https://api.github.com/repos/microcai/gentoo-zh/issues/events{/number}","events_url":"https://api.github.com/repos/microcai/gentoo-zh/events","assignees_url":"https://api.github.com/repos/microcai/gentoo-zh/assignees{/user}","branches_url":"https://api.github.com/repos/microcai/gentoo-zh/branches{/branch}","tags_url":"https://api.github.com/repos/microcai/gentoo-zh/tags","blobs_url":"https://api.github.com/repos/microcai/gentoo-zh/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/microcai/gentoo-zh/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/microcai/gentoo-zh/git/refs{/sha}","trees_url":"https://api.github.com/repos/microcai/gentoo-zh/git/trees{/sha}","statuses_url":"https://api.github.com/repos/microcai/gentoo-zh/statuses/{sha}","languages_url":"https://api.github.com/repos/microcai/gentoo-zh/languages","stargazers_url":"https://api.github.com/repos/microcai/gentoo-zh/stargazers","contributors_url":"https://api.github.com/repos/microcai/gentoo-zh/contributors","subscribers_url":"https://api.github.com/repos/microcai/gentoo-zh/subscribers","subscription_url":"https://api.github.com/repos/microcai/gentoo-zh/subscription","commits_url":"https://api.github.com/repos/microcai/gentoo-zh/commits{/sha}","git_commits_url":"https://api.github.com/repos/microcai/gentoo-zh/git/commits{/sha}","comments_url":"https://api.github.com/repos/microcai/gentoo-zh/comments{/number}","issue_comment_url":"https://api.github.com/repos/microcai/gentoo-zh/issues/comments{/number}","contents_url":"https://api.github.com/repos/microcai/gentoo-zh/contents/{+path}","compare_url":"https://api.github.com/repos/microcai/gentoo-zh/compare/{base}...{head}","merges_url":"https://api.github.com/repos/microcai/gentoo-zh/merges","archive_url":"https://api.github.com/repos/microcai/gentoo-zh/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/microcai/gentoo-zh/downloads","issues_url":"https://api.github.com/repos/microcai/gentoo-zh/issues{/number}","pulls_url":"https://api.github.com/repos/microcai/gentoo-zh/pulls{/number}","milestones_url":"https://api.github.com/repos/microcai/gentoo-zh/milestones{/number}","notifications_url":"https://api.github.com/repos/microcai/gentoo-zh/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/microcai/gentoo-zh/labels{/name}","releases_url":"https://api.github.com/repos/microcai/gentoo-zh/releases{/id}","created_at":"2011-06-11T12:25:08Z","updated_at":"2015-11-26T11:12:46Z","pushed_at":"2016-01-09T01:43:12Z","git_url":"git://github.com/microcai/gentoo-zh.git","ssh_url":"git@github.com:microcai/gentoo-zh.git","clone_url":"https://github.com/microcai/gentoo-zh.git","svn_url":"https://github.com/microcai/gentoo-zh","homepage":"http://gentoo.org.cn","size":20467,"stargazers_count":104,"watchers_count":104,"language":"Shell","has_issues":true,"has_downloads":true,"has_wiki":true,"has_pages":true,"forks_count":73,"mirror_url":null,"open_issues_count":17,"forks":73,"open_issues":17,"watchers":104,"default_branch":"master"}},"_links":{"self":{"href":"https://api.github.com/repos/microcai/gentoo-zh/pulls/350"},"html":{"href":"https://github.com/microcai/gentoo-zh/pull/350"},"issue":{"href":"https://api.github.com/repos/microcai/gentoo-zh/issues/350"},"comments":{"href":"https://api.github.com/repos/microcai/gentoo-zh/issues/350/comments"},"review_comments":{"href":"https://api.github.com/repos/microcai/gentoo-zh/pulls/350/comments"},"review_comment":{"href":"https://api.github.com/repos/microcai/gentoo-zh/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/microcai/gentoo-zh/pulls/350/commits"},"statuses":{"href":"https://api.github.com/repos/microcai/gentoo-zh/statuses/3f7f52df8ea47a5a5713ed01817ec904cbcd15db"}},"merged":false,"mergeable":true,"mergeable_state":"clean","merged_by":null,"comments":1,"review_comments":0,"commits":1,"additions":4,"deletions":0,"changed_files":2}}', 'repo': '{\n  "id": 1879998,\n  "name": "microcai/gentoo-zh",\n  "url": "https://api.github.com/repos/microcai/gentoo-zh"\n}', 'actor': '{\n  "avatar_url": "https://avatars.githubusercontent.com/u/906878?",\n  "gravatar_id": "",\n  "id": 906878,\n  "login": "JiajunW",\n  "url": "https://api.github.com/users/JiajunW"\n}', 'org': 'null', 'created_at': 1452325392000000, 'id': '3510151772', 'other': None}, {'type': 'IssueCommentEvent', 'public': True, 'payload': '{"action":"created","issue":{"url":"https://api.github.com/repos/JoForsberg/datagenerator/issues/19","repository_url":"https://api.github.com/repos/JoForsberg/datagenerator","labels_url":"https://api.github.com/repos/JoForsberg/datagenerator/issues/19/labels{/name}","comments_url":"https://api.github.com/repos/JoForsberg/datagenerator/issues/19/comments","events_url":"https://api.github.com/repos/JoForsberg/datagenerator/issues/19/events","html_url":"https://github.com/JoForsberg/datagenerator/issues/19","id":173438205,"number":19,"title":"Doesn\'t show the labels","user":{"login":"Batmus1","id":15607310,"avatar_url":"https://avatars.githubusercontent.com/u/15607310?v=3","gravatar_id":"","url":"https://api.github.com/users/Batmus1","html_url":"https://github.com/Batmus1","followers_url":"https://api.github.com/users/Batmus1/followers","following_url":"https://api.github.com/users/Batmus1/following{/other_user}","gists_url":"https://api.github.com/users/Batmus1/gists{/gist_id}","starred_url":"https://api.github.com/users/Batmus1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Batmus1/subscriptions","organizations_url":"https://api.github.com/users/Batmus1/orgs","repos_url":"https://api.github.com/users/Batmus1/repos","events_url":"https://api.github.com/users/Batmus1/events{/privacy}","received_events_url":"https://api.github.com/users/Batmus1/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2016-08-26T12:05:47Z","updated_at":"2016-08-26T14:00:02Z","closed_at":null,"body":"The program doesn\'t show the whole label name for several of the labels.\\r\\n\\r\\nTo reproduce:\\r\\n1. Start application \\r\\n2. Look at the label \\"Capital ch...\\", \\"International ch...\\", \\"Special ch...\\", \\"password friendly Special ch...\\"\\r\\n\\r\\nBug: Doesn\'t show the whole label\\r\\nExpected result: Show the whole label if it\'s possible "},"comment":{"url":"https://api.github.com/repos/JoForsberg/datagenerator/issues/comments/242743211","html_url":"https://github.com/JoForsberg/datagenerator/issues/19#issuecomment-242743211","issue_url":"https://api.github.com/repos/JoForsberg/datagenerator/issues/19","id":242743211,"user":{"login":"marnil-hot","id":17824076,"avatar_url":"https://avatars.githubusercontent.com/u/17824076?v=3","gravatar_id":"","url":"https://api.github.com/users/marnil-hot","html_url":"https://github.com/marnil-hot","followers_url":"https://api.github.com/users/marnil-hot/followers","following_url":"https://api.github.com/users/marnil-hot/following{/other_user}","gists_url":"https://api.github.com/users/marnil-hot/gists{/gist_id}","starred_url":"https://api.github.com/users/marnil-hot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/marnil-hot/subscriptions","organizations_url":"https://api.github.com/users/marnil-hot/orgs","repos_url":"https://api.github.com/users/marnil-hot/repos","events_url":"https://api.github.com/users/marnil-hot/events{/privacy}","received_events_url":"https://api.github.com/users/marnil-hot/received_events","type":"User","site_admin":false},"created_at":"2016-08-26T14:00:02Z","updated_at":"2016-08-26T14:00:02Z","body":"Nejdå. Läxan är denna:\\r\\n1) När en testare lägger en bugg åt dig och det fungerar på din dator så kom ihåg att det kan finnas skillnader mellan era datorer som gör att det inte fungerar.\\r\\n2) Tänk till om du kan undersöka närmare om felet uppträder överallt eller bara i vissa konfigurationer. På så sätt kan man i vissa fall på ett tidigare stadium ringa in mer exakt var felet är istället för att maila fram och tillbaka med någon som det fungerar för.\\r\\n\\r\\nSå problemet är helt korrekt (och ligger fixat på en feature branch :))"}}', 'repo': '{\n  "id": 65981796,\n  "name": "JoForsberg/datagenerator",\n  "url": "https://api.github.com/repos/JoForsberg/datagenerator"\n}', 'actor': '{\n  "avatar_url": "https://avatars.githubusercontent.com/u/17824076?",\n  "gravatar_id": "",\n  "id": 17824076,\n  "login": "marnil-hot",\n  "url": "https://api.github.com/users/marnil-hot"\n}', 'org': 'null', 'created_at': 1472220002000000, 'id': '4475594736', 'other': '{"actor":{"display_login":"marnil-hot"}}'}, {'type': 'IssuesEvent', 'public': True, 'payload': '{"action":"closed","issue":{"url":"https://api.github.com/repos/intercom/intercom-php/issues/153","repository_url":"https://api.github.com/repos/intercom/intercom-php","labels_url":"https://api.github.com/repos/intercom/intercom-php/issues/153/labels{/name}","comments_url":"https://api.github.com/repos/intercom/intercom-php/issues/153/comments","events_url":"https://api.github.com/repos/intercom/intercom-php/issues/153/events","html_url":"https://github.com/intercom/intercom-php/issues/153","id":168218050,"number":153,"title":"Intercom version 2.0.0 is importing namespaced function (php 5.6 functionality) ","user":{"login":"slavo2","id":9358298,"avatar_url":"https://avatars.githubusercontent.com/u/9358298?v=3","gravatar_id":"","url":"https://api.github.com/users/slavo2","html_url":"https://github.com/slavo2","followers_url":"https://api.github.com/users/slavo2/followers","following_url":"https://api.github.com/users/slavo2/following{/other_user}","gists_url":"https://api.github.com/users/slavo2/gists{/gist_id}","starred_url":"https://api.github.com/users/slavo2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/slavo2/subscriptions","organizations_url":"https://api.github.com/users/slavo2/orgs","repos_url":"https://api.github.com/users/slavo2/repos","events_url":"https://api.github.com/users/slavo2/events{/privacy}","received_events_url":"https://api.github.com/users/slavo2/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2016-07-28T23:13:59Z","updated_at":"2016-07-29T08:17:20Z","closed_at":"2016-07-29T08:17:19Z","body":"## Version info\\r\\n  - intercom-php version: 2.0.0\\r\\n  - PHP version: 5.5\\r\\n\\r\\n## Expected behavior\\r\\n\\r\\nCreating object client \\r\\n\\r\\n## Actual behavior\\r\\n\\r\\ncrashing with error complaining about unexpected \'function\' in IntercomClient.php line 7\\r\\n\\r\\n## Steps to reproduce (as granular as possible, including screenshots where appropriate)\\r\\n 1.  create IntercomClient object \\r\\n 2.  run code using php version 5.5\\r\\n \\r\\n## Note:\\r\\nit would be nice, if new release 2.0.1 would be made, which does not expect php 5.6+ functionality\\r\\n"}}', 'repo': '{\n  "id": 19035344,\n  "name": "intercom/intercom-php",\n  "url": "https://api.github.com/repos/intercom/intercom-php"\n}', 'actor': '{\n  "avatar_url": "https://avatars.githubusercontent.com/u/2264896?",\n  "gravatar_id": "",\n  "id": 2264896,\n  "login": "bobjflong",\n  "url": "https://api.github.com/users/bobjflong"\n}', 'org': '{\n  "avatar_url": "https://avatars.githubusercontent.com/u/6585?",\n  "gravatar_id": "",\n  "id": 6585,\n  "login": "intercom",\n  "url": "https://api.github.com/orgs/intercom"\n}', 'created_at': 1469780242000000, 'id': '4344414824', 'other': '{"actor":{"display_login":"bobjflong"}}'}, {'type': 'PushEvent', 'public': True, 'payload': '{"push_id":1099035513,"size":1,"distinct_size":1,"ref":"refs/heads/master","head":"b786bf10e10404e7c79df05ef162b2fcbed03346","before":"345d784687e416117887a4bc6428f1f64e05d946","commits":[{"sha":"b786bf10e10404e7c79df05ef162b2fcbed03346","author":{"email":"bf58da6b685914b35e808991313ce7ef7dba5723@gmail.com","name":"lucascampbell"},"message":"fix merge","distinct":true,"url":"https://api.github.com/repos/openedinc/openedapi/commits/b786bf10e10404e7c79df05ef162b2fcbed03346"}]}', 'repo': '{\n  "id": 12506867,\n  "name": "openedinc/openedapi",\n  "url": "https://api.github.com/repos/openedinc/openedapi"\n}', 'actor': '{\n  "avatar_url": "https://avatars.githubusercontent.com/u/723358?",\n  "gravatar_id": "",\n  "id": 723358,\n  "login": "lucascampbell",\n  "url": "https://api.github.com/users/lucascampbell"\n}', 'org': '{\n  "avatar_url": "https://avatars.githubusercontent.com/u/1932596?",\n  "gravatar_id": "",\n  "id": 1932596,\n  "login": "openedinc",\n  "url": "https://api.github.com/orgs/openedinc"\n}', 'created_at': 1462483766000000, 'id': '3978979294', 'other': None}, {'type': 'IssueCommentEvent', 'public': True, 'payload': '{"action":"created","issue":{"url":"https://api.github.com/repos/servo/servo/issues/9844","repository_url":"https://api.github.com/repos/servo/servo","labels_url":"https://api.github.com/repos/servo/servo/issues/9844/labels{/name}","comments_url":"https://api.github.com/repos/servo/servo/issues/9844/comments","events_url":"https://api.github.com/repos/servo/servo/issues/9844/events","html_url":"https://github.com/servo/servo/issues/9844","id":137984292,"number":9844,"title":"High CPU usage during a RAF loop","user":{"login":"paulrouget","id":373579,"avatar_url":"https://avatars.githubusercontent.com/u/373579?v=3","gravatar_id":"","url":"https://api.github.com/users/paulrouget","html_url":"https://github.com/paulrouget","followers_url":"https://api.github.com/users/paulrouget/followers","following_url":"https://api.github.com/users/paulrouget/following{/other_user}","gists_url":"https://api.github.com/users/paulrouget/gists{/gist_id}","starred_url":"https://api.github.com/users/paulrouget/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulrouget/subscriptions","organizations_url":"https://api.github.com/users/paulrouget/orgs","repos_url":"https://api.github.com/users/paulrouget/repos","events_url":"https://api.github.com/users/paulrouget/events{/privacy}","received_events_url":"https://api.github.com/users/paulrouget/received_events","type":"User","site_admin":false},"labels":[{"url":"https://api.github.com/repos/servo/servo/labels/A-browserhtml/P1","name":"A-browserhtml/P1","color":"d7e102"}],"state":"open","locked":false,"assignee":null,"milestone":null,"comments":8,"created_at":"2016-03-02T20:31:30Z","updated_at":"2016-04-07T19:35:31Z","closed_at":null,"body":"Something as simple at that:\\r\\n\\r\\n```html\\r\\n<script>\\r\\n  function foo() {\\r\\n    requestAnimationFrame(foo);\\r\\n  }\\r\\n</script>\\r\\n\\r\\n<button onclick=\\"foo()\\">Start rAF</button>\\r\\n```\\r\\n\\r\\n… shows a 30% to 50% CPU usage on my macbook."},"comment":{"url":"https://api.github.com/repos/servo/servo/issues/comments/207059950","html_url":"https://github.com/servo/servo/issues/9844#issuecomment-207059950","issue_url":"https://api.github.com/repos/servo/servo/issues/9844","id":207059950,"user":{"login":"pcwalton","id":157897,"avatar_url":"https://avatars.githubusercontent.com/u/157897?v=3","gravatar_id":"","url":"https://api.github.com/users/pcwalton","html_url":"https://github.com/pcwalton","followers_url":"https://api.github.com/users/pcwalton/followers","following_url":"https://api.github.com/users/pcwalton/following{/other_user}","gists_url":"https://api.github.com/users/pcwalton/gists{/gist_id}","starred_url":"https://api.github.com/users/pcwalton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pcwalton/subscriptions","organizations_url":"https://api.github.com/users/pcwalton/orgs","repos_url":"https://api.github.com/users/pcwalton/repos","events_url":"https://api.github.com/users/pcwalton/events{/privacy}","received_events_url":"https://api.github.com/users/pcwalton/received_events","type":"User","site_admin":false},"created_at":"2016-04-07T19:35:31Z","updated_at":"2016-04-07T19:35:31Z","body":"Here\'s something interesting I found (feel free to confirm, @paulrouget): The CPU usage between rAF and non-rAF seems nearly-identical (about 21%) for me if the window is in the background. But if the window is in the foreground, then the CPU usage of rAF jumps up."}}', 'repo': '{\n  "id": 3390243,\n  "name": "servo/servo",\n  "url": "https://api.github.com/repos/servo/servo"\n}', 'actor': '{\n  "avatar_url": "https://avatars.githubusercontent.com/u/157897?",\n  "gravatar_id": "",\n  "id": 157897,\n  "login": "pcwalton",\n  "url": "https://api.github.com/users/pcwalton"\n}', 'org': '{\n  "avatar_url": "https://avatars.githubusercontent.com/u/2566135?",\n  "gravatar_id": "",\n  "id": 2566135,\n  "login": "servo",\n  "url": "https://api.github.com/orgs/servo"\n}', 'created_at': 1460057732000000, 'id': '3860972685', 'other': None}]
Some other tables have the similar structure: ['_2016', '_2017', '_2019', '_2011', '_2014', '_2022', '_2023', '_2012', '_2018', '_2013', '_2015', '_2020', '_2021']

--------------------------------------------------
External knowledge that might be helpful: 
None
The table structure information is ({database name: {schema name: [table name]}}): 
{'GITHUB_REPOS_DATE': {'GITHUB_REPOS': ['SAMPLE_FILES', 'LANGUAGES', 'LICENSES', 'SAMPLE_CONTENTS', 'SAMPLE_COMMITS', 'SAMPLE_REPOS'], 'YEAR': ['_2016', '_2016', '_2017', '_2019', '_2011', '_2014', '_2022', '_2023', '_2012', '_2018', '_2013', '_2015', '_2020', '_2021']}}

Some few-shot examples after column exploration may be helpful:
Query:
--Description: 1) Peek at the 2023 events table to understand the column layout,  
--especially "type" and the micro-second epoch stored in "created_at".
SELECT *
FROM "GITHUB_REPOS_DATE"."YEAR"."_2023"
LIMIT 20;
Answer:
type,public,payload,repo,actor,org,created_at,id,other
IssueCommentEvent,True,"{""action"":""created"",""issue"":{""url"":""https://api.github.com/repos/getsentry/sentry-laravel/issues/802"",""repository_url"":""https://api.github.com/repos/getsentry/sentry-laravel"",""labels_url"":""https://api.github.com/repos/getsentry/sentry-laravel/issues/802/labels{/name}"",""comments_url"":""https://api.github.com/repos/getsentry/sentry-laravel/issues/802/comments"",""events_url"":""https://api.github.co
Query:
--Description: 2) Inspect only PullRequestEvent rows to confirm the values of  
--"created_at" we will be dealing with.
SELECT
  "type",
  "repo",
  "created_at"
FROM "GITHUB_REPOS_DATE"."YEAR"."_2023"
WHERE "type" = 'PullRequestEvent'
LIMIT 20;
Answer:
type,repo,created_at
PullRequestEvent,"{
  ""id"": 625520869,
  ""name"": ""Mike7323/Mike-s-construction"",
  ""url"": ""https://api.github.com/repos/Mike7323/Mike-s-construction""
}",1685599179000000
PullRequestEvent,"{
  ""id"": 591279566,
  ""name"": ""simonrw/github-inbox"",
  ""url"": ""https://api.github.com/repos/simonrw/github-inbox""
}",1674381448000000
PullRequestEvent,"{
  ""id"": 685941384,
  ""name"": ""forgerlil/wd-043"",
  ""url"": ""https://api.github.com/repos/forgerlil/wd-04
Query:
--Description: 3) PullRequestEvents that happened on 18-Jan-2023 (UTC).  
--The unix-epoch micro-second range used here is  
--1674009600000000 (2023-01-18 00:00:00)  to  
--1674095999000000 (2023-01-18 23:59:59).
SELECT
  "repo",
  "created_at"
FROM "GITHUB_REPOS_DATE"."YEAR"."_2023"
WHERE "type" = 'PullRequestEvent'
  AND "created_at" BETWEEN 1674009600000000 AND 1674095999000000
LIMIT 20;
Answer:
repo,created_at
"{
  ""id"": 582762621,
  ""name"": ""MuhammadSodiqMarupov/buxoro-shahar"",
  ""url"": ""https://api.github.com/repos/MuhammadSodiqMarupov/buxoro-shahar""
}",1674051830000000
"{
  ""id"": 470064146,
  ""name"": ""KimYangOfCat/TypeScript-Website"",
  ""url"": ""https://api.github.com/repos/KimYangOfCat/TypeScript-Website""
}",1674027782000000
"{
  ""id"": 584434355,
  ""name"": ""Satch5918/minga-back"",
  ""url"": ""https://api.github.com/repos/Satch5918/minga-back""
}",1674079
Query:
--Description: 4) List all distinct repositories that had a PullRequestEvent  
--on 18-Jan-2023.
SELECT DISTINCT
  r.value::VARIANT:"name"::STRING AS "repo_name"
FROM (
  SELECT "repo"
  FROM "GITHUB_REPOS_DATE"."YEAR"."_2023"
  WHERE "type" = 'PullRequestEvent'
    AND "created_at" BETWEEN 1674009600000000 AND 1674095999000000
) t,
LATERAL FLATTEN (input => t."repo") r
LIMIT 20;
Answer:
repo_name
""
Query:
--Description: 5) Inspect the structure of the "language" column in
--GITHUB_REPOS.LANGUAGES for a few repositories (JSON object with
--language-byte pairs is expected).
SELECT
  "repo_name",
  "language"
FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES"
WHERE "language" IS NOT NULL
  AND "language" NOT IN ('[]', '')
LIMIT 20;
Answer:
repo_name,language
nerocool996/sortMulti,"[
  {
    ""bytes"": 5202,
    ""name"": ""C""
  }
]"
Teyras/flowly,"[
  {
    ""bytes"": 56747,
    ""name"": ""C""
  }
]"
lumag/nemu,"[
  {
    ""bytes"": 30170,
    ""name"": ""C""
  }
]"
Mehanik/i2c-servo-controller,"[
  {
    ""bytes"": 25411,
    ""name"": ""C""
  }
]"
moonmilk/snowblossoms,"[
  {
    ""bytes"": 3967,
    ""name"": ""C""
  }
]"
alattari/lab4,"[
  {
    ""bytes"": 6399,
    ""name"": ""C""
  }
]"
andys/mozzio,"[
  {
    ""byt
Query:
--Description: 7) Derive the “primary” language (max bytes) for every repo,
--using correct JSON-field extraction instead of f.key / f.value casting.
WITH lang_pairs AS (
    SELECT
        l."repo_name",
        f.value:"name"::STRING  AS "language",
        f.value:"bytes"::NUMBER AS "bytes"
    FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES" l,
         LATERAL FLATTEN(input => l."language") f
)
SELECT
    lp."repo_name",
    lp."language" AS "primary_language"
FROM lang_pairs lp
QUALIFY ROW_NUMBER() OVER (PARTITION BY lp."repo_name"
                           ORDER BY lp."bytes" DESC) = 1
LIMIT 20
Answer:
repo_name,primary_language
diapluscn/taijiaward-theme,PHP
jmcjacob/EmotionalExpressionClassifier,Python
jairov4/lt-web-server,D
biclon/Twitter-Typeahead.js-.NET-Demo,JavaScript
typesettin/stylie,CSS
chfoo/pbrchase,HTML
brethash/magmi-datapump,PHP
stevecrozz/test-directory-client,JavaScript
lichenq/dubbo,Java
gene-hightower/hbxx,C++
baileyspace/Beatles-Live-Sandbox,PHP
Fab-IT-ApS/dokku-dokuwiki,Shell
claytonbrown/dokku,Shell
zzhopen/SwipeRefreshLayout,Java
Query:
--Description: 8) Count PullRequestEvents per repository on 18-Jan-2023.
WITH pr_20230118 AS (
    SELECT
        r.value::VARIANT:"name"::STRING AS "repo_name"
    FROM "GITHUB_REPOS_DATE"."YEAR"."_2023" e,
         LATERAL FLATTEN(input => e."repo") r
    WHERE e."type" = 'PullRequestEvent'
      AND e."created_at" BETWEEN 1674009600000000 AND 1674095999000000
)
SELECT
    "repo_name",
    COUNT(*) AS "pull_request_events"
FROM pr_20230118
GROUP BY "repo_name"
LIMIT 20
Answer:
repo_name,pull_request_events
,13185
Task: Which primary programming languages, determined by the highest number of bytes in each repository, had at least 100 PullRequestEvents on January 18, 2023 across all their repositories?

Please think step by step and answer only one complete SQL in snowflake dialect in ```sql``` format.
SQL usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: The table structure information is ({database name: {schema name: [table name]}}): 
{'GITHUB_REPOS_DATE': {'GITHUB_REPOS': ['SAMPLE_FILES', 'LANGUAGES', 'LICENSES', 'SAMPLE_CONTENTS', 'SAMPLE_COMMITS', 'SAMPLE_REPOS'], 'YEAR': ['_2016', '_2016', '_2017', '_2019', '_2011', '_2014', '_2022', '_2023', '_2012', '_2018', '_2013', '_2015', '_2020', '_2021']}}

When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
If the task description does not specify the number of decimal places, retain all decimals to four places.

[Self-refine]
2025-05-07 01:56:50 - Thread-29 (execute) - INFO - [Try to run SQL in self-refine]
```sql
WITH pr_events AS (   -- Pull-request events on 18-Jan-2023 (UTC)
    SELECT
        "repo":"name"::STRING AS "repo_name"
    FROM "GITHUB_REPOS_DATE"."YEAR"."_2023"
    WHERE "type" = 'PullRequestEvent'
      AND "created_at" BETWEEN 1674009600000000        -- 2023-01-18 00:00:00
                          AND 1674095999000000        -- 2023-01-18 23:59:59
),                                                     
primary_language AS (   -- primary language for every repository
    SELECT
        l."repo_name",
        f.value:"name"::STRING  AS "language"
    FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES" l,
         LATERAL FLATTEN(input => l."language") f
    QUALIFY ROW_NUMBER() OVER (PARTITION BY l."repo_name"
                               ORDER BY f.value:"bytes"::NUMBER DESC) = 1
)
SELECT
    pl."language"                         AS "primary_language",
    COUNT(*)                              AS "pull_request_events"
FROM pr_events  pe
JOIN primary_language pl
  ON pe."repo_name" = pl."repo_name"
GROUP BY pl."language"
HAVING COUNT(*) >= 100
ORDER BY "pull_request_events" DESC NULLS LAST;
```
[Try to run SQL in self-refine]
2025-05-07 01:56:52 - Thread-29 (execute) - INFO - itercount: 1
2025-05-07 01:56:52 - Thread-29 (execute) - INFO - [Self-refine]
Input sql:
WITH pr_events AS (   -- Pull-request events on 18-Jan-2023 (UTC)
    SELECT
        "repo":"name"::STRING AS "repo_name"
    FROM "GITHUB_REPOS_DATE"."YEAR"."_2023"
    WHERE "type" = 'PullRequestEvent'
      AND "created_at" BETWEEN 1674009600000000        -- 2023-01-18 00:00:00
                          AND 1674095999000000        -- 2023-01-18 23:59:59
),                                                     
primary_language AS (   -- primary language for every repository
    SELECT
        l."repo_name",
        f.value:"name"::STRING  AS "language"
    FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES" l,
         LATERAL FLATTEN(input => l."language") f
    QUALIFY ROW_NUMBER() OVER (PARTITION BY l."repo_name"
                               ORDER BY f.value:"bytes"::NUMBER DESC) = 1
)
SELECT
    pl."language"                         AS "primary_language",
    COUNT(*)                              AS "pull_request_events"
FROM pr_events  pe
JOIN primary_language pl
  ON pe."repo_name" = pl."repo_name"
GROUP BY pl."language"
HAVING COUNT(*) >= 100
ORDER BY "pull_request_events" DESC NULLS LAST;
The error information is:
No data found for the specified query.

Please correct it and output only 1 complete SQL query.
[Self-refine]
2025-05-07 01:57:15 - Thread-29 (execute) - INFO - [Try to run SQL in self-refine]
```sql
WITH pr_events AS (               -- Pull-request events on 18-Jan-2023 (UTC)
    SELECT
        TRY_PARSE_JSON("repo"):"name"::STRING AS "repo_name"
    FROM "GITHUB_REPOS_DATE"."YEAR"."_2023"
    WHERE "type" = 'PullRequestEvent'
      AND "created_at" BETWEEN 1674009600000000      -- 2023-01-18 00:00:00
                          AND 1674095999000000      -- 2023-01-18 23:59:59
      AND TRY_PARSE_JSON("repo"):"name" IS NOT NULL
),                                                  
primary_language AS (        -- most-bytes language for every repo
    SELECT
        l."repo_name",
        f.value:"name"::STRING  AS "language"
    FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES" l,
         LATERAL FLATTEN(input => l."language") f
    QUALIFY ROW_NUMBER() OVER (PARTITION BY l."repo_name"
                               ORDER BY f.value:"bytes"::NUMBER DESC) = 1
)
SELECT
    pl."language"           AS "primary_language",
    COUNT(*)                AS "pull_request_events"
FROM pr_events  pe
JOIN primary_language pl
  ON pe."repo_name" = pl."repo_name"
GROUP BY pl."language"
HAVING COUNT(*) >= 100
ORDER BY "pull_request_events" DESC NULLS LAST;
```
[Try to run SQL in self-refine]
2025-05-07 01:57:18 - Thread-29 (execute) - INFO - itercount: 2
2025-05-07 01:57:18 - Thread-29 (execute) - INFO - [Self-refine]
Input sql:
WITH pr_events AS (               -- Pull-request events on 18-Jan-2023 (UTC)
    SELECT
        TRY_PARSE_JSON("repo"):"name"::STRING AS "repo_name"
    FROM "GITHUB_REPOS_DATE"."YEAR"."_2023"
    WHERE "type" = 'PullRequestEvent'
      AND "created_at" BETWEEN 1674009600000000      -- 2023-01-18 00:00:00
                          AND 1674095999000000      -- 2023-01-18 23:59:59
      AND TRY_PARSE_JSON("repo"):"name" IS NOT NULL
),                                                  
primary_language AS (        -- most-bytes language for every repo
    SELECT
        l."repo_name",
        f.value:"name"::STRING  AS "language"
    FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES" l,
         LATERAL FLATTEN(input => l."language") f
    QUALIFY ROW_NUMBER() OVER (PARTITION BY l."repo_name"
                               ORDER BY f.value:"bytes"::NUMBER DESC) = 1
)
SELECT
    pl."language"           AS "primary_language",
    COUNT(*)                AS "pull_request_events"
FROM pr_events  pe
JOIN primary_language pl
  ON pe."repo_name" = pl."repo_name"
GROUP BY pl."language"
HAVING COUNT(*) >= 100
ORDER BY "pull_request_events" DESC NULLS LAST;
The error information is:
No data found for the specified query.

Please correct it and output only 1 complete SQL query.
[Self-refine]
2025-05-07 01:59:53 - Thread-29 (execute) - INFO - [Try to run SQL in self-refine]
```sql
WITH pr_events AS (          -- Pull-request events on 18-Jan-2023 (UTC)
    SELECT
        "repo":"name"::STRING AS "repo_name"
    FROM "GITHUB_REPOS_DATE"."YEAR"."_2023"
    WHERE "type" = 'PullRequestEvent'
      AND "created_at" BETWEEN 1674009600000000      -- 2023-01-18 00:00:00
                          AND 1674095999000000      -- 2023-01-18 23:59:59
      AND "repo":"name" IS NOT NULL
),                                                  
primary_language AS (       -- main language (max bytes) for each repository
    SELECT
        l."repo_name",
        f.value:"name"::STRING AS "language"
    FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES" l,
         LATERAL FLATTEN(input => l."language") f
    QUALIFY ROW_NUMBER() OVER (PARTITION BY l."repo_name"
                               ORDER BY f.value:"bytes"::NUMBER DESC) = 1
)
SELECT
    pl."language"        AS "primary_language",
    COUNT(*)             AS "pull_request_events"
FROM pr_events  pe
JOIN primary_language pl
  ON pe."repo_name" = pl."repo_name"
GROUP BY pl."language"
HAVING COUNT(*) >= 100
ORDER BY "pull_request_events" DESC NULLS LAST;
```
[Try to run SQL in self-refine]
2025-05-07 01:59:54 - Thread-29 (execute) - INFO - itercount: 3
2025-05-07 01:59:54 - Thread-29 (execute) - INFO - [Self-refine]
Input sql:
WITH pr_events AS (          -- Pull-request events on 18-Jan-2023 (UTC)
    SELECT
        "repo":"name"::STRING AS "repo_name"
    FROM "GITHUB_REPOS_DATE"."YEAR"."_2023"
    WHERE "type" = 'PullRequestEvent'
      AND "created_at" BETWEEN 1674009600000000      -- 2023-01-18 00:00:00
                          AND 1674095999000000      -- 2023-01-18 23:59:59
      AND "repo":"name" IS NOT NULL
),                                                  
primary_language AS (       -- main language (max bytes) for each repository
    SELECT
        l."repo_name",
        f.value:"name"::STRING AS "language"
    FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES" l,
         LATERAL FLATTEN(input => l."language") f
    QUALIFY ROW_NUMBER() OVER (PARTITION BY l."repo_name"
                               ORDER BY f.value:"bytes"::NUMBER DESC) = 1
)
SELECT
    pl."language"        AS "primary_language",
    COUNT(*)             AS "pull_request_events"
FROM pr_events  pe
JOIN primary_language pl
  ON pe."repo_name" = pl."repo_name"
GROUP BY pl."language"
HAVING COUNT(*) >= 100
ORDER BY "pull_request_events" DESC NULLS LAST;
The error information is:
No data found for the specified query.

Please correct it and output only 1 complete SQL query.
[Self-refine]
2025-05-07 02:01:36 - Thread-29 (execute) - INFO - [Try to run SQL in self-refine]
```sql
/* ---------------------------------------------------------------------------
   Primary languages that accumulated ≥100 PullRequestEvents
   on 18-Jan-2023 (UTC).  The query
   • extracts the repository name from the event record (handles either a true
     VARIANT object or a stringified-JSON blob),
   • determines each repository’s primary language (largest byte count),
   • counts PR-events per language, and
   • keeps only languages with at least 100 such events.
--------------------------------------------------------------------------- */
WITH pr_events AS (   -- Pull-request events on 2023-01-18
    SELECT
        COALESCE(                                   -- handle both data shapes
            "repo":"name"::STRING,                  --   repo stored as object
            TRY_PARSE_JSON("repo"):"name"::STRING   --   repo stored as string
        ) AS repo_name
    FROM "GITHUB_REPOS_DATE"."YEAR"."_2023"
    WHERE "type" = 'PullRequestEvent'
      AND "created_at" BETWEEN 1674009600000000     -- 2023-01-18 00:00:00 UTC
                          AND 1674095999000000     -- 2023-01-18 23:59:59 UTC
      AND repo_name IS NOT NULL
),                                                
primary_language AS (  -- dominant language per repository
    SELECT
        l."repo_name",
        f.value:"name"::STRING  AS language
    FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES" l,
         LATERAL FLATTEN(input => l."language") f
    QUALIFY ROW_NUMBER() OVER (PARTITION BY l."repo_name"
                               ORDER BY f.value:"bytes"::NUMBER DESC) = 1
)
SELECT
    pl.language                    AS primary_language,
    COUNT(*)                       AS pull_request_events
FROM pr_events  pe
JOIN primary_language pl
      ON UPPER(pe.repo_name) = UPPER(pl.repo_name)   -- case-insensitive match
GROUP BY pl.language
HAVING COUNT(*) >= 100
ORDER BY pull_request_events DESC NULLS LAST;
```
[Try to run SQL in self-refine]
2025-05-07 02:01:36 - Thread-29 (execute) - INFO - itercount: 4
2025-05-07 02:01:36 - Thread-29 (execute) - INFO - [Self-refine]
Input sql:
/* ---------------------------------------------------------------------------
   Primary languages that accumulated ≥100 PullRequestEvents
   on 18-Jan-2023 (UTC).  The query
   • extracts the repository name from the event record (handles either a true
     VARIANT object or a stringified-JSON blob),
   • determines each repository’s primary language (largest byte count),
   • counts PR-events per language, and
   • keeps only languages with at least 100 such events.
--------------------------------------------------------------------------- */
WITH pr_events AS (   -- Pull-request events on 2023-01-18
    SELECT
        COALESCE(                                   -- handle both data shapes
            "repo":"name"::STRING,                  --   repo stored as object
            TRY_PARSE_JSON("repo"):"name"::STRING   --   repo stored as string
        ) AS repo_name
    FROM "GITHUB_REPOS_DATE"."YEAR"."_2023"
    WHERE "type" = 'PullRequestEvent'
      AND "created_at" BETWEEN 1674009600000000     -- 2023-01-18 00:00:00 UTC
                          AND 1674095999000000     -- 2023-01-18 23:59:59 UTC
      AND repo_name IS NOT NULL
),                                                
primary_language AS (  -- dominant language per repository
    SELECT
        l."repo_name",
        f.value:"name"::STRING  AS language
    FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES" l,
         LATERAL FLATTEN(input => l."language") f
    QUALIFY ROW_NUMBER() OVER (PARTITION BY l."repo_name"
                               ORDER BY f.value:"bytes"::NUMBER DESC) = 1
)
SELECT
    pl.language                    AS primary_language,
    COUNT(*)                       AS pull_request_events
FROM pr_events  pe
JOIN primary_language pl
      ON UPPER(pe.repo_name) = UPPER(pl.repo_name)   -- case-insensitive match
GROUP BY pl.language
HAVING COUNT(*) >= 100
ORDER BY pull_request_events DESC NULLS LAST;
The error information is:
{'status': 'error', 'error_msg': "##ERROR##000904 (42000): SQL compilation error: error line 27 at position 37\ninvalid identifier 'PL.REPO_NAME'"}
Please correct it and output only 1 complete SQL query.
[Self-refine]
2025-05-07 02:02:12 - Thread-29 (execute) - INFO - [Try to run SQL in self-refine]
```sql
/*---------------------------------------------------------------------------
  Primary languages that accumulated ≥100 PullRequestEvents
  on 18-Jan-2023 (UTC)
---------------------------------------------------------------------------*/
WITH pr_events AS (        -- Pull-request events on 2023-01-18
    SELECT
        COALESCE(                                   -- handle both data shapes
            "repo":"name"::STRING,                  --   repo stored as object
            TRY_PARSE_JSON("repo"):"name"::STRING   --   repo stored as string
        ) AS repo_name
    FROM "GITHUB_REPOS_DATE"."YEAR"."_2023"
    WHERE "type" = 'PullRequestEvent'
      AND "created_at" BETWEEN 1674009600000000     -- 2023-01-18 00:00:00 UTC
                          AND 1674095999000000     -- 2023-01-18 23:59:59 UTC
      AND repo_name IS NOT NULL
),
primary_language AS (      -- dominant language per repository
    SELECT
        l."repo_name"  AS repo_name,                -- make identifier unquoted
        f.value:"name"::STRING AS language
    FROM "GITHUB_REPOS_DATE"."GITHUB_REPOS"."LANGUAGES" l,
         LATERAL FLATTEN(input => l."language") f
    QUALIFY ROW_NUMBER() OVER (PARTITION BY l."repo_name"
                               ORDER BY f.value:"bytes"::NUMBER DESC) = 1
)
SELECT
    pl.language        AS primary_language,
    COUNT(*)           AS pull_request_events
FROM pr_events      pe
JOIN primary_language pl
      ON pe.repo_name = pl.repo_name               -- case preserved, exact match
GROUP BY pl.language
HAVING COUNT(*) >= 100
ORDER BY pull_request_events DESC NULLS LAST;
```
[Try to run SQL in self-refine]
2025-05-07 02:02:15 - Thread-29 (execute) - INFO - Total iteration counts: 5
2025-05-07 02:02:15 - Thread-29 (execute) - INFO - Max Iter, remove file
