2025-05-07 03:27:06 - Thread-591 (execute) - INFO - [Exploration]
```sql
--Description: Inspect a sample of rows to understand the overall content of TOP_RISING_TERMS
SELECT * 
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS" 
LIMIT 20;
```

```sql
--Description: Find the most recent "refresh_date" recorded in the dataset
SELECT MAX("refresh_date") AS "max_refresh_date"
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
LIMIT 20;
```

```sql
--Description: List all distinct "week" values associated with the most-recent refresh_date (ordered newest first)
SELECT DISTINCT "week"
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                        FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")
ORDER BY "week" DESC
LIMIT 20;
```

```sql
--Description: Identify the single latest "week" tied to the most-recent refresh_date
SELECT MAX("week") AS "latest_week"
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                        FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")
LIMIT 20;
```

```sql
--Description: Calculate the target week that is exactly one year (52 weeks) prior to the latest_week
SELECT DATEADD(week, -52, 
       (SELECT MAX("week") 
        FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
        WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                                FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"))) 
       AS "one_year_prior_week"
LIMIT 20;
```

```sql
--Description: Display every record that belongs to that one-year-prior week (for checking multiple DMAs / terms)
SELECT *
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
WHERE "week" = (
      SELECT DATEADD(week, -52, 
             (SELECT MAX("week") 
              FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
              WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                                      FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")))
)
LIMIT 20;
```

```sql
--Description: Determine the minimum (best) rank that appears during that one-year-prior week
SELECT MIN("rank") AS "top_rank"
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
WHERE "week" = (
      SELECT DATEADD(week, -52, 
             (SELECT MAX("week") 
              FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
              WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                                      FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")))
)
LIMIT 20;
```

```sql
--Description: Retrieve the rising term(s) that hold that minimum rank in the one-year-prior week
SELECT "term", "rank", "dma_name", "dma_id", "score", "percent_gain"
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
WHERE "week" = (
      SELECT DATEADD(week, -52, 
             (SELECT MAX("week") 
              FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
              WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                                      FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")))
)
AND "rank" = (
      SELECT MIN("rank")
      FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
      WHERE "week" = (
            SELECT DATEADD(week, -52, 
                   (SELECT MAX("week") 
                    FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
                    WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                                            FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")))
      )
)
LIMIT 20;
```

```sql
--Description: Provide a distilled distinct list of only the top-ranked rising term(s) for that week
SELECT DISTINCT "term" 
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
WHERE "week" = (
      SELECT DATEADD(week, -52, 
             (SELECT MAX("week") 
              FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
              WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                                      FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")))
)
AND "rank" = (
      SELECT MIN("rank")
      FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
      WHERE "week" = (
            SELECT DATEADD(week, -52, 
                   (SELECT MAX("week") 
                    FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
                    WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                                            FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")))
      )
)
LIMIT 20;
```

```sql
--Description: Summarize (latest_refresh_date, latest_week, one_year_prior_week, top_rank, top_rising_term) in one view
WITH meta AS (
    SELECT 
        (SELECT MAX("refresh_date") FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS") AS "latest_refresh_date",
        (SELECT MAX("week") 
         FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
         WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                                 FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")) AS "latest_week"
),
target_week AS (
    SELECT DATEADD(week, -52, "latest_week") AS "one_year_prior_week"
    FROM meta
),
top_rank AS (
    SELECT MIN("rank") AS "top_rank"
    FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS", target_week
    WHERE "week" = target_week."one_year_prior_week"
)
SELECT 
    meta."latest_refresh_date",
    meta."latest_week",
    target_week."one_year_prior_week",
    trt."term"        AS "top_rising_term",
    trt."rank"        AS "top_rank",
    trt."dma_name",
    trt."dma_id",
    trt."percent_gain",
    trt."score"
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS" trt,
     meta,
     target_week,
     top_rank
WHERE trt."week" = target_week."one_year_prior_week"
  AND trt."rank" = top_rank."top_rank"
LIMIT 20;
```
[Exploration]
2025-05-07 03:27:06 - Thread-591 (execute) - INFO - [Try to execute]
--Description: Inspect a sample of rows to understand the overall content of TOP_RISING_TERMS
SELECT * 
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS" 
LIMIT 20;
[Try to execute]
2025-05-07 03:27:08 - Thread-591 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Inspect a sample of rows to understand the overall content of TOP_RISING_TERMS
SELECT * 
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS" 
LIMIT 20;
Results:
dma_id,term,week,score,rank,percent_gain,refresh_date,dma_name
500,aaron hernandez,2019-09-15,,22,150,2024-09-20,Portland-Auburn ME
500,aaron hernandez,2019-09-22,,22,150,2024-09-20,Portland-Auburn ME
500,aaron hernandez,2019-09-29,,22,150,2024-09-20,Portland-Auburn ME
500,aaron hernandez,2019-10-20,,22,150,2024-09-20,Portland-Auburn ME
500,aaron hernandez,2019-10-27,,22,150,2024-09-20,Portland-Auburn ME

[Successfully executed]
2025-05-07 03:27:08 - Thread-591 (execute) - INFO - [Try to execute]
--Description: Find the most recent "refresh_date" recorded in the dataset
SELECT MAX("refresh_date") AS "max_refresh_date"
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
LIMIT 20;
[Try to execute]
2025-05-07 03:27:09 - Thread-591 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Find the most recent "refresh_date" recorded in the dataset
SELECT MAX("refresh_date") AS "max_refresh_date"
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
LIMIT 20;
Results:
max_refresh_date
2024-10-17

[Successfully executed]
2025-05-07 03:27:09 - Thread-591 (execute) - INFO - [Try to execute]
--Description: List all distinct "week" values associated with the most-recent refresh_date (ordered newest first)
SELECT DISTINCT "week"
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                        FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")
ORDER BY "week" DESC
LIMIT 20;
[Try to execute]
2025-05-07 03:27:09 - Thread-591 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: List all distinct "week" values associated with the most-recent refresh_date (ordered newest first)
SELECT DISTINCT "week"
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                        FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")
ORDER BY "week" DESC
LIMIT 20;
Results:
week
2024-10-13
2024-10-06
2024-09-29
2024-09-22
2024-09-15
2024-09-08
2024-09-01
2024-08-25
2024-08-18
2024-08-11
2024-08-04
2024-07-28
2024-07-21
2024-07-14
2024-07-07
2024-06-30
2024-06-23
2024-06-16

[Successfully executed]
2025-05-07 03:27:09 - Thread-591 (execute) - INFO - [Try to execute]
--Description: Identify the single latest "week" tied to the most-recent refresh_date
SELECT MAX("week") AS "latest_week"
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                        FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")
LIMIT 20;
[Try to execute]
2025-05-07 03:27:10 - Thread-591 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Identify the single latest "week" tied to the most-recent refresh_date
SELECT MAX("week") AS "latest_week"
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                        FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")
LIMIT 20;
Results:
latest_week
2024-10-13

[Successfully executed]
2025-05-07 03:27:10 - Thread-591 (execute) - INFO - [Try to execute]
--Description: Calculate the target week that is exactly one year (52 weeks) prior to the latest_week
SELECT DATEADD(week, -52, 
       (SELECT MAX("week") 
        FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
        WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                                FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"))) 
       AS "one_year_prior_week"
LIMIT 20;
[Try to execute]
2025-05-07 03:27:10 - Thread-591 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Calculate the target week that is exactly one year (52 weeks) prior to the latest_week
SELECT DATEADD(week, -52, 
       (SELECT MAX("week") 
        FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
        WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                                FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"))) 
       AS "one_year_prior_week"
LIMIT 20;
Results:
one_year_prior_week
2023-10-15

[Successfully executed]
2025-05-07 03:27:10 - Thread-591 (execute) - INFO - [Try to execute]
--Description: Display every record that belongs to that one-year-prior week (for checking multiple DMAs / terms)
SELECT *
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
WHERE "week" = (
      SELECT DATEADD(week, -52, 
             (SELECT MAX("week") 
              FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
              WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                                      FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")))
)
LIMIT 20;
[Try to execute]
2025-05-07 03:27:11 - Thread-591 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Display every record that belongs to that one-year-prior week (for checking multiple DMAs / terms)
SELECT *
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
WHERE "week" = (
      SELECT DATEADD(week, -52, 
             (SELECT MAX("week") 
              FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
              WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                                      FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")))
)
LIMIT 20;
Results:
dma_id,term,week,score,rank,percent_gain,refresh_date,dma_name
500,aaron rodgers,2023-10-15,,21,450,2024-10-16,Portland-Auburn ME
669,jets vs vikings,2023-10-15,,11,1650,2024-10-08,Madison WI
500,49ers vs seahawks,2023-10-15,,10,600,2024-10-13,Portland-Auburn ME
517,49ers vs seahawks,2023-10-15,,10,600,2024-10-13,Charlotte NC
517,49ers vs rams,2023-10-15,,4,2000,2024-09-24,Charlotte NC

[Successfully executed]
2025-05-07 03:27:11 - Thread-591 (execute) - INFO - [Try to execute]
--Description: Determine the minimum (best) rank that appears during that one-year-prior week
SELECT MIN("rank") AS "top_rank"
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
WHERE "week" = (
      SELECT DATEADD(week, -52, 
             (SELECT MAX("week") 
              FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
              WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                                      FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")))
)
LIMIT 20;
[Try to execute]
2025-05-07 03:27:12 - Thread-591 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Determine the minimum (best) rank that appears during that one-year-prior week
SELECT MIN("rank") AS "top_rank"
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
WHERE "week" = (
      SELECT DATEADD(week, -52, 
             (SELECT MAX("week") 
              FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
              WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                                      FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")))
)
LIMIT 20;
Results:
top_rank
1

[Successfully executed]
2025-05-07 03:27:12 - Thread-591 (execute) - INFO - [Try to execute]
--Description: Retrieve the rising term(s) that hold that minimum rank in the one-year-prior week
SELECT "term", "rank", "dma_name", "dma_id", "score", "percent_gain"
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
WHERE "week" = (
      SELECT DATEADD(week, -52, 
             (SELECT MAX("week") 
              FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
              WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                                      FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")))
)
AND "rank" = (
      SELECT MIN("rank")
      FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
      WHERE "week" = (
            SELECT DATEADD(week, -52, 
                   (SELECT MAX("week") 
                    FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
                    WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                                            FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")))
      )
)
LIMIT 20;
[Try to execute]
2025-05-07 03:27:13 - Thread-591 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Retrieve the rising term(s) that hold that minimum rank in the one-year-prior week
SELECT "term", "rank", "dma_name", "dma_id", "score", "percent_gain"
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
WHERE "week" = (
      SELECT DATEADD(week, -52, 
             (SELECT MAX("week") 
              FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
              WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                                      FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")))
)
AND "rank" = (
      SELECT MIN("rank")
      FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
      WHERE "week" = (
            SELECT DATEADD(week, -52, 
                   (SELECT MAX("week") 
                    FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
                    WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                                            FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")))
      )
)
LIMIT 20;
Results:
term,rank,dma_name,dma_id,score,percent_gain
tropical storm warning,1,Charlotte NC,517,,4550
tropical storm warning,1,Greenville-New Bern-Washington NC,545,,4550
tropical storm warning,1,Wilmington NC,550,,4550
tropical storm warning,1,Dothan AL,606,,4550
tropical storm warning,1,Baltimore MD,512,,4550
tropical storm warning,1,Atlanta GA,524,,4550
tropical storm warning,1,Marquette MI,553,,4550
tropical storm warning,1,Rapid City SD,764,,4550

[Successfully executed]
2025-05-07 03:27:13 - Thread-591 (execute) - INFO - [Try to execute]
--Description: Provide a distilled distinct list of only the top-ranked rising term(s) for that week
SELECT DISTINCT "term" 
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
WHERE "week" = (
      SELECT DATEADD(week, -52, 
             (SELECT MAX("week") 
              FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
              WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                                      FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")))
)
AND "rank" = (
      SELECT MIN("rank")
      FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
      WHERE "week" = (
            SELECT DATEADD(week, -52, 
                   (SELECT MAX("week") 
                    FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
                    WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                                            FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")))
      )
)
LIMIT 20;
[Try to execute]
2025-05-07 03:27:15 - Thread-591 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Provide a distilled distinct list of only the top-ranked rising term(s) for that week
SELECT DISTINCT "term" 
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
WHERE "week" = (
      SELECT DATEADD(week, -52, 
             (SELECT MAX("week") 
              FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
              WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                                      FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")))
)
AND "rank" = (
      SELECT MIN("rank")
      FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
      WHERE "week" = (
            SELECT DATEADD(week, -52, 
                   (SELECT MAX("week") 
                    FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
                    WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                                            FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")))
      )
)
LIMIT 20;
Results:
term
john amos
seahawks vs 49ers
how to register to vote in the us
witherspoon meaning
hurricane helene
tropical storm warning
pete rose
buccaneers vs falcons
alabama vs vanderbilt
venus de milo
ravens vs cowboys
national daughters day
hurricane milton
aidan hutchinson
ryan routh
liam payne
emerson romero
bills vs jets
chiefs vs falcons
skrrt

[Successfully executed]
2025-05-07 03:27:15 - Thread-591 (execute) - INFO - [Try to execute]
--Description: Summarize (latest_refresh_date, latest_week, one_year_prior_week, top_rank, top_rising_term) in one view
WITH meta AS (
    SELECT 
        (SELECT MAX("refresh_date") FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS") AS "latest_refresh_date",
        (SELECT MAX("week") 
         FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
         WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                                 FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")) AS "latest_week"
),
target_week AS (
    SELECT DATEADD(week, -52, "latest_week") AS "one_year_prior_week"
    FROM meta
),
top_rank AS (
    SELECT MIN("rank") AS "top_rank"
    FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS", target_week
    WHERE "week" = target_week."one_year_prior_week"
)
SELECT 
    meta."latest_refresh_date",
    meta."latest_week",
    target_week."one_year_prior_week",
    trt."term"        AS "top_rising_term",
    trt."rank"        AS "top_rank",
    trt."dma_name",
    trt."dma_id",
    trt."percent_gain",
    trt."score"
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS" trt,
     meta,
     target_week,
     top_rank
WHERE trt."week" = target_week."one_year_prior_week"
  AND trt."rank" = top_rank."top_rank"
LIMIT 20;
[Try to execute]
2025-05-07 03:27:16 - Thread-591 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Summarize (latest_refresh_date, latest_week, one_year_prior_week, top_rank, top_rising_term) in one view
WITH meta AS (
    SELECT 
        (SELECT MAX("refresh_date") FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS") AS "latest_refresh_date",
        (SELECT MAX("week") 
         FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
         WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                                 FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")) AS "latest_week"
),
target_week AS (
    SELECT DATEADD(week, -52, "latest_week") AS "one_year_prior_week"
    FROM meta
),
top_rank AS (
    SELECT MIN("rank") AS "top_rank"
    FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS", target_week
    WHERE "week" = target_week."one_year_prior_week"
)
SELECT 
    meta."latest_refresh_date",
    meta."latest_week",
    target_week."one_year_prior_week",
    trt."term"        AS "top_rising_term",
    trt."rank"        AS "top_rank",
    trt."dma_name",
    trt."dma_id",
    trt."percent_gain",
    trt."score"
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS" trt,
     meta,
     target_week,
     top_rank
WHERE trt."week" = target_week."one_year_prior_week"
  AND trt."rank" = top_rank."top_rank"
LIMIT 20;
Results:
latest_refresh_date,latest_week,one_year_prior_week,top_rising_term,top_rank,dma_name,dma_id,percent_gain,score
2024-10-17,2024-10-13,2023-10-15,hurricane helene,1,Chattanooga TN,575,3250,
2024-10-17,2024-10-13,2023-10-15,hurricane helene,1,Dothan AL,606,3250,
2024-10-17,2024-10-13,2023-10-15,hurricane helene,1,Marquette MI,553,3250,
2024-10-17,2024-10-13,2023-10-15,hurricane helene,1,Huntsville-Decatur (Florence) AL,691,3250,

[Successfully executed]
2025-05-07 03:27:16 - Thread-591 (execute) - INFO - itercount: 0
2025-05-07 03:27:16 - Thread-591 (execute) - INFO - [Self-refine]
Table full name: GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_TERMS
Column name: week Type: DATE
Column name: term Type: TEXT
Column name: rank Type: NUMBER
Column name: score Type: NUMBER
Column name: refresh_date Type: DATE
Column name: dma_id Type: NUMBER
Column name: dma_name Type: TEXT
Sample rows:
[{'dma_name': 'Portland-Auburn ME', 'dma_id': 500, 'term': 'AC Milan', 'week': '2019-11-17', 'score': None, 'rank': 23, 'refresh_date': '2024-09-28'}, {'dma_name': 'Portland-Auburn ME', 'dma_id': 500, 'term': 'AC Milan', 'week': '2019-12-15', 'score': None, 'rank': 23, 'refresh_date': '2024-09-28'}, {'dma_name': 'Portland-Auburn ME', 'dma_id': 500, 'term': 'AC Milan', 'week': '2020-02-02', 'score': None, 'rank': 23, 'refresh_date': '2024-09-28'}, {'dma_name': 'Portland-Auburn ME', 'dma_id': 500, 'term': 'AC Milan', 'week': '2020-02-09', 'score': None, 'rank': 23, 'refresh_date': '2024-09-28'}, {'dma_name': 'Portland-Auburn ME', 'dma_id': 500, 'term': 'AC Milan', 'week': '2020-03-22', 'score': None, 'rank': 23, 'refresh_date': '2024-09-28'}]

--------------------------------------------------
Table full name: GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
Column name: refresh_date Type: DATE
Column name: rank Type: NUMBER
Column name: dma_name Type: TEXT
Column name: score Type: NUMBER
Column name: week Type: DATE
Column name: percent_gain Type: NUMBER
Column name: term Type: TEXT
Column name: dma_id Type: NUMBER
Sample rows:
[{'dma_id': 500, 'term': '49ers vs vikings', 'week': '2019-09-15', 'score': None, 'rank': 13, 'percent_gain': 1650, 'refresh_date': '2024-09-17', 'dma_name': 'Portland-Auburn ME'}, {'dma_id': 500, 'term': '49ers vs vikings', 'week': '2019-11-17', 'score': None, 'rank': 13, 'percent_gain': 1650, 'refresh_date': '2024-09-17', 'dma_name': 'Portland-Auburn ME'}, {'dma_id': 500, 'term': '49ers vs vikings', 'week': '2019-11-24', 'score': None, 'rank': 13, 'percent_gain': 1650, 'refresh_date': '2024-09-17', 'dma_name': 'Portland-Auburn ME'}, {'dma_id': 500, 'term': '49ers vs vikings', 'week': '2019-12-29', 'score': None, 'rank': 13, 'percent_gain': 1650, 'refresh_date': '2024-09-17', 'dma_name': 'Portland-Auburn ME'}, {'dma_id': 500, 'term': '49ers vs vikings', 'week': '2020-01-19', 'score': None, 'rank': 13, 'percent_gain': 1650, 'refresh_date': '2024-09-17', 'dma_name': 'Portland-Auburn ME'}]

--------------------------------------------------
Table full name: GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
Column name: rank Type: NUMBER
Column name: region_name Type: TEXT
Column name: refresh_date Type: DATE
Column name: region_code Type: TEXT
Column name: term Type: TEXT
Column name: week Type: DATE
Column name: country_name Type: TEXT
Column name: percent_gain Type: NUMBER
Column name: country_code Type: TEXT
Column name: score Type: NUMBER
Sample rows:
[{'percent_gain': 3500, 'region_name': 'Sibiu', 'term': 'gigi multescu', 'week': '2021-03-07', 'score': None, 'refresh_date': '2024-09-17', 'country_name': 'Romania', 'country_code': 'RO', 'region_code': 'RO-SB', 'rank': 10}, {'percent_gain': 3500, 'region_name': 'Sibiu', 'term': 'gigi multescu', 'week': '2021-04-04', 'score': None, 'refresh_date': '2024-09-17', 'country_name': 'Romania', 'country_code': 'RO', 'region_code': 'RO-SB', 'rank': 10}, {'percent_gain': 3500, 'region_name': 'Sibiu', 'term': 'gigi multescu', 'week': '2021-05-16', 'score': None, 'refresh_date': '2024-09-17', 'country_name': 'Romania', 'country_code': 'RO', 'region_code': 'RO-SB', 'rank': 10}, {'percent_gain': 3500, 'region_name': 'Sibiu', 'term': 'gigi multescu', 'week': '2021-05-23', 'score': None, 'refresh_date': '2024-09-17', 'country_name': 'Romania', 'country_code': 'RO', 'region_code': 'RO-SB', 'rank': 10}, {'percent_gain': 3500, 'region_name': 'Sibiu', 'term': 'gigi multescu', 'week': '2021-09-19', 'score': None, 'refresh_date': '2024-09-17', 'country_name': 'Romania', 'country_code': 'RO', 'region_code': 'RO-SB', 'rank': 10}]

--------------------------------------------------
Table full name: GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_TERMS
Column name: week Type: DATE
Column name: term Type: TEXT
Column name: rank Type: NUMBER
Column name: score Type: NUMBER
Column name: refresh_date Type: DATE
Column name: region_code Type: TEXT
Column name: region_name Type: TEXT
Column name: country_code Type: TEXT
Column name: country_name Type: TEXT
Sample rows:
[{'term': 'Galatasaray  PAOK', 'refresh_date': '2024-09-28', 'region_code': 'TR-39', 'country_code': 'TR', 'region_name': 'Kırklareli', 'week': '2022-03-13', 'score': None, 'rank': 14, 'country_name': 'Turkey'}, {'term': 'Galatasaray  PAOK', 'refresh_date': '2024-09-28', 'region_code': 'TR-39', 'country_code': 'TR', 'region_name': 'Kırklareli', 'week': '2022-11-13', 'score': None, 'rank': 14, 'country_name': 'Turkey'}, {'term': 'Galatasaray  PAOK', 'refresh_date': '2024-09-28', 'region_code': 'TR-39', 'country_code': 'TR', 'region_name': 'Kırklareli', 'week': '2023-01-01', 'score': None, 'rank': 14, 'country_name': 'Turkey'}, {'term': 'Galatasaray  PAOK', 'refresh_date': '2024-09-28', 'region_code': 'TR-39', 'country_code': 'TR', 'region_name': 'Kırklareli', 'week': '2023-01-15', 'score': None, 'rank': 14, 'country_name': 'Turkey'}, {'term': 'Galatasaray  PAOK', 'refresh_date': '2024-09-28', 'region_code': 'TR-39', 'country_code': 'TR', 'region_name': 'Kırklareli', 'week': '2023-04-02', 'score': None, 'rank': 14, 'country_name': 'Turkey'}]

--------------------------------------------------
External knowledge that might be helpful: 
None
The table structure information is ({database name: {schema name: [table name]}}): 
{'GOOGLE_TRENDS': {'GOOGLE_TRENDS': ['TOP_TERMS', 'TOP_RISING_TERMS', 'INTERNATIONAL_TOP_RISING_TERMS', 'INTERNATIONAL_TOP_TERMS']}}

Some few-shot examples after column exploration may be helpful:
Query:
--Description: Inspect a sample of rows to understand the overall content of TOP_RISING_TERMS
SELECT * 
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS" 
LIMIT 20;
Answer:
dma_id,term,week,score,rank,percent_gain,refresh_date,dma_name
500,aaron hernandez,2019-09-15,,22,150,2024-09-20,Portland-Auburn ME
500,aaron hernandez,2019-09-22,,22,150,2024-09-20,Portland-Auburn ME
500,aaron hernandez,2019-09-29,,22,150,2024-09-20,Portland-Auburn ME
500,aaron hernandez,2019-10-20,,22,150,2024-09-20,Portland-Auburn ME
500,aaron hernandez,2019-10-27,,22,150,2024-09-20,Portland-Auburn ME
Query:
--Description: Find the most recent "refresh_date" recorded in the dataset
SELECT MAX("refresh_date") AS "max_refresh_date"
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
LIMIT 20;
Answer:
max_refresh_date
2024-10-17
Query:
--Description: List all distinct "week" values associated with the most-recent refresh_date (ordered newest first)
SELECT DISTINCT "week"
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                        FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")
ORDER BY "week" DESC
LIMIT 20;
Answer:
week
2024-10-13
2024-10-06
2024-09-29
2024-09-22
2024-09-15
2024-09-08
2024-09-01
2024-08-25
2024-08-18
2024-08-11
2024-08-04
2024-07-28
2024-07-21
2024-07-14
2024-07-07
2024-06-30
2024-06-23
2024-06-16
Query:
--Description: Identify the single latest "week" tied to the most-recent refresh_date
SELECT MAX("week") AS "latest_week"
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                        FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")
LIMIT 20;
Answer:
latest_week
2024-10-13
Query:
--Description: Calculate the target week that is exactly one year (52 weeks) prior to the latest_week
SELECT DATEADD(week, -52, 
       (SELECT MAX("week") 
        FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
        WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                                FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"))) 
       AS "one_year_prior_week"
LIMIT 20;
Answer:
one_year_prior_week
2023-10-15
Query:
--Description: Display every record that belongs to that one-year-prior week (for checking multiple DMAs / terms)
SELECT *
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
WHERE "week" = (
      SELECT DATEADD(week, -52, 
             (SELECT MAX("week") 
              FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
              WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                                      FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")))
)
LIMIT 20;
Answer:
dma_id,term,week,score,rank,percent_gain,refresh_date,dma_name
500,aaron rodgers,2023-10-15,,21,450,2024-10-16,Portland-Auburn ME
669,jets vs vikings,2023-10-15,,11,1650,2024-10-08,Madison WI
500,49ers vs seahawks,2023-10-15,,10,600,2024-10-13,Portland-Auburn ME
517,49ers vs seahawks,2023-10-15,,10,600,2024-10-13,Charlotte NC
517,49ers vs rams,2023-10-15,,4,2000,2024-09-24,Charlotte NC
Query:
--Description: Determine the minimum (best) rank that appears during that one-year-prior week
SELECT MIN("rank") AS "top_rank"
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
WHERE "week" = (
      SELECT DATEADD(week, -52, 
             (SELECT MAX("week") 
              FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
              WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                                      FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")))
)
LIMIT 20;
Answer:
top_rank
1
Query:
--Description: Retrieve the rising term(s) that hold that minimum rank in the one-year-prior week
SELECT "term", "rank", "dma_name", "dma_id", "score", "percent_gain"
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
WHERE "week" = (
      SELECT DATEADD(week, -52, 
             (SELECT MAX("week") 
              FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
              WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                                      FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")))
)
AND "rank" = (
      SELECT MIN("rank")
      FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
      WHERE "week" = (
            SELECT DATEADD(week, -52, 
                   (SELECT MAX("week") 
                    FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
                    WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                                            FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")))
      )
)
LIMIT 20;
Answer:
term,rank,dma_name,dma_id,score,percent_gain
tropical storm warning,1,Charlotte NC,517,,4550
tropical storm warning,1,Greenville-New Bern-Washington NC,545,,4550
tropical storm warning,1,Wilmington NC,550,,4550
tropical storm warning,1,Dothan AL,606,,4550
tropical storm warning,1,Baltimore MD,512,,4550
tropical storm warning,1,Atlanta GA,524,,4550
tropical storm warning,1,Marquette MI,553,,4550
tropical storm warning,1,Rapid City SD,764,,4550
Query:
--Description: Provide a distilled distinct list of only the top-ranked rising term(s) for that week
SELECT DISTINCT "term" 
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
WHERE "week" = (
      SELECT DATEADD(week, -52, 
             (SELECT MAX("week") 
              FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
              WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                                      FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")))
)
AND "rank" = (
      SELECT MIN("rank")
      FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
      WHERE "week" = (
            SELECT DATEADD(week, -52, 
                   (SELECT MAX("week") 
                    FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
                    WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                                            FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")))
      )
)
LIMIT 20;
Answer:
term
john amos
seahawks vs 49ers
how to register to vote in the us
witherspoon meaning
hurricane helene
tropical storm warning
pete rose
buccaneers vs falcons
alabama vs vanderbilt
venus de milo
ravens vs cowboys
national daughters day
hurricane milton
aidan hutchinson
ryan routh
liam payne
emerson romero
bills vs jets
chiefs vs falcons
skrrt
Query:
--Description: Summarize (latest_refresh_date, latest_week, one_year_prior_week, top_rank, top_rising_term) in one view
WITH meta AS (
    SELECT 
        (SELECT MAX("refresh_date") FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS") AS "latest_refresh_date",
        (SELECT MAX("week") 
         FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS"
         WHERE "refresh_date" = (SELECT MAX("refresh_date") 
                                 FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS")) AS "latest_week"
),
target_week AS (
    SELECT DATEADD(week, -52, "latest_week") AS "one_year_prior_week"
    FROM meta
),
top_rank AS (
    SELECT MIN("rank") AS "top_rank"
    FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS", target_week
    WHERE "week" = target_week."one_year_prior_week"
)
SELECT 
    meta."latest_refresh_date",
    meta."latest_week",
    target_week."one_year_prior_week",
    trt."term"        AS "top_rising_term",
    trt."rank"        AS "top_rank",
    trt."dma_name",
    trt."dma_id",
    trt."percent_gain",
    trt."score"
FROM "GOOGLE_TRENDS"."GOOGLE_TRENDS"."TOP_RISING_TERMS" trt,
     meta,
     target_week,
     top_rank
WHERE trt."week" = target_week."one_year_prior_week"
  AND trt."rank" = top_rank."top_rank"
LIMIT 20;
Answer:
latest_refresh_date,latest_week,one_year_prior_week,top_rising_term,top_rank,dma_name,dma_id,percent_gain,score
2024-10-17,2024-10-13,2023-10-15,hurricane helene,1,Chattanooga TN,575,3250,
2024-10-17,2024-10-13,2023-10-15,hurricane helene,1,Dothan AL,606,3250,
2024-10-17,2024-10-13,2023-10-15,hurricane helene,1,Marquette MI,553,3250,
2024-10-17,2024-10-13,2023-10-15,hurricane helene,1,Huntsville-Decatur (Florence) AL,691,3250,
Task: Based on the most recent refresh date, identify the top-ranked rising search term for the week that is exactly one year prior to the latest available week in the dataset.

Please think step by step and answer only one complete SQL in snowflake dialect in ```sql``` format.
SQL usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: The table structure information is ({database name: {schema name: [table name]}}): 
{'GOOGLE_TRENDS': {'GOOGLE_TRENDS': ['TOP_TERMS', 'TOP_RISING_TERMS', 'INTERNATIONAL_TOP_RISING_TERMS', 'INTERNATIONAL_TOP_TERMS']}}

When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
If the task description does not specify the number of decimal places, retain all decimals to four places.

[Self-refine]
2025-05-07 03:28:49 - Thread-591 (execute) - INFO - [Try to run SQL in self-refine]
```sql
/* Identify the top-ranked rising search term(s) for the week exactly
   one year (52 weeks) before the latest available week in the data */
WITH latest_refresh AS (   -- most-recent refresh_date
    SELECT MAX("refresh_date") AS "latest_refresh_date"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
),
latest_week AS (           -- latest week tied to that refresh_date
    SELECT MAX("week") AS "latest_week"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
    WHERE "refresh_date" = (SELECT "latest_refresh_date" FROM latest_refresh)
),
yr_prior_week AS (         -- week exactly 52 weeks earlier
    SELECT DATEADD(week, -52, "latest_week") AS "one_year_prior_week"
    FROM latest_week
),
best_rank AS (             -- minimum (best) rank in that prior week
    SELECT MIN("rank") AS "top_rank"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
    WHERE "week" = (SELECT "one_year_prior_week" FROM yr_prior_week)
)
SELECT DISTINCT            -- top-ranked rising term(s)
       "term"              AS "top_rising_term",
       "rank",
       "week"
FROM   GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE  "week" = (SELECT "one_year_prior_week" FROM yr_prior_week)
  AND  "rank" = (SELECT "top_rank" FROM best_rank)
ORDER BY "term";
```
[Try to run SQL in self-refine]
2025-05-07 03:28:52 - Thread-591 (execute) - INFO - Total iteration counts: 0
