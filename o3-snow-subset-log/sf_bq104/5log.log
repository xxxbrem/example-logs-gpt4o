2025-05-07 03:28:26 - Thread-590 (execute) - INFO - [Exploration]
```sql
--Description: List the distinct refresh dates in the domestic rising-terms table (newest first)
SELECT DISTINCT "refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
ORDER BY "refresh_date" DESC
LIMIT 20;
```

```sql
--Description: Preview rows for the single most-recent refresh_date to see available weeks
SELECT *
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "refresh_date" = (
        SELECT MAX("refresh_date")
        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
      )
LIMIT 20;
```

```sql
--Description: Get the latest week contained in that most-recent refresh
SELECT MAX("week") AS "latest_week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "refresh_date" = (
        SELECT MAX("refresh_date")
        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
      );
```

```sql
--Description: Compute the week that is exactly one year before that latest week
SELECT DATEADD('day', -365,
        ( SELECT MAX("week")
          FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
          WHERE "refresh_date" = (
                  SELECT MAX("refresh_date")
                  FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
                )
        )
       ) AS "week_one_year_prior";
```

```sql
--Description: Show every rising-term record for that “one-year-prior” week
SELECT *
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "refresh_date" = (
        SELECT MAX("refresh_date")
        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
      )
  AND "week" = DATEADD('day', -365,
              ( SELECT MAX("week")
                FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
                WHERE "refresh_date" = (
                        SELECT MAX("refresh_date")
                        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
                      )
              )
            )
LIMIT 20;
```

```sql
--Description: Pull the top-ranked (lowest rank) rising search term for that week
SELECT "term",
       "rank",
       "dma_name",
       "dma_id"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "refresh_date" = (
        SELECT MAX("refresh_date")
        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
      )
  AND "week" = DATEADD('day', -365,
              ( SELECT MAX("week")
                FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
                WHERE "refresh_date" = (
                        SELECT MAX("refresh_date")
                        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
                      )
              )
            )
ORDER BY "rank" ASC
LIMIT 20;
```

```sql
--Description: List distinct refresh dates in the international rising-terms table
SELECT DISTINCT "refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
ORDER BY "refresh_date" DESC
LIMIT 20;
```

```sql
--Description: Preview rows for the latest international refresh_date
SELECT *
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
WHERE "refresh_date" = (
        SELECT MAX("refresh_date")
        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
      )
LIMIT 20;
```

```sql
--Description: See the newest week and its “one-year-prior” counterpart in the international set
SELECT MAX("week")                                       AS "latest_week",
       DATEADD('day', -365, MAX("week"))                 AS "week_one_year_prior"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
WHERE "refresh_date" = (
        SELECT MAX("refresh_date")
        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
      );
```

```sql
--Description: Fetch the top-ranked rising term internationally for the week one year before the latest
SELECT "term",
       "rank",
       "country_name",
       "region_name"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
WHERE "refresh_date" = (
        SELECT MAX("refresh_date")
        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
      )
  AND "week" = DATEADD('day', -365,
              ( SELECT MAX("week")
                FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
                WHERE "refresh_date" = (
                        SELECT MAX("refresh_date")
                        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
                      )
              )
            )
ORDER BY "rank" ASC
LIMIT 20;
```
[Exploration]
2025-05-07 03:28:26 - Thread-590 (execute) - INFO - [Try to execute]
--Description: List the distinct refresh dates in the domestic rising-terms table (newest first)
SELECT DISTINCT "refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
ORDER BY "refresh_date" DESC
LIMIT 20;
[Try to execute]
2025-05-07 03:28:27 - Thread-590 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: List the distinct refresh dates in the domestic rising-terms table (newest first)
SELECT DISTINCT "refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
ORDER BY "refresh_date" DESC
LIMIT 20;
Results:
refresh_date
2024-10-17
2024-10-16
2024-10-15
2024-10-14
2024-10-13
2024-10-12
2024-10-11
2024-10-10
2024-10-09
2024-10-08
2024-10-07
2024-10-06
2024-10-05
2024-10-04
2024-10-03
2024-10-02
2024-10-01

[Successfully executed]
2025-05-07 03:28:27 - Thread-590 (execute) - INFO - [Try to execute]
--Description: Preview rows for the single most-recent refresh_date to see available weeks
SELECT *
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "refresh_date" = (
        SELECT MAX("refresh_date")
        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
      )
LIMIT 20;
[Try to execute]
2025-05-07 03:28:28 - Thread-590 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Preview rows for the single most-recent refresh_date to see available weeks
SELECT *
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "refresh_date" = (
        SELECT MAX("refresh_date")
        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
      )
LIMIT 20;
Results:
dma_id,term,week,score,rank,percent_gain,refresh_date,dma_name
500,adriana lima,2019-11-10,,16,500,2024-10-17,Portland-Auburn ME
500,adriana lima,2019-11-17,,16,500,2024-10-17,Portland-Auburn ME
500,adriana lima,2019-11-24,,16,500,2024-10-17,Portland-Auburn ME
500,adriana lima,2019-12-08,,16,500,2024-10-17,Portland-Auburn ME
500,adriana lima,2019-12-29,,16,500,2024-10-17,Portland-Auburn ME

[Successfully executed]
2025-05-07 03:28:28 - Thread-590 (execute) - INFO - [Try to execute]
--Description: Get the latest week contained in that most-recent refresh
SELECT MAX("week") AS "latest_week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "refresh_date" = (
        SELECT MAX("refresh_date")
        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
      );
[Try to execute]
2025-05-07 03:28:28 - Thread-590 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Get the latest week contained in that most-recent refresh
SELECT MAX("week") AS "latest_week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "refresh_date" = (
        SELECT MAX("refresh_date")
        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
      );
Results:
latest_week
2024-10-13

[Successfully executed]
2025-05-07 03:28:28 - Thread-590 (execute) - INFO - [Try to execute]
--Description: Compute the week that is exactly one year before that latest week
SELECT DATEADD('day', -365,
        ( SELECT MAX("week")
          FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
          WHERE "refresh_date" = (
                  SELECT MAX("refresh_date")
                  FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
                )
        )
       ) AS "week_one_year_prior";
[Try to execute]
2025-05-07 03:28:28 - Thread-590 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Compute the week that is exactly one year before that latest week
SELECT DATEADD('day', -365,
        ( SELECT MAX("week")
          FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
          WHERE "refresh_date" = (
                  SELECT MAX("refresh_date")
                  FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
                )
        )
       ) AS "week_one_year_prior";
Results:
week_one_year_prior
2023-10-14

[Successfully executed]
2025-05-07 03:28:28 - Thread-590 (execute) - INFO - [Try to execute]
--Description: Show every rising-term record for that “one-year-prior” week
SELECT *
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "refresh_date" = (
        SELECT MAX("refresh_date")
        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
      )
  AND "week" = DATEADD('day', -365,
              ( SELECT MAX("week")
                FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
                WHERE "refresh_date" = (
                        SELECT MAX("refresh_date")
                        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
                      )
              )
            )
LIMIT 20;
[Try to execute]
2025-05-07 03:28:29 - Thread-590 (execute) - INFO - [Error occurred]
No data found for the specified query.

[Error occurred]
2025-05-07 03:31:45 - Thread-590 (execute) - INFO - [Corrected SQL]
```sql
--Description: Determine the newest refresh_date, then obtain the latest “week” inside that refresh. 
--             Go back exactly one year by subtracting 52 weeks from that latest week. 
--             Return the single row with the minimum rank (i.e., top‐ranked rising term) for that prior week.
SELECT *
FROM   GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
QUALIFY "refresh_date" = (SELECT MAX("refresh_date")
                           FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS)
     AND "week" = DATEADD('week', -52,
                          (SELECT MAX("week")
                           FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
                           WHERE "refresh_date" = (SELECT MAX("refresh_date")
                                                   FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS)))
ORDER BY "rank" ASC
LIMIT 1;
```
[Corrected SQL]
2025-05-07 03:31:46 - Thread-590 (execute) - INFO - [Results for corrected sql]
{'status': 'error', 'error_msg': '##ERROR##000992 (42601): SQL compilation error: error line 3 at position 0\nfound QUALIFY clause but no window function.'}
[Results for corrected sql]
2025-05-07 03:34:51 - Thread-590 (execute) - INFO - [Corrected SQL]
```sql
--Description: 1) Determine the most-recent refresh_date (CTE newest_refresh). 
--             2) Within that refresh, find the latest week (CTE latest_week). 
--             3) Compute the week exactly one year earlier by subtracting 52 weeks (CTE target_week). 
--             4) Return the row(s) for that target week, ordered by smallest rank so the true top-ranked rising term is first. 
WITH newest_refresh AS (
    SELECT MAX("refresh_date") AS "refresh_date"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
), latest_week AS (
    SELECT MAX("week") AS "latest_week"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
    WHERE "refresh_date" = (SELECT "refresh_date" FROM newest_refresh)
), target_week AS (
    SELECT DATEADD('week', -52, "latest_week") AS "week_one_year_prior"
    FROM   latest_week
)
SELECT *
FROM   GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE  "refresh_date" = (SELECT "refresh_date" FROM newest_refresh)
  AND  "week"        = (SELECT "week_one_year_prior" FROM target_week)
ORDER BY "rank" ASC
LIMIT 1;
```
[Corrected SQL]
2025-05-07 03:34:52 - Thread-590 (execute) - INFO - [Results for corrected sql]
dma_id,term,week,score,rank,percent_gain,refresh_date,dma_name
517,liam payne,2023-10-15,,1,30350,2024-10-17,Charlotte NC

[Results for corrected sql]
2025-05-07 03:36:21 - Thread-590 (execute) - INFO - [Corrected other sqls]
```sql
--Description: Pull the top-ranked (lowest rank) rising search term in the U.S. for the week exactly one year (-52 weeks) before the latest week in the most-recent refresh_date
WITH newest_refresh AS (
    SELECT MAX("refresh_date") AS "refresh_date"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
), latest_week AS (
    SELECT MAX("week") AS "latest_week"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
    WHERE "refresh_date" = (SELECT "refresh_date" FROM newest_refresh)
), target_week AS (
    SELECT DATEADD('week', -52, "latest_week") AS "week_one_year_prior"
    FROM latest_week
)
SELECT "term",
       "rank",
       "dma_name",
       "dma_id",
       "week",
       "refresh_date"
FROM  GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "refresh_date" = (SELECT "refresh_date" FROM newest_refresh)
  AND "week"        = (SELECT "week_one_year_prior" FROM target_week)
ORDER BY "rank" ASC
LIMIT 20;
```

```sql
--Description: List distinct refresh dates in the INTERNATIONAL_TOP_RISING_TERMS table (newest first)
SELECT DISTINCT "refresh_date"
FROM   GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
ORDER  BY "refresh_date" DESC
LIMIT 20;
```

```sql
--Description: Preview rows for the most-recent refresh_date in the international rising-terms table
SELECT *
FROM   GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
WHERE  "refresh_date" = (SELECT MAX("refresh_date")
                         FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS)
LIMIT 20;
```

```sql
--Description: Show the newest week and its corresponding week one year earlier (-52 weeks) for the latest international refresh
WITH latest_intl_refresh AS (
    SELECT MAX("refresh_date") AS "refresh_date"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
)
SELECT MAX("week")                                AS "latest_week",
       DATEADD('week', -52, MAX("week"))          AS "week_one_year_prior"
FROM   GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
WHERE  "refresh_date" = (SELECT "refresh_date" FROM latest_intl_refresh);
```

```sql
--Description: Fetch the top-ranked international rising term for the week exactly one year (-52 weeks) before the latest week in the most-recent refresh
WITH newest_refresh AS (
    SELECT MAX("refresh_date") AS "refresh_date"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
), latest_week AS (
    SELECT MAX("week") AS "latest_week"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
    WHERE "refresh_date" = (SELECT "refresh_date" FROM newest_refresh)
), target_week AS (
    SELECT DATEADD('week', -52, "latest_week") AS "week_one_year_prior"
    FROM latest_week
)
SELECT "term",
       "rank",
       "country_name",
       "region_name",
       "week",
       "refresh_date"
FROM   GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
WHERE  "refresh_date" = (SELECT "refresh_date" FROM newest_refresh)
  AND  "week"        = (SELECT "week_one_year_prior" FROM target_week)
ORDER BY "rank" ASC
LIMIT 20;
```
[Corrected other sqls]
2025-05-07 03:36:21 - Thread-590 (execute) - INFO - [Successfully corrected]
Successfully corrected. SQL:
--Description: 1) Determine the most-recent refresh_date (CTE newest_refresh). 
--             2) Within that refresh, find the latest week (CTE latest_week). 
--             3) Compute the week exactly one year earlier by subtracting 52 weeks (CTE target_week). 
--             4) Return the row(s) for that target week, ordered by smallest rank so the true top-ranked rising term is first. 
WITH newest_refresh AS (
    SELECT MAX("refresh_date") AS "refresh_date"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
), latest_week AS (
    SELECT MAX("week") AS "latest_week"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
    WHERE "refresh_date" = (SELECT "refresh_date" FROM newest_refresh)
), target_week AS (
    SELECT DATEADD('week', -52, "latest_week") AS "week_one_year_prior"
    FROM   latest_week
)
SELECT *
FROM   GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE  "refresh_date" = (SELECT "refresh_date" FROM newest_refresh)
  AND  "week"        = (SELECT "week_one_year_prior" FROM target_week)
ORDER BY "rank" ASC
LIMIT 1;
Results:
dma_id,term,week,score,rank,percent_gain,refresh_date,dma_name
517,liam payne,2023-10-15,,1,30350,2024-10-17,Charlotte NC

[Successfully corrected]
2025-05-07 03:36:21 - Thread-590 (execute) - INFO - [Try to execute]
--Description: Pull the top-ranked (lowest rank) rising search term in the U.S. for the week exactly one year (-52 weeks) before the latest week in the most-recent refresh_date
WITH newest_refresh AS (
    SELECT MAX("refresh_date") AS "refresh_date"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
), latest_week AS (
    SELECT MAX("week") AS "latest_week"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
    WHERE "refresh_date" = (SELECT "refresh_date" FROM newest_refresh)
), target_week AS (
    SELECT DATEADD('week', -52, "latest_week") AS "week_one_year_prior"
    FROM latest_week
)
SELECT "term",
       "rank",
       "dma_name",
       "dma_id",
       "week",
       "refresh_date"
FROM  GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "refresh_date" = (SELECT "refresh_date" FROM newest_refresh)
  AND "week"        = (SELECT "week_one_year_prior" FROM target_week)
ORDER BY "rank" ASC
LIMIT 20
[Try to execute]
2025-05-07 03:36:22 - Thread-590 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Pull the top-ranked (lowest rank) rising search term in the U.S. for the week exactly one year (-52 weeks) before the latest week in the most-recent refresh_date
WITH newest_refresh AS (
    SELECT MAX("refresh_date") AS "refresh_date"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
), latest_week AS (
    SELECT MAX("week") AS "latest_week"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
    WHERE "refresh_date" = (SELECT "refresh_date" FROM newest_refresh)
), target_week AS (
    SELECT DATEADD('week', -52, "latest_week") AS "week_one_year_prior"
    FROM latest_week
)
SELECT "term",
       "rank",
       "dma_name",
       "dma_id",
       "week",
       "refresh_date"
FROM  GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "refresh_date" = (SELECT "refresh_date" FROM newest_refresh)
  AND "week"        = (SELECT "week_one_year_prior" FROM target_week)
ORDER BY "rank" ASC
LIMIT 20
Results:
term,rank,dma_name,dma_id,week,refresh_date
liam payne,1,Ottumwa IA-Kirksville MO,631,2023-10-15,2024-10-17
liam payne,1,Philadelphia PA,504,2023-10-15,2024-10-17
liam payne,1,Marquette MI,553,2023-10-15,2024-10-17
liam payne,1,Wausau-Rhinelander WI,705,2023-10-15,2024-10-17
liam payne,1,Palm Springs CA,804,2023-10-15,2024-10-17

[Successfully executed]
2025-05-07 03:36:22 - Thread-590 (execute) - INFO - [Try to execute]
--Description: List distinct refresh dates in the INTERNATIONAL_TOP_RISING_TERMS table (newest first)
SELECT DISTINCT "refresh_date"
FROM   GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
ORDER  BY "refresh_date" DESC
LIMIT 20
[Try to execute]
2025-05-07 03:36:24 - Thread-590 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: List distinct refresh dates in the INTERNATIONAL_TOP_RISING_TERMS table (newest first)
SELECT DISTINCT "refresh_date"
FROM   GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
ORDER  BY "refresh_date" DESC
LIMIT 20
Results:
refresh_date
2024-10-17
2024-10-16
2024-10-15
2024-10-14
2024-10-13
2024-10-12
2024-10-11
2024-10-10
2024-10-09
2024-10-08
2024-10-07
2024-10-06
2024-10-05
2024-10-04
2024-10-03
2024-10-02
2024-10-01

[Successfully executed]
2025-05-07 03:36:24 - Thread-590 (execute) - INFO - [Try to execute]
--Description: Preview rows for the most-recent refresh_date in the international rising-terms table
SELECT *
FROM   GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
WHERE  "refresh_date" = (SELECT MAX("refresh_date")
                         FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS)
LIMIT 20
[Try to execute]
2025-05-07 03:36:24 - Thread-590 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Preview rows for the most-recent refresh_date in the international rising-terms table
SELECT *
FROM   GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
WHERE  "refresh_date" = (SELECT MAX("refresh_date")
                         FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS)
LIMIT 20
Results:
percent_gain,region_name,term,week,score,refresh_date,country_name,country_code,region_code,rank
400,Alexandria Governorate,نتيجه مباراه مصر وموريتانيا الان,2022-07-10,,2024-10-17,Egypt,EG,EG-ALX,23
400,Alexandria Governorate,نتيجه مباراه مصر وموريتانيا الان,2022-09-18,,2024-10-17,Egypt,EG,EG-ALX,23
400,Alexandria Governorate,نتيجه مباراه مصر وموريتانيا الان,2022-10-16,,2024-10-17,Egypt,EG,EG-ALX,23
400,Alexandria Governorate,نتيجه مباراه مصر وموريتانيا الان,2022-11-20,,2024-10-17,Egypt,EG,E

[Successfully executed]
2025-05-07 03:36:24 - Thread-590 (execute) - INFO - [Try to execute]
--Description: Show the newest week and its corresponding week one year earlier (-52 weeks) for the latest international refresh
WITH latest_intl_refresh AS (
    SELECT MAX("refresh_date") AS "refresh_date"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
)
SELECT MAX("week")                                AS "latest_week",
       DATEADD('week', -52, MAX("week"))          AS "week_one_year_prior"
FROM   GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
WHERE  "refresh_date" = (SELECT "refresh_date" FROM latest_intl_refresh)
[Try to execute]
2025-05-07 03:36:26 - Thread-590 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Show the newest week and its corresponding week one year earlier (-52 weeks) for the latest international refresh
WITH latest_intl_refresh AS (
    SELECT MAX("refresh_date") AS "refresh_date"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
)
SELECT MAX("week")                                AS "latest_week",
       DATEADD('week', -52, MAX("week"))          AS "week_one_year_prior"
FROM   GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
WHERE  "refresh_date" = (SELECT "refresh_date" FROM latest_intl_refresh)
Results:
latest_week,week_one_year_prior
2024-10-13,2023-10-15

[Successfully executed]
2025-05-07 03:36:26 - Thread-590 (execute) - INFO - [Try to execute]
--Description: Fetch the top-ranked international rising term for the week exactly one year (-52 weeks) before the latest week in the most-recent refresh
WITH newest_refresh AS (
    SELECT MAX("refresh_date") AS "refresh_date"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
), latest_week AS (
    SELECT MAX("week") AS "latest_week"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
    WHERE "refresh_date" = (SELECT "refresh_date" FROM newest_refresh)
), target_week AS (
    SELECT DATEADD('week', -52, "latest_week") AS "week_one_year_prior"
    FROM latest_week
)
SELECT "term",
       "rank",
       "country_name",
       "region_name",
       "week",
       "refresh_date"
FROM   GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
WHERE  "refresh_date" = (SELECT "refresh_date" FROM newest_refresh)
  AND  "week"        = (SELECT "week_one_year_prior" FROM target_week)
ORDER BY "rank" ASC
LIMIT 20
[Try to execute]
2025-05-07 03:36:28 - Thread-590 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Fetch the top-ranked international rising term for the week exactly one year (-52 weeks) before the latest week in the most-recent refresh
WITH newest_refresh AS (
    SELECT MAX("refresh_date") AS "refresh_date"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
), latest_week AS (
    SELECT MAX("week") AS "latest_week"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
    WHERE "refresh_date" = (SELECT "refresh_date" FROM newest_refresh)
), target_week AS (
    SELECT DATEADD('week', -52, "latest_week") AS "week_one_year_prior"
    FROM latest_week
)
SELECT "term",
       "rank",
       "country_name",
       "region_name",
       "week",
       "refresh_date"
FROM   GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
WHERE  "refresh_date" = (SELECT "refresh_date" FROM newest_refresh)
  AND  "week"        = (SELECT "week_one_year_prior" FROM target_week)
ORDER BY "rank" ASC
LIMIT 20
Results:
term,rank,country_name,region_name,week,refresh_date
liam payne,1,Argentina,Formosa Province,2023-10-15,2024-10-17
lituania românia,1,Romania,Brăila County,2023-10-15,2024-10-17
ตรวจ หวย 16 ตุลาคม 2567,1,Thailand,Yasothon,2023-10-15,2024-10-17
liam payne,1,Brazil,Federal District,2023-10-15,2024-10-17
liam payne,1,Argentina,Misiones Province,2023-10-15,2024-10-17

[Successfully executed]
2025-05-07 03:36:28 - Thread-590 (execute) - INFO - itercount: 0
2025-05-07 03:36:28 - Thread-590 (execute) - INFO - [Self-refine]
Table full name: GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_TERMS
Column name: week Type: DATE
Column name: term Type: TEXT
Column name: rank Type: NUMBER
Column name: score Type: NUMBER
Column name: refresh_date Type: DATE
Column name: dma_id Type: NUMBER
Column name: dma_name Type: TEXT
Sample rows:
[{'dma_name': 'Portland-Auburn ME', 'dma_id': 500, 'term': 'AC Milan', 'week': '2019-11-17', 'score': None, 'rank': 23, 'refresh_date': '2024-09-28'}, {'dma_name': 'Portland-Auburn ME', 'dma_id': 500, 'term': 'AC Milan', 'week': '2019-12-15', 'score': None, 'rank': 23, 'refresh_date': '2024-09-28'}, {'dma_name': 'Portland-Auburn ME', 'dma_id': 500, 'term': 'AC Milan', 'week': '2020-02-02', 'score': None, 'rank': 23, 'refresh_date': '2024-09-28'}, {'dma_name': 'Portland-Auburn ME', 'dma_id': 500, 'term': 'AC Milan', 'week': '2020-02-09', 'score': None, 'rank': 23, 'refresh_date': '2024-09-28'}, {'dma_name': 'Portland-Auburn ME', 'dma_id': 500, 'term': 'AC Milan', 'week': '2020-03-22', 'score': None, 'rank': 23, 'refresh_date': '2024-09-28'}]

--------------------------------------------------
Table full name: GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
Column name: refresh_date Type: DATE
Column name: rank Type: NUMBER
Column name: dma_name Type: TEXT
Column name: score Type: NUMBER
Column name: week Type: DATE
Column name: percent_gain Type: NUMBER
Column name: term Type: TEXT
Column name: dma_id Type: NUMBER
Sample rows:
[{'dma_id': 500, 'term': '49ers vs vikings', 'week': '2019-09-15', 'score': None, 'rank': 13, 'percent_gain': 1650, 'refresh_date': '2024-09-17', 'dma_name': 'Portland-Auburn ME'}, {'dma_id': 500, 'term': '49ers vs vikings', 'week': '2019-11-17', 'score': None, 'rank': 13, 'percent_gain': 1650, 'refresh_date': '2024-09-17', 'dma_name': 'Portland-Auburn ME'}, {'dma_id': 500, 'term': '49ers vs vikings', 'week': '2019-11-24', 'score': None, 'rank': 13, 'percent_gain': 1650, 'refresh_date': '2024-09-17', 'dma_name': 'Portland-Auburn ME'}, {'dma_id': 500, 'term': '49ers vs vikings', 'week': '2019-12-29', 'score': None, 'rank': 13, 'percent_gain': 1650, 'refresh_date': '2024-09-17', 'dma_name': 'Portland-Auburn ME'}, {'dma_id': 500, 'term': '49ers vs vikings', 'week': '2020-01-19', 'score': None, 'rank': 13, 'percent_gain': 1650, 'refresh_date': '2024-09-17', 'dma_name': 'Portland-Auburn ME'}]

--------------------------------------------------
Table full name: GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
Column name: rank Type: NUMBER
Column name: region_name Type: TEXT
Column name: refresh_date Type: DATE
Column name: region_code Type: TEXT
Column name: term Type: TEXT
Column name: week Type: DATE
Column name: country_name Type: TEXT
Column name: percent_gain Type: NUMBER
Column name: country_code Type: TEXT
Column name: score Type: NUMBER
Sample rows:
[{'percent_gain': 3500, 'region_name': 'Sibiu', 'term': 'gigi multescu', 'week': '2021-03-07', 'score': None, 'refresh_date': '2024-09-17', 'country_name': 'Romania', 'country_code': 'RO', 'region_code': 'RO-SB', 'rank': 10}, {'percent_gain': 3500, 'region_name': 'Sibiu', 'term': 'gigi multescu', 'week': '2021-04-04', 'score': None, 'refresh_date': '2024-09-17', 'country_name': 'Romania', 'country_code': 'RO', 'region_code': 'RO-SB', 'rank': 10}, {'percent_gain': 3500, 'region_name': 'Sibiu', 'term': 'gigi multescu', 'week': '2021-05-16', 'score': None, 'refresh_date': '2024-09-17', 'country_name': 'Romania', 'country_code': 'RO', 'region_code': 'RO-SB', 'rank': 10}, {'percent_gain': 3500, 'region_name': 'Sibiu', 'term': 'gigi multescu', 'week': '2021-05-23', 'score': None, 'refresh_date': '2024-09-17', 'country_name': 'Romania', 'country_code': 'RO', 'region_code': 'RO-SB', 'rank': 10}, {'percent_gain': 3500, 'region_name': 'Sibiu', 'term': 'gigi multescu', 'week': '2021-09-19', 'score': None, 'refresh_date': '2024-09-17', 'country_name': 'Romania', 'country_code': 'RO', 'region_code': 'RO-SB', 'rank': 10}]

--------------------------------------------------
Table full name: GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_TERMS
Column name: week Type: DATE
Column name: term Type: TEXT
Column name: rank Type: NUMBER
Column name: score Type: NUMBER
Column name: refresh_date Type: DATE
Column name: region_code Type: TEXT
Column name: region_name Type: TEXT
Column name: country_code Type: TEXT
Column name: country_name Type: TEXT
Sample rows:
[{'term': 'Galatasaray  PAOK', 'refresh_date': '2024-09-28', 'region_code': 'TR-39', 'country_code': 'TR', 'region_name': 'Kırklareli', 'week': '2022-03-13', 'score': None, 'rank': 14, 'country_name': 'Turkey'}, {'term': 'Galatasaray  PAOK', 'refresh_date': '2024-09-28', 'region_code': 'TR-39', 'country_code': 'TR', 'region_name': 'Kırklareli', 'week': '2022-11-13', 'score': None, 'rank': 14, 'country_name': 'Turkey'}, {'term': 'Galatasaray  PAOK', 'refresh_date': '2024-09-28', 'region_code': 'TR-39', 'country_code': 'TR', 'region_name': 'Kırklareli', 'week': '2023-01-01', 'score': None, 'rank': 14, 'country_name': 'Turkey'}, {'term': 'Galatasaray  PAOK', 'refresh_date': '2024-09-28', 'region_code': 'TR-39', 'country_code': 'TR', 'region_name': 'Kırklareli', 'week': '2023-01-15', 'score': None, 'rank': 14, 'country_name': 'Turkey'}, {'term': 'Galatasaray  PAOK', 'refresh_date': '2024-09-28', 'region_code': 'TR-39', 'country_code': 'TR', 'region_name': 'Kırklareli', 'week': '2023-04-02', 'score': None, 'rank': 14, 'country_name': 'Turkey'}]

--------------------------------------------------
External knowledge that might be helpful: 
None
The table structure information is ({database name: {schema name: [table name]}}): 
{'GOOGLE_TRENDS': {'GOOGLE_TRENDS': ['TOP_TERMS', 'TOP_RISING_TERMS', 'INTERNATIONAL_TOP_RISING_TERMS', 'INTERNATIONAL_TOP_TERMS']}}

Some few-shot examples after column exploration may be helpful:
Query:
--Description: List the distinct refresh dates in the domestic rising-terms table (newest first)
SELECT DISTINCT "refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
ORDER BY "refresh_date" DESC
LIMIT 20;
Answer:
refresh_date
2024-10-17
2024-10-16
2024-10-15
2024-10-14
2024-10-13
2024-10-12
2024-10-11
2024-10-10
2024-10-09
2024-10-08
2024-10-07
2024-10-06
2024-10-05
2024-10-04
2024-10-03
2024-10-02
2024-10-01
Query:
--Description: Preview rows for the single most-recent refresh_date to see available weeks
SELECT *
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "refresh_date" = (
        SELECT MAX("refresh_date")
        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
      )
LIMIT 20;
Answer:
dma_id,term,week,score,rank,percent_gain,refresh_date,dma_name
500,adriana lima,2019-11-10,,16,500,2024-10-17,Portland-Auburn ME
500,adriana lima,2019-11-17,,16,500,2024-10-17,Portland-Auburn ME
500,adriana lima,2019-11-24,,16,500,2024-10-17,Portland-Auburn ME
500,adriana lima,2019-12-08,,16,500,2024-10-17,Portland-Auburn ME
500,adriana lima,2019-12-29,,16,500,2024-10-17,Portland-Auburn ME
Query:
--Description: Get the latest week contained in that most-recent refresh
SELECT MAX("week") AS "latest_week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "refresh_date" = (
        SELECT MAX("refresh_date")
        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
      );
Answer:
latest_week
2024-10-13
Query:
--Description: Compute the week that is exactly one year before that latest week
SELECT DATEADD('day', -365,
        ( SELECT MAX("week")
          FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
          WHERE "refresh_date" = (
                  SELECT MAX("refresh_date")
                  FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
                )
        )
       ) AS "week_one_year_prior";
Answer:
week_one_year_prior
2023-10-14
Query:
--Description: Pull the top-ranked (lowest rank) rising search term in the U.S. for the week exactly one year (-52 weeks) before the latest week in the most-recent refresh_date
WITH newest_refresh AS (
    SELECT MAX("refresh_date") AS "refresh_date"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
), latest_week AS (
    SELECT MAX("week") AS "latest_week"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
    WHERE "refresh_date" = (SELECT "refresh_date" FROM newest_refresh)
), target_week AS (
    SELECT DATEADD('week', -52, "latest_week") AS "week_one_year_prior"
    FROM latest_week
)
SELECT "term",
       "rank",
       "dma_name",
       "dma_id",
       "week",
       "refresh_date"
FROM  GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "refresh_date" = (SELECT "refresh_date" FROM newest_refresh)
  AND "week"        = (SELECT "week_one_year_prior" FROM target_week)
ORDER BY "rank" ASC
LIMIT 20
Answer:
term,rank,dma_name,dma_id,week,refresh_date
liam payne,1,Ottumwa IA-Kirksville MO,631,2023-10-15,2024-10-17
liam payne,1,Philadelphia PA,504,2023-10-15,2024-10-17
liam payne,1,Marquette MI,553,2023-10-15,2024-10-17
liam payne,1,Wausau-Rhinelander WI,705,2023-10-15,2024-10-17
liam payne,1,Palm Springs CA,804,2023-10-15,2024-10-17
Query:
--Description: List distinct refresh dates in the INTERNATIONAL_TOP_RISING_TERMS table (newest first)
SELECT DISTINCT "refresh_date"
FROM   GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
ORDER  BY "refresh_date" DESC
LIMIT 20
Answer:
refresh_date
2024-10-17
2024-10-16
2024-10-15
2024-10-14
2024-10-13
2024-10-12
2024-10-11
2024-10-10
2024-10-09
2024-10-08
2024-10-07
2024-10-06
2024-10-05
2024-10-04
2024-10-03
2024-10-02
2024-10-01
Query:
--Description: Preview rows for the most-recent refresh_date in the international rising-terms table
SELECT *
FROM   GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
WHERE  "refresh_date" = (SELECT MAX("refresh_date")
                         FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS)
LIMIT 20
Answer:
percent_gain,region_name,term,week,score,refresh_date,country_name,country_code,region_code,rank
400,Alexandria Governorate,نتيجه مباراه مصر وموريتانيا الان,2022-07-10,,2024-10-17,Egypt,EG,EG-ALX,23
400,Alexandria Governorate,نتيجه مباراه مصر وموريتانيا الان,2022-09-18,,2024-10-17,Egypt,EG,EG-ALX,23
400,Alexandria Governorate,نتيجه مباراه مصر وموريتانيا الان,2022-10-16,,2024-10-17,Egypt,EG,EG-ALX,23
400,Alexandria Governorate,نتيجه مباراه مصر وموريتانيا الان,2022-11-20,,2024-10-17,Egypt,EG,E
Query:
--Description: Show the newest week and its corresponding week one year earlier (-52 weeks) for the latest international refresh
WITH latest_intl_refresh AS (
    SELECT MAX("refresh_date") AS "refresh_date"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
)
SELECT MAX("week")                                AS "latest_week",
       DATEADD('week', -52, MAX("week"))          AS "week_one_year_prior"
FROM   GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
WHERE  "refresh_date" = (SELECT "refresh_date" FROM latest_intl_refresh)
Answer:
latest_week,week_one_year_prior
2024-10-13,2023-10-15
Query:
--Description: Fetch the top-ranked international rising term for the week exactly one year (-52 weeks) before the latest week in the most-recent refresh
WITH newest_refresh AS (
    SELECT MAX("refresh_date") AS "refresh_date"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
), latest_week AS (
    SELECT MAX("week") AS "latest_week"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
    WHERE "refresh_date" = (SELECT "refresh_date" FROM newest_refresh)
), target_week AS (
    SELECT DATEADD('week', -52, "latest_week") AS "week_one_year_prior"
    FROM latest_week
)
SELECT "term",
       "rank",
       "country_name",
       "region_name",
       "week",
       "refresh_date"
FROM   GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
WHERE  "refresh_date" = (SELECT "refresh_date" FROM newest_refresh)
  AND  "week"        = (SELECT "week_one_year_prior" FROM target_week)
ORDER BY "rank" ASC
LIMIT 20
Answer:
term,rank,country_name,region_name,week,refresh_date
liam payne,1,Argentina,Formosa Province,2023-10-15,2024-10-17
lituania românia,1,Romania,Brăila County,2023-10-15,2024-10-17
ตรวจ หวย 16 ตุลาคม 2567,1,Thailand,Yasothon,2023-10-15,2024-10-17
liam payne,1,Brazil,Federal District,2023-10-15,2024-10-17
liam payne,1,Argentina,Misiones Province,2023-10-15,2024-10-17
Task: Based on the most recent refresh date, identify the top-ranked rising search term for the week that is exactly one year prior to the latest available week in the dataset.

Please think step by step and answer only one complete SQL in snowflake dialect in ```sql``` format.
SQL usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: The table structure information is ({database name: {schema name: [table name]}}): 
{'GOOGLE_TRENDS': {'GOOGLE_TRENDS': ['TOP_TERMS', 'TOP_RISING_TERMS', 'INTERNATIONAL_TOP_RISING_TERMS', 'INTERNATIONAL_TOP_TERMS']}}

When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
If the task description does not specify the number of decimal places, retain all decimals to four places.

[Self-refine]
2025-05-07 03:37:05 - Thread-590 (execute) - INFO - [Try to run SQL in self-refine]
```sql
/* 1) get most-recent refresh_date
   2) find the latest week within that refresh
   3) shift that week back exactly 52 weeks
   4) return the term(s) with the best (lowest) rank for that prior week   */
WITH latest_refresh AS (
    SELECT MAX("refresh_date") AS "refresh_date"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
), latest_week AS (
    SELECT MAX("week") AS "latest_week"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
    WHERE "refresh_date" = (SELECT "refresh_date" FROM latest_refresh)
), target_week AS (
    SELECT DATEADD('week', -52, "latest_week") AS "target_week"
    FROM   latest_week
)
SELECT  "term",
        "rank",
        "dma_name",
        "dma_id",
        "week",
        "refresh_date"
FROM    GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE   "refresh_date" = (SELECT "refresh_date" FROM latest_refresh)
  AND   "week"        = (SELECT "target_week"  FROM target_week)
ORDER BY "rank" ASC NULLS LAST
LIMIT 1;
```
[Try to run SQL in self-refine]
2025-05-07 03:37:18 - Thread-590 (execute) - INFO - Total iteration counts: 0
