2025-05-07 03:28:16 - Thread-586 (execute) - INFO - [Exploration]
```sql
--Description: Find the latest available week and its most recent refresh date in U.S. “TOP_RISING_TERMS”.
SELECT  
    MAX("week")          AS "latest_week",
    MAX("refresh_date")  AS "latest_refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
LIMIT 20;
```

```sql
--Description: Find the latest available week and its most recent refresh date in “INTERNATIONAL_TOP_RISING_TERMS”.
SELECT  
    MAX("week")          AS "latest_week",
    MAX("refresh_date")  AS "latest_refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
LIMIT 20;
```

```sql
--Description: Inspect the 20 most-recent weeks in U.S. “TOP_RISING_TERMS”.
SELECT DISTINCT  
    "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
ORDER BY "week" DESC
LIMIT 20;
```

```sql
--Description: Inspect the 20 most-recent weeks in “INTERNATIONAL_TOP_RISING_TERMS”.
SELECT DISTINCT  
    "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
ORDER BY "week" DESC
LIMIT 20;
```

```sql
--Description: Show all rising terms for the latest week in U.S. data, ordered by rank.
SELECT  
    "week",
    "term",
    "rank",
    "percent_gain",
    "dma_name",
    "refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week" = (SELECT MAX("week") FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS)
ORDER BY "rank" ASC
LIMIT 20;
```

```sql
--Description: Show all rising terms for the latest week in International data, ordered by rank.
SELECT  
    "week",
    "term",
    "rank",
    "percent_gain",
    "region_name",
    "country_name",
    "refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
WHERE "week" = (SELECT MAX("week") FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS)
ORDER BY "rank" ASC
LIMIT 20;
```

```sql
--Description: Compute the week that is exactly one year before the latest week in U.S. “TOP_RISING_TERMS”.
SELECT  
    DATEADD(year, -1, (SELECT MAX("week") FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS))  AS "week_one_year_prior"
LIMIT 20;
```

```sql
--Description: Retrieve rows for that one-year-prior week in U.S. data, using the most recent refresh date for that week.
SELECT  
    "week",
    "term",
    "rank",
    "percent_gain",
    "dma_name",
    "refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week" = DATEADD(year, -1, (SELECT MAX("week") FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS))
  AND "refresh_date" = (
        SELECT MAX("refresh_date")
        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
        WHERE "week" = DATEADD(year, -1, (SELECT MAX("week") FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS))
      )
ORDER BY "rank" ASC
LIMIT 20;
```

```sql
--Description: Retrieve rows for that one-year-prior week in International data, using the most recent refresh date for that week.
SELECT  
    "week",
    "term",
    "rank",
    "percent_gain",
    "region_name",
    "country_name",
    "refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
WHERE "week" = DATEADD(year, -1, (SELECT MAX("week") FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS))
  AND "refresh_date" = (
        SELECT MAX("refresh_date")
        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
        WHERE "week" = DATEADD(year, -1, (SELECT MAX("week") FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS))
      )
ORDER BY "rank" ASC
LIMIT 20;
```

```sql
--Description: Return the single top-ranked rising search term (rank = 1) for the one-year-prior week in U.S. data.
SELECT  
    "term",
    "rank",
    "percent_gain",
    "dma_name",
    "week",
    "refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week" = DATEADD(year, -1, (SELECT MAX("week") FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS))
  AND "refresh_date" = (
        SELECT MAX("refresh_date")
        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
        WHERE "week" = DATEADD(year, -1, (SELECT MAX("week") FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS))
      )
  AND "rank" = 1
LIMIT 20;
```
[Exploration]
2025-05-07 03:28:16 - Thread-586 (execute) - INFO - [Try to execute]
--Description: Find the latest available week and its most recent refresh date in U.S. “TOP_RISING_TERMS”.
SELECT  
    MAX("week")          AS "latest_week",
    MAX("refresh_date")  AS "latest_refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
LIMIT 20;
[Try to execute]
2025-05-07 03:28:17 - Thread-586 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Find the latest available week and its most recent refresh date in U.S. “TOP_RISING_TERMS”.
SELECT  
    MAX("week")          AS "latest_week",
    MAX("refresh_date")  AS "latest_refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
LIMIT 20;
Results:
latest_week,latest_refresh_date
2024-10-13,2024-10-17

[Successfully executed]
2025-05-07 03:28:17 - Thread-586 (execute) - INFO - [Try to execute]
--Description: Find the latest available week and its most recent refresh date in “INTERNATIONAL_TOP_RISING_TERMS”.
SELECT  
    MAX("week")          AS "latest_week",
    MAX("refresh_date")  AS "latest_refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
LIMIT 20;
[Try to execute]
2025-05-07 03:28:18 - Thread-586 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Find the latest available week and its most recent refresh date in “INTERNATIONAL_TOP_RISING_TERMS”.
SELECT  
    MAX("week")          AS "latest_week",
    MAX("refresh_date")  AS "latest_refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
LIMIT 20;
Results:
latest_week,latest_refresh_date
2024-10-13,2024-10-17

[Successfully executed]
2025-05-07 03:28:18 - Thread-586 (execute) - INFO - [Try to execute]
--Description: Inspect the 20 most-recent weeks in U.S. “TOP_RISING_TERMS”.
SELECT DISTINCT  
    "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
ORDER BY "week" DESC
LIMIT 20;
[Try to execute]
2025-05-07 03:28:18 - Thread-586 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Inspect the 20 most-recent weeks in U.S. “TOP_RISING_TERMS”.
SELECT DISTINCT  
    "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
ORDER BY "week" DESC
LIMIT 20;
Results:
week
2024-10-13
2024-10-06
2024-09-29
2024-09-22
2024-09-15
2024-09-08
2024-09-01
2024-08-25
2024-08-18
2024-08-11
2024-08-04
2024-07-28
2024-07-21
2024-07-14
2024-07-07
2024-06-30
2024-06-23
2024-06-16

[Successfully executed]
2025-05-07 03:28:18 - Thread-586 (execute) - INFO - [Try to execute]
--Description: Inspect the 20 most-recent weeks in “INTERNATIONAL_TOP_RISING_TERMS”.
SELECT DISTINCT  
    "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
ORDER BY "week" DESC
LIMIT 20;
[Try to execute]
2025-05-07 03:28:18 - Thread-586 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Inspect the 20 most-recent weeks in “INTERNATIONAL_TOP_RISING_TERMS”.
SELECT DISTINCT  
    "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
ORDER BY "week" DESC
LIMIT 20;
Results:
week
2024-10-13
2024-10-06
2024-09-29
2024-09-22
2024-09-15
2024-09-08
2024-09-01
2024-08-25
2024-08-18
2024-08-11
2024-08-04
2024-07-28
2024-07-21
2024-07-14
2024-07-07
2024-06-30
2024-06-23
2024-06-16

[Successfully executed]
2025-05-07 03:28:18 - Thread-586 (execute) - INFO - [Try to execute]
--Description: Show all rising terms for the latest week in U.S. data, ordered by rank.
SELECT  
    "week",
    "term",
    "rank",
    "percent_gain",
    "dma_name",
    "refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week" = (SELECT MAX("week") FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS)
ORDER BY "rank" ASC
LIMIT 20;
[Try to execute]
2025-05-07 03:28:19 - Thread-586 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Show all rising terms for the latest week in U.S. data, ordered by rank.
SELECT  
    "week",
    "term",
    "rank",
    "percent_gain",
    "dma_name",
    "refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week" = (SELECT MAX("week") FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS)
ORDER BY "rank" ASC
LIMIT 20;
Results:
week,term,rank,percent_gain,dma_name,refresh_date
2024-10-13,liam payne,1,30350,Ottumwa IA-Kirksville MO,2024-10-17
2024-10-13,liam payne,1,30350,Little Rock-Pine Bluff AR,2024-10-17
2024-10-13,liam payne,1,30350,Marquette MI,2024-10-17
2024-10-13,liam payne,1,30350,Seattle-Tacoma WA,2024-10-17
2024-10-13,liam payne,1,30350,Cleveland-Akron (Canton) OH,2024-10-17

[Successfully executed]
2025-05-07 03:28:19 - Thread-586 (execute) - INFO - [Try to execute]
--Description: Show all rising terms for the latest week in International data, ordered by rank.
SELECT  
    "week",
    "term",
    "rank",
    "percent_gain",
    "region_name",
    "country_name",
    "refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
WHERE "week" = (SELECT MAX("week") FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS)
ORDER BY "rank" ASC
LIMIT 20;
[Try to execute]
2025-05-07 03:28:20 - Thread-586 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Show all rising terms for the latest week in International data, ordered by rank.
SELECT  
    "week",
    "term",
    "rank",
    "percent_gain",
    "region_name",
    "country_name",
    "refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
WHERE "week" = (SELECT MAX("week") FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS)
ORDER BY "rank" ASC
LIMIT 20;
Results:
week,term,rank,percent_gain,region_name,country_name,refresh_date
2024-10-13,ตรวจ หวย 16 ตุลาคม 2567,1,14900,Kamphaeng Phet,Thailand,2024-10-17
2024-10-13,ตรวจ หวย 16 ตุลาคม 2567,1,14900,Samut Songkhram,Thailand,2024-10-17
2024-10-13,ตรวจ หวย 16 ตุลาคม 2567,1,14900,Phayao,Thailand,2024-10-17
2024-10-13,influenza b,1,5950,Autonomous City of Buenos Aires,Argentina,2024-10-15
2024-10-13,ตรวจ หวย 16 ตุลาคม 2567,1,14900,Phetchabun,Thailand,2024-10-17

[Successfully executed]
2025-05-07 03:28:20 - Thread-586 (execute) - INFO - [Try to execute]
--Description: Compute the week that is exactly one year before the latest week in U.S. “TOP_RISING_TERMS”.
SELECT  
    DATEADD(year, -1, (SELECT MAX("week") FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS))  AS "week_one_year_prior"
LIMIT 20;
[Try to execute]
2025-05-07 03:28:20 - Thread-586 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Compute the week that is exactly one year before the latest week in U.S. “TOP_RISING_TERMS”.
SELECT  
    DATEADD(year, -1, (SELECT MAX("week") FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS))  AS "week_one_year_prior"
LIMIT 20;
Results:
week_one_year_prior
2023-10-13

[Successfully executed]
2025-05-07 03:28:20 - Thread-586 (execute) - INFO - [Try to execute]
--Description: Retrieve rows for that one-year-prior week in U.S. data, using the most recent refresh date for that week.
SELECT  
    "week",
    "term",
    "rank",
    "percent_gain",
    "dma_name",
    "refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week" = DATEADD(year, -1, (SELECT MAX("week") FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS))
  AND "refresh_date" = (
        SELECT MAX("refresh_date")
        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
        WHERE "week" = DATEADD(year, -1, (SELECT MAX("week") FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS))
      )
ORDER BY "rank" ASC
LIMIT 20;
[Try to execute]
2025-05-07 03:28:21 - Thread-586 (execute) - INFO - [Error occurred]
No data found for the specified query.

[Error occurred]
2025-05-07 03:31:48 - Thread-586 (execute) - INFO - [Corrected SQL]
```sql
--Description: 
--Goal: return the single top-ranked rising search term for the week exactly one calendar year
--      before the latest week in TOP_RISING_TERMS, using the most-recent refresh snapshot.
--Logic
-- 1. latest_week  – obtain MAX(week) from the table.
-- 2. target_week  – DATEADD(year,-1, latest_week) gives the week exactly one year prior.
-- 3. For that week, rank all rows by newest refresh_date (desc) and by rank (asc).
-- 4. Pick the record that has both the newest refresh_date (rn_refresh = 1) and rank = 1.
WITH latest_week AS (
    SELECT MAX("week") AS latest_wk
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
), target_week AS (
    SELECT DATEADD(year, -1, latest_wk) AS tgt_wk
    FROM latest_week
), ordered AS (
    SELECT
        "week",
        "term",
        "rank",
        "percent_gain",
        "dma_name",
        "refresh_date",
        ROW_NUMBER() OVER (PARTITION BY "week" ORDER BY "refresh_date" DESC) AS rn_refresh
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
    WHERE "week" = (SELECT tgt_wk FROM target_week)
)
SELECT
    "week",
    "term",
    "rank",
    "percent_gain",
    "dma_name",
    "refresh_date"
FROM ordered
WHERE rn_refresh = 1          -- most-recent snapshot
  AND "rank" = 1              -- top-ranked term
LIMIT 1;
```
[Corrected SQL]
2025-05-07 03:31:50 - Thread-586 (execute) - INFO - [Results for corrected sql]
No data found for the specified query.

[Results for corrected sql]
2025-05-07 03:36:20 - Thread-586 (execute) - INFO - [Corrected SQL]
```sql
--Description: 
-- Purpose: Return the #1-ranked rising search term for the week that is as close as
--          possible (± ≤ 14 days) to exactly one calendar year before the most-recent
--          week in GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS, using the freshest
--          snapshot for that chosen week.
-- Logic (embedded in CTEs):
--   1) latest_wk  : most-recent week (e.g., 2024-10-13).
--   2) target_dt  : latest_wk – 1 year (DATEADD(year,-1)).
--   3) candidate  : all distinct weeks within ±14 days of target_dt; compute the
--                   absolute day-difference.
--   4) chosen_wk  : pick the candidate having the smallest difference (ties → newer week).
--   5) best_snap  : for chosen_wk, keep only the newest refresh_date.
--   6) final_sel  : rows whose week = chosen_wk, refresh_date = best_snap, and rank = 1.
WITH latest_wk AS (
    SELECT MAX("week") AS latest_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
),
target_dt AS (
    SELECT DATEADD(year, -1, latest_week) AS tgt_date
    FROM latest_wk
),
candidate AS (
    SELECT DISTINCT
           "week",
           ABS(DATEDIFF(day, "week", (SELECT tgt_date FROM target_dt))) AS diff_days
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
    WHERE ABS(DATEDIFF(day, "week", (SELECT tgt_date FROM target_dt))) <= 14
),
chosen_wk AS (
    SELECT "week" AS chosen_week
    FROM candidate
    ORDER BY diff_days ASC, "week" DESC
    LIMIT 1
),
best_snap AS (
    SELECT MAX("refresh_date") AS latest_refresh
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
    WHERE "week" = (SELECT chosen_week FROM chosen_wk)
)
SELECT
    "week",
    "term",
    "rank",
    "percent_gain",
    "dma_name",
    "refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week"         = (SELECT chosen_week   FROM chosen_wk)
  AND "refresh_date" = (SELECT latest_refresh FROM best_snap)
  AND "rank" = 1
ORDER BY "term"
LIMIT 20;
```
[Corrected SQL]
2025-05-07 03:36:24 - Thread-586 (execute) - INFO - [Results for corrected sql]
week,term,rank,percent_gain,dma_name,refresh_date
2023-10-15,liam payne,1,30350,Philadelphia PA,2024-10-17
2023-10-15,liam payne,1,30350,Greenville-New Bern-Washington NC,2024-10-17
2023-10-15,liam payne,1,30350,Wilkes Barre-Scranton PA,2024-10-17
2023-10-15,liam payne,1,30350,Juneau AK,2024-10-17
2023-10-15,liam payne,1,30350,Ft. Myers-Naples FL,2024-10-17

[Results for corrected sql]
2025-05-07 03:37:59 - Thread-586 (execute) - INFO - [Corrected other sqls]
```sql
--Description: 
-- International – retrieve ALL rising terms (ordered by rank) for the week closest 
-- to exactly one year before the latest week, using the freshest snapshot.
WITH latest_wk AS (
    SELECT MAX("week") AS latest_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
),
target_dt AS (
    SELECT DATEADD(year, -1, latest_week) AS tgt_date
    FROM latest_wk
),
candidate AS (
    SELECT DISTINCT
           "week",
           ABS(DATEDIFF(day, "week", (SELECT tgt_date FROM target_dt))) AS diff_days
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
    WHERE ABS(DATEDIFF(day, "week", (SELECT tgt_date FROM target_dt))) <= 14
),
chosen_wk AS (
    SELECT "week" AS chosen_week
    FROM candidate
    ORDER BY diff_days ASC, "week" DESC
    LIMIT 1
),
best_snap AS (
    SELECT MAX("refresh_date") AS freshest_snapshot
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
    WHERE "week" = (SELECT chosen_week FROM chosen_wk)
)
SELECT
    "week",
    "term",
    "rank",
    "percent_gain",
    "region_name",
    "country_name",
    "refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
WHERE "week"         = (SELECT chosen_week      FROM chosen_wk)
  AND "refresh_date" = (SELECT freshest_snapshot FROM best_snap)
ORDER BY "rank" ASC
LIMIT 20;
```

```sql
--Description: 
-- U.S. – return the single #1-ranked rising search term for the week closest to one 
-- year before the latest week, using the freshest snapshot.
WITH latest_wk AS (
    SELECT MAX("week") AS latest_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
),
target_dt AS (
    SELECT DATEADD(year, -1, latest_week) AS tgt_date
    FROM latest_wk
),
candidate AS (
    SELECT DISTINCT
           "week",
           ABS(DATEDIFF(day, "week", (SELECT tgt_date FROM target_dt))) AS diff_days
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
    WHERE ABS(DATEDIFF(day, "week", (SELECT tgt_date FROM target_dt))) <= 14
),
chosen_wk AS (
    SELECT "week" AS chosen_week
    FROM candidate
    ORDER BY diff_days ASC, "week" DESC
    LIMIT 1
),
best_snap AS (
    SELECT MAX("refresh_date") AS freshest_snapshot
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
    WHERE "week" = (SELECT chosen_week FROM chosen_wk)
)
SELECT
    "term",
    "rank",
    "percent_gain",
    "dma_name",
    "week",
    "refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week"         = (SELECT chosen_week      FROM chosen_wk)
  AND "refresh_date" = (SELECT freshest_snapshot FROM best_snap)
  AND "rank" = 1
LIMIT 20;
```
[Corrected other sqls]
2025-05-07 03:37:59 - Thread-586 (execute) - INFO - [Successfully corrected]
Successfully corrected. SQL:
--Description: 
-- Purpose: Return the #1-ranked rising search term for the week that is as close as
--          possible (± ≤ 14 days) to exactly one calendar year before the most-recent
--          week in GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS, using the freshest
--          snapshot for that chosen week.
-- Logic (embedded in CTEs):
--   1) latest_wk  : most-recent week (e.g., 2024-10-13).
--   2) target_dt  : latest_wk – 1 year (DATEADD(year,-1)).
--   3) candidate  : all distinct weeks within ±14 days of target_dt; compute the
--                   absolute day-difference.
--   4) chosen_wk  : pick the candidate having the smallest difference (ties → newer week).
--   5) best_snap  : for chosen_wk, keep only the newest refresh_date.
--   6) final_sel  : rows whose week = chosen_wk, refresh_date = best_snap, and rank = 1.
WITH latest_wk AS (
    SELECT MAX("week") AS latest_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
),
target_dt AS (
    SELECT DATEADD(year, -1, latest_week) AS tgt_date
    FROM latest_wk
),
candidate AS (
    SELECT DISTINCT
           "week",
           ABS(DATEDIFF(day, "week", (SELECT tgt_date FROM target_dt))) AS diff_days
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
    WHERE ABS(DATEDIFF(day, "week", (SELECT tgt_date FROM target_dt))) <= 14
),
chosen_wk AS (
    SELECT "week" AS chosen_week
    FROM candidate
    ORDER BY diff_days ASC, "week" DESC
    LIMIT 1
),
best_snap AS (
    SELECT MAX("refresh_date") AS latest_refresh
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
    WHERE "week" = (SELECT chosen_week FROM chosen_wk)
)
SELECT
    "week",
    "term",
    "rank",
    "percent_gain",
    "dma_name",
    "refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week"         = (SELECT chosen_week   FROM chosen_wk)
  AND "refresh_date" = (SELECT latest_refresh FROM best_snap)
  AND "rank" = 1
ORDER BY "term"
LIMIT 20;
Results:
week,term,rank,percent_gain,dma_name,refresh_date
2023-10-15,liam payne,1,30350,Philadelphia PA,2024-10-17
2023-10-15,liam payne,1,30350,Greenville-New Bern-Washington NC,2024-10-17
2023-10-15,liam payne,1,30350,Wilkes Barre-Scranton PA,2024-10-17
2023-10-15,liam payne,1,30350,Juneau AK,2024-10-17
2023-10-15,liam payne,1,30350,Ft. Myers-Naples FL,2024-10-17

[Successfully corrected]
2025-05-07 03:37:59 - Thread-586 (execute) - INFO - [Try to execute]
--Description: 
-- International – retrieve ALL rising terms (ordered by rank) for the week closest 
-- to exactly one year before the latest week, using the freshest snapshot.
WITH latest_wk AS (
    SELECT MAX("week") AS latest_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
),
target_dt AS (
    SELECT DATEADD(year, -1, latest_week) AS tgt_date
    FROM latest_wk
),
candidate AS (
    SELECT DISTINCT
           "week",
           ABS(DATEDIFF(day, "week", (SELECT tgt_date FROM target_dt))) AS diff_days
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
    WHERE ABS(DATEDIFF(day, "week", (SELECT tgt_date FROM target_dt))) <= 14
),
chosen_wk AS (
    SELECT "week" AS chosen_week
    FROM candidate
    ORDER BY diff_days ASC, "week" DESC
    LIMIT 1
),
best_snap AS (
    SELECT MAX("refresh_date") AS freshest_snapshot
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
    WHERE "week" = (SELECT chosen_week FROM chosen_wk)
)
SELECT
    "week",
    "term",
    "rank",
    "percent_gain",
    "region_name",
    "country_name",
    "refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
WHERE "week"         = (SELECT chosen_week      FROM chosen_wk)
  AND "refresh_date" = (SELECT freshest_snapshot FROM best_snap)
ORDER BY "rank" ASC
LIMIT 20
[Try to execute]
2025-05-07 03:38:02 - Thread-586 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 
-- International – retrieve ALL rising terms (ordered by rank) for the week closest 
-- to exactly one year before the latest week, using the freshest snapshot.
WITH latest_wk AS (
    SELECT MAX("week") AS latest_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
),
target_dt AS (
    SELECT DATEADD(year, -1, latest_week) AS tgt_date
    FROM latest_wk
),
candidate AS (
    SELECT DISTINCT
           "week",
           ABS(DATEDIFF(day, "week", (SELECT tgt_date FROM target_dt))) AS diff_days
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
    WHERE ABS(DATEDIFF(day, "week", (SELECT tgt_date FROM target_dt))) <= 14
),
chosen_wk AS (
    SELECT "week" AS chosen_week
    FROM candidate
    ORDER BY diff_days ASC, "week" DESC
    LIMIT 1
),
best_snap AS (
    SELECT MAX("refresh_date") AS freshest_snapshot
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
    WHERE "week" = (SELECT chosen_week FROM chosen_wk)
)
SELECT
    "week",
    "term",
    "rank",
    "percent_gain",
    "region_name",
    "country_name",
    "refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
WHERE "week"         = (SELECT chosen_week      FROM chosen_wk)
  AND "refresh_date" = (SELECT freshest_snapshot FROM best_snap)
ORDER BY "rank" ASC
LIMIT 20
Results:
week,term,rank,percent_gain,region_name,country_name,refresh_date
2023-10-15,한국 대 이라크,1,10650,Daejeon,South Korea,2024-10-17
2023-10-15,memefi combo,1,13900,Ogun State,Nigeria,2024-10-17
2023-10-15,hasan yalnızoğlu,1,16700,Malatya,Turkey,2024-10-17
2023-10-15,jenei istván,1,8300,Komárom-Esztergom,Hungary,2024-10-17
2023-10-15,liam payne,1,17300,Sucre,Colombia,2024-10-17

[Successfully executed]
2025-05-07 03:38:02 - Thread-586 (execute) - INFO - [Try to execute]
--Description: 
-- U.S. – return the single #1-ranked rising search term for the week closest to one 
-- year before the latest week, using the freshest snapshot.
WITH latest_wk AS (
    SELECT MAX("week") AS latest_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
),
target_dt AS (
    SELECT DATEADD(year, -1, latest_week) AS tgt_date
    FROM latest_wk
),
candidate AS (
    SELECT DISTINCT
           "week",
           ABS(DATEDIFF(day, "week", (SELECT tgt_date FROM target_dt))) AS diff_days
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
    WHERE ABS(DATEDIFF(day, "week", (SELECT tgt_date FROM target_dt))) <= 14
),
chosen_wk AS (
    SELECT "week" AS chosen_week
    FROM candidate
    ORDER BY diff_days ASC, "week" DESC
    LIMIT 1
),
best_snap AS (
    SELECT MAX("refresh_date") AS freshest_snapshot
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
    WHERE "week" = (SELECT chosen_week FROM chosen_wk)
)
SELECT
    "term",
    "rank",
    "percent_gain",
    "dma_name",
    "week",
    "refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week"         = (SELECT chosen_week      FROM chosen_wk)
  AND "refresh_date" = (SELECT freshest_snapshot FROM best_snap)
  AND "rank" = 1
LIMIT 20
[Try to execute]
2025-05-07 03:38:05 - Thread-586 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 
-- U.S. – return the single #1-ranked rising search term for the week closest to one 
-- year before the latest week, using the freshest snapshot.
WITH latest_wk AS (
    SELECT MAX("week") AS latest_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
),
target_dt AS (
    SELECT DATEADD(year, -1, latest_week) AS tgt_date
    FROM latest_wk
),
candidate AS (
    SELECT DISTINCT
           "week",
           ABS(DATEDIFF(day, "week", (SELECT tgt_date FROM target_dt))) AS diff_days
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
    WHERE ABS(DATEDIFF(day, "week", (SELECT tgt_date FROM target_dt))) <= 14
),
chosen_wk AS (
    SELECT "week" AS chosen_week
    FROM candidate
    ORDER BY diff_days ASC, "week" DESC
    LIMIT 1
),
best_snap AS (
    SELECT MAX("refresh_date") AS freshest_snapshot
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
    WHERE "week" = (SELECT chosen_week FROM chosen_wk)
)
SELECT
    "term",
    "rank",
    "percent_gain",
    "dma_name",
    "week",
    "refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week"         = (SELECT chosen_week      FROM chosen_wk)
  AND "refresh_date" = (SELECT freshest_snapshot FROM best_snap)
  AND "rank" = 1
LIMIT 20
Results:
term,rank,percent_gain,dma_name,week,refresh_date
liam payne,1,30350,Charlotte NC,2023-10-15,2024-10-17
liam payne,1,30350,Wilmington NC,2023-10-15,2024-10-17
liam payne,1,30350,Chattanooga TN,2023-10-15,2024-10-17
liam payne,1,30350,Dothan AL,2023-10-15,2024-10-17
liam payne,1,30350,Atlanta GA,2023-10-15,2024-10-17
liam payne,1,30350,Rapid City SD,2023-10-15,2024-10-17

[Successfully executed]
2025-05-07 03:38:05 - Thread-586 (execute) - INFO - itercount: 0
2025-05-07 03:38:05 - Thread-586 (execute) - INFO - [Self-refine]
Table full name: GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_TERMS
Column name: week Type: DATE
Column name: term Type: TEXT
Column name: rank Type: NUMBER
Column name: score Type: NUMBER
Column name: refresh_date Type: DATE
Column name: dma_id Type: NUMBER
Column name: dma_name Type: TEXT
Sample rows:
[{'dma_name': 'Portland-Auburn ME', 'dma_id': 500, 'term': 'AC Milan', 'week': '2019-11-17', 'score': None, 'rank': 23, 'refresh_date': '2024-09-28'}, {'dma_name': 'Portland-Auburn ME', 'dma_id': 500, 'term': 'AC Milan', 'week': '2019-12-15', 'score': None, 'rank': 23, 'refresh_date': '2024-09-28'}, {'dma_name': 'Portland-Auburn ME', 'dma_id': 500, 'term': 'AC Milan', 'week': '2020-02-02', 'score': None, 'rank': 23, 'refresh_date': '2024-09-28'}, {'dma_name': 'Portland-Auburn ME', 'dma_id': 500, 'term': 'AC Milan', 'week': '2020-02-09', 'score': None, 'rank': 23, 'refresh_date': '2024-09-28'}, {'dma_name': 'Portland-Auburn ME', 'dma_id': 500, 'term': 'AC Milan', 'week': '2020-03-22', 'score': None, 'rank': 23, 'refresh_date': '2024-09-28'}]

--------------------------------------------------
Table full name: GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
Column name: refresh_date Type: DATE
Column name: rank Type: NUMBER
Column name: dma_name Type: TEXT
Column name: score Type: NUMBER
Column name: week Type: DATE
Column name: percent_gain Type: NUMBER
Column name: term Type: TEXT
Column name: dma_id Type: NUMBER
Sample rows:
[{'dma_id': 500, 'term': '49ers vs vikings', 'week': '2019-09-15', 'score': None, 'rank': 13, 'percent_gain': 1650, 'refresh_date': '2024-09-17', 'dma_name': 'Portland-Auburn ME'}, {'dma_id': 500, 'term': '49ers vs vikings', 'week': '2019-11-17', 'score': None, 'rank': 13, 'percent_gain': 1650, 'refresh_date': '2024-09-17', 'dma_name': 'Portland-Auburn ME'}, {'dma_id': 500, 'term': '49ers vs vikings', 'week': '2019-11-24', 'score': None, 'rank': 13, 'percent_gain': 1650, 'refresh_date': '2024-09-17', 'dma_name': 'Portland-Auburn ME'}, {'dma_id': 500, 'term': '49ers vs vikings', 'week': '2019-12-29', 'score': None, 'rank': 13, 'percent_gain': 1650, 'refresh_date': '2024-09-17', 'dma_name': 'Portland-Auburn ME'}, {'dma_id': 500, 'term': '49ers vs vikings', 'week': '2020-01-19', 'score': None, 'rank': 13, 'percent_gain': 1650, 'refresh_date': '2024-09-17', 'dma_name': 'Portland-Auburn ME'}]

--------------------------------------------------
Table full name: GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
Column name: rank Type: NUMBER
Column name: region_name Type: TEXT
Column name: refresh_date Type: DATE
Column name: region_code Type: TEXT
Column name: term Type: TEXT
Column name: week Type: DATE
Column name: country_name Type: TEXT
Column name: percent_gain Type: NUMBER
Column name: country_code Type: TEXT
Column name: score Type: NUMBER
Sample rows:
[{'percent_gain': 3500, 'region_name': 'Sibiu', 'term': 'gigi multescu', 'week': '2021-03-07', 'score': None, 'refresh_date': '2024-09-17', 'country_name': 'Romania', 'country_code': 'RO', 'region_code': 'RO-SB', 'rank': 10}, {'percent_gain': 3500, 'region_name': 'Sibiu', 'term': 'gigi multescu', 'week': '2021-04-04', 'score': None, 'refresh_date': '2024-09-17', 'country_name': 'Romania', 'country_code': 'RO', 'region_code': 'RO-SB', 'rank': 10}, {'percent_gain': 3500, 'region_name': 'Sibiu', 'term': 'gigi multescu', 'week': '2021-05-16', 'score': None, 'refresh_date': '2024-09-17', 'country_name': 'Romania', 'country_code': 'RO', 'region_code': 'RO-SB', 'rank': 10}, {'percent_gain': 3500, 'region_name': 'Sibiu', 'term': 'gigi multescu', 'week': '2021-05-23', 'score': None, 'refresh_date': '2024-09-17', 'country_name': 'Romania', 'country_code': 'RO', 'region_code': 'RO-SB', 'rank': 10}, {'percent_gain': 3500, 'region_name': 'Sibiu', 'term': 'gigi multescu', 'week': '2021-09-19', 'score': None, 'refresh_date': '2024-09-17', 'country_name': 'Romania', 'country_code': 'RO', 'region_code': 'RO-SB', 'rank': 10}]

--------------------------------------------------
Table full name: GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_TERMS
Column name: week Type: DATE
Column name: term Type: TEXT
Column name: rank Type: NUMBER
Column name: score Type: NUMBER
Column name: refresh_date Type: DATE
Column name: region_code Type: TEXT
Column name: region_name Type: TEXT
Column name: country_code Type: TEXT
Column name: country_name Type: TEXT
Sample rows:
[{'term': 'Galatasaray  PAOK', 'refresh_date': '2024-09-28', 'region_code': 'TR-39', 'country_code': 'TR', 'region_name': 'Kırklareli', 'week': '2022-03-13', 'score': None, 'rank': 14, 'country_name': 'Turkey'}, {'term': 'Galatasaray  PAOK', 'refresh_date': '2024-09-28', 'region_code': 'TR-39', 'country_code': 'TR', 'region_name': 'Kırklareli', 'week': '2022-11-13', 'score': None, 'rank': 14, 'country_name': 'Turkey'}, {'term': 'Galatasaray  PAOK', 'refresh_date': '2024-09-28', 'region_code': 'TR-39', 'country_code': 'TR', 'region_name': 'Kırklareli', 'week': '2023-01-01', 'score': None, 'rank': 14, 'country_name': 'Turkey'}, {'term': 'Galatasaray  PAOK', 'refresh_date': '2024-09-28', 'region_code': 'TR-39', 'country_code': 'TR', 'region_name': 'Kırklareli', 'week': '2023-01-15', 'score': None, 'rank': 14, 'country_name': 'Turkey'}, {'term': 'Galatasaray  PAOK', 'refresh_date': '2024-09-28', 'region_code': 'TR-39', 'country_code': 'TR', 'region_name': 'Kırklareli', 'week': '2023-04-02', 'score': None, 'rank': 14, 'country_name': 'Turkey'}]

--------------------------------------------------
External knowledge that might be helpful: 
None
The table structure information is ({database name: {schema name: [table name]}}): 
{'GOOGLE_TRENDS': {'GOOGLE_TRENDS': ['TOP_TERMS', 'TOP_RISING_TERMS', 'INTERNATIONAL_TOP_RISING_TERMS', 'INTERNATIONAL_TOP_TERMS']}}

Some few-shot examples after column exploration may be helpful:
Query:
--Description: Find the latest available week and its most recent refresh date in U.S. “TOP_RISING_TERMS”.
SELECT  
    MAX("week")          AS "latest_week",
    MAX("refresh_date")  AS "latest_refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
LIMIT 20;
Answer:
latest_week,latest_refresh_date
2024-10-13,2024-10-17
Query:
--Description: Find the latest available week and its most recent refresh date in “INTERNATIONAL_TOP_RISING_TERMS”.
SELECT  
    MAX("week")          AS "latest_week",
    MAX("refresh_date")  AS "latest_refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
LIMIT 20;
Answer:
latest_week,latest_refresh_date
2024-10-13,2024-10-17
Query:
--Description: Inspect the 20 most-recent weeks in U.S. “TOP_RISING_TERMS”.
SELECT DISTINCT  
    "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
ORDER BY "week" DESC
LIMIT 20;
Answer:
week
2024-10-13
2024-10-06
2024-09-29
2024-09-22
2024-09-15
2024-09-08
2024-09-01
2024-08-25
2024-08-18
2024-08-11
2024-08-04
2024-07-28
2024-07-21
2024-07-14
2024-07-07
2024-06-30
2024-06-23
2024-06-16
Query:
--Description: Inspect the 20 most-recent weeks in “INTERNATIONAL_TOP_RISING_TERMS”.
SELECT DISTINCT  
    "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
ORDER BY "week" DESC
LIMIT 20;
Answer:
week
2024-10-13
2024-10-06
2024-09-29
2024-09-22
2024-09-15
2024-09-08
2024-09-01
2024-08-25
2024-08-18
2024-08-11
2024-08-04
2024-07-28
2024-07-21
2024-07-14
2024-07-07
2024-06-30
2024-06-23
2024-06-16
Query:
--Description: Show all rising terms for the latest week in U.S. data, ordered by rank.
SELECT  
    "week",
    "term",
    "rank",
    "percent_gain",
    "dma_name",
    "refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week" = (SELECT MAX("week") FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS)
ORDER BY "rank" ASC
LIMIT 20;
Answer:
week,term,rank,percent_gain,dma_name,refresh_date
2024-10-13,liam payne,1,30350,Ottumwa IA-Kirksville MO,2024-10-17
2024-10-13,liam payne,1,30350,Little Rock-Pine Bluff AR,2024-10-17
2024-10-13,liam payne,1,30350,Marquette MI,2024-10-17
2024-10-13,liam payne,1,30350,Seattle-Tacoma WA,2024-10-17
2024-10-13,liam payne,1,30350,Cleveland-Akron (Canton) OH,2024-10-17
Query:
--Description: Show all rising terms for the latest week in International data, ordered by rank.
SELECT  
    "week",
    "term",
    "rank",
    "percent_gain",
    "region_name",
    "country_name",
    "refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
WHERE "week" = (SELECT MAX("week") FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS)
ORDER BY "rank" ASC
LIMIT 20;
Answer:
week,term,rank,percent_gain,region_name,country_name,refresh_date
2024-10-13,ตรวจ หวย 16 ตุลาคม 2567,1,14900,Kamphaeng Phet,Thailand,2024-10-17
2024-10-13,ตรวจ หวย 16 ตุลาคม 2567,1,14900,Samut Songkhram,Thailand,2024-10-17
2024-10-13,ตรวจ หวย 16 ตุลาคม 2567,1,14900,Phayao,Thailand,2024-10-17
2024-10-13,influenza b,1,5950,Autonomous City of Buenos Aires,Argentina,2024-10-15
2024-10-13,ตรวจ หวย 16 ตุลาคม 2567,1,14900,Phetchabun,Thailand,2024-10-17
Query:
--Description: Compute the week that is exactly one year before the latest week in U.S. “TOP_RISING_TERMS”.
SELECT  
    DATEADD(year, -1, (SELECT MAX("week") FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS))  AS "week_one_year_prior"
LIMIT 20;
Answer:
week_one_year_prior
2023-10-13
Query:
--Description: 
-- International – retrieve ALL rising terms (ordered by rank) for the week closest 
-- to exactly one year before the latest week, using the freshest snapshot.
WITH latest_wk AS (
    SELECT MAX("week") AS latest_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
),
target_dt AS (
    SELECT DATEADD(year, -1, latest_week) AS tgt_date
    FROM latest_wk
),
candidate AS (
    SELECT DISTINCT
           "week",
           ABS(DATEDIFF(day, "week", (SELECT tgt_date FROM target_dt))) AS diff_days
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
    WHERE ABS(DATEDIFF(day, "week", (SELECT tgt_date FROM target_dt))) <= 14
),
chosen_wk AS (
    SELECT "week" AS chosen_week
    FROM candidate
    ORDER BY diff_days ASC, "week" DESC
    LIMIT 1
),
best_snap AS (
    SELECT MAX("refresh_date") AS freshest_snapshot
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
    WHERE "week" = (SELECT chosen_week FROM chosen_wk)
)
SELECT
    "week",
    "term",
    "rank",
    "percent_gain",
    "region_name",
    "country_name",
    "refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
WHERE "week"         = (SELECT chosen_week      FROM chosen_wk)
  AND "refresh_date" = (SELECT freshest_snapshot FROM best_snap)
ORDER BY "rank" ASC
LIMIT 20
Answer:
week,term,rank,percent_gain,region_name,country_name,refresh_date
2023-10-15,한국 대 이라크,1,10650,Daejeon,South Korea,2024-10-17
2023-10-15,memefi combo,1,13900,Ogun State,Nigeria,2024-10-17
2023-10-15,hasan yalnızoğlu,1,16700,Malatya,Turkey,2024-10-17
2023-10-15,jenei istván,1,8300,Komárom-Esztergom,Hungary,2024-10-17
2023-10-15,liam payne,1,17300,Sucre,Colombia,2024-10-17
Query:
--Description: 
-- U.S. – return the single #1-ranked rising search term for the week closest to one 
-- year before the latest week, using the freshest snapshot.
WITH latest_wk AS (
    SELECT MAX("week") AS latest_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
),
target_dt AS (
    SELECT DATEADD(year, -1, latest_week) AS tgt_date
    FROM latest_wk
),
candidate AS (
    SELECT DISTINCT
           "week",
           ABS(DATEDIFF(day, "week", (SELECT tgt_date FROM target_dt))) AS diff_days
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
    WHERE ABS(DATEDIFF(day, "week", (SELECT tgt_date FROM target_dt))) <= 14
),
chosen_wk AS (
    SELECT "week" AS chosen_week
    FROM candidate
    ORDER BY diff_days ASC, "week" DESC
    LIMIT 1
),
best_snap AS (
    SELECT MAX("refresh_date") AS freshest_snapshot
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
    WHERE "week" = (SELECT chosen_week FROM chosen_wk)
)
SELECT
    "term",
    "rank",
    "percent_gain",
    "dma_name",
    "week",
    "refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week"         = (SELECT chosen_week      FROM chosen_wk)
  AND "refresh_date" = (SELECT freshest_snapshot FROM best_snap)
  AND "rank" = 1
LIMIT 20
Answer:
term,rank,percent_gain,dma_name,week,refresh_date
liam payne,1,30350,Charlotte NC,2023-10-15,2024-10-17
liam payne,1,30350,Wilmington NC,2023-10-15,2024-10-17
liam payne,1,30350,Chattanooga TN,2023-10-15,2024-10-17
liam payne,1,30350,Dothan AL,2023-10-15,2024-10-17
liam payne,1,30350,Atlanta GA,2023-10-15,2024-10-17
liam payne,1,30350,Rapid City SD,2023-10-15,2024-10-17
Task: Based on the most recent refresh date, identify the top-ranked rising search term for the week that is exactly one year prior to the latest available week in the dataset.

Please think step by step and answer only one complete SQL in snowflake dialect in ```sql``` format.
SQL usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: The table structure information is ({database name: {schema name: [table name]}}): 
{'GOOGLE_TRENDS': {'GOOGLE_TRENDS': ['TOP_TERMS', 'TOP_RISING_TERMS', 'INTERNATIONAL_TOP_RISING_TERMS', 'INTERNATIONAL_TOP_TERMS']}}

When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
If the task description does not specify the number of decimal places, retain all decimals to four places.

[Self-refine]
2025-05-07 03:38:35 - Thread-586 (execute) - INFO - [Try to run SQL in self-refine]
```sql
/*------------------------------------------------------------
  Goal : Return the term(s) whose rank = 1 for the week that is
         exactly one year before the latest week in any rising–
         terms table, using the freshest snapshot available for
         that week.
------------------------------------------------------------*/
WITH all_rising AS (   -- combine U.S. and International rising-term data
    SELECT 'US'   AS "source",
           "term",
           "rank",
           "percent_gain",
           "week",
           "refresh_date"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS

    UNION ALL

    SELECT 'INTL' AS "source",
           "term",
           "rank",
           "percent_gain",
           "week",
           "refresh_date"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
),

latest_wk AS (         -- most-recent week present in the whole data set
    SELECT MAX("week") AS "latest_week"
    FROM all_rising
),

target_wk AS (         -- week exactly one year prior to the latest week
    SELECT DATEADD(year, -1, "latest_week") AS "target_week"
    FROM latest_wk
),

fresh_snap AS (        -- freshest snapshot for that target week
    SELECT MAX("refresh_date") AS "freshest_refresh"
    FROM all_rising
    WHERE "week" = (SELECT "target_week" FROM target_wk)
)

-- final answer : top-ranked rising term(s) for the target week
SELECT
    "term",
    "rank",
    "week",
    "refresh_date",
    "source"
FROM all_rising
WHERE "week"         = (SELECT "target_week"     FROM target_wk)
  AND "refresh_date" = (SELECT "freshest_refresh" FROM fresh_snap)
  AND "rank" = 1;
```
[Try to run SQL in self-refine]
2025-05-07 03:38:39 - Thread-586 (execute) - INFO - itercount: 1
2025-05-07 03:38:39 - Thread-586 (execute) - INFO - [Self-refine]
Input sql:
/*------------------------------------------------------------
  Goal : Return the term(s) whose rank = 1 for the week that is
         exactly one year before the latest week in any rising–
         terms table, using the freshest snapshot available for
         that week.
------------------------------------------------------------*/
WITH all_rising AS (   -- combine U.S. and International rising-term data
    SELECT 'US'   AS "source",
           "term",
           "rank",
           "percent_gain",
           "week",
           "refresh_date"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS

    UNION ALL

    SELECT 'INTL' AS "source",
           "term",
           "rank",
           "percent_gain",
           "week",
           "refresh_date"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
),

latest_wk AS (         -- most-recent week present in the whole data set
    SELECT MAX("week") AS "latest_week"
    FROM all_rising
),

target_wk AS (         -- week exactly one year prior to the latest week
    SELECT DATEADD(year, -1, "latest_week") AS "target_week"
    FROM latest_wk
),

fresh_snap AS (        -- freshest snapshot for that target week
    SELECT MAX("refresh_date") AS "freshest_refresh"
    FROM all_rising
    WHERE "week" = (SELECT "target_week" FROM target_wk)
)

-- final answer : top-ranked rising term(s) for the target week
SELECT
    "term",
    "rank",
    "week",
    "refresh_date",
    "source"
FROM all_rising
WHERE "week"         = (SELECT "target_week"     FROM target_wk)
  AND "refresh_date" = (SELECT "freshest_refresh" FROM fresh_snap)
  AND "rank" = 1;
The error information is:
No data found for the specified query.

Please correct it and output only 1 complete SQL query.
[Self-refine]
2025-05-07 03:40:42 - Thread-586 (execute) - INFO - [Try to run SQL in self-refine]
```sql
/*--------------------------------------------------------------
  Return the #1-ranked rising search term(s) for the week that is
  closest (±14 days) to exactly one year before the latest week
  in any rising-terms table, using the freshest snapshot for that
  week.  Works across both U.S. and International datasets.
--------------------------------------------------------------*/
WITH all_rising AS (          -- combine U.S. + International rising terms
    SELECT 'US'   AS "source",
           "term",
           "rank",
           "percent_gain",
           "week",
           "refresh_date"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
    UNION ALL
    SELECT 'INTL' AS "source",
           "term",
           "rank",
           "percent_gain",
           "week",
           "refresh_date"
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
),
latest_wk AS (                -- latest available week
    SELECT MAX("week") AS "latest_week"
    FROM all_rising
),
target_dt AS (                -- exactly one year before that week
    SELECT DATEADD(year, -1, "latest_week") AS "tgt_date"
    FROM latest_wk
),
candidates AS (               -- weeks within ±14 days of the target date
    SELECT DISTINCT
           "week",
           ABS(DATEDIFF(day, "week", (SELECT "tgt_date" FROM target_dt))) AS diff_days
    FROM all_rising
    WHERE ABS(DATEDIFF(day, "week", (SELECT "tgt_date" FROM target_dt))) <= 14
),
chosen_wk AS (                -- pick the closest (newest if tie)
    SELECT "week"
    FROM candidates
    ORDER BY diff_days ASC, "week" DESC
    LIMIT 1
),
fresh_snap AS (               -- freshest refresh_date for that week
    SELECT MAX("refresh_date") AS "freshest_refresh"
    FROM all_rising
    WHERE "week" = (SELECT "week" FROM chosen_wk)
)
SELECT
    "term",
    "rank",
    "week",
    "refresh_date",
    "source"
FROM all_rising
WHERE "week"         = (SELECT "week"            FROM chosen_wk)
  AND "refresh_date" = (SELECT "freshest_refresh" FROM fresh_snap)
  AND "rank" = 1;
```
[Try to run SQL in self-refine]
2025-05-07 03:40:47 - Thread-586 (execute) - INFO - Total iteration counts: 1
