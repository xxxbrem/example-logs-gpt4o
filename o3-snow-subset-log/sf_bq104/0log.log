2025-05-07 03:28:30 - Thread-585 (execute) - INFO - [Exploration]
```sql
--Description: pull the 20 most-recent “refresh_date” values in TOP_RISING_TERMS to see the latest load dates
SELECT DISTINCT "refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
ORDER BY "refresh_date" DESC
LIMIT 20;
```

```sql
--Description: list the 20 most-recent “week” values that belong to the latest refresh_date
SELECT DISTINCT "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "refresh_date" = (SELECT MAX("refresh_date")
                        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS)
ORDER BY "week" DESC
LIMIT 20;
```

```sql
--Description: isolate the single most-recent “week” for that latest refresh_date
SELECT "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "refresh_date" = (SELECT MAX("refresh_date")
                        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS)
ORDER BY "week" DESC
LIMIT 1;
```

```sql
--Description: display all weeks that are exactly one year prior to the latest week (for verification)
WITH latest AS (
  SELECT MAX("week") AS latest_week
  FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
  WHERE "refresh_date" = (SELECT MAX("refresh_date")
                          FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS)
)
SELECT DISTINCT trt."week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS trt
JOIN latest l
  ON trt."week" = DATEADD(year, -1, l.latest_week)
WHERE trt."refresh_date" = (SELECT MAX("refresh_date")
                            FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS)
ORDER BY trt."week"
LIMIT 20;
```

```sql
--Description: show every rising term for that “one-year-prior” week, ordered by rank
WITH latest AS (
  SELECT MAX("week") AS latest_week
  FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
  WHERE "refresh_date" = (SELECT MAX("refresh_date")
                          FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS)
)
SELECT "term",
       "rank",
       "dma_name",
       "percent_gain",
       "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "refresh_date" = (SELECT MAX("refresh_date")
                        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS)
  AND "week" = DATEADD(year, -1, (SELECT latest_week FROM latest))
ORDER BY "rank" ASC
LIMIT 20;
```

```sql
--Description: fetch only the top-ranked (rank = 1) rising term for the “one-year-prior” week
WITH latest AS (
  SELECT MAX("week") AS latest_week
  FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
  WHERE "refresh_date" = (SELECT MAX("refresh_date")
                          FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS)
)
SELECT "term",
       "rank",
       "dma_name",
       "percent_gain",
       "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "refresh_date" = (SELECT MAX("refresh_date")
                        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS)
  AND "week" = DATEADD(year, -1, (SELECT latest_week FROM latest))
  AND "rank" = 1
LIMIT 20;
```

```sql
--Description: double-check that no ties exist—return rows for that week whose rank is 1 or 2
WITH latest AS (
  SELECT MAX("week") AS latest_week
  FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
  WHERE "refresh_date" = (SELECT MAX("refresh_date")
                          FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS)
)
SELECT "term",
       "rank",
       "dma_name",
       "percent_gain",
       "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "refresh_date" = (SELECT MAX("refresh_date")
                        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS)
  AND "week" = DATEADD(year, -1, (SELECT latest_week FROM latest))
  AND "rank" <= 2
ORDER BY "rank"
LIMIT 20;
```

```sql
--Description: get the same one-year-prior top term but grouped by DMA to see if multiples share rank 1
WITH latest AS (
  SELECT MAX("week") AS latest_week
  FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
  WHERE "refresh_date" = (SELECT MAX("refresh_date")
                          FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS)
)
SELECT "dma_name",
       "term",
       "rank",
       "percent_gain"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "refresh_date" = (SELECT MAX("refresh_date")
                        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS)
  AND "week" = DATEADD(year, -1, (SELECT latest_week FROM latest))
  AND "rank" = 1
ORDER BY "dma_name"
LIMIT 20;
```

```sql
--Description: inspect the distribution of percent_gain for all ranks during that week
WITH latest AS (
  SELECT MAX("week") AS latest_week
  FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
  WHERE "refresh_date" = (SELECT MAX("refresh_date")
                          FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS)
)
SELECT "rank",
       AVG("percent_gain") AS "avg_percent_gain"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "refresh_date" = (SELECT MAX("refresh_date")
                        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS)
  AND "week" = DATEADD(year, -1, (SELECT latest_week FROM latest))
GROUP BY "rank"
ORDER BY "rank"
LIMIT 20;
```

```sql
--Description: final single-row answer candidate—the term with the absolute highest rank (=1) and highest percent_gain that week
WITH latest AS (
  SELECT MAX("week") AS latest_week
  FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
  WHERE "refresh_date" = (SELECT MAX("refresh_date")
                          FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS)
),
one_year_prior AS (
  SELECT DATEADD(year, -1, latest_week) AS target_week
  FROM latest
)
SELECT "term",
       "rank",
       "percent_gain",
       "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "refresh_date" = (SELECT MAX("refresh_date")
                        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS)
  AND "week" = (SELECT target_week FROM one_year_prior)
ORDER BY "rank" ASC, "percent_gain" DESC
LIMIT 20;
```
[Exploration]
2025-05-07 03:28:30 - Thread-585 (execute) - INFO - [Try to execute]
--Description: pull the 20 most-recent “refresh_date” values in TOP_RISING_TERMS to see the latest load dates
SELECT DISTINCT "refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
ORDER BY "refresh_date" DESC
LIMIT 20;
[Try to execute]
2025-05-07 03:28:32 - Thread-585 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: pull the 20 most-recent “refresh_date” values in TOP_RISING_TERMS to see the latest load dates
SELECT DISTINCT "refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
ORDER BY "refresh_date" DESC
LIMIT 20;
Results:
refresh_date
2024-10-17
2024-10-16
2024-10-15
2024-10-14
2024-10-13
2024-10-12
2024-10-11
2024-10-10
2024-10-09
2024-10-08
2024-10-07
2024-10-06
2024-10-05
2024-10-04
2024-10-03
2024-10-02
2024-10-01

[Successfully executed]
2025-05-07 03:28:32 - Thread-585 (execute) - INFO - [Try to execute]
--Description: list the 20 most-recent “week” values that belong to the latest refresh_date
SELECT DISTINCT "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "refresh_date" = (SELECT MAX("refresh_date")
                        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS)
ORDER BY "week" DESC
LIMIT 20;
[Try to execute]
2025-05-07 03:28:32 - Thread-585 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: list the 20 most-recent “week” values that belong to the latest refresh_date
SELECT DISTINCT "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "refresh_date" = (SELECT MAX("refresh_date")
                        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS)
ORDER BY "week" DESC
LIMIT 20;
Results:
week
2024-10-13
2024-10-06
2024-09-29
2024-09-22
2024-09-15
2024-09-08
2024-09-01
2024-08-25
2024-08-18
2024-08-11
2024-08-04
2024-07-28
2024-07-21
2024-07-14
2024-07-07
2024-06-30
2024-06-23
2024-06-16

[Successfully executed]
2025-05-07 03:28:32 - Thread-585 (execute) - INFO - [Try to execute]
--Description: isolate the single most-recent “week” for that latest refresh_date
SELECT "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "refresh_date" = (SELECT MAX("refresh_date")
                        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS)
ORDER BY "week" DESC
LIMIT 1;
[Try to execute]
2025-05-07 03:28:32 - Thread-585 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: isolate the single most-recent “week” for that latest refresh_date
SELECT "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "refresh_date" = (SELECT MAX("refresh_date")
                        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS)
ORDER BY "week" DESC
LIMIT 1;
Results:
week
2024-10-13

[Successfully executed]
2025-05-07 03:28:32 - Thread-585 (execute) - INFO - [Try to execute]
--Description: display all weeks that are exactly one year prior to the latest week (for verification)
WITH latest AS (
  SELECT MAX("week") AS latest_week
  FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
  WHERE "refresh_date" = (SELECT MAX("refresh_date")
                          FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS)
)
SELECT DISTINCT trt."week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS trt
JOIN latest l
  ON trt."week" = DATEADD(year, -1, l.latest_week)
WHERE trt."refresh_date" = (SELECT MAX("refresh_date")
                            FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS)
ORDER BY trt."week"
LIMIT 20;
[Try to execute]
2025-05-07 03:28:33 - Thread-585 (execute) - INFO - [Error occurred]
No data found for the specified query.

[Error occurred]
2025-05-07 03:33:15 - Thread-585 (execute) - INFO - [Corrected SQL]
```sql
--Description / Thinking process:
-- 1) Find the single most-recent “week” in TOP_RISING_TERMS (regardless of refresh batch).  
-- 2) Shift that date back 52 weeks (≈ one year) to get the comparison “target” week.  
-- 3) Pull every row from the target week whose rank = 1, because rank 1 represents the top-ranked rising search term in each DMA.  
-- 4) Sort by percent_gain (largest first) in case multiple DMAs share rank 1.  
WITH latest_week AS (                               -- step 1
    SELECT MAX("week") AS max_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
), target_week AS (                                 -- step 2
    SELECT DATEADD(week, -52, max_week) AS one_year_prior
    FROM latest_week
)
SELECT
    "term",
    "rank",
    "percent_gain",
    "dma_name",
    "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS   -- step 3
WHERE "week" = (SELECT one_year_prior FROM target_week)
  AND "rank" = 1
ORDER BY "percent_gain" DESC                        -- step 4
LIMIT 20;
```
[Corrected SQL]
2025-05-07 03:33:16 - Thread-585 (execute) - INFO - [Results for corrected sql]
term,rank,percent_gain,dma_name,week
emerson romero,1,44850,Albuquerque-Santa Fe NM,2023-10-15
emerson romero,1,44850,Savannah GA,2023-10-15
emerson romero,1,44850,Cleveland-Akron (Canton) OH,2023-10-15
emerson romero,1,44850,Little Rock-Pine Bluff AR,2023-10-15
emerson romero,1,44850,Las Vegas NV,2023-10-15
emerson romero,1,44850,Bend OR,2023-10-15
emerson romero,1,44850,Orlando-Daytona Beach-Melbourne FL,2023-10-15

[Results for corrected sql]
2025-05-07 03:34:50 - Thread-585 (execute) - INFO - [Corrected other sqls]
```sql
--Description: list every rising term from the week exactly 52 weeks before the latest week in the table, ordered by rank
WITH latest_week AS (
    SELECT MAX("week") AS max_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
), target_week AS (
    SELECT DATEADD(week, -52, max_week) AS one_year_prior
    FROM latest_week
)
SELECT
    "term",
    "rank",
    "dma_name",
    "percent_gain",
    "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week" = (SELECT one_year_prior FROM target_week)
ORDER BY "rank" ASC
LIMIT 20;
```

```sql
--Description: return only the rank-1 rising term(s) for that one-year-prior week
WITH latest_week AS (
    SELECT MAX("week") AS max_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
), target_week AS (
    SELECT DATEADD(week, -52, max_week) AS one_year_prior
    FROM latest_week
)
SELECT
    "term",
    "rank",
    "dma_name",
    "percent_gain",
    "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week" = (SELECT one_year_prior FROM target_week)
  AND "rank" = 1
LIMIT 20;
```

```sql
--Description: double-check for any ties by returning rows whose rank is 1 or 2 for the target week
WITH latest_week AS (
    SELECT MAX("week") AS max_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
), target_week AS (
    SELECT DATEADD(week, -52, max_week) AS one_year_prior
    FROM latest_week
)
SELECT
    "term",
    "rank",
    "dma_name",
    "percent_gain",
    "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week" = (SELECT one_year_prior FROM target_week)
  AND "rank" <= 2
ORDER BY "rank"
LIMIT 20;
```

```sql
--Description: show the rank-1 term by DMA for the one-year-prior week to see whether multiple DMAs share the same top term
WITH latest_week AS (
    SELECT MAX("week") AS max_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
), target_week AS (
    SELECT DATEADD(week, -52, max_week) AS one_year_prior
    FROM latest_week
)
SELECT
    "dma_name",
    "term",
    "rank",
    "percent_gain"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week" = (SELECT one_year_prior FROM target_week)
  AND "rank" = 1
ORDER BY "dma_name"
LIMIT 20;
```

```sql
--Description: inspect the distribution of percent_gain by rank for that one-year-prior week
WITH latest_week AS (
    SELECT MAX("week") AS max_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
), target_week AS (
    SELECT DATEADD(week, -52, max_week) AS one_year_prior
    FROM latest_week
)
SELECT
    "rank",
    AVG("percent_gain") AS "avg_percent_gain"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week" = (SELECT one_year_prior FROM target_week)
GROUP BY "rank"
ORDER BY "rank"
LIMIT 20;
```

```sql
--Description: final candidate—top-ranked rows for the one-year-prior week, ordered by percent_gain to surface the strongest surge
WITH latest_week AS (
    SELECT MAX("week") AS max_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
), target_week AS (
    SELECT DATEADD(week, -52, max_week) AS one_year_prior
    FROM latest_week
)
SELECT
    "term",
    "rank",
    "percent_gain",
    "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week" = (SELECT one_year_prior FROM target_week)
ORDER BY "rank" ASC, "percent_gain" DESC
LIMIT 20;
```
[Corrected other sqls]
2025-05-07 03:34:50 - Thread-585 (execute) - INFO - [Successfully corrected]
Successfully corrected. SQL:
--Description / Thinking process:
-- 1) Find the single most-recent “week” in TOP_RISING_TERMS (regardless of refresh batch).  
-- 2) Shift that date back 52 weeks (≈ one year) to get the comparison “target” week.  
-- 3) Pull every row from the target week whose rank = 1, because rank 1 represents the top-ranked rising search term in each DMA.  
-- 4) Sort by percent_gain (largest first) in case multiple DMAs share rank 1.  
WITH latest_week AS (                               -- step 1
    SELECT MAX("week") AS max_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
), target_week AS (                                 -- step 2
    SELECT DATEADD(week, -52, max_week) AS one_year_prior
    FROM latest_week
)
SELECT
    "term",
    "rank",
    "percent_gain",
    "dma_name",
    "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS   -- step 3
WHERE "week" = (SELECT one_year_prior FROM target_week)
  AND "rank" = 1
ORDER BY "percent_gain" DESC                        -- step 4
LIMIT 20;
Results:
term,rank,percent_gain,dma_name,week
emerson romero,1,44850,Albuquerque-Santa Fe NM,2023-10-15
emerson romero,1,44850,Savannah GA,2023-10-15
emerson romero,1,44850,Cleveland-Akron (Canton) OH,2023-10-15
emerson romero,1,44850,Little Rock-Pine Bluff AR,2023-10-15
emerson romero,1,44850,Las Vegas NV,2023-10-15
emerson romero,1,44850,Bend OR,2023-10-15
emerson romero,1,44850,Orlando-Daytona Beach-Melbourne FL,2023-10-15

[Successfully corrected]
2025-05-07 03:34:50 - Thread-585 (execute) - INFO - [Try to execute]
--Description: list every rising term from the week exactly 52 weeks before the latest week in the table, ordered by rank
WITH latest_week AS (
    SELECT MAX("week") AS max_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
), target_week AS (
    SELECT DATEADD(week, -52, max_week) AS one_year_prior
    FROM latest_week
)
SELECT
    "term",
    "rank",
    "dma_name",
    "percent_gain",
    "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week" = (SELECT one_year_prior FROM target_week)
ORDER BY "rank" ASC
LIMIT 20
[Try to execute]
2025-05-07 03:34:51 - Thread-585 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: list every rising term from the week exactly 52 weeks before the latest week in the table, ordered by rank
WITH latest_week AS (
    SELECT MAX("week") AS max_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
), target_week AS (
    SELECT DATEADD(week, -52, max_week) AS one_year_prior
    FROM latest_week
)
SELECT
    "term",
    "rank",
    "dma_name",
    "percent_gain",
    "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week" = (SELECT one_year_prior FROM target_week)
ORDER BY "rank" ASC
LIMIT 20
Results:
term,rank,dma_name,percent_gain,week
south carolina vs alabama,1,Burlington VT-Plattsburgh NY,2300,2023-10-15
south carolina vs alabama,1,Ft. Myers-Naples FL,2300,2023-10-15
south carolina vs alabama,1,Marquette MI,2300,2023-10-15
south carolina vs alabama,1,Little Rock-Pine Bluff AR,2300,2023-10-15
south carolina vs alabama,1,Columbia-Jefferson City MO,2300,2023-10-15
south carolina vs alabama,1,Grand Rapids-Kalamazoo-Battle Creek MI,2300,2023-10-15

[Successfully executed]
2025-05-07 03:34:51 - Thread-585 (execute) - INFO - [Try to execute]
--Description: return only the rank-1 rising term(s) for that one-year-prior week
WITH latest_week AS (
    SELECT MAX("week") AS max_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
), target_week AS (
    SELECT DATEADD(week, -52, max_week) AS one_year_prior
    FROM latest_week
)
SELECT
    "term",
    "rank",
    "dma_name",
    "percent_gain",
    "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week" = (SELECT one_year_prior FROM target_week)
  AND "rank" = 1
LIMIT 20
[Try to execute]
2025-05-07 03:34:52 - Thread-585 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: return only the rank-1 rising term(s) for that one-year-prior week
WITH latest_week AS (
    SELECT MAX("week") AS max_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
), target_week AS (
    SELECT DATEADD(week, -52, max_week) AS one_year_prior
    FROM latest_week
)
SELECT
    "term",
    "rank",
    "dma_name",
    "percent_gain",
    "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week" = (SELECT one_year_prior FROM target_week)
  AND "rank" = 1
LIMIT 20
Results:
term,rank,dma_name,percent_gain,week
aiden hutchinson,1,Charlotte NC,2300,2023-10-15
chiefs vs falcons,1,Charlotte NC,2650,2023-10-15
aiden hutchinson,1,Greenville-New Bern-Washington NC,2300,2023-10-15
aiden hutchinson,1,Dothan AL,2300,2023-10-15
witherspoon meaning,1,Greenville-New Bern-Washington NC,1650,2023-10-15
witherspoon meaning,1,Dothan AL,1650,2023-10-15
witherspoon meaning,1,Baltimore MD,1650,2023-10-15

[Successfully executed]
2025-05-07 03:34:52 - Thread-585 (execute) - INFO - [Try to execute]
--Description: double-check for any ties by returning rows whose rank is 1 or 2 for the target week
WITH latest_week AS (
    SELECT MAX("week") AS max_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
), target_week AS (
    SELECT DATEADD(week, -52, max_week) AS one_year_prior
    FROM latest_week
)
SELECT
    "term",
    "rank",
    "dma_name",
    "percent_gain",
    "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week" = (SELECT one_year_prior FROM target_week)
  AND "rank" <= 2
ORDER BY "rank"
LIMIT 20
[Try to execute]
2025-05-07 03:34:53 - Thread-585 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: double-check for any ties by returning rows whose rank is 1 or 2 for the target week
WITH latest_week AS (
    SELECT MAX("week") AS max_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
), target_week AS (
    SELECT DATEADD(week, -52, max_week) AS one_year_prior
    FROM latest_week
)
SELECT
    "term",
    "rank",
    "dma_name",
    "percent_gain",
    "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week" = (SELECT one_year_prior FROM target_week)
  AND "rank" <= 2
ORDER BY "rank"
LIMIT 20
Results:
term,rank,dma_name,percent_gain,week
liam payne,1,Philadelphia PA,30350,2023-10-15
liam payne,1,Greenville-New Bern-Washington NC,30350,2023-10-15
liam payne,1,Wilkes Barre-Scranton PA,30350,2023-10-15
liam payne,1,Juneau AK,30350,2023-10-15
liam payne,1,Ft. Myers-Naples FL,30350,2023-10-15
liam payne,1,Savannah GA,30350,2023-10-15
liam payne,1,Palm Springs CA,30350,2023-10-15

[Successfully executed]
2025-05-07 03:34:53 - Thread-585 (execute) - INFO - [Try to execute]
--Description: show the rank-1 term by DMA for the one-year-prior week to see whether multiple DMAs share the same top term
WITH latest_week AS (
    SELECT MAX("week") AS max_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
), target_week AS (
    SELECT DATEADD(week, -52, max_week) AS one_year_prior
    FROM latest_week
)
SELECT
    "dma_name",
    "term",
    "rank",
    "percent_gain"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week" = (SELECT one_year_prior FROM target_week)
  AND "rank" = 1
ORDER BY "dma_name"
LIMIT 20
[Try to execute]
2025-05-07 03:34:54 - Thread-585 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: show the rank-1 term by DMA for the one-year-prior week to see whether multiple DMAs share the same top term
WITH latest_week AS (
    SELECT MAX("week") AS max_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
), target_week AS (
    SELECT DATEADD(week, -52, max_week) AS one_year_prior
    FROM latest_week
)
SELECT
    "dma_name",
    "term",
    "rank",
    "percent_gain"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week" = (SELECT one_year_prior FROM target_week)
  AND "rank" = 1
ORDER BY "dma_name"
LIMIT 20
Results:
dma_name,term,rank,percent_gain
Abilene-Sweetwater TX,aiden hutchinson,1,2300
Abilene-Sweetwater TX,olivia nuzzi,1,2900
Abilene-Sweetwater TX,liam payne,1,30350
Abilene-Sweetwater TX,venus de milo,1,5000
Abilene-Sweetwater TX,pete rose,1,13500
Abilene-Sweetwater TX,ratan tata,1,3050
Abilene-Sweetwater TX,south carolina vs alabama,1,2300
Abilene-Sweetwater TX,hurricane helene,1,3250
Abilene-Sweetwater TX,skrrt,1,2700
Abilene-Sweetwater TX,kris kristofferson,1,13850

[Successfully executed]
2025-05-07 03:34:54 - Thread-585 (execute) - INFO - [Try to execute]
--Description: inspect the distribution of percent_gain by rank for that one-year-prior week
WITH latest_week AS (
    SELECT MAX("week") AS max_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
), target_week AS (
    SELECT DATEADD(week, -52, max_week) AS one_year_prior
    FROM latest_week
)
SELECT
    "rank",
    AVG("percent_gain") AS "avg_percent_gain"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week" = (SELECT one_year_prior FROM target_week)
GROUP BY "rank"
ORDER BY "rank"
LIMIT 20
[Try to execute]
2025-05-07 03:34:55 - Thread-585 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: inspect the distribution of percent_gain by rank for that one-year-prior week
WITH latest_week AS (
    SELECT MAX("week") AS max_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
), target_week AS (
    SELECT DATEADD(week, -52, max_week) AS one_year_prior
    FROM latest_week
)
SELECT
    "rank",
    AVG("percent_gain") AS "avg_percent_gain"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week" = (SELECT one_year_prior FROM target_week)
GROUP BY "rank"
ORDER BY "rank"
LIMIT 20
Results:
rank,avg_percent_gain
1,10410.606061
2,3387.878788
3,2604.545455
4,2250.000000
5,1983.333333
6,1713.636364
7,1536.363636
8,1362.121212
9,1198.484848
10,1125.757576
11,1042.121212
12,950.909091
13,914.242424
14,837.878788
15,788.787879
16,733.636364
17,693.939394
18,657.272727
19,611.515152

[Successfully executed]
2025-05-07 03:34:55 - Thread-585 (execute) - INFO - [Try to execute]
--Description: final candidate—top-ranked rows for the one-year-prior week, ordered by percent_gain to surface the strongest surge
WITH latest_week AS (
    SELECT MAX("week") AS max_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
), target_week AS (
    SELECT DATEADD(week, -52, max_week) AS one_year_prior
    FROM latest_week
)
SELECT
    "term",
    "rank",
    "percent_gain",
    "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week" = (SELECT one_year_prior FROM target_week)
ORDER BY "rank" ASC, "percent_gain" DESC
LIMIT 20
[Try to execute]
2025-05-07 03:34:55 - Thread-585 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: final candidate—top-ranked rows for the one-year-prior week, ordered by percent_gain to surface the strongest surge
WITH latest_week AS (
    SELECT MAX("week") AS max_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
), target_week AS (
    SELECT DATEADD(week, -52, max_week) AS one_year_prior
    FROM latest_week
)
SELECT
    "term",
    "rank",
    "percent_gain",
    "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week" = (SELECT one_year_prior FROM target_week)
ORDER BY "rank" ASC, "percent_gain" DESC
LIMIT 20
Results:
term,rank,percent_gain,week
emerson romero,1,44850,2023-10-15
emerson romero,1,44850,2023-10-15
emerson romero,1,44850,2023-10-15
emerson romero,1,44850,2023-10-15
emerson romero,1,44850,2023-10-15
emerson romero,1,44850,2023-10-15
emerson romero,1,44850,2023-10-15
emerson romero,1,44850,2023-10-15
emerson romero,1,44850,2023-10-15

[Successfully executed]
2025-05-07 03:34:55 - Thread-585 (execute) - INFO - itercount: 0
2025-05-07 03:34:55 - Thread-585 (execute) - INFO - [Self-refine]
Table full name: GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_TERMS
Column name: week Type: DATE
Column name: term Type: TEXT
Column name: rank Type: NUMBER
Column name: score Type: NUMBER
Column name: refresh_date Type: DATE
Column name: dma_id Type: NUMBER
Column name: dma_name Type: TEXT
Sample rows:
[{'dma_name': 'Portland-Auburn ME', 'dma_id': 500, 'term': 'AC Milan', 'week': '2019-11-17', 'score': None, 'rank': 23, 'refresh_date': '2024-09-28'}, {'dma_name': 'Portland-Auburn ME', 'dma_id': 500, 'term': 'AC Milan', 'week': '2019-12-15', 'score': None, 'rank': 23, 'refresh_date': '2024-09-28'}, {'dma_name': 'Portland-Auburn ME', 'dma_id': 500, 'term': 'AC Milan', 'week': '2020-02-02', 'score': None, 'rank': 23, 'refresh_date': '2024-09-28'}, {'dma_name': 'Portland-Auburn ME', 'dma_id': 500, 'term': 'AC Milan', 'week': '2020-02-09', 'score': None, 'rank': 23, 'refresh_date': '2024-09-28'}, {'dma_name': 'Portland-Auburn ME', 'dma_id': 500, 'term': 'AC Milan', 'week': '2020-03-22', 'score': None, 'rank': 23, 'refresh_date': '2024-09-28'}]

--------------------------------------------------
Table full name: GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
Column name: refresh_date Type: DATE
Column name: rank Type: NUMBER
Column name: dma_name Type: TEXT
Column name: score Type: NUMBER
Column name: week Type: DATE
Column name: percent_gain Type: NUMBER
Column name: term Type: TEXT
Column name: dma_id Type: NUMBER
Sample rows:
[{'dma_id': 500, 'term': '49ers vs vikings', 'week': '2019-09-15', 'score': None, 'rank': 13, 'percent_gain': 1650, 'refresh_date': '2024-09-17', 'dma_name': 'Portland-Auburn ME'}, {'dma_id': 500, 'term': '49ers vs vikings', 'week': '2019-11-17', 'score': None, 'rank': 13, 'percent_gain': 1650, 'refresh_date': '2024-09-17', 'dma_name': 'Portland-Auburn ME'}, {'dma_id': 500, 'term': '49ers vs vikings', 'week': '2019-11-24', 'score': None, 'rank': 13, 'percent_gain': 1650, 'refresh_date': '2024-09-17', 'dma_name': 'Portland-Auburn ME'}, {'dma_id': 500, 'term': '49ers vs vikings', 'week': '2019-12-29', 'score': None, 'rank': 13, 'percent_gain': 1650, 'refresh_date': '2024-09-17', 'dma_name': 'Portland-Auburn ME'}, {'dma_id': 500, 'term': '49ers vs vikings', 'week': '2020-01-19', 'score': None, 'rank': 13, 'percent_gain': 1650, 'refresh_date': '2024-09-17', 'dma_name': 'Portland-Auburn ME'}]

--------------------------------------------------
Table full name: GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_RISING_TERMS
Column name: rank Type: NUMBER
Column name: region_name Type: TEXT
Column name: refresh_date Type: DATE
Column name: region_code Type: TEXT
Column name: term Type: TEXT
Column name: week Type: DATE
Column name: country_name Type: TEXT
Column name: percent_gain Type: NUMBER
Column name: country_code Type: TEXT
Column name: score Type: NUMBER
Sample rows:
[{'percent_gain': 3500, 'region_name': 'Sibiu', 'term': 'gigi multescu', 'week': '2021-03-07', 'score': None, 'refresh_date': '2024-09-17', 'country_name': 'Romania', 'country_code': 'RO', 'region_code': 'RO-SB', 'rank': 10}, {'percent_gain': 3500, 'region_name': 'Sibiu', 'term': 'gigi multescu', 'week': '2021-04-04', 'score': None, 'refresh_date': '2024-09-17', 'country_name': 'Romania', 'country_code': 'RO', 'region_code': 'RO-SB', 'rank': 10}, {'percent_gain': 3500, 'region_name': 'Sibiu', 'term': 'gigi multescu', 'week': '2021-05-16', 'score': None, 'refresh_date': '2024-09-17', 'country_name': 'Romania', 'country_code': 'RO', 'region_code': 'RO-SB', 'rank': 10}, {'percent_gain': 3500, 'region_name': 'Sibiu', 'term': 'gigi multescu', 'week': '2021-05-23', 'score': None, 'refresh_date': '2024-09-17', 'country_name': 'Romania', 'country_code': 'RO', 'region_code': 'RO-SB', 'rank': 10}, {'percent_gain': 3500, 'region_name': 'Sibiu', 'term': 'gigi multescu', 'week': '2021-09-19', 'score': None, 'refresh_date': '2024-09-17', 'country_name': 'Romania', 'country_code': 'RO', 'region_code': 'RO-SB', 'rank': 10}]

--------------------------------------------------
Table full name: GOOGLE_TRENDS.GOOGLE_TRENDS.INTERNATIONAL_TOP_TERMS
Column name: week Type: DATE
Column name: term Type: TEXT
Column name: rank Type: NUMBER
Column name: score Type: NUMBER
Column name: refresh_date Type: DATE
Column name: region_code Type: TEXT
Column name: region_name Type: TEXT
Column name: country_code Type: TEXT
Column name: country_name Type: TEXT
Sample rows:
[{'term': 'Galatasaray  PAOK', 'refresh_date': '2024-09-28', 'region_code': 'TR-39', 'country_code': 'TR', 'region_name': 'Kırklareli', 'week': '2022-03-13', 'score': None, 'rank': 14, 'country_name': 'Turkey'}, {'term': 'Galatasaray  PAOK', 'refresh_date': '2024-09-28', 'region_code': 'TR-39', 'country_code': 'TR', 'region_name': 'Kırklareli', 'week': '2022-11-13', 'score': None, 'rank': 14, 'country_name': 'Turkey'}, {'term': 'Galatasaray  PAOK', 'refresh_date': '2024-09-28', 'region_code': 'TR-39', 'country_code': 'TR', 'region_name': 'Kırklareli', 'week': '2023-01-01', 'score': None, 'rank': 14, 'country_name': 'Turkey'}, {'term': 'Galatasaray  PAOK', 'refresh_date': '2024-09-28', 'region_code': 'TR-39', 'country_code': 'TR', 'region_name': 'Kırklareli', 'week': '2023-01-15', 'score': None, 'rank': 14, 'country_name': 'Turkey'}, {'term': 'Galatasaray  PAOK', 'refresh_date': '2024-09-28', 'region_code': 'TR-39', 'country_code': 'TR', 'region_name': 'Kırklareli', 'week': '2023-04-02', 'score': None, 'rank': 14, 'country_name': 'Turkey'}]

--------------------------------------------------
External knowledge that might be helpful: 
None
The table structure information is ({database name: {schema name: [table name]}}): 
{'GOOGLE_TRENDS': {'GOOGLE_TRENDS': ['TOP_TERMS', 'TOP_RISING_TERMS', 'INTERNATIONAL_TOP_RISING_TERMS', 'INTERNATIONAL_TOP_TERMS']}}

Some few-shot examples after column exploration may be helpful:
Query:
--Description: pull the 20 most-recent “refresh_date” values in TOP_RISING_TERMS to see the latest load dates
SELECT DISTINCT "refresh_date"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
ORDER BY "refresh_date" DESC
LIMIT 20;
Answer:
refresh_date
2024-10-17
2024-10-16
2024-10-15
2024-10-14
2024-10-13
2024-10-12
2024-10-11
2024-10-10
2024-10-09
2024-10-08
2024-10-07
2024-10-06
2024-10-05
2024-10-04
2024-10-03
2024-10-02
2024-10-01
Query:
--Description: list the 20 most-recent “week” values that belong to the latest refresh_date
SELECT DISTINCT "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "refresh_date" = (SELECT MAX("refresh_date")
                        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS)
ORDER BY "week" DESC
LIMIT 20;
Answer:
week
2024-10-13
2024-10-06
2024-09-29
2024-09-22
2024-09-15
2024-09-08
2024-09-01
2024-08-25
2024-08-18
2024-08-11
2024-08-04
2024-07-28
2024-07-21
2024-07-14
2024-07-07
2024-06-30
2024-06-23
2024-06-16
Query:
--Description: isolate the single most-recent “week” for that latest refresh_date
SELECT "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "refresh_date" = (SELECT MAX("refresh_date")
                        FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS)
ORDER BY "week" DESC
LIMIT 1;
Answer:
week
2024-10-13
Query:
--Description: list every rising term from the week exactly 52 weeks before the latest week in the table, ordered by rank
WITH latest_week AS (
    SELECT MAX("week") AS max_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
), target_week AS (
    SELECT DATEADD(week, -52, max_week) AS one_year_prior
    FROM latest_week
)
SELECT
    "term",
    "rank",
    "dma_name",
    "percent_gain",
    "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week" = (SELECT one_year_prior FROM target_week)
ORDER BY "rank" ASC
LIMIT 20
Answer:
term,rank,dma_name,percent_gain,week
south carolina vs alabama,1,Burlington VT-Plattsburgh NY,2300,2023-10-15
south carolina vs alabama,1,Ft. Myers-Naples FL,2300,2023-10-15
south carolina vs alabama,1,Marquette MI,2300,2023-10-15
south carolina vs alabama,1,Little Rock-Pine Bluff AR,2300,2023-10-15
south carolina vs alabama,1,Columbia-Jefferson City MO,2300,2023-10-15
south carolina vs alabama,1,Grand Rapids-Kalamazoo-Battle Creek MI,2300,2023-10-15
Query:
--Description: return only the rank-1 rising term(s) for that one-year-prior week
WITH latest_week AS (
    SELECT MAX("week") AS max_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
), target_week AS (
    SELECT DATEADD(week, -52, max_week) AS one_year_prior
    FROM latest_week
)
SELECT
    "term",
    "rank",
    "dma_name",
    "percent_gain",
    "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week" = (SELECT one_year_prior FROM target_week)
  AND "rank" = 1
LIMIT 20
Answer:
term,rank,dma_name,percent_gain,week
aiden hutchinson,1,Charlotte NC,2300,2023-10-15
chiefs vs falcons,1,Charlotte NC,2650,2023-10-15
aiden hutchinson,1,Greenville-New Bern-Washington NC,2300,2023-10-15
aiden hutchinson,1,Dothan AL,2300,2023-10-15
witherspoon meaning,1,Greenville-New Bern-Washington NC,1650,2023-10-15
witherspoon meaning,1,Dothan AL,1650,2023-10-15
witherspoon meaning,1,Baltimore MD,1650,2023-10-15
Query:
--Description: double-check for any ties by returning rows whose rank is 1 or 2 for the target week
WITH latest_week AS (
    SELECT MAX("week") AS max_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
), target_week AS (
    SELECT DATEADD(week, -52, max_week) AS one_year_prior
    FROM latest_week
)
SELECT
    "term",
    "rank",
    "dma_name",
    "percent_gain",
    "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week" = (SELECT one_year_prior FROM target_week)
  AND "rank" <= 2
ORDER BY "rank"
LIMIT 20
Answer:
term,rank,dma_name,percent_gain,week
liam payne,1,Philadelphia PA,30350,2023-10-15
liam payne,1,Greenville-New Bern-Washington NC,30350,2023-10-15
liam payne,1,Wilkes Barre-Scranton PA,30350,2023-10-15
liam payne,1,Juneau AK,30350,2023-10-15
liam payne,1,Ft. Myers-Naples FL,30350,2023-10-15
liam payne,1,Savannah GA,30350,2023-10-15
liam payne,1,Palm Springs CA,30350,2023-10-15
Query:
--Description: show the rank-1 term by DMA for the one-year-prior week to see whether multiple DMAs share the same top term
WITH latest_week AS (
    SELECT MAX("week") AS max_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
), target_week AS (
    SELECT DATEADD(week, -52, max_week) AS one_year_prior
    FROM latest_week
)
SELECT
    "dma_name",
    "term",
    "rank",
    "percent_gain"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week" = (SELECT one_year_prior FROM target_week)
  AND "rank" = 1
ORDER BY "dma_name"
LIMIT 20
Answer:
dma_name,term,rank,percent_gain
Abilene-Sweetwater TX,aiden hutchinson,1,2300
Abilene-Sweetwater TX,olivia nuzzi,1,2900
Abilene-Sweetwater TX,liam payne,1,30350
Abilene-Sweetwater TX,venus de milo,1,5000
Abilene-Sweetwater TX,pete rose,1,13500
Abilene-Sweetwater TX,ratan tata,1,3050
Abilene-Sweetwater TX,south carolina vs alabama,1,2300
Abilene-Sweetwater TX,hurricane helene,1,3250
Abilene-Sweetwater TX,skrrt,1,2700
Abilene-Sweetwater TX,kris kristofferson,1,13850
Query:
--Description: inspect the distribution of percent_gain by rank for that one-year-prior week
WITH latest_week AS (
    SELECT MAX("week") AS max_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
), target_week AS (
    SELECT DATEADD(week, -52, max_week) AS one_year_prior
    FROM latest_week
)
SELECT
    "rank",
    AVG("percent_gain") AS "avg_percent_gain"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week" = (SELECT one_year_prior FROM target_week)
GROUP BY "rank"
ORDER BY "rank"
LIMIT 20
Answer:
rank,avg_percent_gain
1,10410.606061
2,3387.878788
3,2604.545455
4,2250.000000
5,1983.333333
6,1713.636364
7,1536.363636
8,1362.121212
9,1198.484848
10,1125.757576
11,1042.121212
12,950.909091
13,914.242424
14,837.878788
15,788.787879
16,733.636364
17,693.939394
18,657.272727
19,611.515152
Query:
--Description: final candidate—top-ranked rows for the one-year-prior week, ordered by percent_gain to surface the strongest surge
WITH latest_week AS (
    SELECT MAX("week") AS max_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
), target_week AS (
    SELECT DATEADD(week, -52, max_week) AS one_year_prior
    FROM latest_week
)
SELECT
    "term",
    "rank",
    "percent_gain",
    "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "week" = (SELECT one_year_prior FROM target_week)
ORDER BY "rank" ASC, "percent_gain" DESC
LIMIT 20
Answer:
term,rank,percent_gain,week
emerson romero,1,44850,2023-10-15
emerson romero,1,44850,2023-10-15
emerson romero,1,44850,2023-10-15
emerson romero,1,44850,2023-10-15
emerson romero,1,44850,2023-10-15
emerson romero,1,44850,2023-10-15
emerson romero,1,44850,2023-10-15
emerson romero,1,44850,2023-10-15
emerson romero,1,44850,2023-10-15
Task: Based on the most recent refresh date, identify the top-ranked rising search term for the week that is exactly one year prior to the latest available week in the dataset.

Please think step by step and answer only one complete SQL in snowflake dialect in ```sql``` format.
SQL usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: The table structure information is ({database name: {schema name: [table name]}}): 
{'GOOGLE_TRENDS': {'GOOGLE_TRENDS': ['TOP_TERMS', 'TOP_RISING_TERMS', 'INTERNATIONAL_TOP_RISING_TERMS', 'INTERNATIONAL_TOP_TERMS']}}

When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
If the task description does not specify the number of decimal places, retain all decimals to four places.

[Self-refine]
2025-05-07 03:36:23 - Thread-585 (execute) - INFO - [Try to run SQL in self-refine]
```sql
/* Identify the single top-ranked rising search term for the week that is
   exactly one year prior to the latest available week, using only the most
   recent refresh_date load */

WITH latest_refresh AS (           -- most-recent data load
    SELECT MAX("refresh_date") AS max_refresh_date
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
),
latest_week AS (                   -- latest week within that load
    SELECT MAX("week") AS max_week
    FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
    WHERE "refresh_date" = (SELECT max_refresh_date FROM latest_refresh)
),
target_week AS (                   -- week exactly 52 weeks prior
    SELECT DATEADD(week, -52, max_week) AS week_prior
    FROM latest_week
)
SELECT
    "term",
    "rank",
    "percent_gain",
    "dma_name",
    "week"
FROM GOOGLE_TRENDS.GOOGLE_TRENDS.TOP_RISING_TERMS
WHERE "refresh_date" = (SELECT max_refresh_date FROM latest_refresh)
  AND "week"        = (SELECT week_prior      FROM target_week)
  AND "rank"        = 1                       -- top-ranked rows
ORDER BY "percent_gain" DESC NULLS LAST       -- strongest surge first
LIMIT 1;                                      -- single top-ranked term
```
[Try to run SQL in self-refine]
2025-05-07 03:36:24 - Thread-585 (execute) - INFO - Total iteration counts: 0
