2025-05-07 06:56:39 - Thread-543 (execute) - INFO - [Exploration]
```sql
--Description: 1) Inspect all possible order status values to confirm we should filter by “delivered”.
SELECT DISTINCT "order_status"
FROM E_COMMERCE.E_COMMERCE.ORDERS
LIMIT 20;
```

```sql
--Description: 2) Show a sample of delivered orders with their purchase timestamps and the raw customer_id.
SELECT "order_id",
       "customer_id",
       "order_purchase_timestamp",
       "order_status"
FROM E_COMMERCE.E_COMMERCE.ORDERS
WHERE "order_status" ILIKE '%delivered%'
LIMIT 20;
```

```sql
--Description: 3) Check total payment recorded per order (one row per order_id).
SELECT "order_id",
       SUM("payment_value") AS "total_payment"
FROM E_COMMERCE.E_COMMERCE.ORDER_PAYMENTS
GROUP BY "order_id"
LIMIT 20;
```

```sql
--Description: 4) Join delivered orders with their payments to view one-row-per-payment line items (still at order level).
SELECT o."order_id",
       o."customer_id",
       o."order_purchase_timestamp",
       p."payment_value"
FROM E_COMMERCE.E_COMMERCE.ORDERS            o
JOIN E_COMMERCE.E_COMMERCE.ORDER_PAYMENTS    p
  ON o."order_id" = p."order_id"
WHERE o."order_status" ILIKE '%delivered%'
LIMIT 20;
```

```sql
--Description: 5) Map the technical “customer_id” to the stable “customer_unique_id”.
SELECT "customer_id",
       "customer_unique_id"
FROM E_COMMERCE.E_COMMERCE.CUSTOMERS
LIMIT 20;
```

```sql
--Description: 6) Produce one row per delivered order with its full value and the final customer_unique_id.
SELECT  o."order_id",
        c."customer_unique_id",
        o."order_purchase_timestamp",
        SUM(p."payment_value") AS "order_value"
FROM      E_COMMERCE.E_COMMERCE.ORDERS         o
JOIN      E_COMMERCE.E_COMMERCE.ORDER_PAYMENTS p  ON o."order_id" = p."order_id"
JOIN      E_COMMERCE.E_COMMERCE.CUSTOMERS      c  ON o."customer_id" = c."customer_id"
WHERE     o."order_status" ILIKE '%delivered%'
GROUP BY  o."order_id",
          c."customer_unique_id",
          o."order_purchase_timestamp"
LIMIT 20;
```

```sql
--Description: 7) Aggregate to customer level: last purchase date, order count (frequency) and total spend (monetary).
SELECT  t."customer_unique_id",
        MAX(t."order_purchase_timestamp") AS "last_purchase",
        COUNT(*)                         AS "total_orders",
        SUM(t."order_value")             AS "total_spend"
FROM   (
        SELECT  o."order_id",
                c."customer_unique_id",
                o."order_purchase_timestamp",
                SUM(p."payment_value") AS "order_value"
        FROM      E_COMMERCE.E_COMMERCE.ORDERS         o
        JOIN      E_COMMERCE.E_COMMERCE.ORDER_PAYMENTS p ON o."order_id" = p."order_id"
        JOIN      E_COMMERCE.E_COMMERCE.CUSTOMERS      c ON o."customer_id" = c."customer_id"
        WHERE     o."order_status" ILIKE '%delivered%'
        GROUP BY  o."order_id",
                  c."customer_unique_id",
                  o."order_purchase_timestamp"
       ) t
GROUP BY t."customer_unique_id"
LIMIT 20;
```

```sql
--Description: 8) Add the Recency metric (days since each customer’s last purchase, relative to the most recent purchase in the data set).
WITH cust_metrics AS (
    SELECT  t."customer_unique_id",
            MAX(t."order_purchase_timestamp") AS "last_purchase",
            COUNT(*)  AS "total_orders",
            SUM(t."order_value") AS "total_spend"
    FROM   (
            SELECT  o."order_id",
                    c."customer_unique_id",
                    o."order_purchase_timestamp",
                    SUM(p."payment_value") AS "order_value"
            FROM      E_COMMERCE.E_COMMERCE.ORDERS         o
            JOIN      E_COMMERCE.E_COMMERCE.ORDER_PAYMENTS p ON o."order_id" = p."order_id"
            JOIN      E_COMMERCE.E_COMMERCE.CUSTOMERS      c ON o."customer_id" = c."customer_id"
            WHERE     o."order_status" ILIKE '%delivered%'
            GROUP BY  o."order_id",
                      c."customer_unique_id",
                      o."order_purchase_timestamp"
           ) t
    GROUP BY t."customer_unique_id"
)
SELECT  cm."customer_unique_id",
        cm."last_purchase",
        DATEDIFF('day',
                 cm."last_purchase"::timestamp,
                 MAX(cm."last_purchase") OVER()::timestamp) AS "recency_days",
        cm."total_orders",
        cm."total_spend"
FROM    cust_metrics cm
LIMIT 20;
```

```sql
--Description: 9) Score each customer on Recency, Frequency and Monetary using quintiles (1 = best, 5 = worst for Recency).
WITH base AS (
    SELECT  cm."customer_unique_id",
            cm."last_purchase",
            DATEDIFF('day',
                     cm."last_purchase"::timestamp,
                     MAX(cm."last_purchase") OVER()::timestamp) AS "recency_days",
            cm."total_orders",
            cm."total_spend"
    FROM (
         SELECT  t."customer_unique_id",
                 MAX(t."order_purchase_timestamp") AS "last_purchase",
                 COUNT(*)  AS "total_orders",
                 SUM(t."order_value") AS "total_spend"
         FROM   (
                 SELECT  o."order_id",
                         c."customer_unique_id",
                         o."order_purchase_timestamp",
                         SUM(p."payment_value") AS "order_value"
                 FROM      E_COMMERCE.E_COMMERCE.ORDERS         o
                 JOIN      E_COMMERCE.E_COMMERCE.ORDER_PAYMENTS p ON o."order_id" = p."order_id"
                 JOIN      E_COMMERCE.E_COMMERCE.CUSTOMERS      c ON o."customer_id" = c."customer_id"
                 WHERE     o."order_status" ILIKE '%delivered%'
                 GROUP BY  o."order_id",
                           c."customer_unique_id",
                           o."order_purchase_timestamp"
                ) t
         GROUP BY t."customer_unique_id"
    ) cm
)
SELECT  b."customer_unique_id",
        NTILE(5) OVER(ORDER BY b."recency_days" ASC)  AS "r_score",
        NTILE(5) OVER(ORDER BY b."total_orders" DESC) AS "f_score",
        NTILE(5) OVER(ORDER BY b."total_spend"  DESC) AS "m_score",
        b."total_orders",
        b."total_spend"
FROM    base b
LIMIT 20;
```

```sql
--Description: 10) Final output—assign each customer to an RFM segment and compute his/her average sales per order; then aggregate by segment.
WITH customer_rfm AS (
    SELECT  b."customer_unique_id",
            NTILE(5) OVER(ORDER BY b."recency_days" ASC)  AS "r_score",
            NTILE(5) OVER(ORDER BY b."total_orders" DESC) AS "f_score",
            NTILE(5) OVER(ORDER BY b."total_spend"  DESC) AS "m_score",
            b."total_orders",
            b."total_spend"
    FROM (
        SELECT  cm."customer_unique_id",
                cm."last_purchase",
                DATEDIFF('day',
                         cm."last_purchase"::timestamp,
                         MAX(cm."last_purchase") OVER()::timestamp) AS "recency_days",
                cm."total_orders",
                cm."total_spend"
        FROM (
            SELECT  t."customer_unique_id",
                    MAX(t."order_purchase_timestamp") AS "last_purchase",
                    COUNT(*)  AS "total_orders",
                    SUM(t."order_value") AS "total_spend"
            FROM   (
                    SELECT  o."order_id",
                            c."customer_unique_id",
                            o."order_purchase_timestamp",
                            SUM(p."payment_value") AS "order_value"
                    FROM      E_COMMERCE.E_COMMERCE.ORDERS         o
                    JOIN      E_COMMERCE.E_COMMERCE.ORDER_PAYMENTS p ON o."order_id" = p."order_id"
                    JOIN      E_COMMERCE.E_COMMERCE.CUSTOMERS      c ON o."customer_id" = c."customer_id"
                    WHERE     o."order_status" ILIKE '%delivered%'
                    GROUP BY  o."order_id",
                              c."customer_unique_id",
                              o."order_purchase_timestamp"
                   ) t
            GROUP BY t."customer_unique_id"
        ) cm
    ) b
)
SELECT  CASE
           WHEN r."r_score" = 1 AND (r."f_score" + r."m_score") BETWEEN 1 AND 4  THEN 'Champions'
           WHEN r."r_score" IN (4,5) AND (r."f_score" + r."m_score") BETWEEN 1 AND 2  THEN 'Can''t Lose Them'
           WHEN r."r_score" IN (4,5) AND (r."f_score" + r."m_score") BETWEEN 3 AND 6  THEN 'Hibernating'
           WHEN r."r_score" IN (4,5) AND (r."f_score" + r."m_score") BETWEEN 7 AND 10 THEN 'Lost'
           WHEN r."r_score" IN (2,3) AND (r."f_score" + r."m_score") BETWEEN 1 AND 4 THEN 'Loyal Customers'
           WHEN r."r_score" = 3      AND (r."f_score" + r."m_score") BETWEEN 5 AND 6 THEN 'Needs Attention'
           WHEN r."r_score" = 1      AND (r."f_score" + r."m_score") BETWEEN 7 AND 8 THEN 'Recent Users'
           WHEN (r."r_score" = 1 AND (r."f_score" + r."m_score") BETWEEN 5 AND 6)
             OR (r."r_score" = 2 AND (r."f_score" + r."m_score") BETWEEN 5 AND 8)  THEN 'Potential Loyalists'
           WHEN r."r_score" = 1      AND (r."f_score" + r."m_score") BETWEEN 9 AND 10 THEN 'Price Sensitive'
           WHEN r."r_score" = 2      AND (r."f_score" + r."m_score") BETWEEN 9 AND 10 THEN 'Promising'
           WHEN r."r_score" = 3      AND (r."f_score" + r."m_score") BETWEEN 7 AND 10 THEN 'About to Sleep'
           ELSE 'Other'
        END                                   AS "rfm_segment",
        AVG(r."total_spend" / NULLIF(r."total_orders",0)) AS "average_sales_per_order"
FROM    customer_rfm r
GROUP BY "rfm_segment"
LIMIT 20;
```
[Exploration]
2025-05-07 06:56:39 - Thread-543 (execute) - INFO - [Try to execute]
--Description: 1) Inspect all possible order status values to confirm we should filter by “delivered”.
SELECT DISTINCT "order_status"
FROM E_COMMERCE.E_COMMERCE.ORDERS
LIMIT 20;
[Try to execute]
2025-05-07 06:56:41 - Thread-543 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 1) Inspect all possible order status values to confirm we should filter by “delivered”.
SELECT DISTINCT "order_status"
FROM E_COMMERCE.E_COMMERCE.ORDERS
LIMIT 20;
Results:
order_status
delivered
invoiced
shipped
processing
unavailable
canceled
created
approved

[Successfully executed]
2025-05-07 06:56:41 - Thread-543 (execute) - INFO - [Try to execute]
--Description: 2) Show a sample of delivered orders with their purchase timestamps and the raw customer_id.
SELECT "order_id",
       "customer_id",
       "order_purchase_timestamp",
       "order_status"
FROM E_COMMERCE.E_COMMERCE.ORDERS
WHERE "order_status" ILIKE '%delivered%'
LIMIT 20;
[Try to execute]
2025-05-07 06:56:42 - Thread-543 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 2) Show a sample of delivered orders with their purchase timestamps and the raw customer_id.
SELECT "order_id",
       "customer_id",
       "order_purchase_timestamp",
       "order_status"
FROM E_COMMERCE.E_COMMERCE.ORDERS
WHERE "order_status" ILIKE '%delivered%'
LIMIT 20;
Results:
order_id,customer_id,order_purchase_timestamp,order_status
e481f51cbdc54678b7cc49136f2d6af7,9ef432eb6251297304e76186b10a928d,2017-10-02 10:56:33,delivered
53cdb2fc8bc7dce0b6741e2150273451,b0830fb4747a6c6d20dea0b8c802d7ef,2018-07-24 20:41:37,delivered
47770eb9100c2d0c44946d9cf07ec65d,41ce2a54c0b03bf3443c3d931a367089,2018-08-08 08:38:49,delivered
949d5b44dbf5de918fe9c16f97b45f8a,f88197465ea7920adcdbec7375364d82,2017-11-18 19:28:06,delivered
ad21c59c0840e6cb83a9ceb5573f8159,8ab97904e6daea8866d

[Successfully executed]
2025-05-07 06:56:42 - Thread-543 (execute) - INFO - [Try to execute]
--Description: 3) Check total payment recorded per order (one row per order_id).
SELECT "order_id",
       SUM("payment_value") AS "total_payment"
FROM E_COMMERCE.E_COMMERCE.ORDER_PAYMENTS
GROUP BY "order_id"
LIMIT 20;
[Try to execute]
2025-05-07 06:56:42 - Thread-543 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 3) Check total payment recorded per order (one row per order_id).
SELECT "order_id",
       SUM("payment_value") AS "total_payment"
FROM E_COMMERCE.E_COMMERCE.ORDER_PAYMENTS
GROUP BY "order_id"
LIMIT 20;
Results:
order_id,total_payment
b81ef226f3fe1789b1e8b2acac839d17,99.33
a9810da82917af2d9aefd1278f1dcfa0,24.39
25e8ea4e93396b6fa0d3dd708e76c1bd,65.71
ba78997921bbcdc1373bb41e913ab953,107.78
298fcdf1f73eb413e4d26d01b25bc1cd,96.12
771ee386b001f06208a7419e4fc1bbd7,81.16
1f78449c87a54faf9e96e88ba1491fa9,341.09
0573b5e23cbd798006520e1d5b4c6714,51.95
d88e0d5fa41661ce03cf6cf336527646,188.73
2480f727e869fdeb397244a21b721b67,141.9
616105c9352a9668c38303ad44e056cd,75.78
769214176682788a92801d8907fa1b40,

[Successfully executed]
2025-05-07 06:56:42 - Thread-543 (execute) - INFO - [Try to execute]
--Description: 4) Join delivered orders with their payments to view one-row-per-payment line items (still at order level).
SELECT o."order_id",
       o."customer_id",
       o."order_purchase_timestamp",
       p."payment_value"
FROM E_COMMERCE.E_COMMERCE.ORDERS            o
JOIN E_COMMERCE.E_COMMERCE.ORDER_PAYMENTS    p
  ON o."order_id" = p."order_id"
WHERE o."order_status" ILIKE '%delivered%'
LIMIT 20;
[Try to execute]
2025-05-07 06:56:43 - Thread-543 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 4) Join delivered orders with their payments to view one-row-per-payment line items (still at order level).
SELECT o."order_id",
       o."customer_id",
       o."order_purchase_timestamp",
       p."payment_value"
FROM E_COMMERCE.E_COMMERCE.ORDERS            o
JOIN E_COMMERCE.E_COMMERCE.ORDER_PAYMENTS    p
  ON o."order_id" = p."order_id"
WHERE o."order_status" ILIKE '%delivered%'
LIMIT 20;
Results:
order_id,customer_id,order_purchase_timestamp,payment_value
b81ef226f3fe1789b1e8b2acac839d17,0a8556ac6be836b46b3e89920d59291c,2018-04-25 22:01:49,99.33
a9810da82917af2d9aefd1278f1dcfa0,f2c7fc58a9de810828715166c672f10a,2018-06-26 11:01:38,24.39
25e8ea4e93396b6fa0d3dd708e76c1bd,25b14b69de0b6e184ae6fe2755e478f9,2017-12-12 11:19:55,65.71
ba78997921bbcdc1373bb41e913ab953,7a5d8efaaa1081f800628c30d2b0728f,2017-12-06 12:04:06,107.78
42fdf880ba16b47b59251dd489d4441a,15fd6fb8f8312dbb4674e4518d6fa3b3,

[Successfully executed]
2025-05-07 06:56:43 - Thread-543 (execute) - INFO - [Try to execute]
--Description: 5) Map the technical “customer_id” to the stable “customer_unique_id”.
SELECT "customer_id",
       "customer_unique_id"
FROM E_COMMERCE.E_COMMERCE.CUSTOMERS
LIMIT 20;
[Try to execute]
2025-05-07 06:56:44 - Thread-543 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 5) Map the technical “customer_id” to the stable “customer_unique_id”.
SELECT "customer_id",
       "customer_unique_id"
FROM E_COMMERCE.E_COMMERCE.CUSTOMERS
LIMIT 20;
Results:
customer_id,customer_unique_id
06b8999e2fba1a1fbc88172c00ba8bc7,861eff4711a542e4b93843c6dd7febb0
18955e83d337fd6b2def6b18a428ac77,290c77bc529b7ac935b93aa66c333dc3
4e7b3e00288586ebd08712fdd0374a03,060e732b5b29e8181a18229c7b0b2b5e
b2b6027bc5c5109e529d4dc6358b12c3,259dac757896d24d7702b9acbbff3f3c
4f2d8ab171c80ec8364f7c12e35b23ad,345ecd01c38d18a9036ed96c73b8d066
879864dab9bc3047522c92c82e1212b8,4c93744516667ad3b8f1fb645a3116a4
fd826e7cf63160e536e0908c76c3f441,addec96d2e059c80c30fe6871d30d177

[Successfully executed]
2025-05-07 06:56:44 - Thread-543 (execute) - INFO - [Try to execute]
--Description: 6) Produce one row per delivered order with its full value and the final customer_unique_id.
SELECT  o."order_id",
        c."customer_unique_id",
        o."order_purchase_timestamp",
        SUM(p."payment_value") AS "order_value"
FROM      E_COMMERCE.E_COMMERCE.ORDERS         o
JOIN      E_COMMERCE.E_COMMERCE.ORDER_PAYMENTS p  ON o."order_id" = p."order_id"
JOIN      E_COMMERCE.E_COMMERCE.CUSTOMERS      c  ON o."customer_id" = c."customer_id"
WHERE     o."order_status" ILIKE '%delivered%'
GROUP BY  o."order_id",
          c."customer_unique_id",
          o."order_purchase_timestamp"
LIMIT 20;
[Try to execute]
2025-05-07 06:57:45 - Thread-543 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 6) Produce one row per delivered order with its full value and the final customer_unique_id.
SELECT  o."order_id",
        c."customer_unique_id",
        o."order_purchase_timestamp",
        SUM(p."payment_value") AS "order_value"
FROM      E_COMMERCE.E_COMMERCE.ORDERS         o
JOIN      E_COMMERCE.E_COMMERCE.ORDER_PAYMENTS p  ON o."order_id" = p."order_id"
JOIN      E_COMMERCE.E_COMMERCE.CUSTOMERS      c  ON o."customer_id" = c."customer_id"
WHERE     o."order_status" ILIKE '%delivered%'
GROUP BY  o."order_id",
          c."customer_unique_id",
          o."order_purchase_timestamp"
LIMIT 20;
Results:
order_id,customer_unique_id,order_purchase_timestamp,order_value
29150127e6685892b6eab3eec79f59c7,290c77bc529b7ac935b93aa66c333dc3,2018-01-12 20:48:24,335.48
951670f92359f4fe4a63112aa7306eba,259dac757896d24d7702b9acbbff3f3c,2018-03-13 16:06:38,173.3
5741ea1f91b5fbab2bd2dc653a5b5099,4c93744516667ad3b8f1fb645a3116a4,2017-09-14 18:14:31,282.21
36e694cf4cbc2a4803200c35e84abdc4,addec96d2e059c80c30fe6871d30d177,2018-02-19 14:38:35,22.77
1ebeea841c590e86a14a0d7a48e7d062,1175e95fb47ddff9de6b2b06188

[Successfully executed]
2025-05-07 06:57:45 - Thread-543 (execute) - INFO - [Try to execute]
--Description: 7) Aggregate to customer level: last purchase date, order count (frequency) and total spend (monetary).
SELECT  t."customer_unique_id",
        MAX(t."order_purchase_timestamp") AS "last_purchase",
        COUNT(*)                         AS "total_orders",
        SUM(t."order_value")             AS "total_spend"
FROM   (
        SELECT  o."order_id",
                c."customer_unique_id",
                o."order_purchase_timestamp",
                SUM(p."payment_value") AS "order_value"
        FROM      E_COMMERCE.E_COMMERCE.ORDERS         o
        JOIN      E_COMMERCE.E_COMMERCE.ORDER_PAYMENTS p ON o."order_id" = p."order_id"
        JOIN      E_COMMERCE.E_COMMERCE.CUSTOMERS      c ON o."customer_id" = c."customer_id"
        WHERE     o."order_status" ILIKE '%delivered%'
        GROUP BY  o."order_id",
                  c."customer_unique_id",
                  o."order_purchase_timestamp"
       ) t
GROUP BY t."customer_unique_id"
LIMIT 20;
[Try to execute]
2025-05-07 06:57:49 - Thread-543 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 7) Aggregate to customer level: last purchase date, order count (frequency) and total spend (monetary).
SELECT  t."customer_unique_id",
        MAX(t."order_purchase_timestamp") AS "last_purchase",
        COUNT(*)                         AS "total_orders",
        SUM(t."order_value")             AS "total_spend"
FROM   (
        SELECT  o."order_id",
                c."customer_unique_id",
                o."order_purchase_timestamp",
                SUM(p."payment_value") AS "order_value"
        FROM      E_COMMERCE.E_COMMERCE.ORDERS         o
        JOIN      E_COMMERCE.E_COMMERCE.ORDER_PAYMENTS p ON o."order_id" = p."order_id"
        JOIN      E_COMMERCE.E_COMMERCE.CUSTOMERS      c ON o."customer_id" = c."customer_id"
        WHERE     o."order_status" ILIKE '%delivered%'
        GROUP BY  o."order_id",
                  c."customer_unique_id",
                  o."order_purchase_timestamp"
       ) t
GROUP BY t."customer_unique_id"
LIMIT 20;
Results:
customer_unique_id,last_purchase,total_orders,total_spend
ef07ba9aa5226f77264ffa5762b2280b,2018-03-12 13:07:03,1,45.730000000000004
a302a693d5722d95984e6472150b9391,2018-06-06 16:53:30,1,151.6
8dfb24fac32ec7170821d2be63fa9c1c,2017-09-01 10:26:06,1,17.85
56636fd22de1a315b8a50d45cf94d859,2017-08-27 23:00:33,1,33.59
05aa2ef3623cdba9ca3e83b91f1eee5c,2017-07-07 17:56:19,1,103.55
4a4de987b37555970ffcc9608d858a72,2017-10-06 08:37:41,1,253.05
95363f351776a3f8a43145c79a046053,2017-12-12 17:39:17,1

[Successfully executed]
2025-05-07 06:57:49 - Thread-543 (execute) - INFO - [Try to execute]
--Description: 8) Add the Recency metric (days since each customer’s last purchase, relative to the most recent purchase in the data set).
WITH cust_metrics AS (
    SELECT  t."customer_unique_id",
            MAX(t."order_purchase_timestamp") AS "last_purchase",
            COUNT(*)  AS "total_orders",
            SUM(t."order_value") AS "total_spend"
    FROM   (
            SELECT  o."order_id",
                    c."customer_unique_id",
                    o."order_purchase_timestamp",
                    SUM(p."payment_value") AS "order_value"
            FROM      E_COMMERCE.E_COMMERCE.ORDERS         o
            JOIN      E_COMMERCE.E_COMMERCE.ORDER_PAYMENTS p ON o."order_id" = p."order_id"
            JOIN      E_COMMERCE.E_COMMERCE.CUSTOMERS      c ON o."customer_id" = c."customer_id"
            WHERE     o."order_status" ILIKE '%delivered%'
            GROUP BY  o."order_id",
                      c."customer_unique_id",
                      o."order_purchase_timestamp"
           ) t
    GROUP BY t."customer_unique_id"
)
SELECT  cm."customer_unique_id",
        cm."last_purchase",
        DATEDIFF('day',
                 cm."last_purchase"::timestamp,
                 MAX(cm."last_purchase") OVER()::timestamp) AS "recency_days",
        cm."total_orders",
        cm."total_spend"
FROM    cust_metrics cm
LIMIT 20;
[Try to execute]
2025-05-07 06:57:52 - Thread-543 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 8) Add the Recency metric (days since each customer’s last purchase, relative to the most recent purchase in the data set).
WITH cust_metrics AS (
    SELECT  t."customer_unique_id",
            MAX(t."order_purchase_timestamp") AS "last_purchase",
            COUNT(*)  AS "total_orders",
            SUM(t."order_value") AS "total_spend"
    FROM   (
            SELECT  o."order_id",
                    c."customer_unique_id",
                    o."order_purchase_timestamp",
                    SUM(p."payment_value") AS "order_value"
            FROM      E_COMMERCE.E_COMMERCE.ORDERS         o
            JOIN      E_COMMERCE.E_COMMERCE.ORDER_PAYMENTS p ON o."order_id" = p."order_id"
            JOIN      E_COMMERCE.E_COMMERCE.CUSTOMERS      c ON o."customer_id" = c."customer_id"
            WHERE     o."order_status" ILIKE '%delivered%'
            GROUP BY  o."order_id",
                      c."customer_unique_id",
                      o."order_purchase_timestamp"
           ) t
    GROUP BY t."customer_unique_id"
)
SELECT  cm."customer_unique_id",
        cm."last_purchase",
        DATEDIFF('day',
                 cm."last_purchase"::timestamp,
                 MAX(cm."last_purchase") OVER()::timestamp) AS "recency_days",
        cm."total_orders",
        cm."total_spend"
FROM    cust_metrics cm
LIMIT 20;
Results:
customer_unique_id,last_purchase,recency_days,total_orders,total_spend
629fb99609e4613c746af4eaa455c91a,2018-05-16 20:57:48,105,1,26.29
9f67d6145893e41e7ada2e646b84f658,2018-03-23 17:52:14,159,1,229.79
6e4188c01246d30b20d17a1ed42094fe,2018-04-20 13:33:18,131,1,126.47
744fcfb3939c1c57f16cb00f263c3929,2018-02-16 10:48:35,194,1,99.69
6995203f8a5ddbd2fad3a9df1e099a51,2017-10-30 18:23:07,303,1,101.2
0f13e3bb90bbd8912d57145479ce4839,2018-03-27 20:40:52,155,1,38.13
3e7093ecfc2d4fda791cc93d9e18c3

[Successfully executed]
2025-05-07 06:57:52 - Thread-543 (execute) - INFO - [Try to execute]
--Description: 9) Score each customer on Recency, Frequency and Monetary using quintiles (1 = best, 5 = worst for Recency).
WITH base AS (
    SELECT  cm."customer_unique_id",
            cm."last_purchase",
            DATEDIFF('day',
                     cm."last_purchase"::timestamp,
                     MAX(cm."last_purchase") OVER()::timestamp) AS "recency_days",
            cm."total_orders",
            cm."total_spend"
    FROM (
         SELECT  t."customer_unique_id",
                 MAX(t."order_purchase_timestamp") AS "last_purchase",
                 COUNT(*)  AS "total_orders",
                 SUM(t."order_value") AS "total_spend"
         FROM   (
                 SELECT  o."order_id",
                         c."customer_unique_id",
                         o."order_purchase_timestamp",
                         SUM(p."payment_value") AS "order_value"
                 FROM      E_COMMERCE.E_COMMERCE.ORDERS         o
                 JOIN      E_COMMERCE.E_COMMERCE.ORDER_PAYMENTS p ON o."order_id" = p."order_id"
                 JOIN      E_COMMERCE.E_COMMERCE.CUSTOMERS      c ON o."customer_id" = c."customer_id"
                 WHERE     o."order_status" ILIKE '%delivered%'
                 GROUP BY  o."order_id",
                           c."customer_unique_id",
                           o."order_purchase_timestamp"
                ) t
         GROUP BY t."customer_unique_id"
    ) cm
)
SELECT  b."customer_unique_id",
        NTILE(5) OVER(ORDER BY b."recency_days" ASC)  AS "r_score",
        NTILE(5) OVER(ORDER BY b."total_orders" DESC) AS "f_score",
        NTILE(5) OVER(ORDER BY b."total_spend"  DESC) AS "m_score",
        b."total_orders",
        b."total_spend"
FROM    base b
LIMIT 20;
[Try to execute]
2025-05-07 06:57:57 - Thread-543 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 9) Score each customer on Recency, Frequency and Monetary using quintiles (1 = best, 5 = worst for Recency).
WITH base AS (
    SELECT  cm."customer_unique_id",
            cm."last_purchase",
            DATEDIFF('day',
                     cm."last_purchase"::timestamp,
                     MAX(cm."last_purchase") OVER()::timestamp) AS "recency_days",
            cm."total_orders",
            cm."total_spend"
    FROM (
         SELECT  t."customer_unique_id",
                 MAX(t."order_purchase_timestamp") AS "last_purchase",
                 COUNT(*)  AS "total_orders",
                 SUM(t."order_value") AS "total_spend"
         FROM   (
                 SELECT  o."order_id",
                         c."customer_unique_id",
                         o."order_purchase_timestamp",
                         SUM(p."payment_value") AS "order_value"
                 FROM      E_COMMERCE.E_COMMERCE.ORDERS         o
                 JOIN      E_COMMERCE.E_COMMERCE.ORDER_PAYMENTS p ON o."order_id" = p."order_id"
                 JOIN      E_COMMERCE.E_COMMERCE.CUSTOMERS      c ON o."customer_id" = c."customer_id"
                 WHERE     o."order_status" ILIKE '%delivered%'
                 GROUP BY  o."order_id",
                           c."customer_unique_id",
                           o."order_purchase_timestamp"
                ) t
         GROUP BY t."customer_unique_id"
    ) cm
)
SELECT  b."customer_unique_id",
        NTILE(5) OVER(ORDER BY b."recency_days" ASC)  AS "r_score",
        NTILE(5) OVER(ORDER BY b."total_orders" DESC) AS "f_score",
        NTILE(5) OVER(ORDER BY b."total_spend"  DESC) AS "m_score",
        b."total_orders",
        b."total_spend"
FROM    base b
LIMIT 20;
Results:
customer_unique_id,r_score,f_score,m_score,total_orders,total_spend
0a0a92112bd4c708ca5fde585afaa872,4,5,1,1,13664.08
da122df9eeddfedc1dc1f5349a1a690c,5,1,1,2,7571.63
763c8b1c9c68a0229c42c9fc6f662b93,1,2,1,1,7274.88
dc4802a71eae9be1dd28f5d788ceb526,5,4,1,1,6929.31
459bef486812aa25204be022145caa62,1,2,1,1,6922.21
ff4159b92c40ebe40454e3e6a7c35ed6,5,4,1,1,6726.66
4007669dec559734d6f53e029e360987,4,5,1,1,6081.54
eebb5dda148d3893cdaf5b5ca3040ccb,5,4,1,1,4764.34
48e1ac109decbb87765a3eade68540

[Successfully executed]
2025-05-07 06:57:57 - Thread-543 (execute) - INFO - [Try to execute]
--Description: 10) Final output—assign each customer to an RFM segment and compute his/her average sales per order; then aggregate by segment.
WITH customer_rfm AS (
    SELECT  b."customer_unique_id",
            NTILE(5) OVER(ORDER BY b."recency_days" ASC)  AS "r_score",
            NTILE(5) OVER(ORDER BY b."total_orders" DESC) AS "f_score",
            NTILE(5) OVER(ORDER BY b."total_spend"  DESC) AS "m_score",
            b."total_orders",
            b."total_spend"
    FROM (
        SELECT  cm."customer_unique_id",
                cm."last_purchase",
                DATEDIFF('day',
                         cm."last_purchase"::timestamp,
                         MAX(cm."last_purchase") OVER()::timestamp) AS "recency_days",
                cm."total_orders",
                cm."total_spend"
        FROM (
            SELECT  t."customer_unique_id",
                    MAX(t."order_purchase_timestamp") AS "last_purchase",
                    COUNT(*)  AS "total_orders",
                    SUM(t."order_value") AS "total_spend"
            FROM   (
                    SELECT  o."order_id",
                            c."customer_unique_id",
                            o."order_purchase_timestamp",
                            SUM(p."payment_value") AS "order_value"
                    FROM      E_COMMERCE.E_COMMERCE.ORDERS         o
                    JOIN      E_COMMERCE.E_COMMERCE.ORDER_PAYMENTS p ON o."order_id" = p."order_id"
                    JOIN      E_COMMERCE.E_COMMERCE.CUSTOMERS      c ON o."customer_id" = c."customer_id"
                    WHERE     o."order_status" ILIKE '%delivered%'
                    GROUP BY  o."order_id",
                              c."customer_unique_id",
                              o."order_purchase_timestamp"
                   ) t
            GROUP BY t."customer_unique_id"
        ) cm
    ) b
)
SELECT  CASE
           WHEN r."r_score" = 1 AND (r."f_score" + r."m_score") BETWEEN 1 AND 4  THEN 'Champions'
           WHEN r."r_score" IN (4,5) AND (r."f_score" + r."m_score") BETWEEN 1 AND 2  THEN 'Can''t Lose Them'
           WHEN r."r_score" IN (4,5) AND (r."f_score" + r."m_score") BETWEEN 3 AND 6  THEN 'Hibernating'
           WHEN r."r_score" IN (4,5) AND (r."f_score" + r."m_score") BETWEEN 7 AND 10 THEN 'Lost'
           WHEN r."r_score" IN (2,3) AND (r."f_score" + r."m_score") BETWEEN 1 AND 4 THEN 'Loyal Customers'
           WHEN r."r_score" = 3      AND (r."f_score" + r."m_score") BETWEEN 5 AND 6 THEN 'Needs Attention'
           WHEN r."r_score" = 1      AND (r."f_score" + r."m_score") BETWEEN 7 AND 8 THEN 'Recent Users'
           WHEN (r."r_score" = 1 AND (r."f_score" + r."m_score") BETWEEN 5 AND 6)
             OR (r."r_score" = 2 AND (r."f_score" + r."m_score") BETWEEN 5 AND 8)  THEN 'Potential Loyalists'
           WHEN r."r_score" = 1      AND (r."f_score" + r."m_score") BETWEEN 9 AND 10 THEN 'Price Sensitive'
           WHEN r."r_score" = 2      AND (r."f_score" + r."m_score") BETWEEN 9 AND 10 THEN 'Promising'
           WHEN r."r_score" = 3      AND (r."f_score" + r."m_score") BETWEEN 7 AND 10 THEN 'About to Sleep'
           ELSE 'Other'
        END                                   AS "rfm_segment",
        AVG(r."total_spend" / NULLIF(r."total_orders",0)) AS "average_sales_per_order"
FROM    customer_rfm r
GROUP BY "rfm_segment"
LIMIT 20;
[Try to execute]
2025-05-07 06:58:30 - Thread-543 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 10) Final output—assign each customer to an RFM segment and compute his/her average sales per order; then aggregate by segment.
WITH customer_rfm AS (
    SELECT  b."customer_unique_id",
            NTILE(5) OVER(ORDER BY b."recency_days" ASC)  AS "r_score",
            NTILE(5) OVER(ORDER BY b."total_orders" DESC) AS "f_score",
            NTILE(5) OVER(ORDER BY b."total_spend"  DESC) AS "m_score",
            b."total_orders",
            b."total_spend"
    FROM (
        SELECT  cm."customer_unique_id",
                cm."last_purchase",
                DATEDIFF('day',
                         cm."last_purchase"::timestamp,
                         MAX(cm."last_purchase") OVER()::timestamp) AS "recency_days",
                cm."total_orders",
                cm."total_spend"
        FROM (
            SELECT  t."customer_unique_id",
                    MAX(t."order_purchase_timestamp") AS "last_purchase",
                    COUNT(*)  AS "total_orders",
                    SUM(t."order_value") AS "total_spend"
            FROM   (
                    SELECT  o."order_id",
                            c."customer_unique_id",
                            o."order_purchase_timestamp",
                            SUM(p."payment_value") AS "order_value"
                    FROM      E_COMMERCE.E_COMMERCE.ORDERS         o
                    JOIN      E_COMMERCE.E_COMMERCE.ORDER_PAYMENTS p ON o."order_id" = p."order_id"
                    JOIN      E_COMMERCE.E_COMMERCE.CUSTOMERS      c ON o."customer_id" = c."customer_id"
                    WHERE     o."order_status" ILIKE '%delivered%'
                    GROUP BY  o."order_id",
                              c."customer_unique_id",
                              o."order_purchase_timestamp"
                   ) t
            GROUP BY t."customer_unique_id"
        ) cm
    ) b
)
SELECT  CASE
           WHEN r."r_score" = 1 AND (r."f_score" + r."m_score") BETWEEN 1 AND 4  THEN 'Champions'
           WHEN r."r_score" IN (4,5) AND (r."f_score" + r."m_score") BETWEEN 1 AND 2  THEN 'Can''t Lose Them'
           WHEN r."r_score" IN (4,5) AND (r."f_score" + r."m_score") BETWEEN 3 AND 6  THEN 'Hibernating'
           WHEN r."r_score" IN (4,5) AND (r."f_score" + r."m_score") BETWEEN 7 AND 10 THEN 'Lost'
           WHEN r."r_score" IN (2,3) AND (r."f_score" + r."m_score") BETWEEN 1 AND 4 THEN 'Loyal Customers'
           WHEN r."r_score" = 3      AND (r."f_score" + r."m_score") BETWEEN 5 AND 6 THEN 'Needs Attention'
           WHEN r."r_score" = 1      AND (r."f_score" + r."m_score") BETWEEN 7 AND 8 THEN 'Recent Users'
           WHEN (r."r_score" = 1 AND (r."f_score" + r."m_score") BETWEEN 5 AND 6)
             OR (r."r_score" = 2 AND (r."f_score" + r."m_score") BETWEEN 5 AND 8)  THEN 'Potential Loyalists'
           WHEN r."r_score" = 1      AND (r."f_score" + r."m_score") BETWEEN 9 AND 10 THEN 'Price Sensitive'
           WHEN r."r_score" = 2      AND (r."f_score" + r."m_score") BETWEEN 9 AND 10 THEN 'Promising'
           WHEN r."r_score" = 3      AND (r."f_score" + r."m_score") BETWEEN 7 AND 10 THEN 'About to Sleep'
           ELSE 'Other'
        END                                   AS "rfm_segment",
        AVG(r."total_spend" / NULLIF(r."total_orders",0)) AS "average_sales_per_order"
FROM    customer_rfm r
GROUP BY "rfm_segment"
LIMIT 20;
Results:
rfm_segment,average_sales_per_order
Hibernating,298.02512426900586
Champions,316.4385362242771
Loyal Customers,248.1755750515515
Can't Lose Them,216.26095660749507
Lost,79.38430490174909
Needs Attention,177.97016209691324
Potential Loyalists,87.20787530302134
Recent Users,46.9337607714403
About to Sleep,86.51671737490571

[Successfully executed]
2025-05-07 06:58:30 - Thread-543 (execute) - INFO - itercount: 0
2025-05-07 06:58:30 - Thread-543 (execute) - INFO - [Self-refine]
Table full name: E_COMMERCE.E_COMMERCE.LEADS_QUALIFIED
Column name: first_contact_date Type: TEXT
Column name: origin Type: TEXT
Column name: landing_page_id Type: TEXT
Column name: mql_id Type: TEXT
Sample rows:
[{'mql_id': 'dac32acd4db4c29c230538b72f8dd87d', 'first_contact_date': '2018-02-01', 'landing_page_id': '88740e65d5d6b056e0cda098e1ea6313', 'origin': 'social'}, {'mql_id': 'b4bc852d233dfefc5131f593b538befa', 'first_contact_date': '2018-03-22', 'landing_page_id': 'a7982125ff7aa3b2054c6e44f9d28522', 'origin': 'organic_search'}, {'mql_id': '28bdfd5f057764b54c38770f95c69f2f', 'first_contact_date': '2018-01-14', 'landing_page_id': '22c29808c4f815213303f8933030604c', 'origin': 'organic_search'}, {'mql_id': '126a0d10becbaafcb2e72ce6848cf32c', 'first_contact_date': '2018-05-15', 'landing_page_id': '6a110e795dd487f1cf8d7583671987af', 'origin': 'email'}, {'mql_id': 'f76136f54d14a3345951f25b7932366b', 'first_contact_date': '2018-05-24', 'landing_page_id': 'd51b0d02f063ba1d053db6d97226eec3', 'origin': 'email'}]

--------------------------------------------------
Table full name: E_COMMERCE.E_COMMERCE.GEOLOCATION
Column name: geolocation_zip_code_prefix Type: NUMBER
Column name: geolocation_city Type: TEXT
Column name: geolocation_lng Type: FLOAT
Column name: geolocation_state Type: TEXT
Column name: geolocation_lat Type: FLOAT
Sample rows:
[{'geolocation_zip_code_prefix': 47940, 'geolocation_lat': -12.118520396156198, 'geolocation_lng': -43.89223348300082, 'geolocation_city': 'wanderley', 'geolocation_state': 'BA'}, {'geolocation_zip_code_prefix': 47990, 'geolocation_lat': -11.043509645586902, 'geolocation_lng': -45.18667845319278, 'geolocation_city': 'formosa do rio preto', 'geolocation_state': 'BA'}, {'geolocation_zip_code_prefix': 47990, 'geolocation_lat': -11.03457140262401, 'geolocation_lng': -45.18776655510399, 'geolocation_city': 'formosa do rio preto', 'geolocation_state': 'BA'}, {'geolocation_zip_code_prefix': 47990, 'geolocation_lat': -11.04186115496844, 'geolocation_lng': -45.18988326259359, 'geolocation_city': 'formosa do rio preto', 'geolocation_state': 'BA'}, {'geolocation_zip_code_prefix': 47940, 'geolocation_lat': -12.123543963024664, 'geolocation_lng': -43.891740814417616, 'geolocation_city': 'wanderley', 'geolocation_state': 'BA'}]

--------------------------------------------------
Table full name: E_COMMERCE.E_COMMERCE.LEADS_CLOSED
Column name: business_type Type: TEXT
Column name: has_gtin Type: FLOAT
Column name: average_stock Type: TEXT
Column name: won_date Type: TEXT
Column name: lead_type Type: TEXT
Column name: lead_behaviour_profile Type: TEXT
Column name: has_company Type: FLOAT
Column name: declared_monthly_revenue Type: FLOAT
Column name: seller_id Type: TEXT
Column name: sr_id Type: TEXT
Column name: business_segment Type: TEXT
Column name: sdr_id Type: TEXT
Column name: mql_id Type: TEXT
Column name: declared_product_catalog_size Type: FLOAT
Sample rows:
[{'mql_id': '5420aad7fec3549a85876ba1c529bd84', 'seller_id': '2c43fb513632d29b3b58df74816f1b06', 'sdr_id': 'a8387c01a09e99ce014107505b92388c', 'sr_id': '4ef15afb4b2723d8f3d81e51ec7afefe', 'won_date': '2018-02-26 19:58:54', 'business_segment': 'pet', 'lead_type': 'online_medium', 'lead_behaviour_profile': 'cat', 'has_company': None, 'has_gtin': None, 'average_stock': '', 'business_type': 'reseller', 'declared_product_catalog_size': None, 'declared_monthly_revenue': 0.0}, {'mql_id': 'ffe640179b554e295c167a2f6be528e0', 'seller_id': 'ed8cb7b190ceb6067227478e48cf8dde', 'sdr_id': '4b339f9567d060bcea4f5136b9f5949e', 'sr_id': 'd3d1e91a157ea7f90548eef82f1955e3', 'won_date': '2018-07-03 20:17:45', 'business_segment': 'home_appliances', 'lead_type': 'industry', 'lead_behaviour_profile': 'wolf', 'has_company': None, 'has_gtin': None, 'average_stock': '', 'business_type': 'manufacturer', 'declared_product_catalog_size': None, 'declared_monthly_revenue': 0.0}, {'mql_id': 'b94fba7670eeb44dce2a0d8eb790e9f5', 'seller_id': '1c742ac33582852aaf3bcfbf5893abcf', 'sdr_id': 'fdb16d3cbbeb5798f2f66c4096be026d', 'sr_id': '495d4e95a8cf8bbf8b432b612a2aa328', 'won_date': '2018-02-07 18:04:05', 'business_segment': 'health_beauty', 'lead_type': 'online_medium', 'lead_behaviour_profile': '', 'has_company': None, 'has_gtin': None, 'average_stock': '', 'business_type': 'manufacturer', 'declared_product_catalog_size': None, 'declared_monthly_revenue': 0.0}, {'mql_id': 'a90a37898cc5f2718385a2fb981caaff', 'seller_id': '0b28859cd04d23edefee9c591fb03cd8', 'sdr_id': 'f42a2bd194f7802ab052a815c8de65b7', 'sr_id': '6565aa9ce3178a5caf6171827af3a9ba', 'won_date': '2018-05-14 18:37:15', 'business_segment': 'household_utilities', 'lead_type': 'offline', 'lead_behaviour_profile': 'eagle', 'has_company': None, 'has_gtin': None, 'average_stock': '', 'business_type': 'reseller', 'declared_product_catalog_size': None, 'declared_monthly_revenue': 0.0}, {'mql_id': '0173e8d8b1d94a355b440fb67388f532', 'seller_id': '87d73636a3acf123e842bb890a4db036', 'sdr_id': '9d12ef1a7eca3ec58c545c678af7869c', 'sr_id': '9e4d1098a3b0f5da39b0bc48f9876645', 'won_date': '2018-04-24 03:00:00', 'business_segment': 'household_utilities', 'lead_type': 'online_medium', 'lead_behaviour_profile': 'eagle', 'has_company': None, 'has_gtin': None, 'average_stock': '', 'business_type': 'manufacturer', 'declared_product_catalog_size': None, 'declared_monthly_revenue': 0.0}]

--------------------------------------------------
Table full name: E_COMMERCE.E_COMMERCE.ORDER_ITEMS
Column name: order_id Type: TEXT
Column name: price Type: FLOAT
Column name: order_item_id Type: NUMBER
Column name: shipping_limit_date Type: TEXT
Column name: product_id Type: TEXT
Column name: seller_id Type: TEXT
Column name: freight_value Type: FLOAT
Sample rows:
[{'order_id': '00010242fe8c5a6d1ba2dd792cb16214', 'order_item_id': 1, 'product_id': '4244733e06e7ecb4970a6e2683c13e61', 'seller_id': '48436dade18ac8b2bce089ec2a041202', 'shipping_limit_date': '2017-09-19 09:45:35', 'price': 58.9, 'freight_value': 13.29}, {'order_id': '00024acbcdf0a6daa1e931b038114c75', 'order_item_id': 1, 'product_id': '7634da152a4610f1595efa32f14722fc', 'seller_id': '9d7a1d34a5052409006425275ba1c2b4', 'shipping_limit_date': '2018-08-15 10:10:18', 'price': 12.99, 'freight_value': 12.79}, {'order_id': '00042b26cf59d7ce69dfabb4e55b4fd9', 'order_item_id': 1, 'product_id': 'ac6c3623068f30de03045865e4e10089', 'seller_id': 'df560393f3a51e74553ab94004ba5c87', 'shipping_limit_date': '2017-02-13 13:57:51', 'price': 199.9, 'freight_value': 18.14}, {'order_id': '00048cc3ae777c65dbb7d2a0634bc1ea', 'order_item_id': 1, 'product_id': 'ef92defde845ab8450f9d70c526ef70f', 'seller_id': '6426d21aca402a131fc0a5d0960a3c90', 'shipping_limit_date': '2017-05-23 03:55:27', 'price': 21.9, 'freight_value': 12.69}, {'order_id': '00054e8431b9d7675808bcb819fb4a32', 'order_item_id': 1, 'product_id': '8d4f2bb7e93e6710a28f34fa83ee7d28', 'seller_id': '7040e82f899a04d1b434b795a43b4617', 'shipping_limit_date': '2017-12-14 12:10:31', 'price': 19.9, 'freight_value': 11.85}]

--------------------------------------------------
Table full name: E_COMMERCE.E_COMMERCE.SELLERS
Column name: seller_zip_code_prefix Type: NUMBER
Column name: seller_state Type: TEXT
Column name: seller_city Type: TEXT
Column name: seller_id Type: TEXT
Sample rows:
[{'seller_id': '3442f8959a84dea7ee197c632cb2df15', 'seller_zip_code_prefix': 13023, 'seller_city': 'campinas', 'seller_state': 'SP'}, {'seller_id': 'd1b65fc7debc3361ea86b5f14c68d2e2', 'seller_zip_code_prefix': 13844, 'seller_city': 'mogi guacu', 'seller_state': 'SP'}, {'seller_id': 'ce3ad9de960102d0677a81f5d0bb7b2d', 'seller_zip_code_prefix': 20031, 'seller_city': 'rio de janeiro', 'seller_state': 'RJ'}, {'seller_id': '51a04a8a6bdcb23deccc82b0b80742cf', 'seller_zip_code_prefix': 12914, 'seller_city': 'braganca paulista', 'seller_state': 'SP'}, {'seller_id': 'e49c26c3edfa46d227d5121a6b6e4d37', 'seller_zip_code_prefix': 55325, 'seller_city': 'brejao', 'seller_state': 'PE'}]

--------------------------------------------------
Table full name: E_COMMERCE.E_COMMERCE.CUSTOMERS
Column name: customer_city Type: TEXT
Column name: customer_state Type: TEXT
Column name: customer_id Type: TEXT
Column name: customer_zip_code_prefix Type: NUMBER
Column name: customer_unique_id Type: TEXT
Sample rows:
[{'customer_id': 'b2b6027bc5c5109e529d4dc6358b12c3', 'customer_unique_id': '259dac757896d24d7702b9acbbff3f3c', 'customer_zip_code_prefix': 8775, 'customer_city': 'mogi das cruzes', 'customer_state': 'SP'}, {'customer_id': '5e274e7a0c3809e14aba7ad5aae0d407', 'customer_unique_id': '57b2a98a409812fe9618067b6b8ebe4f', 'customer_zip_code_prefix': 35182, 'customer_city': 'timoteo', 'customer_state': 'MG'}, {'customer_id': 'eabebad39a88bb6f5b52376faec28612', 'customer_unique_id': '295c05e81917928d76245e842748184d', 'customer_zip_code_prefix': 5704, 'customer_city': 'sao paulo', 'customer_state': 'SP'}, {'customer_id': 'a7c125a0a07b75146167b7f04a7f8e98', 'customer_unique_id': '5c2991dbd08bbf3cf410713c4de5a0b5', 'customer_zip_code_prefix': 22750, 'customer_city': 'rio de janeiro', 'customer_state': 'RJ'}, {'customer_id': '9b8ce803689b3562defaad4613ef426f', 'customer_unique_id': '7f3a72e8f988c6e735ba118d54f47458', 'customer_zip_code_prefix': 5416, 'customer_city': 'sao paulo', 'customer_state': 'SP'}]

--------------------------------------------------
Table full name: E_COMMERCE.E_COMMERCE.ORDER_REVIEWS
Column name: review_comment_title Type: TEXT
Column name: review_answer_timestamp Type: TEXT
Column name: review_score Type: NUMBER
Column name: order_id Type: TEXT
Column name: review_id Type: TEXT
Column name: review_creation_date Type: TEXT
Column name: review_comment_message Type: TEXT
Sample rows:
[{'review_id': '7bc2406110b926393aa56f80a40eba40', 'order_id': '73fc7af87114b39712e6da79b0a377eb', 'review_score': 4, 'review_comment_title': '', 'review_comment_message': '', 'review_creation_date': '2018-01-18 00:00:00', 'review_answer_timestamp': '2018-01-18 21:46:59'}, {'review_id': '80e641a11e56f04c1ad469d5645fdfde', 'order_id': 'a548910a1c6147796b98fdf73dbeba33', 'review_score': 5, 'review_comment_title': '', 'review_comment_message': '', 'review_creation_date': '2018-03-10 00:00:00', 'review_answer_timestamp': '2018-03-11 03:05:13'}, {'review_id': 'e64fb393e7b32834bb789ff8bb30750e', 'order_id': '658677c97b385a9be170737859d3511b', 'review_score': 5, 'review_comment_title': '', 'review_comment_message': 'Recebi bem antes do prazo estipulado.', 'review_creation_date': '2017-04-21 00:00:00', 'review_answer_timestamp': '2017-04-21 22:02:06'}, {'review_id': '07f9bee5d1b850860defd761afa7ff16', 'order_id': 'e48aa0d2dcec3a2e87348811bcfdf22b', 'review_score': 5, 'review_comment_title': '', 'review_comment_message': '', 'review_creation_date': '2017-07-16 00:00:00', 'review_answer_timestamp': '2017-07-18 19:30:34'}, {'review_id': '23f75a37effc35d9a915b4e1ad483793', 'order_id': '2eaf8e099d871cd5c22b83b5ea8f6e0e', 'review_score': 4, 'review_comment_title': '', 'review_comment_message': '', 'review_creation_date': '2018-03-28 00:00:00', 'review_answer_timestamp': '2018-03-30 15:10:55'}]

--------------------------------------------------
Table full name: E_COMMERCE.E_COMMERCE.PRODUCTS
Column name: product_photos_qty Type: FLOAT
Column name: product_description_lenght Type: FLOAT
Column name: product_height_cm Type: FLOAT
Column name: product_width_cm Type: FLOAT
Column name: product_name_lenght Type: FLOAT
Column name: product_id Type: TEXT
Column name: product_weight_g Type: FLOAT
Column name: product_length_cm Type: FLOAT
Column name: product_category_name Type: TEXT
Sample rows:
[{'product_id': '96bd76ec8810374ed1b65e291975717f', 'product_category_name': 'esporte_lazer', 'product_name_lenght': 46.0, 'product_description_lenght': 250.0, 'product_photos_qty': 1.0, 'product_weight_g': 154.0, 'product_length_cm': 18.0, 'product_height_cm': 9.0, 'product_width_cm': 15.0}, {'product_id': 'cef67bcfe19066a932b7673e239eb23d', 'product_category_name': 'bebes', 'product_name_lenght': 27.0, 'product_description_lenght': 261.0, 'product_photos_qty': 1.0, 'product_weight_g': 371.0, 'product_length_cm': 26.0, 'product_height_cm': 4.0, 'product_width_cm': 26.0}, {'product_id': '9dc1a7de274444849c219cff195d0b71', 'product_category_name': 'utilidades_domesticas', 'product_name_lenght': 37.0, 'product_description_lenght': 402.0, 'product_photos_qty': 4.0, 'product_weight_g': 625.0, 'product_length_cm': 20.0, 'product_height_cm': 17.0, 'product_width_cm': 13.0}, {'product_id': '732bd381ad09e530fe0a5f457d81becb', 'product_category_name': 'cool_stuff', 'product_name_lenght': 56.0, 'product_description_lenght': 1272.0, 'product_photos_qty': 4.0, 'product_weight_g': 18350.0, 'product_length_cm': 70.0, 'product_height_cm': 24.0, 'product_width_cm': 44.0}, {'product_id': '2548af3e6e77a690cf3eb6368e9ab61e', 'product_category_name': 'moveis_decoracao', 'product_name_lenght': 56.0, 'product_description_lenght': 184.0, 'product_photos_qty': 2.0, 'product_weight_g': 900.0, 'product_length_cm': 40.0, 'product_height_cm': 8.0, 'product_width_cm': 40.0}]

--------------------------------------------------
Table full name: E_COMMERCE.E_COMMERCE.PRODUCT_CATEGORY_NAME_TRANSLATION
Column name: product_category_name Type: TEXT
Column name: product_category_name_english Type: TEXT
Sample rows:
[{'product_category_name': 'informatica_acessorios', 'product_category_name_english': 'computers_accessories'}, {'product_category_name': 'moveis_decoracao', 'product_category_name_english': 'furniture_decor'}, {'product_category_name': 'esporte_lazer', 'product_category_name_english': 'sports_leisure'}, {'product_category_name': 'relogios_presentes', 'product_category_name_english': 'watches_gifts'}, {'product_category_name': 'alimentos_bebidas', 'product_category_name_english': 'food_drink'}]

--------------------------------------------------
Table full name: E_COMMERCE.E_COMMERCE.ORDERS
Column name: order_delivered_customer_date Type: TEXT
Column name: order_status Type: TEXT
Column name: order_id Type: TEXT
Column name: order_delivered_carrier_date Type: TEXT
Column name: order_purchase_timestamp Type: TEXT
Column name: order_estimated_delivery_date Type: TEXT
Column name: order_approved_at Type: TEXT
Column name: customer_id Type: TEXT
Sample rows:
[{'order_id': 'e481f51cbdc54678b7cc49136f2d6af7', 'customer_id': '9ef432eb6251297304e76186b10a928d', 'order_status': 'delivered', 'order_purchase_timestamp': '2017-10-02 10:56:33', 'order_approved_at': '2017-10-02 11:07:15', 'order_delivered_carrier_date': '2017-10-04 19:55:00', 'order_delivered_customer_date': '2017-10-10 21:25:13', 'order_estimated_delivery_date': '2017-10-18 00:00:00'}, {'order_id': '53cdb2fc8bc7dce0b6741e2150273451', 'customer_id': 'b0830fb4747a6c6d20dea0b8c802d7ef', 'order_status': 'delivered', 'order_purchase_timestamp': '2018-07-24 20:41:37', 'order_approved_at': '2018-07-26 03:24:27', 'order_delivered_carrier_date': '2018-07-26 14:31:00', 'order_delivered_customer_date': '2018-08-07 15:27:45', 'order_estimated_delivery_date': '2018-08-13 00:00:00'}, {'order_id': '949d5b44dbf5de918fe9c16f97b45f8a', 'customer_id': 'f88197465ea7920adcdbec7375364d82', 'order_status': 'delivered', 'order_purchase_timestamp': '2017-11-18 19:28:06', 'order_approved_at': '2017-11-18 19:45:59', 'order_delivered_carrier_date': '2017-11-22 13:39:59', 'order_delivered_customer_date': '2017-12-02 00:28:42', 'order_estimated_delivery_date': '2017-12-15 00:00:00'}, {'order_id': '6514b8ad8028c9f2cc2374ded245783f', 'customer_id': '9bdf08b4b3b52b5526ff42d37d47f222', 'order_status': 'delivered', 'order_purchase_timestamp': '2017-05-16 13:10:30', 'order_approved_at': '2017-05-16 13:22:11', 'order_delivered_carrier_date': '2017-05-22 10:07:46', 'order_delivered_customer_date': '2017-05-26 12:55:51', 'order_estimated_delivery_date': '2017-06-07 00:00:00'}, {'order_id': '76c6e866289321a7c93b82b54852dc33', 'customer_id': 'f54a9f0e6b351c431402b8461ea51999', 'order_status': 'delivered', 'order_purchase_timestamp': '2017-01-23 18:29:09', 'order_approved_at': '2017-01-25 02:50:47', 'order_delivered_carrier_date': '2017-01-26 14:16:31', 'order_delivered_customer_date': '2017-02-02 14:08:10', 'order_estimated_delivery_date': '2017-03-06 00:00:00'}]

--------------------------------------------------
Table full name: E_COMMERCE.E_COMMERCE.ORDER_PAYMENTS
Column name: payment_sequential Type: NUMBER
Column name: payment_installments Type: NUMBER
Column name: payment_value Type: FLOAT
Column name: order_id Type: TEXT
Column name: payment_type Type: TEXT
Sample rows:
[{'order_id': 'b81ef226f3fe1789b1e8b2acac839d17', 'payment_sequential': 1, 'payment_type': 'credit_card', 'payment_installments': 8, 'payment_value': 99.33}, {'order_id': 'a9810da82917af2d9aefd1278f1dcfa0', 'payment_sequential': 1, 'payment_type': 'credit_card', 'payment_installments': 1, 'payment_value': 24.39}, {'order_id': '25e8ea4e93396b6fa0d3dd708e76c1bd', 'payment_sequential': 1, 'payment_type': 'credit_card', 'payment_installments': 1, 'payment_value': 65.71}, {'order_id': '42fdf880ba16b47b59251dd489d4441a', 'payment_sequential': 1, 'payment_type': 'credit_card', 'payment_installments': 2, 'payment_value': 128.45}, {'order_id': '1f78449c87a54faf9e96e88ba1491fa9', 'payment_sequential': 1, 'payment_type': 'credit_card', 'payment_installments': 6, 'payment_value': 341.09}]

--------------------------------------------------
External knowledge that might be helpful: 
# Introduction to the RFM Model

The RFM (Recency, Frequency, Monetary) model segments and scores customers based on three key dimensions:

• Recency (R): How long it has been since the customer’s last purchase. A lower R score (e.g., R = 1) indicates a very recent purchase, while a higher R score (e.g., R = 5) indicates a longer time since the last purchase.

• Frequency (F): How often the customer purchases within a given time period. A lower F score (e.g., F = 1) signifies that the customer buys very frequently, whereas a higher F score (e.g., F = 5) indicates less frequent purchasing.

• Monetary (M): The total amount of money the customer spends. A lower M score (e.g., M = 1) indicates higher overall spending, while a higher M score (e.g., M = 5) signifies lower spending over the measured period.

Each customer’s R, F, and M scores are determined by their respective percentiles when compared to other customers. By concatenating the three scores, you get an “RFM cell”—for instance, a customer with R=1, F=5, and M=2 would fall into the 152 segment.

# RFM Segmentation Calculation

After scoring customers on Recency, Frequency, and Monetary values, the next step is to group them into segments that require different marketing or sales strategies. Typically:

1. Determine each customer’s recency score (R) from 1 to 5 (1 = very recent purchase, 5 = not recent).  
2. Determine each customer’s frequency score (F) from 1 to 5 (1 = most frequent purchases, 5 = least frequent).  
3. Determine each customer’s monetary score (M) from 1 to 5 (1 = highest spending, 5 = lowest spending).  
4. Concatenate these three scores into an RFM score (e.g., 153, 514).

By analyzing the distribution of RFM scores and placing them into buckets—for example, “Champions,” “Loyal Customers,” “At Risk,” “Lost,” etc.—you can tailor marketing, sales, and retention strategies to maximize the potential of each segment. 

For instance, a “Champion” (R=1, F=1, M=1) is a recent, frequent, and high-spending user who is highly valuable to your business, whereas a “Lost” customer (e.g., R=5, F=5, M=5) may require re-engagement offers or might no longer be cost-effective to target. Different segments can thus be prioritized based on their profitability and likelihood of responding positively to marketing efforts.

## RFM Segmentation Logic

Customers are assigned to specific segments (RFM Buckets) based on a combination of their Recency, Frequency, and Monetary scores. The segmentation logic is as follows:

- **Champions**: Customers who have made a recent purchase, with high frequency and high monetary value. These are considered the most valuable customers.
  - Criteria: Recency = 1 and Frequency + Monetary score between 1 and 4.

- **Can't Lose Them**: Previously frequent and high-spending customers who have not made a recent purchase. These customers are at risk of leaving and need attention.
  - Criteria: Recency = 4 or 5 and Frequency + Monetary score between 1 and 2.

- **Hibernating**: Customers whose last purchase was a while ago, with low to moderate frequency and spending. These customers might have lost interest in the products.
  - Criteria: Recency = 4 or 5 and Frequency + Monetary score between 3 and 6.

- **Lost**: Customers who have not purchased in a long time and have low frequency and monetary value. These customers are likely lost.
  - Criteria: Recency = 4 or 5 and Frequency + Monetary score between 7 and 10.

- **Loyal Customers**: Customers who are frequent buyers with decent spending levels, and they have made a purchase relatively recently. These customers are likely to be very loyal.
  - Criteria: Recency = 2 or 3 and Frequency + Monetary score between 1 and 4.

- **Needs Attention**: Customers whose purchase frequency and spending are moderate. They haven't bought very recently, but they could be incentivized to become more active.
  - Criteria: Recency = 3 and Frequency + Monetary score between 5 and 6.

- **Recent Users**: Customers who made a purchase recently, but their frequency and spending are moderate. These are relatively new or inconsistent buyers.
  - Criteria: Recency = 1 and Frequency + Monetary score between 7 and 8.

- **Potential Loyalists**: Customers who show potential to become loyal customers. They have good frequency and monetary scores, and they have made recent purchases. With the right engagement, they could become loyal customers.
  - Criteria:
    - Recency = 1 and Frequency + Monetary score between 5 and 6.
    - OR Recency = 2 and Frequency + Monetary score between 5 and 8.

- **Price Sensitive**: Customers who have made recent purchases but tend to spend less, indicating they may be more sensitive to price.
  - Criteria: Recency = 1 and Frequency + Monetary score between 9 and 10.

- **Promising**: These customers exhibit high potential with decent frequency and monetary scores, and they could become more valuable over time.
  - Criteria: Recency = 2 and Frequency + Monetary score between 9 and 10.

- **About to Sleep**: Customers whose frequency and spending are low, and their last purchase was some time ago. These customers are likely to become inactive.
  - Criteria: Recency = 3 and Frequency + Monetary score between 7 and 10.

## Summary

This segmentation logic groups customers based on their behavior in terms of when they last purchased (Recency), how often they purchase (Frequency), and how much they spend (Monetary). By understanding which group a customer belongs to, organizations can tailor marketing strategies to engage the right audience more effectively, improving customer retention and maximizing value.

The table structure information is ({database name: {schema name: [table name]}}): 
{'E_COMMERCE': {'E_COMMERCE': ['LEADS_QUALIFIED', 'GEOLOCATION', 'LEADS_CLOSED', 'ORDER_ITEMS', 'SELLERS', 'CUSTOMERS', 'ORDER_REVIEWS', 'PRODUCTS', 'PRODUCT_CATEGORY_NAME_TRANSLATION', 'ORDERS', 'ORDER_PAYMENTS']}}

Some few-shot examples after column exploration may be helpful:
Query:
--Description: 1) Inspect all possible order status values to confirm we should filter by “delivered”.
SELECT DISTINCT "order_status"
FROM E_COMMERCE.E_COMMERCE.ORDERS
LIMIT 20;
Answer:
order_status
delivered
invoiced
shipped
processing
unavailable
canceled
created
approved
Query:
--Description: 2) Show a sample of delivered orders with their purchase timestamps and the raw customer_id.
SELECT "order_id",
       "customer_id",
       "order_purchase_timestamp",
       "order_status"
FROM E_COMMERCE.E_COMMERCE.ORDERS
WHERE "order_status" ILIKE '%delivered%'
LIMIT 20;
Answer:
order_id,customer_id,order_purchase_timestamp,order_status
e481f51cbdc54678b7cc49136f2d6af7,9ef432eb6251297304e76186b10a928d,2017-10-02 10:56:33,delivered
53cdb2fc8bc7dce0b6741e2150273451,b0830fb4747a6c6d20dea0b8c802d7ef,2018-07-24 20:41:37,delivered
47770eb9100c2d0c44946d9cf07ec65d,41ce2a54c0b03bf3443c3d931a367089,2018-08-08 08:38:49,delivered
949d5b44dbf5de918fe9c16f97b45f8a,f88197465ea7920adcdbec7375364d82,2017-11-18 19:28:06,delivered
ad21c59c0840e6cb83a9ceb5573f8159,8ab97904e6daea8866d
Query:
--Description: 3) Check total payment recorded per order (one row per order_id).
SELECT "order_id",
       SUM("payment_value") AS "total_payment"
FROM E_COMMERCE.E_COMMERCE.ORDER_PAYMENTS
GROUP BY "order_id"
LIMIT 20;
Answer:
order_id,total_payment
b81ef226f3fe1789b1e8b2acac839d17,99.33
a9810da82917af2d9aefd1278f1dcfa0,24.39
25e8ea4e93396b6fa0d3dd708e76c1bd,65.71
ba78997921bbcdc1373bb41e913ab953,107.78
298fcdf1f73eb413e4d26d01b25bc1cd,96.12
771ee386b001f06208a7419e4fc1bbd7,81.16
1f78449c87a54faf9e96e88ba1491fa9,341.09
0573b5e23cbd798006520e1d5b4c6714,51.95
d88e0d5fa41661ce03cf6cf336527646,188.73
2480f727e869fdeb397244a21b721b67,141.9
616105c9352a9668c38303ad44e056cd,75.78
769214176682788a92801d8907fa1b40,
Query:
--Description: 4) Join delivered orders with their payments to view one-row-per-payment line items (still at order level).
SELECT o."order_id",
       o."customer_id",
       o."order_purchase_timestamp",
       p."payment_value"
FROM E_COMMERCE.E_COMMERCE.ORDERS            o
JOIN E_COMMERCE.E_COMMERCE.ORDER_PAYMENTS    p
  ON o."order_id" = p."order_id"
WHERE o."order_status" ILIKE '%delivered%'
LIMIT 20;
Answer:
order_id,customer_id,order_purchase_timestamp,payment_value
b81ef226f3fe1789b1e8b2acac839d17,0a8556ac6be836b46b3e89920d59291c,2018-04-25 22:01:49,99.33
a9810da82917af2d9aefd1278f1dcfa0,f2c7fc58a9de810828715166c672f10a,2018-06-26 11:01:38,24.39
25e8ea4e93396b6fa0d3dd708e76c1bd,25b14b69de0b6e184ae6fe2755e478f9,2017-12-12 11:19:55,65.71
ba78997921bbcdc1373bb41e913ab953,7a5d8efaaa1081f800628c30d2b0728f,2017-12-06 12:04:06,107.78
42fdf880ba16b47b59251dd489d4441a,15fd6fb8f8312dbb4674e4518d6fa3b3,
Query:
--Description: 5) Map the technical “customer_id” to the stable “customer_unique_id”.
SELECT "customer_id",
       "customer_unique_id"
FROM E_COMMERCE.E_COMMERCE.CUSTOMERS
LIMIT 20;
Answer:
customer_id,customer_unique_id
06b8999e2fba1a1fbc88172c00ba8bc7,861eff4711a542e4b93843c6dd7febb0
18955e83d337fd6b2def6b18a428ac77,290c77bc529b7ac935b93aa66c333dc3
4e7b3e00288586ebd08712fdd0374a03,060e732b5b29e8181a18229c7b0b2b5e
b2b6027bc5c5109e529d4dc6358b12c3,259dac757896d24d7702b9acbbff3f3c
4f2d8ab171c80ec8364f7c12e35b23ad,345ecd01c38d18a9036ed96c73b8d066
879864dab9bc3047522c92c82e1212b8,4c93744516667ad3b8f1fb645a3116a4
fd826e7cf63160e536e0908c76c3f441,addec96d2e059c80c30fe6871d30d177
Query:
--Description: 6) Produce one row per delivered order with its full value and the final customer_unique_id.
SELECT  o."order_id",
        c."customer_unique_id",
        o."order_purchase_timestamp",
        SUM(p."payment_value") AS "order_value"
FROM      E_COMMERCE.E_COMMERCE.ORDERS         o
JOIN      E_COMMERCE.E_COMMERCE.ORDER_PAYMENTS p  ON o."order_id" = p."order_id"
JOIN      E_COMMERCE.E_COMMERCE.CUSTOMERS      c  ON o."customer_id" = c."customer_id"
WHERE     o."order_status" ILIKE '%delivered%'
GROUP BY  o."order_id",
          c."customer_unique_id",
          o."order_purchase_timestamp"
LIMIT 20;
Answer:
order_id,customer_unique_id,order_purchase_timestamp,order_value
29150127e6685892b6eab3eec79f59c7,290c77bc529b7ac935b93aa66c333dc3,2018-01-12 20:48:24,335.48
951670f92359f4fe4a63112aa7306eba,259dac757896d24d7702b9acbbff3f3c,2018-03-13 16:06:38,173.3
5741ea1f91b5fbab2bd2dc653a5b5099,4c93744516667ad3b8f1fb645a3116a4,2017-09-14 18:14:31,282.21
36e694cf4cbc2a4803200c35e84abdc4,addec96d2e059c80c30fe6871d30d177,2018-02-19 14:38:35,22.77
1ebeea841c590e86a14a0d7a48e7d062,1175e95fb47ddff9de6b2b06188
Query:
--Description: 7) Aggregate to customer level: last purchase date, order count (frequency) and total spend (monetary).
SELECT  t."customer_unique_id",
        MAX(t."order_purchase_timestamp") AS "last_purchase",
        COUNT(*)                         AS "total_orders",
        SUM(t."order_value")             AS "total_spend"
FROM   (
        SELECT  o."order_id",
                c."customer_unique_id",
                o."order_purchase_timestamp",
                SUM(p."payment_value") AS "order_value"
        FROM      E_COMMERCE.E_COMMERCE.ORDERS         o
        JOIN      E_COMMERCE.E_COMMERCE.ORDER_PAYMENTS p ON o."order_id" = p."order_id"
        JOIN      E_COMMERCE.E_COMMERCE.CUSTOMERS      c ON o."customer_id" = c."customer_id"
        WHERE     o."order_status" ILIKE '%delivered%'
        GROUP BY  o."order_id",
                  c."customer_unique_id",
                  o."order_purchase_timestamp"
       ) t
GROUP BY t."customer_unique_id"
LIMIT 20;
Answer:
customer_unique_id,last_purchase,total_orders,total_spend
ef07ba9aa5226f77264ffa5762b2280b,2018-03-12 13:07:03,1,45.730000000000004
a302a693d5722d95984e6472150b9391,2018-06-06 16:53:30,1,151.6
8dfb24fac32ec7170821d2be63fa9c1c,2017-09-01 10:26:06,1,17.85
56636fd22de1a315b8a50d45cf94d859,2017-08-27 23:00:33,1,33.59
05aa2ef3623cdba9ca3e83b91f1eee5c,2017-07-07 17:56:19,1,103.55
4a4de987b37555970ffcc9608d858a72,2017-10-06 08:37:41,1,253.05
95363f351776a3f8a43145c79a046053,2017-12-12 17:39:17,1
Query:
--Description: 8) Add the Recency metric (days since each customer’s last purchase, relative to the most recent purchase in the data set).
WITH cust_metrics AS (
    SELECT  t."customer_unique_id",
            MAX(t."order_purchase_timestamp") AS "last_purchase",
            COUNT(*)  AS "total_orders",
            SUM(t."order_value") AS "total_spend"
    FROM   (
            SELECT  o."order_id",
                    c."customer_unique_id",
                    o."order_purchase_timestamp",
                    SUM(p."payment_value") AS "order_value"
            FROM      E_COMMERCE.E_COMMERCE.ORDERS         o
            JOIN      E_COMMERCE.E_COMMERCE.ORDER_PAYMENTS p ON o."order_id" = p."order_id"
            JOIN      E_COMMERCE.E_COMMERCE.CUSTOMERS      c ON o."customer_id" = c."customer_id"
            WHERE     o."order_status" ILIKE '%delivered%'
            GROUP BY  o."order_id",
                      c."customer_unique_id",
                      o."order_purchase_timestamp"
           ) t
    GROUP BY t."customer_unique_id"
)
SELECT  cm."customer_unique_id",
        cm."last_purchase",
        DATEDIFF('day',
                 cm."last_purchase"::timestamp,
                 MAX(cm."last_purchase") OVER()::timestamp) AS "recency_days",
        cm."total_orders",
        cm."total_spend"
FROM    cust_metrics cm
LIMIT 20;
Answer:
customer_unique_id,last_purchase,recency_days,total_orders,total_spend
629fb99609e4613c746af4eaa455c91a,2018-05-16 20:57:48,105,1,26.29
9f67d6145893e41e7ada2e646b84f658,2018-03-23 17:52:14,159,1,229.79
6e4188c01246d30b20d17a1ed42094fe,2018-04-20 13:33:18,131,1,126.47
744fcfb3939c1c57f16cb00f263c3929,2018-02-16 10:48:35,194,1,99.69
6995203f8a5ddbd2fad3a9df1e099a51,2017-10-30 18:23:07,303,1,101.2
0f13e3bb90bbd8912d57145479ce4839,2018-03-27 20:40:52,155,1,38.13
3e7093ecfc2d4fda791cc93d9e18c3
Query:
--Description: 9) Score each customer on Recency, Frequency and Monetary using quintiles (1 = best, 5 = worst for Recency).
WITH base AS (
    SELECT  cm."customer_unique_id",
            cm."last_purchase",
            DATEDIFF('day',
                     cm."last_purchase"::timestamp,
                     MAX(cm."last_purchase") OVER()::timestamp) AS "recency_days",
            cm."total_orders",
            cm."total_spend"
    FROM (
         SELECT  t."customer_unique_id",
                 MAX(t."order_purchase_timestamp") AS "last_purchase",
                 COUNT(*)  AS "total_orders",
                 SUM(t."order_value") AS "total_spend"
         FROM   (
                 SELECT  o."order_id",
                         c."customer_unique_id",
                         o."order_purchase_timestamp",
                         SUM(p."payment_value") AS "order_value"
                 FROM      E_COMMERCE.E_COMMERCE.ORDERS         o
                 JOIN      E_COMMERCE.E_COMMERCE.ORDER_PAYMENTS p ON o."order_id" = p."order_id"
                 JOIN      E_COMMERCE.E_COMMERCE.CUSTOMERS      c ON o."customer_id" = c."customer_id"
                 WHERE     o."order_status" ILIKE '%delivered%'
                 GROUP BY  o."order_id",
                           c."customer_unique_id",
                           o."order_purchase_timestamp"
                ) t
         GROUP BY t."customer_unique_id"
    ) cm
)
SELECT  b."customer_unique_id",
        NTILE(5) OVER(ORDER BY b."recency_days" ASC)  AS "r_score",
        NTILE(5) OVER(ORDER BY b."total_orders" DESC) AS "f_score",
        NTILE(5) OVER(ORDER BY b."total_spend"  DESC) AS "m_score",
        b."total_orders",
        b."total_spend"
FROM    base b
LIMIT 20;
Answer:
customer_unique_id,r_score,f_score,m_score,total_orders,total_spend
0a0a92112bd4c708ca5fde585afaa872,4,5,1,1,13664.08
da122df9eeddfedc1dc1f5349a1a690c,5,1,1,2,7571.63
763c8b1c9c68a0229c42c9fc6f662b93,1,2,1,1,7274.88
dc4802a71eae9be1dd28f5d788ceb526,5,4,1,1,6929.31
459bef486812aa25204be022145caa62,1,2,1,1,6922.21
ff4159b92c40ebe40454e3e6a7c35ed6,5,4,1,1,6726.66
4007669dec559734d6f53e029e360987,4,5,1,1,6081.54
eebb5dda148d3893cdaf5b5ca3040ccb,5,4,1,1,4764.34
48e1ac109decbb87765a3eade68540
Query:
--Description: 10) Final output—assign each customer to an RFM segment and compute his/her average sales per order; then aggregate by segment.
WITH customer_rfm AS (
    SELECT  b."customer_unique_id",
            NTILE(5) OVER(ORDER BY b."recency_days" ASC)  AS "r_score",
            NTILE(5) OVER(ORDER BY b."total_orders" DESC) AS "f_score",
            NTILE(5) OVER(ORDER BY b."total_spend"  DESC) AS "m_score",
            b."total_orders",
            b."total_spend"
    FROM (
        SELECT  cm."customer_unique_id",
                cm."last_purchase",
                DATEDIFF('day',
                         cm."last_purchase"::timestamp,
                         MAX(cm."last_purchase") OVER()::timestamp) AS "recency_days",
                cm."total_orders",
                cm."total_spend"
        FROM (
            SELECT  t."customer_unique_id",
                    MAX(t."order_purchase_timestamp") AS "last_purchase",
                    COUNT(*)  AS "total_orders",
                    SUM(t."order_value") AS "total_spend"
            FROM   (
                    SELECT  o."order_id",
                            c."customer_unique_id",
                            o."order_purchase_timestamp",
                            SUM(p."payment_value") AS "order_value"
                    FROM      E_COMMERCE.E_COMMERCE.ORDERS         o
                    JOIN      E_COMMERCE.E_COMMERCE.ORDER_PAYMENTS p ON o."order_id" = p."order_id"
                    JOIN      E_COMMERCE.E_COMMERCE.CUSTOMERS      c ON o."customer_id" = c."customer_id"
                    WHERE     o."order_status" ILIKE '%delivered%'
                    GROUP BY  o."order_id",
                              c."customer_unique_id",
                              o."order_purchase_timestamp"
                   ) t
            GROUP BY t."customer_unique_id"
        ) cm
    ) b
)
SELECT  CASE
           WHEN r."r_score" = 1 AND (r."f_score" + r."m_score") BETWEEN 1 AND 4  THEN 'Champions'
           WHEN r."r_score" IN (4,5) AND (r."f_score" + r."m_score") BETWEEN 1 AND 2  THEN 'Can''t Lose Them'
           WHEN r."r_score" IN (4,5) AND (r."f_score" + r."m_score") BETWEEN 3 AND 6  THEN 'Hibernating'
           WHEN r."r_score" IN (4,5) AND (r."f_score" + r."m_score") BETWEEN 7 AND 10 THEN 'Lost'
           WHEN r."r_score" IN (2,3) AND (r."f_score" + r."m_score") BETWEEN 1 AND 4 THEN 'Loyal Customers'
           WHEN r."r_score" = 3      AND (r."f_score" + r."m_score") BETWEEN 5 AND 6 THEN 'Needs Attention'
           WHEN r."r_score" = 1      AND (r."f_score" + r."m_score") BETWEEN 7 AND 8 THEN 'Recent Users'
           WHEN (r."r_score" = 1 AND (r."f_score" + r."m_score") BETWEEN 5 AND 6)
             OR (r."r_score" = 2 AND (r."f_score" + r."m_score") BETWEEN 5 AND 8)  THEN 'Potential Loyalists'
           WHEN r."r_score" = 1      AND (r."f_score" + r."m_score") BETWEEN 9 AND 10 THEN 'Price Sensitive'
           WHEN r."r_score" = 2      AND (r."f_score" + r."m_score") BETWEEN 9 AND 10 THEN 'Promising'
           WHEN r."r_score" = 3      AND (r."f_score" + r."m_score") BETWEEN 7 AND 10 THEN 'About to Sleep'
           ELSE 'Other'
        END                                   AS "rfm_segment",
        AVG(r."total_spend" / NULLIF(r."total_orders",0)) AS "average_sales_per_order"
FROM    customer_rfm r
GROUP BY "rfm_segment"
LIMIT 20;
Answer:
rfm_segment,average_sales_per_order
Hibernating,298.02512426900586
Champions,316.4385362242771
Loyal Customers,248.1755750515515
Can't Lose Them,216.26095660749507
Lost,79.38430490174909
Needs Attention,177.97016209691324
Potential Loyalists,87.20787530302134
Recent Users,46.9337607714403
About to Sleep,86.51671737490571
Task: According to the RFM definition document, calculate the average sales per order for each customer within distinct RFM segments, considering only 'delivered' orders. Use the customer unique identifier. Clearly define how to calculate Recency based on the latest purchase timestamp and specify the criteria for classifying RFM segments. The average sales should be computed as the total spend divided by the total number of orders. Please analyze and report the differences in average sales across the RFM segments

Please think step by step and answer only one complete SQL in snowflake dialect in ```sql``` format.
SQL usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: The table structure information is ({database name: {schema name: [table name]}}): 
{'E_COMMERCE': {'E_COMMERCE': ['LEADS_QUALIFIED', 'GEOLOCATION', 'LEADS_CLOSED', 'ORDER_ITEMS', 'SELLERS', 'CUSTOMERS', 'ORDER_REVIEWS', 'PRODUCTS', 'PRODUCT_CATEGORY_NAME_TRANSLATION', 'ORDERS', 'ORDER_PAYMENTS']}}

When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
If the task description does not specify the number of decimal places, retain all decimals to four places.

[Self-refine]
2025-05-07 06:59:56 - Thread-543 (execute) - INFO - [Try to run SQL in self-refine]
```sql
/* -----------------------------------------------------------
   RFM SEGMENTATION & AVERAGE SALES PER ORDER
   -----------------------------------------------------------
   •   RECENCY  = days between each customer’s latest purchase
                  and the most recent purchase observed in the
                  whole delivered-orders data set.
       (Smaller value ⇒ more recent.)

   •   FREQUENCY = total number of delivered orders per customer.

   •   MONETARY  = total spend (sum of payment_value) per customer.

   •   SCORING   = each metric is split into quintiles (1-best … 5-worst
                   for Recency; 1-highest … 5-lowest for Frequency &
                   Monetary) by means of NTILE(5).

   •   SEGMENTS  = customers are mapped to RFM buckets following the
                   logic provided in the task description.

   •   AVERAGE SALES PER ORDER = total_spend / total_orders.
------------------------------------------------------------- */
WITH delivered_orders AS (                -- all delivered orders
    SELECT
        o."order_id",
        c."customer_unique_id",
        o."order_purchase_timestamp"::timestamp AS "purchase_ts"
    FROM E_COMMERCE.E_COMMERCE.ORDERS   o
    JOIN E_COMMERCE.E_COMMERCE.CUSTOMERS c
      ON o."customer_id" = c."customer_id"
    WHERE o."order_status" = 'delivered'
), order_values AS (                      -- monetary value per order
    SELECT
        p."order_id",
        SUM(p."payment_value") AS "order_value"
    FROM E_COMMERCE.E_COMMERCE.ORDER_PAYMENTS p
    GROUP BY p."order_id"
), customer_orders AS (                   -- one row per delivered order
    SELECT
        d."customer_unique_id",
        d."order_id",
        d."purchase_ts",
        ov."order_value"
    FROM delivered_orders d
    JOIN order_values     ov ON d."order_id" = ov."order_id"
), customer_agg AS (                      -- R, F, M raw metrics
    SELECT
        co."customer_unique_id",
        MAX(co."purchase_ts")                 AS "last_purchase",
        COUNT(*)                              AS "total_orders",
        SUM(co."order_value")                 AS "total_spend"
    FROM customer_orders co
    GROUP BY co."customer_unique_id"
), recency_base AS (                       -- compute Recency (days)
    SELECT
        ca.*,
        DATEDIFF('day',
                 ca."last_purchase",
                 MAX(ca."last_purchase") OVER()) AS "recency_days"
    FROM customer_agg ca
), rfm_scores AS (                         -- quintile scores 1-5
    SELECT
        rb.*,
        NTILE(5) OVER (ORDER BY rb."recency_days" ASC)  AS "r_score",
        NTILE(5) OVER (ORDER BY rb."total_orders" DESC) AS "f_score",
        NTILE(5) OVER (ORDER BY rb."total_spend"  DESC) AS "m_score"
    FROM recency_base rb
), rfm_segments AS (                       -- map to RFM buckets
    SELECT
        rs.*,
        CASE
            WHEN rs."r_score" = 1
                 AND (rs."f_score" + rs."m_score") BETWEEN 1 AND 4
                 THEN 'Champions'

            WHEN rs."r_score" IN (4,5)
                 AND (rs."f_score" + rs."m_score") BETWEEN 1 AND 2
                 THEN 'Can''t Lose Them'

            WHEN rs."r_score" IN (4,5)
                 AND (rs."f_score" + rs."m_score") BETWEEN 3 AND 6
                 THEN 'Hibernating'

            WHEN rs."r_score" IN (4,5)
                 AND (rs."f_score" + rs."m_score") BETWEEN 7 AND 10
                 THEN 'Lost'

            WHEN rs."r_score" IN (2,3)
                 AND (rs."f_score" + rs."m_score") BETWEEN 1 AND 4
                 THEN 'Loyal Customers'

            WHEN rs."r_score" = 3
                 AND (rs."f_score" + rs."m_score") BETWEEN 5 AND 6
                 THEN 'Needs Attention'

            WHEN rs."r_score" = 1
                 AND (rs."f_score" + rs."m_score") BETWEEN 7 AND 8
                 THEN 'Recent Users'

            WHEN (rs."r_score" = 1
                    AND (rs."f_score" + rs."m_score") BETWEEN 5 AND 6)
              OR (rs."r_score" = 2
                    AND (rs."f_score" + rs."m_score") BETWEEN 5 AND 8)
                 THEN 'Potential Loyalists'

            WHEN rs."r_score" = 1
                 AND (rs."f_score" + rs."m_score") BETWEEN 9 AND 10
                 THEN 'Price Sensitive'

            WHEN rs."r_score" = 2
                 AND (rs."f_score" + rs."m_score") BETWEEN 9 AND 10
                 THEN 'Promising'

            WHEN rs."r_score" = 3
                 AND (rs."f_score" + rs."m_score") BETWEEN 7 AND 10
                 THEN 'About to Sleep'

            ELSE 'Other'
        END AS "rfm_segment"
    FROM rfm_scores rs
)
SELECT
    "rfm_segment",
    AVG("total_spend" / NULLIF("total_orders", 0)) AS "average_sales_per_order"
FROM rfm_segments
GROUP BY "rfm_segment"
ORDER BY "average_sales_per_order" DESC NULLS LAST;
```
[Try to run SQL in self-refine]
2025-05-07 07:00:10 - Thread-543 (execute) - INFO - Total iteration counts: 0
