2025-05-07 06:54:49 - Thread-541 (execute) - INFO - [Exploration]
```sql
--Description: Preview a few customers with their unique identifiers and ZIP information
SELECT DISTINCT 
       "customer_unique_id",
       "customer_id",
       "customer_zip_code_prefix",
       "customer_city",
       "customer_state"
FROM   "E_COMMERCE"."E_COMMERCE"."CUSTOMERS"
LIMIT 20;
```

```sql
--Description: Inspect some delivered orders together with the customer they belong to
SELECT 
       "order_id",
       "customer_id",
       "order_status",
       "order_purchase_timestamp",
       "order_delivered_customer_date"
FROM   "E_COMMERCE"."E_COMMERCE"."ORDERS"
WHERE  "order_status" = 'delivered'
LIMIT 20;
```

```sql
--Description: Take a look at payments attached to delivered orders (one row per payment record)
SELECT o."order_id",
       o."customer_id",
       p."payment_sequential",
       p."payment_type",
       p."payment_installments",
       p."payment_value"
FROM   "E_COMMERCE"."E_COMMERCE"."ORDERS"  o
JOIN   "E_COMMERCE"."E_COMMERCE"."ORDER_PAYMENTS" p
       ON p."order_id" = o."order_id"
WHERE  o."order_status" = 'delivered'
LIMIT 20;
```

```sql
--Description: For each delivered order, aggregate all payment rows to obtain the total paid amount
SELECT 
       p."order_id",
       SUM(p."payment_value") AS "order_total_paid"
FROM   "E_COMMERCE"."E_COMMERCE"."ORDERS"  o
JOIN   "E_COMMERCE"."E_COMMERCE"."ORDER_PAYMENTS" p
       ON p."order_id" = o."order_id"
WHERE  o."order_status" = 'delivered'
GROUP  BY p."order_id"
LIMIT 20;
```

```sql
--Description: Derive Frequency (number of delivered orders) for every customer_unique_id
SELECT  c."customer_unique_id",
        COUNT(DISTINCT o."order_id") AS "frequency_orders"
FROM    "E_COMMERCE"."E_COMMERCE"."CUSTOMERS" c
JOIN    "E_COMMERCE"."E_COMMERCE"."ORDERS"    o
        ON o."customer_id" = c."customer_id"
WHERE   o."order_status" = 'delivered'
GROUP   BY c."customer_unique_id"
LIMIT 20;
```

```sql
--Description: Derive Monetary value (total spend) for every customer_unique_id on delivered orders
SELECT  c."customer_unique_id",
        SUM(p."payment_value") AS "monetary_total_spent"
FROM    "E_COMMERCE"."E_COMMERCE"."CUSTOMERS"       c
JOIN    "E_COMMERCE"."E_COMMERCE"."ORDERS"          o  ON o."customer_id" = c."customer_id"
JOIN    "E_COMMERCE"."E_COMMERCE"."ORDER_PAYMENTS"  p  ON p."order_id"    = o."order_id"
WHERE   o."order_status" = 'delivered'
GROUP   BY c."customer_unique_id"
LIMIT 20;
```

```sql
--Description: Capture the latest (most recent) purchase timestamp per customer to serve as Recency base
SELECT  c."customer_unique_id",
        MAX(o."order_purchase_timestamp") AS "latest_purchase_ts"
FROM    "E_COMMERCE"."E_COMMERCE"."CUSTOMERS" c
JOIN    "E_COMMERCE"."E_COMMERCE"."ORDERS"    o  ON o."customer_id" = c."customer_id"
WHERE   o."order_status" = 'delivered'
GROUP   BY c."customer_unique_id"
LIMIT 20;
```

```sql
--Description: Combine raw Recency (latest date), Frequency, and Monetary metrics for each customer
WITH rf AS (
     SELECT  c."customer_unique_id",
             COUNT(DISTINCT o."order_id")        AS "frequency",
             SUM(p."payment_value")              AS "monetary",
             MAX(o."order_purchase_timestamp")   AS "latest_purchase_ts"
     FROM    "E_COMMERCE"."E_COMMERCE"."CUSTOMERS"       c
     JOIN    "E_COMMERCE"."E_COMMERCE"."ORDERS"          o  ON o."customer_id" = c."customer_id"
     JOIN    "E_COMMERCE"."E_COMMERCE"."ORDER_PAYMENTS"  p  ON p."order_id"    = o."order_id"
     WHERE   o."order_status" = 'delivered'
     GROUP   BY c."customer_unique_id"
)
SELECT * FROM rf
LIMIT 20;
```

```sql
--Description: Score customers into R, F, M quintiles (1 = best / 5 = worst) using NTILE over the raw metrics
WITH rfm_base AS (
     SELECT  c."customer_unique_id",
             COUNT(DISTINCT o."order_id")        AS "frequency",
             SUM(p."payment_value")              AS "monetary",
             MAX(o."order_purchase_timestamp")   AS "latest_purchase_ts"
     FROM    "E_COMMERCE"."E_COMMERCE"."CUSTOMERS"       c
     JOIN    "E_COMMERCE"."E_COMMERCE"."ORDERS"          o  ON o."customer_id" = c."customer_id"
     JOIN    "E_COMMERCE"."E_COMMERCE"."ORDER_PAYMENTS"  p  ON p."order_id"    = o."order_id"
     WHERE   o."order_status" = 'delivered'
     GROUP   BY c."customer_unique_id"
), rfm_scored AS (
     SELECT  *,
             NTILE(5) OVER (ORDER BY "latest_purchase_ts" DESC)              AS "R_score",
             NTILE(5) OVER (ORDER BY "frequency"         DESC)              AS "F_score",
             NTILE(5) OVER (ORDER BY "monetary"          DESC)              AS "M_score"
     FROM    rfm_base
)
SELECT 
       "customer_unique_id",
       "R_score",
       "F_score",
       "M_score",
       CAST("R_score" AS STRING) || CAST("F_score" AS STRING) || CAST("M_score" AS STRING) AS "RFM_code"
FROM   rfm_scored
LIMIT 20;
```

```sql
--Description: Classify customers into RFM segments and compute their average sales per order (total spend / orders)
WITH rfm_base AS (
     SELECT  c."customer_unique_id",
             COUNT(DISTINCT o."order_id")        AS "frequency",
             SUM(p."payment_value")              AS "monetary",
             MAX(o."order_purchase_timestamp")   AS "latest_purchase_ts"
     FROM    "E_COMMERCE"."E_COMMERCE"."CUSTOMERS"       c
     JOIN    "E_COMMERCE"."E_COMMERCE"."ORDERS"          o  ON o."customer_id" = c."customer_id"
     JOIN    "E_COMMERCE"."E_COMMERCE"."ORDER_PAYMENTS"  p  ON p."order_id"    = o."order_id"
     WHERE   o."order_status" = 'delivered'
     GROUP   BY c."customer_unique_id"
), rfm_scored AS (
     SELECT  *,
             NTILE(5) OVER (ORDER BY "latest_purchase_ts" DESC) AS "R_score",
             NTILE(5) OVER (ORDER BY "frequency"         DESC)  AS "F_score",
             NTILE(5) OVER (ORDER BY "monetary"          DESC)  AS "M_score"
     FROM    rfm_base
), rfm_labeled AS (
     SELECT  *,
             -- Sum of F & M scores for easier rule checks
             ("F_score" + "M_score") AS "F_plus_M",
             
             -- Segment mapping (as per provided logic)
             CASE 
                 WHEN "R_score" = 1 AND "F_plus_M" BETWEEN 1 AND 4                     THEN 'Champions'
                 WHEN "R_score" IN (4,5) AND "F_plus_M" BETWEEN 1 AND 2               THEN 'Can''t Lose Them'
                 WHEN "R_score" IN (4,5) AND "F_plus_M" BETWEEN 3 AND 6               THEN 'Hibernating'
                 WHEN "R_score" IN (4,5) AND "F_plus_M" BETWEEN 7 AND 10              THEN 'Lost'
                 WHEN "R_score" IN (2,3) AND "F_plus_M" BETWEEN 1 AND 4               THEN 'Loyal Customers'
                 WHEN "R_score"  = 3   AND "F_plus_M" BETWEEN 5 AND 6                 THEN 'Needs Attention'
                 WHEN "R_score"  = 1   AND "F_plus_M" BETWEEN 7 AND 8                 THEN 'Recent Users'
                 WHEN ("R_score" = 1 AND "F_plus_M" BETWEEN 5 AND 6)
                       OR ("R_score" = 2 AND "F_plus_M" BETWEEN 5 AND 8)              THEN 'Potential Loyalists'
                 WHEN "R_score"  = 1   AND "F_plus_M" BETWEEN 9 AND 10                THEN 'Price Sensitive'
                 WHEN "R_score"  = 2   AND "F_plus_M" BETWEEN 9 AND 10                THEN 'Promising'
                 WHEN "R_score"  = 3   AND "F_plus_M" BETWEEN 7 AND 10                THEN 'About to Sleep'
                 ELSE 'Other'
             END AS "RFM_segment"
     FROM    rfm_scored
)
SELECT  "RFM_segment",
        ROUND( SUM("monetary") / SUM("frequency"), 2) AS "avg_sales_per_order"
FROM    rfm_labeled
GROUP   BY "RFM_segment"
ORDER   BY "avg_sales_per_order" DESC
LIMIT 20;
```

[Exploration]
2025-05-07 06:54:49 - Thread-541 (execute) - INFO - [Try to execute]
--Description: Preview a few customers with their unique identifiers and ZIP information
SELECT DISTINCT 
       "customer_unique_id",
       "customer_id",
       "customer_zip_code_prefix",
       "customer_city",
       "customer_state"
FROM   "E_COMMERCE"."E_COMMERCE"."CUSTOMERS"
LIMIT 20;
[Try to execute]
2025-05-07 06:54:51 - Thread-541 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Preview a few customers with their unique identifiers and ZIP information
SELECT DISTINCT 
       "customer_unique_id",
       "customer_id",
       "customer_zip_code_prefix",
       "customer_city",
       "customer_state"
FROM   "E_COMMERCE"."E_COMMERCE"."CUSTOMERS"
LIMIT 20;
Results:
customer_unique_id,customer_id,customer_zip_code_prefix,customer_city,customer_state
861eff4711a542e4b93843c6dd7febb0,06b8999e2fba1a1fbc88172c00ba8bc7,14409,franca,SP
290c77bc529b7ac935b93aa66c333dc3,18955e83d337fd6b2def6b18a428ac77,9790,sao bernardo do campo,SP
060e732b5b29e8181a18229c7b0b2b5e,4e7b3e00288586ebd08712fdd0374a03,1151,sao paulo,SP
345ecd01c38d18a9036ed96c73b8d066,4f2d8ab171c80ec8364f7c12e35b23ad,13056,campinas,SP
4c93744516667ad3b8f1fb645a3116a4,879864dab9bc3047522c92c82e1212b

[Successfully executed]
2025-05-07 06:54:51 - Thread-541 (execute) - INFO - [Try to execute]
--Description: Inspect some delivered orders together with the customer they belong to
SELECT 
       "order_id",
       "customer_id",
       "order_status",
       "order_purchase_timestamp",
       "order_delivered_customer_date"
FROM   "E_COMMERCE"."E_COMMERCE"."ORDERS"
WHERE  "order_status" = 'delivered'
LIMIT 20;
[Try to execute]
2025-05-07 06:54:52 - Thread-541 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Inspect some delivered orders together with the customer they belong to
SELECT 
       "order_id",
       "customer_id",
       "order_status",
       "order_purchase_timestamp",
       "order_delivered_customer_date"
FROM   "E_COMMERCE"."E_COMMERCE"."ORDERS"
WHERE  "order_status" = 'delivered'
LIMIT 20;
Results:
order_id,customer_id,order_status,order_purchase_timestamp,order_delivered_customer_date
e481f51cbdc54678b7cc49136f2d6af7,9ef432eb6251297304e76186b10a928d,delivered,2017-10-02 10:56:33,2017-10-10 21:25:13
53cdb2fc8bc7dce0b6741e2150273451,b0830fb4747a6c6d20dea0b8c802d7ef,delivered,2018-07-24 20:41:37,2018-08-07 15:27:45
47770eb9100c2d0c44946d9cf07ec65d,41ce2a54c0b03bf3443c3d931a367089,delivered,2018-08-08 08:38:49,2018-08-17 18:06:29
949d5b44dbf5de918fe9c16f97b45f8a,f88197465ea7920adcdbec7375

[Successfully executed]
2025-05-07 06:54:52 - Thread-541 (execute) - INFO - [Try to execute]
--Description: Take a look at payments attached to delivered orders (one row per payment record)
SELECT o."order_id",
       o."customer_id",
       p."payment_sequential",
       p."payment_type",
       p."payment_installments",
       p."payment_value"
FROM   "E_COMMERCE"."E_COMMERCE"."ORDERS"  o
JOIN   "E_COMMERCE"."E_COMMERCE"."ORDER_PAYMENTS" p
       ON p."order_id" = o."order_id"
WHERE  o."order_status" = 'delivered'
LIMIT 20;
[Try to execute]
2025-05-07 06:54:53 - Thread-541 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Take a look at payments attached to delivered orders (one row per payment record)
SELECT o."order_id",
       o."customer_id",
       p."payment_sequential",
       p."payment_type",
       p."payment_installments",
       p."payment_value"
FROM   "E_COMMERCE"."E_COMMERCE"."ORDERS"  o
JOIN   "E_COMMERCE"."E_COMMERCE"."ORDER_PAYMENTS" p
       ON p."order_id" = o."order_id"
WHERE  o."order_status" = 'delivered'
LIMIT 20;
Results:
order_id,customer_id,payment_sequential,payment_type,payment_installments,payment_value
b81ef226f3fe1789b1e8b2acac839d17,0a8556ac6be836b46b3e89920d59291c,1,credit_card,8,99.33
a9810da82917af2d9aefd1278f1dcfa0,f2c7fc58a9de810828715166c672f10a,1,credit_card,1,24.39
25e8ea4e93396b6fa0d3dd708e76c1bd,25b14b69de0b6e184ae6fe2755e478f9,1,credit_card,1,65.71
ba78997921bbcdc1373bb41e913ab953,7a5d8efaaa1081f800628c30d2b0728f,1,credit_card,8,107.78
42fdf880ba16b47b59251dd489d4441a,15fd6fb8f8312dbb4674e

[Successfully executed]
2025-05-07 06:54:53 - Thread-541 (execute) - INFO - [Try to execute]
--Description: For each delivered order, aggregate all payment rows to obtain the total paid amount
SELECT 
       p."order_id",
       SUM(p."payment_value") AS "order_total_paid"
FROM   "E_COMMERCE"."E_COMMERCE"."ORDERS"  o
JOIN   "E_COMMERCE"."E_COMMERCE"."ORDER_PAYMENTS" p
       ON p."order_id" = o."order_id"
WHERE  o."order_status" = 'delivered'
GROUP  BY p."order_id"
LIMIT 20;
[Try to execute]
2025-05-07 06:55:00 - Thread-541 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: For each delivered order, aggregate all payment rows to obtain the total paid amount
SELECT 
       p."order_id",
       SUM(p."payment_value") AS "order_total_paid"
FROM   "E_COMMERCE"."E_COMMERCE"."ORDERS"  o
JOIN   "E_COMMERCE"."E_COMMERCE"."ORDER_PAYMENTS" p
       ON p."order_id" = o."order_id"
WHERE  o."order_status" = 'delivered'
GROUP  BY p."order_id"
LIMIT 20;
Results:
order_id,order_total_paid
25e8ea4e93396b6fa0d3dd708e76c1bd,65.71
42fdf880ba16b47b59251dd489d4441a,128.45
298fcdf1f73eb413e4d26d01b25bc1cd,96.12
1f78449c87a54faf9e96e88ba1491fa9,341.09
616105c9352a9668c38303ad44e056cd,75.78
cf95215a722f3ebf29e6bbab87a29e61,102.66
769214176682788a92801d8907fa1b40,105.28
12e5cfe0e4716b59afb0e0f4a3bd6570,157.45
8ac09207f415d55acff302df7d6a895c,244.15
d0a945f85ba1074b60aac97ade7e240e,541.0
c39414c195d0f94c9d9c35e7c6ed4f1a,139.22
cf30fe76d1505192acee1c6dcc

[Successfully executed]
2025-05-07 06:55:00 - Thread-541 (execute) - INFO - [Try to execute]
--Description: Derive Frequency (number of delivered orders) for every customer_unique_id
SELECT  c."customer_unique_id",
        COUNT(DISTINCT o."order_id") AS "frequency_orders"
FROM    "E_COMMERCE"."E_COMMERCE"."CUSTOMERS" c
JOIN    "E_COMMERCE"."E_COMMERCE"."ORDERS"    o
        ON o."customer_id" = c."customer_id"
WHERE   o."order_status" = 'delivered'
GROUP   BY c."customer_unique_id"
LIMIT 20;
[Try to execute]
2025-05-07 06:55:14 - Thread-541 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Derive Frequency (number of delivered orders) for every customer_unique_id
SELECT  c."customer_unique_id",
        COUNT(DISTINCT o."order_id") AS "frequency_orders"
FROM    "E_COMMERCE"."E_COMMERCE"."CUSTOMERS" c
JOIN    "E_COMMERCE"."E_COMMERCE"."ORDERS"    o
        ON o."customer_id" = c."customer_id"
WHERE   o."order_status" = 'delivered'
GROUP   BY c."customer_unique_id"
LIMIT 20;
Results:
customer_unique_id,frequency_orders
861eff4711a542e4b93843c6dd7febb0,1
290c77bc529b7ac935b93aa66c333dc3,1
060e732b5b29e8181a18229c7b0b2b5e,1
259dac757896d24d7702b9acbbff3f3c,1
345ecd01c38d18a9036ed96c73b8d066,1
4c93744516667ad3b8f1fb645a3116a4,2
addec96d2e059c80c30fe6871d30d177,1
2a46fb94aef5cbeeb850418118cee090,1
918dc87cd72cd9f6ed4bd442ed785235,1
3151a81801c8386361b62277d7fa5ecf,1
21f748a16f4e1688a9014eb3ee6fa325,1
5c2991dbd08bbf3cf410713c4de5a0b5,1
b6e99561fe6f34a55b0b7da92f8ed77

[Successfully executed]
2025-05-07 06:55:14 - Thread-541 (execute) - INFO - [Try to execute]
--Description: Derive Monetary value (total spend) for every customer_unique_id on delivered orders
SELECT  c."customer_unique_id",
        SUM(p."payment_value") AS "monetary_total_spent"
FROM    "E_COMMERCE"."E_COMMERCE"."CUSTOMERS"       c
JOIN    "E_COMMERCE"."E_COMMERCE"."ORDERS"          o  ON o."customer_id" = c."customer_id"
JOIN    "E_COMMERCE"."E_COMMERCE"."ORDER_PAYMENTS"  p  ON p."order_id"    = o."order_id"
WHERE   o."order_status" = 'delivered'
GROUP   BY c."customer_unique_id"
LIMIT 20;
[Try to execute]
2025-05-07 06:55:25 - Thread-541 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Derive Monetary value (total spend) for every customer_unique_id on delivered orders
SELECT  c."customer_unique_id",
        SUM(p."payment_value") AS "monetary_total_spent"
FROM    "E_COMMERCE"."E_COMMERCE"."CUSTOMERS"       c
JOIN    "E_COMMERCE"."E_COMMERCE"."ORDERS"          o  ON o."customer_id" = c."customer_id"
JOIN    "E_COMMERCE"."E_COMMERCE"."ORDER_PAYMENTS"  p  ON p."order_id"    = o."order_id"
WHERE   o."order_status" = 'delivered'
GROUP   BY c."customer_unique_id"
LIMIT 20;
Results:
customer_unique_id,monetary_total_spent
a8b9d3a27068454b1c98cc67d4e31e6f,24.39
511c345b0383af6ef25406c564e4d6b6,51.95
a51f8568095ce89a4ffce365dcb7d46d,188.73
0ae522661311f598df20272643d39ce6,157.45
3129dce5dc566246ea1354bff5bb6fea,132.04
186638bdb0f600c9bf2bd60e4b14537c,164.69
e2381d9bb9b49c35fff077d4ae613816,710.5799999999999
e9dc392ca45bbd1c3faf921ccd7ebbd1,283.34
3af91c25f393301d27ccd39bce43f29d,103.49
2becf6f55d064453e6d7abe2af4ad36b,266.16
1801a172ccbf9172fa375bb6f0c9765e,121.49

[Successfully executed]
2025-05-07 06:55:25 - Thread-541 (execute) - INFO - [Try to execute]
--Description: Capture the latest (most recent) purchase timestamp per customer to serve as Recency base
SELECT  c."customer_unique_id",
        MAX(o."order_purchase_timestamp") AS "latest_purchase_ts"
FROM    "E_COMMERCE"."E_COMMERCE"."CUSTOMERS" c
JOIN    "E_COMMERCE"."E_COMMERCE"."ORDERS"    o  ON o."customer_id" = c."customer_id"
WHERE   o."order_status" = 'delivered'
GROUP   BY c."customer_unique_id"
LIMIT 20;
[Try to execute]
2025-05-07 06:55:26 - Thread-541 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Capture the latest (most recent) purchase timestamp per customer to serve as Recency base
SELECT  c."customer_unique_id",
        MAX(o."order_purchase_timestamp") AS "latest_purchase_ts"
FROM    "E_COMMERCE"."E_COMMERCE"."CUSTOMERS" c
JOIN    "E_COMMERCE"."E_COMMERCE"."ORDERS"    o  ON o."customer_id" = c."customer_id"
WHERE   o."order_status" = 'delivered'
GROUP   BY c."customer_unique_id"
LIMIT 20;
Results:
customer_unique_id,latest_purchase_ts
290c77bc529b7ac935b93aa66c333dc3,2018-01-12 20:48:24
918dc87cd72cd9f6ed4bd442ed785235,2017-09-09 09:54:57
c9158d089637ab443c78984d20da7fc0,2018-01-31 16:43:25
d85547cd859833520b311b4458a14c1c,2017-06-09 15:46:17
95700615deef776ed32faa08f0be634e,2018-07-30 22:31:37
b1a049b952fdc19b69b2865c29986b9c,2018-06-30 21:02:21
29f61e71b90b55a988f45a66bb91bfb7,2017-09-13 21:41:43
691d75928efd2c5dd34b678f19783c28,2018-02-27 10:13:20
9aff27e32725e7f7c395e0a79a5d1

[Successfully executed]
2025-05-07 06:55:26 - Thread-541 (execute) - INFO - [Try to execute]
--Description: Combine raw Recency (latest date), Frequency, and Monetary metrics for each customer
WITH rf AS (
     SELECT  c."customer_unique_id",
             COUNT(DISTINCT o."order_id")        AS "frequency",
             SUM(p."payment_value")              AS "monetary",
             MAX(o."order_purchase_timestamp")   AS "latest_purchase_ts"
     FROM    "E_COMMERCE"."E_COMMERCE"."CUSTOMERS"       c
     JOIN    "E_COMMERCE"."E_COMMERCE"."ORDERS"          o  ON o."customer_id" = c."customer_id"
     JOIN    "E_COMMERCE"."E_COMMERCE"."ORDER_PAYMENTS"  p  ON p."order_id"    = o."order_id"
     WHERE   o."order_status" = 'delivered'
     GROUP   BY c."customer_unique_id"
)
SELECT * FROM rf
LIMIT 20;
[Try to execute]
2025-05-07 06:55:28 - Thread-541 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Combine raw Recency (latest date), Frequency, and Monetary metrics for each customer
WITH rf AS (
     SELECT  c."customer_unique_id",
             COUNT(DISTINCT o."order_id")        AS "frequency",
             SUM(p."payment_value")              AS "monetary",
             MAX(o."order_purchase_timestamp")   AS "latest_purchase_ts"
     FROM    "E_COMMERCE"."E_COMMERCE"."CUSTOMERS"       c
     JOIN    "E_COMMERCE"."E_COMMERCE"."ORDERS"          o  ON o."customer_id" = c."customer_id"
     JOIN    "E_COMMERCE"."E_COMMERCE"."ORDER_PAYMENTS"  p  ON p."order_id"    = o."order_id"
     WHERE   o."order_status" = 'delivered'
     GROUP   BY c."customer_unique_id"
)
SELECT * FROM rf
LIMIT 20;
Results:
customer_unique_id,frequency,monetary,latest_purchase_ts
708ab75d2a007f0564aedd11139c7708,1,99.33,2018-04-25 22:01:49
87695ed086ebd36f20404c82d20fca87,1,107.78,2017-12-06 12:04:06
4291db0da71914754618cd789aebcd56,2,627.74,2018-08-01 08:29:38
6e3c218d5f0434ddc4af3d6a60767bbf,1,96.12,2018-05-07 13:20:41
9a3526eee723accd014ec683afe5bf20,1,81.16,2017-06-23 13:11:27
2faf4a1d502b10555a9f39353ea20148,1,141.9,2017-12-13 18:51:45
297ec5afd18366f5ba27520cc4954151,3,1451.0,2018-05-12 21:23:13
99273

[Successfully executed]
2025-05-07 06:55:28 - Thread-541 (execute) - INFO - [Try to execute]
--Description: Score customers into R, F, M quintiles (1 = best / 5 = worst) using NTILE over the raw metrics
WITH rfm_base AS (
     SELECT  c."customer_unique_id",
             COUNT(DISTINCT o."order_id")        AS "frequency",
             SUM(p."payment_value")              AS "monetary",
             MAX(o."order_purchase_timestamp")   AS "latest_purchase_ts"
     FROM    "E_COMMERCE"."E_COMMERCE"."CUSTOMERS"       c
     JOIN    "E_COMMERCE"."E_COMMERCE"."ORDERS"          o  ON o."customer_id" = c."customer_id"
     JOIN    "E_COMMERCE"."E_COMMERCE"."ORDER_PAYMENTS"  p  ON p."order_id"    = o."order_id"
     WHERE   o."order_status" = 'delivered'
     GROUP   BY c."customer_unique_id"
), rfm_scored AS (
     SELECT  *,
             NTILE(5) OVER (ORDER BY "latest_purchase_ts" DESC)              AS "R_score",
             NTILE(5) OVER (ORDER BY "frequency"         DESC)              AS "F_score",
             NTILE(5) OVER (ORDER BY "monetary"          DESC)              AS "M_score"
     FROM    rfm_base
)
SELECT 
       "customer_unique_id",
       "R_score",
       "F_score",
       "M_score",
       CAST("R_score" AS STRING) || CAST("F_score" AS STRING) || CAST("M_score" AS STRING) AS "RFM_code"
FROM   rfm_scored
LIMIT 20;
[Try to execute]
2025-05-07 06:55:30 - Thread-541 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Score customers into R, F, M quintiles (1 = best / 5 = worst) using NTILE over the raw metrics
WITH rfm_base AS (
     SELECT  c."customer_unique_id",
             COUNT(DISTINCT o."order_id")        AS "frequency",
             SUM(p."payment_value")              AS "monetary",
             MAX(o."order_purchase_timestamp")   AS "latest_purchase_ts"
     FROM    "E_COMMERCE"."E_COMMERCE"."CUSTOMERS"       c
     JOIN    "E_COMMERCE"."E_COMMERCE"."ORDERS"          o  ON o."customer_id" = c."customer_id"
     JOIN    "E_COMMERCE"."E_COMMERCE"."ORDER_PAYMENTS"  p  ON p."order_id"    = o."order_id"
     WHERE   o."order_status" = 'delivered'
     GROUP   BY c."customer_unique_id"
), rfm_scored AS (
     SELECT  *,
             NTILE(5) OVER (ORDER BY "latest_purchase_ts" DESC)              AS "R_score",
             NTILE(5) OVER (ORDER BY "frequency"         DESC)              AS "F_score",
             NTILE(5) OVER (ORDER BY "monetary"          DESC)              AS "M_score"
     FROM    rfm_base
)
SELECT 
       "customer_unique_id",
       "R_score",
       "F_score",
       "M_score",
       CAST("R_score" AS STRING) || CAST("F_score" AS STRING) || CAST("M_score" AS STRING) AS "RFM_code"
FROM   rfm_scored
LIMIT 20;
Results:
customer_unique_id,R_score,F_score,M_score,RFM_code
0a0a92112bd4c708ca5fde585afaa872,4,5,1,451
da122df9eeddfedc1dc1f5349a1a690c,5,1,1,511
763c8b1c9c68a0229c42c9fc6f662b93,1,2,1,121
dc4802a71eae9be1dd28f5d788ceb526,5,4,1,541
459bef486812aa25204be022145caa62,1,2,1,121
ff4159b92c40ebe40454e3e6a7c35ed6,5,4,1,541
4007669dec559734d6f53e029e360987,4,5,1,451
eebb5dda148d3893cdaf5b5ca3040ccb,5,4,1,541
48e1ac109decbb87765a3eade6854098,1,3,1,131
c8460e4251689ba205045f3ea17884a1,1,1,1,111

[Successfully executed]
2025-05-07 06:55:30 - Thread-541 (execute) - INFO - [Try to execute]
--Description: Classify customers into RFM segments and compute their average sales per order (total spend / orders)
WITH rfm_base AS (
     SELECT  c."customer_unique_id",
             COUNT(DISTINCT o."order_id")        AS "frequency",
             SUM(p."payment_value")              AS "monetary",
             MAX(o."order_purchase_timestamp")   AS "latest_purchase_ts"
     FROM    "E_COMMERCE"."E_COMMERCE"."CUSTOMERS"       c
     JOIN    "E_COMMERCE"."E_COMMERCE"."ORDERS"          o  ON o."customer_id" = c."customer_id"
     JOIN    "E_COMMERCE"."E_COMMERCE"."ORDER_PAYMENTS"  p  ON p."order_id"    = o."order_id"
     WHERE   o."order_status" = 'delivered'
     GROUP   BY c."customer_unique_id"
), rfm_scored AS (
     SELECT  *,
             NTILE(5) OVER (ORDER BY "latest_purchase_ts" DESC) AS "R_score",
             NTILE(5) OVER (ORDER BY "frequency"         DESC)  AS "F_score",
             NTILE(5) OVER (ORDER BY "monetary"          DESC)  AS "M_score"
     FROM    rfm_base
), rfm_labeled AS (
     SELECT  *,
             -- Sum of F & M scores for easier rule checks
             ("F_score" + "M_score") AS "F_plus_M",
             
             -- Segment mapping (as per provided logic)
             CASE 
                 WHEN "R_score" = 1 AND "F_plus_M" BETWEEN 1 AND 4                     THEN 'Champions'
                 WHEN "R_score" IN (4,5) AND "F_plus_M" BETWEEN 1 AND 2               THEN 'Can''t Lose Them'
                 WHEN "R_score" IN (4,5) AND "F_plus_M" BETWEEN 3 AND 6               THEN 'Hibernating'
                 WHEN "R_score" IN (4,5) AND "F_plus_M" BETWEEN 7 AND 10              THEN 'Lost'
                 WHEN "R_score" IN (2,3) AND "F_plus_M" BETWEEN 1 AND 4               THEN 'Loyal Customers'
                 WHEN "R_score"  = 3   AND "F_plus_M" BETWEEN 5 AND 6                 THEN 'Needs Attention'
                 WHEN "R_score"  = 1   AND "F_plus_M" BETWEEN 7 AND 8                 THEN 'Recent Users'
                 WHEN ("R_score" = 1 AND "F_plus_M" BETWEEN 5 AND 6)
                       OR ("R_score" = 2 AND "F_plus_M" BETWEEN 5 AND 8)              THEN 'Potential Loyalists'
                 WHEN "R_score"  = 1   AND "F_plus_M" BETWEEN 9 AND 10                THEN 'Price Sensitive'
                 WHEN "R_score"  = 2   AND "F_plus_M" BETWEEN 9 AND 10                THEN 'Promising'
                 WHEN "R_score"  = 3   AND "F_plus_M" BETWEEN 7 AND 10                THEN 'About to Sleep'
                 ELSE 'Other'
             END AS "RFM_segment"
     FROM    rfm_scored
)
SELECT  "RFM_segment",
        ROUND( SUM("monetary") / SUM("frequency"), 2) AS "avg_sales_per_order"
FROM    rfm_labeled
GROUP   BY "RFM_segment"
ORDER   BY "avg_sales_per_order" DESC
LIMIT 20;
[Try to execute]
2025-05-07 06:55:35 - Thread-541 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Classify customers into RFM segments and compute their average sales per order (total spend / orders)
WITH rfm_base AS (
     SELECT  c."customer_unique_id",
             COUNT(DISTINCT o."order_id")        AS "frequency",
             SUM(p."payment_value")              AS "monetary",
             MAX(o."order_purchase_timestamp")   AS "latest_purchase_ts"
     FROM    "E_COMMERCE"."E_COMMERCE"."CUSTOMERS"       c
     JOIN    "E_COMMERCE"."E_COMMERCE"."ORDERS"          o  ON o."customer_id" = c."customer_id"
     JOIN    "E_COMMERCE"."E_COMMERCE"."ORDER_PAYMENTS"  p  ON p."order_id"    = o."order_id"
     WHERE   o."order_status" = 'delivered'
     GROUP   BY c."customer_unique_id"
), rfm_scored AS (
     SELECT  *,
             NTILE(5) OVER (ORDER BY "latest_purchase_ts" DESC) AS "R_score",
             NTILE(5) OVER (ORDER BY "frequency"         DESC)  AS "F_score",
             NTILE(5) OVER (ORDER BY "monetary"          DESC)  AS "M_score"
     FROM    rfm_base
), rfm_labeled AS (
     SELECT  *,
             -- Sum of F & M scores for easier rule checks
             ("F_score" + "M_score") AS "F_plus_M",
             
             -- Segment mapping (as per provided logic)
             CASE 
                 WHEN "R_score" = 1 AND "F_plus_M" BETWEEN 1 AND 4                     THEN 'Champions'
                 WHEN "R_score" IN (4,5) AND "F_plus_M" BETWEEN 1 AND 2               THEN 'Can''t Lose Them'
                 WHEN "R_score" IN (4,5) AND "F_plus_M" BETWEEN 3 AND 6               THEN 'Hibernating'
                 WHEN "R_score" IN (4,5) AND "F_plus_M" BETWEEN 7 AND 10              THEN 'Lost'
                 WHEN "R_score" IN (2,3) AND "F_plus_M" BETWEEN 1 AND 4               THEN 'Loyal Customers'
                 WHEN "R_score"  = 3   AND "F_plus_M" BETWEEN 5 AND 6                 THEN 'Needs Attention'
                 WHEN "R_score"  = 1   AND "F_plus_M" BETWEEN 7 AND 8                 THEN 'Recent Users'
                 WHEN ("R_score" = 1 AND "F_plus_M" BETWEEN 5 AND 6)
                       OR ("R_score" = 2 AND "F_plus_M" BETWEEN 5 AND 8)              THEN 'Potential Loyalists'
                 WHEN "R_score"  = 1   AND "F_plus_M" BETWEEN 9 AND 10                THEN 'Price Sensitive'
                 WHEN "R_score"  = 2   AND "F_plus_M" BETWEEN 9 AND 10                THEN 'Promising'
                 WHEN "R_score"  = 3   AND "F_plus_M" BETWEEN 7 AND 10                THEN 'About to Sleep'
                 ELSE 'Other'
             END AS "RFM_segment"
     FROM    rfm_scored
)
SELECT  "RFM_segment",
        ROUND( SUM("monetary") / SUM("frequency"), 2) AS "avg_sales_per_order"
FROM    rfm_labeled
GROUP   BY "RFM_segment"
ORDER   BY "avg_sales_per_order" DESC
LIMIT 20;
Results:
RFM_segment,avg_sales_per_order
Champions,301.27
Hibernating,289.33
Loyal Customers,240.58
Can't Lose Them,213.09
Needs Attention,177.21
Potential Loyalists,86.97
About to Sleep,86.4
Lost,79.34
Recent Users,46.84

[Successfully executed]
2025-05-07 06:55:35 - Thread-541 (execute) - INFO - itercount: 0
2025-05-07 06:55:35 - Thread-541 (execute) - INFO - [Self-refine]
Table full name: E_COMMERCE.E_COMMERCE.LEADS_QUALIFIED
Column name: first_contact_date Type: TEXT
Column name: origin Type: TEXT
Column name: landing_page_id Type: TEXT
Column name: mql_id Type: TEXT
Sample rows:
[{'mql_id': 'dac32acd4db4c29c230538b72f8dd87d', 'first_contact_date': '2018-02-01', 'landing_page_id': '88740e65d5d6b056e0cda098e1ea6313', 'origin': 'social'}, {'mql_id': 'b4bc852d233dfefc5131f593b538befa', 'first_contact_date': '2018-03-22', 'landing_page_id': 'a7982125ff7aa3b2054c6e44f9d28522', 'origin': 'organic_search'}, {'mql_id': '28bdfd5f057764b54c38770f95c69f2f', 'first_contact_date': '2018-01-14', 'landing_page_id': '22c29808c4f815213303f8933030604c', 'origin': 'organic_search'}, {'mql_id': '126a0d10becbaafcb2e72ce6848cf32c', 'first_contact_date': '2018-05-15', 'landing_page_id': '6a110e795dd487f1cf8d7583671987af', 'origin': 'email'}, {'mql_id': 'f76136f54d14a3345951f25b7932366b', 'first_contact_date': '2018-05-24', 'landing_page_id': 'd51b0d02f063ba1d053db6d97226eec3', 'origin': 'email'}]

--------------------------------------------------
Table full name: E_COMMERCE.E_COMMERCE.GEOLOCATION
Column name: geolocation_zip_code_prefix Type: NUMBER
Column name: geolocation_city Type: TEXT
Column name: geolocation_lng Type: FLOAT
Column name: geolocation_state Type: TEXT
Column name: geolocation_lat Type: FLOAT
Sample rows:
[{'geolocation_zip_code_prefix': 47940, 'geolocation_lat': -12.118520396156198, 'geolocation_lng': -43.89223348300082, 'geolocation_city': 'wanderley', 'geolocation_state': 'BA'}, {'geolocation_zip_code_prefix': 47990, 'geolocation_lat': -11.043509645586902, 'geolocation_lng': -45.18667845319278, 'geolocation_city': 'formosa do rio preto', 'geolocation_state': 'BA'}, {'geolocation_zip_code_prefix': 47990, 'geolocation_lat': -11.03457140262401, 'geolocation_lng': -45.18776655510399, 'geolocation_city': 'formosa do rio preto', 'geolocation_state': 'BA'}, {'geolocation_zip_code_prefix': 47990, 'geolocation_lat': -11.04186115496844, 'geolocation_lng': -45.18988326259359, 'geolocation_city': 'formosa do rio preto', 'geolocation_state': 'BA'}, {'geolocation_zip_code_prefix': 47940, 'geolocation_lat': -12.123543963024664, 'geolocation_lng': -43.891740814417616, 'geolocation_city': 'wanderley', 'geolocation_state': 'BA'}]

--------------------------------------------------
Table full name: E_COMMERCE.E_COMMERCE.LEADS_CLOSED
Column name: business_type Type: TEXT
Column name: has_gtin Type: FLOAT
Column name: average_stock Type: TEXT
Column name: won_date Type: TEXT
Column name: lead_type Type: TEXT
Column name: lead_behaviour_profile Type: TEXT
Column name: has_company Type: FLOAT
Column name: declared_monthly_revenue Type: FLOAT
Column name: seller_id Type: TEXT
Column name: sr_id Type: TEXT
Column name: business_segment Type: TEXT
Column name: sdr_id Type: TEXT
Column name: mql_id Type: TEXT
Column name: declared_product_catalog_size Type: FLOAT
Sample rows:
[{'mql_id': '5420aad7fec3549a85876ba1c529bd84', 'seller_id': '2c43fb513632d29b3b58df74816f1b06', 'sdr_id': 'a8387c01a09e99ce014107505b92388c', 'sr_id': '4ef15afb4b2723d8f3d81e51ec7afefe', 'won_date': '2018-02-26 19:58:54', 'business_segment': 'pet', 'lead_type': 'online_medium', 'lead_behaviour_profile': 'cat', 'has_company': None, 'has_gtin': None, 'average_stock': '', 'business_type': 'reseller', 'declared_product_catalog_size': None, 'declared_monthly_revenue': 0.0}, {'mql_id': 'ffe640179b554e295c167a2f6be528e0', 'seller_id': 'ed8cb7b190ceb6067227478e48cf8dde', 'sdr_id': '4b339f9567d060bcea4f5136b9f5949e', 'sr_id': 'd3d1e91a157ea7f90548eef82f1955e3', 'won_date': '2018-07-03 20:17:45', 'business_segment': 'home_appliances', 'lead_type': 'industry', 'lead_behaviour_profile': 'wolf', 'has_company': None, 'has_gtin': None, 'average_stock': '', 'business_type': 'manufacturer', 'declared_product_catalog_size': None, 'declared_monthly_revenue': 0.0}, {'mql_id': 'b94fba7670eeb44dce2a0d8eb790e9f5', 'seller_id': '1c742ac33582852aaf3bcfbf5893abcf', 'sdr_id': 'fdb16d3cbbeb5798f2f66c4096be026d', 'sr_id': '495d4e95a8cf8bbf8b432b612a2aa328', 'won_date': '2018-02-07 18:04:05', 'business_segment': 'health_beauty', 'lead_type': 'online_medium', 'lead_behaviour_profile': '', 'has_company': None, 'has_gtin': None, 'average_stock': '', 'business_type': 'manufacturer', 'declared_product_catalog_size': None, 'declared_monthly_revenue': 0.0}, {'mql_id': 'a90a37898cc5f2718385a2fb981caaff', 'seller_id': '0b28859cd04d23edefee9c591fb03cd8', 'sdr_id': 'f42a2bd194f7802ab052a815c8de65b7', 'sr_id': '6565aa9ce3178a5caf6171827af3a9ba', 'won_date': '2018-05-14 18:37:15', 'business_segment': 'household_utilities', 'lead_type': 'offline', 'lead_behaviour_profile': 'eagle', 'has_company': None, 'has_gtin': None, 'average_stock': '', 'business_type': 'reseller', 'declared_product_catalog_size': None, 'declared_monthly_revenue': 0.0}, {'mql_id': '0173e8d8b1d94a355b440fb67388f532', 'seller_id': '87d73636a3acf123e842bb890a4db036', 'sdr_id': '9d12ef1a7eca3ec58c545c678af7869c', 'sr_id': '9e4d1098a3b0f5da39b0bc48f9876645', 'won_date': '2018-04-24 03:00:00', 'business_segment': 'household_utilities', 'lead_type': 'online_medium', 'lead_behaviour_profile': 'eagle', 'has_company': None, 'has_gtin': None, 'average_stock': '', 'business_type': 'manufacturer', 'declared_product_catalog_size': None, 'declared_monthly_revenue': 0.0}]

--------------------------------------------------
Table full name: E_COMMERCE.E_COMMERCE.ORDER_ITEMS
Column name: order_id Type: TEXT
Column name: price Type: FLOAT
Column name: order_item_id Type: NUMBER
Column name: shipping_limit_date Type: TEXT
Column name: product_id Type: TEXT
Column name: seller_id Type: TEXT
Column name: freight_value Type: FLOAT
Sample rows:
[{'order_id': '00010242fe8c5a6d1ba2dd792cb16214', 'order_item_id': 1, 'product_id': '4244733e06e7ecb4970a6e2683c13e61', 'seller_id': '48436dade18ac8b2bce089ec2a041202', 'shipping_limit_date': '2017-09-19 09:45:35', 'price': 58.9, 'freight_value': 13.29}, {'order_id': '00024acbcdf0a6daa1e931b038114c75', 'order_item_id': 1, 'product_id': '7634da152a4610f1595efa32f14722fc', 'seller_id': '9d7a1d34a5052409006425275ba1c2b4', 'shipping_limit_date': '2018-08-15 10:10:18', 'price': 12.99, 'freight_value': 12.79}, {'order_id': '00042b26cf59d7ce69dfabb4e55b4fd9', 'order_item_id': 1, 'product_id': 'ac6c3623068f30de03045865e4e10089', 'seller_id': 'df560393f3a51e74553ab94004ba5c87', 'shipping_limit_date': '2017-02-13 13:57:51', 'price': 199.9, 'freight_value': 18.14}, {'order_id': '00048cc3ae777c65dbb7d2a0634bc1ea', 'order_item_id': 1, 'product_id': 'ef92defde845ab8450f9d70c526ef70f', 'seller_id': '6426d21aca402a131fc0a5d0960a3c90', 'shipping_limit_date': '2017-05-23 03:55:27', 'price': 21.9, 'freight_value': 12.69}, {'order_id': '00054e8431b9d7675808bcb819fb4a32', 'order_item_id': 1, 'product_id': '8d4f2bb7e93e6710a28f34fa83ee7d28', 'seller_id': '7040e82f899a04d1b434b795a43b4617', 'shipping_limit_date': '2017-12-14 12:10:31', 'price': 19.9, 'freight_value': 11.85}]

--------------------------------------------------
Table full name: E_COMMERCE.E_COMMERCE.SELLERS
Column name: seller_zip_code_prefix Type: NUMBER
Column name: seller_state Type: TEXT
Column name: seller_city Type: TEXT
Column name: seller_id Type: TEXT
Sample rows:
[{'seller_id': '3442f8959a84dea7ee197c632cb2df15', 'seller_zip_code_prefix': 13023, 'seller_city': 'campinas', 'seller_state': 'SP'}, {'seller_id': 'd1b65fc7debc3361ea86b5f14c68d2e2', 'seller_zip_code_prefix': 13844, 'seller_city': 'mogi guacu', 'seller_state': 'SP'}, {'seller_id': 'ce3ad9de960102d0677a81f5d0bb7b2d', 'seller_zip_code_prefix': 20031, 'seller_city': 'rio de janeiro', 'seller_state': 'RJ'}, {'seller_id': '51a04a8a6bdcb23deccc82b0b80742cf', 'seller_zip_code_prefix': 12914, 'seller_city': 'braganca paulista', 'seller_state': 'SP'}, {'seller_id': 'e49c26c3edfa46d227d5121a6b6e4d37', 'seller_zip_code_prefix': 55325, 'seller_city': 'brejao', 'seller_state': 'PE'}]

--------------------------------------------------
Table full name: E_COMMERCE.E_COMMERCE.CUSTOMERS
Column name: customer_city Type: TEXT
Column name: customer_state Type: TEXT
Column name: customer_id Type: TEXT
Column name: customer_zip_code_prefix Type: NUMBER
Column name: customer_unique_id Type: TEXT
Sample rows:
[{'customer_id': 'b2b6027bc5c5109e529d4dc6358b12c3', 'customer_unique_id': '259dac757896d24d7702b9acbbff3f3c', 'customer_zip_code_prefix': 8775, 'customer_city': 'mogi das cruzes', 'customer_state': 'SP'}, {'customer_id': '5e274e7a0c3809e14aba7ad5aae0d407', 'customer_unique_id': '57b2a98a409812fe9618067b6b8ebe4f', 'customer_zip_code_prefix': 35182, 'customer_city': 'timoteo', 'customer_state': 'MG'}, {'customer_id': 'eabebad39a88bb6f5b52376faec28612', 'customer_unique_id': '295c05e81917928d76245e842748184d', 'customer_zip_code_prefix': 5704, 'customer_city': 'sao paulo', 'customer_state': 'SP'}, {'customer_id': 'a7c125a0a07b75146167b7f04a7f8e98', 'customer_unique_id': '5c2991dbd08bbf3cf410713c4de5a0b5', 'customer_zip_code_prefix': 22750, 'customer_city': 'rio de janeiro', 'customer_state': 'RJ'}, {'customer_id': '9b8ce803689b3562defaad4613ef426f', 'customer_unique_id': '7f3a72e8f988c6e735ba118d54f47458', 'customer_zip_code_prefix': 5416, 'customer_city': 'sao paulo', 'customer_state': 'SP'}]

--------------------------------------------------
Table full name: E_COMMERCE.E_COMMERCE.ORDER_REVIEWS
Column name: review_comment_title Type: TEXT
Column name: review_answer_timestamp Type: TEXT
Column name: review_score Type: NUMBER
Column name: order_id Type: TEXT
Column name: review_id Type: TEXT
Column name: review_creation_date Type: TEXT
Column name: review_comment_message Type: TEXT
Sample rows:
[{'review_id': '7bc2406110b926393aa56f80a40eba40', 'order_id': '73fc7af87114b39712e6da79b0a377eb', 'review_score': 4, 'review_comment_title': '', 'review_comment_message': '', 'review_creation_date': '2018-01-18 00:00:00', 'review_answer_timestamp': '2018-01-18 21:46:59'}, {'review_id': '80e641a11e56f04c1ad469d5645fdfde', 'order_id': 'a548910a1c6147796b98fdf73dbeba33', 'review_score': 5, 'review_comment_title': '', 'review_comment_message': '', 'review_creation_date': '2018-03-10 00:00:00', 'review_answer_timestamp': '2018-03-11 03:05:13'}, {'review_id': 'e64fb393e7b32834bb789ff8bb30750e', 'order_id': '658677c97b385a9be170737859d3511b', 'review_score': 5, 'review_comment_title': '', 'review_comment_message': 'Recebi bem antes do prazo estipulado.', 'review_creation_date': '2017-04-21 00:00:00', 'review_answer_timestamp': '2017-04-21 22:02:06'}, {'review_id': '07f9bee5d1b850860defd761afa7ff16', 'order_id': 'e48aa0d2dcec3a2e87348811bcfdf22b', 'review_score': 5, 'review_comment_title': '', 'review_comment_message': '', 'review_creation_date': '2017-07-16 00:00:00', 'review_answer_timestamp': '2017-07-18 19:30:34'}, {'review_id': '23f75a37effc35d9a915b4e1ad483793', 'order_id': '2eaf8e099d871cd5c22b83b5ea8f6e0e', 'review_score': 4, 'review_comment_title': '', 'review_comment_message': '', 'review_creation_date': '2018-03-28 00:00:00', 'review_answer_timestamp': '2018-03-30 15:10:55'}]

--------------------------------------------------
Table full name: E_COMMERCE.E_COMMERCE.PRODUCTS
Column name: product_photos_qty Type: FLOAT
Column name: product_description_lenght Type: FLOAT
Column name: product_height_cm Type: FLOAT
Column name: product_width_cm Type: FLOAT
Column name: product_name_lenght Type: FLOAT
Column name: product_id Type: TEXT
Column name: product_weight_g Type: FLOAT
Column name: product_length_cm Type: FLOAT
Column name: product_category_name Type: TEXT
Sample rows:
[{'product_id': '96bd76ec8810374ed1b65e291975717f', 'product_category_name': 'esporte_lazer', 'product_name_lenght': 46.0, 'product_description_lenght': 250.0, 'product_photos_qty': 1.0, 'product_weight_g': 154.0, 'product_length_cm': 18.0, 'product_height_cm': 9.0, 'product_width_cm': 15.0}, {'product_id': 'cef67bcfe19066a932b7673e239eb23d', 'product_category_name': 'bebes', 'product_name_lenght': 27.0, 'product_description_lenght': 261.0, 'product_photos_qty': 1.0, 'product_weight_g': 371.0, 'product_length_cm': 26.0, 'product_height_cm': 4.0, 'product_width_cm': 26.0}, {'product_id': '9dc1a7de274444849c219cff195d0b71', 'product_category_name': 'utilidades_domesticas', 'product_name_lenght': 37.0, 'product_description_lenght': 402.0, 'product_photos_qty': 4.0, 'product_weight_g': 625.0, 'product_length_cm': 20.0, 'product_height_cm': 17.0, 'product_width_cm': 13.0}, {'product_id': '732bd381ad09e530fe0a5f457d81becb', 'product_category_name': 'cool_stuff', 'product_name_lenght': 56.0, 'product_description_lenght': 1272.0, 'product_photos_qty': 4.0, 'product_weight_g': 18350.0, 'product_length_cm': 70.0, 'product_height_cm': 24.0, 'product_width_cm': 44.0}, {'product_id': '2548af3e6e77a690cf3eb6368e9ab61e', 'product_category_name': 'moveis_decoracao', 'product_name_lenght': 56.0, 'product_description_lenght': 184.0, 'product_photos_qty': 2.0, 'product_weight_g': 900.0, 'product_length_cm': 40.0, 'product_height_cm': 8.0, 'product_width_cm': 40.0}]

--------------------------------------------------
Table full name: E_COMMERCE.E_COMMERCE.PRODUCT_CATEGORY_NAME_TRANSLATION
Column name: product_category_name Type: TEXT
Column name: product_category_name_english Type: TEXT
Sample rows:
[{'product_category_name': 'informatica_acessorios', 'product_category_name_english': 'computers_accessories'}, {'product_category_name': 'moveis_decoracao', 'product_category_name_english': 'furniture_decor'}, {'product_category_name': 'esporte_lazer', 'product_category_name_english': 'sports_leisure'}, {'product_category_name': 'relogios_presentes', 'product_category_name_english': 'watches_gifts'}, {'product_category_name': 'alimentos_bebidas', 'product_category_name_english': 'food_drink'}]

--------------------------------------------------
Table full name: E_COMMERCE.E_COMMERCE.ORDERS
Column name: order_delivered_customer_date Type: TEXT
Column name: order_status Type: TEXT
Column name: order_id Type: TEXT
Column name: order_delivered_carrier_date Type: TEXT
Column name: order_purchase_timestamp Type: TEXT
Column name: order_estimated_delivery_date Type: TEXT
Column name: order_approved_at Type: TEXT
Column name: customer_id Type: TEXT
Sample rows:
[{'order_id': 'e481f51cbdc54678b7cc49136f2d6af7', 'customer_id': '9ef432eb6251297304e76186b10a928d', 'order_status': 'delivered', 'order_purchase_timestamp': '2017-10-02 10:56:33', 'order_approved_at': '2017-10-02 11:07:15', 'order_delivered_carrier_date': '2017-10-04 19:55:00', 'order_delivered_customer_date': '2017-10-10 21:25:13', 'order_estimated_delivery_date': '2017-10-18 00:00:00'}, {'order_id': '53cdb2fc8bc7dce0b6741e2150273451', 'customer_id': 'b0830fb4747a6c6d20dea0b8c802d7ef', 'order_status': 'delivered', 'order_purchase_timestamp': '2018-07-24 20:41:37', 'order_approved_at': '2018-07-26 03:24:27', 'order_delivered_carrier_date': '2018-07-26 14:31:00', 'order_delivered_customer_date': '2018-08-07 15:27:45', 'order_estimated_delivery_date': '2018-08-13 00:00:00'}, {'order_id': '949d5b44dbf5de918fe9c16f97b45f8a', 'customer_id': 'f88197465ea7920adcdbec7375364d82', 'order_status': 'delivered', 'order_purchase_timestamp': '2017-11-18 19:28:06', 'order_approved_at': '2017-11-18 19:45:59', 'order_delivered_carrier_date': '2017-11-22 13:39:59', 'order_delivered_customer_date': '2017-12-02 00:28:42', 'order_estimated_delivery_date': '2017-12-15 00:00:00'}, {'order_id': '6514b8ad8028c9f2cc2374ded245783f', 'customer_id': '9bdf08b4b3b52b5526ff42d37d47f222', 'order_status': 'delivered', 'order_purchase_timestamp': '2017-05-16 13:10:30', 'order_approved_at': '2017-05-16 13:22:11', 'order_delivered_carrier_date': '2017-05-22 10:07:46', 'order_delivered_customer_date': '2017-05-26 12:55:51', 'order_estimated_delivery_date': '2017-06-07 00:00:00'}, {'order_id': '76c6e866289321a7c93b82b54852dc33', 'customer_id': 'f54a9f0e6b351c431402b8461ea51999', 'order_status': 'delivered', 'order_purchase_timestamp': '2017-01-23 18:29:09', 'order_approved_at': '2017-01-25 02:50:47', 'order_delivered_carrier_date': '2017-01-26 14:16:31', 'order_delivered_customer_date': '2017-02-02 14:08:10', 'order_estimated_delivery_date': '2017-03-06 00:00:00'}]

--------------------------------------------------
Table full name: E_COMMERCE.E_COMMERCE.ORDER_PAYMENTS
Column name: payment_sequential Type: NUMBER
Column name: payment_installments Type: NUMBER
Column name: payment_value Type: FLOAT
Column name: order_id Type: TEXT
Column name: payment_type Type: TEXT
Sample rows:
[{'order_id': 'b81ef226f3fe1789b1e8b2acac839d17', 'payment_sequential': 1, 'payment_type': 'credit_card', 'payment_installments': 8, 'payment_value': 99.33}, {'order_id': 'a9810da82917af2d9aefd1278f1dcfa0', 'payment_sequential': 1, 'payment_type': 'credit_card', 'payment_installments': 1, 'payment_value': 24.39}, {'order_id': '25e8ea4e93396b6fa0d3dd708e76c1bd', 'payment_sequential': 1, 'payment_type': 'credit_card', 'payment_installments': 1, 'payment_value': 65.71}, {'order_id': '42fdf880ba16b47b59251dd489d4441a', 'payment_sequential': 1, 'payment_type': 'credit_card', 'payment_installments': 2, 'payment_value': 128.45}, {'order_id': '1f78449c87a54faf9e96e88ba1491fa9', 'payment_sequential': 1, 'payment_type': 'credit_card', 'payment_installments': 6, 'payment_value': 341.09}]

--------------------------------------------------
External knowledge that might be helpful: 
# Introduction to the RFM Model

The RFM (Recency, Frequency, Monetary) model segments and scores customers based on three key dimensions:

• Recency (R): How long it has been since the customer’s last purchase. A lower R score (e.g., R = 1) indicates a very recent purchase, while a higher R score (e.g., R = 5) indicates a longer time since the last purchase.

• Frequency (F): How often the customer purchases within a given time period. A lower F score (e.g., F = 1) signifies that the customer buys very frequently, whereas a higher F score (e.g., F = 5) indicates less frequent purchasing.

• Monetary (M): The total amount of money the customer spends. A lower M score (e.g., M = 1) indicates higher overall spending, while a higher M score (e.g., M = 5) signifies lower spending over the measured period.

Each customer’s R, F, and M scores are determined by their respective percentiles when compared to other customers. By concatenating the three scores, you get an “RFM cell”—for instance, a customer with R=1, F=5, and M=2 would fall into the 152 segment.

# RFM Segmentation Calculation

After scoring customers on Recency, Frequency, and Monetary values, the next step is to group them into segments that require different marketing or sales strategies. Typically:

1. Determine each customer’s recency score (R) from 1 to 5 (1 = very recent purchase, 5 = not recent).  
2. Determine each customer’s frequency score (F) from 1 to 5 (1 = most frequent purchases, 5 = least frequent).  
3. Determine each customer’s monetary score (M) from 1 to 5 (1 = highest spending, 5 = lowest spending).  
4. Concatenate these three scores into an RFM score (e.g., 153, 514).

By analyzing the distribution of RFM scores and placing them into buckets—for example, “Champions,” “Loyal Customers,” “At Risk,” “Lost,” etc.—you can tailor marketing, sales, and retention strategies to maximize the potential of each segment. 

For instance, a “Champion” (R=1, F=1, M=1) is a recent, frequent, and high-spending user who is highly valuable to your business, whereas a “Lost” customer (e.g., R=5, F=5, M=5) may require re-engagement offers or might no longer be cost-effective to target. Different segments can thus be prioritized based on their profitability and likelihood of responding positively to marketing efforts.

## RFM Segmentation Logic

Customers are assigned to specific segments (RFM Buckets) based on a combination of their Recency, Frequency, and Monetary scores. The segmentation logic is as follows:

- **Champions**: Customers who have made a recent purchase, with high frequency and high monetary value. These are considered the most valuable customers.
  - Criteria: Recency = 1 and Frequency + Monetary score between 1 and 4.

- **Can't Lose Them**: Previously frequent and high-spending customers who have not made a recent purchase. These customers are at risk of leaving and need attention.
  - Criteria: Recency = 4 or 5 and Frequency + Monetary score between 1 and 2.

- **Hibernating**: Customers whose last purchase was a while ago, with low to moderate frequency and spending. These customers might have lost interest in the products.
  - Criteria: Recency = 4 or 5 and Frequency + Monetary score between 3 and 6.

- **Lost**: Customers who have not purchased in a long time and have low frequency and monetary value. These customers are likely lost.
  - Criteria: Recency = 4 or 5 and Frequency + Monetary score between 7 and 10.

- **Loyal Customers**: Customers who are frequent buyers with decent spending levels, and they have made a purchase relatively recently. These customers are likely to be very loyal.
  - Criteria: Recency = 2 or 3 and Frequency + Monetary score between 1 and 4.

- **Needs Attention**: Customers whose purchase frequency and spending are moderate. They haven't bought very recently, but they could be incentivized to become more active.
  - Criteria: Recency = 3 and Frequency + Monetary score between 5 and 6.

- **Recent Users**: Customers who made a purchase recently, but their frequency and spending are moderate. These are relatively new or inconsistent buyers.
  - Criteria: Recency = 1 and Frequency + Monetary score between 7 and 8.

- **Potential Loyalists**: Customers who show potential to become loyal customers. They have good frequency and monetary scores, and they have made recent purchases. With the right engagement, they could become loyal customers.
  - Criteria:
    - Recency = 1 and Frequency + Monetary score between 5 and 6.
    - OR Recency = 2 and Frequency + Monetary score between 5 and 8.

- **Price Sensitive**: Customers who have made recent purchases but tend to spend less, indicating they may be more sensitive to price.
  - Criteria: Recency = 1 and Frequency + Monetary score between 9 and 10.

- **Promising**: These customers exhibit high potential with decent frequency and monetary scores, and they could become more valuable over time.
  - Criteria: Recency = 2 and Frequency + Monetary score between 9 and 10.

- **About to Sleep**: Customers whose frequency and spending are low, and their last purchase was some time ago. These customers are likely to become inactive.
  - Criteria: Recency = 3 and Frequency + Monetary score between 7 and 10.

## Summary

This segmentation logic groups customers based on their behavior in terms of when they last purchased (Recency), how often they purchase (Frequency), and how much they spend (Monetary). By understanding which group a customer belongs to, organizations can tailor marketing strategies to engage the right audience more effectively, improving customer retention and maximizing value.

The table structure information is ({database name: {schema name: [table name]}}): 
{'E_COMMERCE': {'E_COMMERCE': ['LEADS_QUALIFIED', 'GEOLOCATION', 'LEADS_CLOSED', 'ORDER_ITEMS', 'SELLERS', 'CUSTOMERS', 'ORDER_REVIEWS', 'PRODUCTS', 'PRODUCT_CATEGORY_NAME_TRANSLATION', 'ORDERS', 'ORDER_PAYMENTS']}}

Some few-shot examples after column exploration may be helpful:
Query:
--Description: Preview a few customers with their unique identifiers and ZIP information
SELECT DISTINCT 
       "customer_unique_id",
       "customer_id",
       "customer_zip_code_prefix",
       "customer_city",
       "customer_state"
FROM   "E_COMMERCE"."E_COMMERCE"."CUSTOMERS"
LIMIT 20;
Answer:
customer_unique_id,customer_id,customer_zip_code_prefix,customer_city,customer_state
861eff4711a542e4b93843c6dd7febb0,06b8999e2fba1a1fbc88172c00ba8bc7,14409,franca,SP
290c77bc529b7ac935b93aa66c333dc3,18955e83d337fd6b2def6b18a428ac77,9790,sao bernardo do campo,SP
060e732b5b29e8181a18229c7b0b2b5e,4e7b3e00288586ebd08712fdd0374a03,1151,sao paulo,SP
345ecd01c38d18a9036ed96c73b8d066,4f2d8ab171c80ec8364f7c12e35b23ad,13056,campinas,SP
4c93744516667ad3b8f1fb645a3116a4,879864dab9bc3047522c92c82e1212b
Query:
--Description: Inspect some delivered orders together with the customer they belong to
SELECT 
       "order_id",
       "customer_id",
       "order_status",
       "order_purchase_timestamp",
       "order_delivered_customer_date"
FROM   "E_COMMERCE"."E_COMMERCE"."ORDERS"
WHERE  "order_status" = 'delivered'
LIMIT 20;
Answer:
order_id,customer_id,order_status,order_purchase_timestamp,order_delivered_customer_date
e481f51cbdc54678b7cc49136f2d6af7,9ef432eb6251297304e76186b10a928d,delivered,2017-10-02 10:56:33,2017-10-10 21:25:13
53cdb2fc8bc7dce0b6741e2150273451,b0830fb4747a6c6d20dea0b8c802d7ef,delivered,2018-07-24 20:41:37,2018-08-07 15:27:45
47770eb9100c2d0c44946d9cf07ec65d,41ce2a54c0b03bf3443c3d931a367089,delivered,2018-08-08 08:38:49,2018-08-17 18:06:29
949d5b44dbf5de918fe9c16f97b45f8a,f88197465ea7920adcdbec7375
Query:
--Description: Take a look at payments attached to delivered orders (one row per payment record)
SELECT o."order_id",
       o."customer_id",
       p."payment_sequential",
       p."payment_type",
       p."payment_installments",
       p."payment_value"
FROM   "E_COMMERCE"."E_COMMERCE"."ORDERS"  o
JOIN   "E_COMMERCE"."E_COMMERCE"."ORDER_PAYMENTS" p
       ON p."order_id" = o."order_id"
WHERE  o."order_status" = 'delivered'
LIMIT 20;
Answer:
order_id,customer_id,payment_sequential,payment_type,payment_installments,payment_value
b81ef226f3fe1789b1e8b2acac839d17,0a8556ac6be836b46b3e89920d59291c,1,credit_card,8,99.33
a9810da82917af2d9aefd1278f1dcfa0,f2c7fc58a9de810828715166c672f10a,1,credit_card,1,24.39
25e8ea4e93396b6fa0d3dd708e76c1bd,25b14b69de0b6e184ae6fe2755e478f9,1,credit_card,1,65.71
ba78997921bbcdc1373bb41e913ab953,7a5d8efaaa1081f800628c30d2b0728f,1,credit_card,8,107.78
42fdf880ba16b47b59251dd489d4441a,15fd6fb8f8312dbb4674e
Query:
--Description: For each delivered order, aggregate all payment rows to obtain the total paid amount
SELECT 
       p."order_id",
       SUM(p."payment_value") AS "order_total_paid"
FROM   "E_COMMERCE"."E_COMMERCE"."ORDERS"  o
JOIN   "E_COMMERCE"."E_COMMERCE"."ORDER_PAYMENTS" p
       ON p."order_id" = o."order_id"
WHERE  o."order_status" = 'delivered'
GROUP  BY p."order_id"
LIMIT 20;
Answer:
order_id,order_total_paid
25e8ea4e93396b6fa0d3dd708e76c1bd,65.71
42fdf880ba16b47b59251dd489d4441a,128.45
298fcdf1f73eb413e4d26d01b25bc1cd,96.12
1f78449c87a54faf9e96e88ba1491fa9,341.09
616105c9352a9668c38303ad44e056cd,75.78
cf95215a722f3ebf29e6bbab87a29e61,102.66
769214176682788a92801d8907fa1b40,105.28
12e5cfe0e4716b59afb0e0f4a3bd6570,157.45
8ac09207f415d55acff302df7d6a895c,244.15
d0a945f85ba1074b60aac97ade7e240e,541.0
c39414c195d0f94c9d9c35e7c6ed4f1a,139.22
cf30fe76d1505192acee1c6dcc
Query:
--Description: Derive Frequency (number of delivered orders) for every customer_unique_id
SELECT  c."customer_unique_id",
        COUNT(DISTINCT o."order_id") AS "frequency_orders"
FROM    "E_COMMERCE"."E_COMMERCE"."CUSTOMERS" c
JOIN    "E_COMMERCE"."E_COMMERCE"."ORDERS"    o
        ON o."customer_id" = c."customer_id"
WHERE   o."order_status" = 'delivered'
GROUP   BY c."customer_unique_id"
LIMIT 20;
Answer:
customer_unique_id,frequency_orders
861eff4711a542e4b93843c6dd7febb0,1
290c77bc529b7ac935b93aa66c333dc3,1
060e732b5b29e8181a18229c7b0b2b5e,1
259dac757896d24d7702b9acbbff3f3c,1
345ecd01c38d18a9036ed96c73b8d066,1
4c93744516667ad3b8f1fb645a3116a4,2
addec96d2e059c80c30fe6871d30d177,1
2a46fb94aef5cbeeb850418118cee090,1
918dc87cd72cd9f6ed4bd442ed785235,1
3151a81801c8386361b62277d7fa5ecf,1
21f748a16f4e1688a9014eb3ee6fa325,1
5c2991dbd08bbf3cf410713c4de5a0b5,1
b6e99561fe6f34a55b0b7da92f8ed77
Query:
--Description: Derive Monetary value (total spend) for every customer_unique_id on delivered orders
SELECT  c."customer_unique_id",
        SUM(p."payment_value") AS "monetary_total_spent"
FROM    "E_COMMERCE"."E_COMMERCE"."CUSTOMERS"       c
JOIN    "E_COMMERCE"."E_COMMERCE"."ORDERS"          o  ON o."customer_id" = c."customer_id"
JOIN    "E_COMMERCE"."E_COMMERCE"."ORDER_PAYMENTS"  p  ON p."order_id"    = o."order_id"
WHERE   o."order_status" = 'delivered'
GROUP   BY c."customer_unique_id"
LIMIT 20;
Answer:
customer_unique_id,monetary_total_spent
a8b9d3a27068454b1c98cc67d4e31e6f,24.39
511c345b0383af6ef25406c564e4d6b6,51.95
a51f8568095ce89a4ffce365dcb7d46d,188.73
0ae522661311f598df20272643d39ce6,157.45
3129dce5dc566246ea1354bff5bb6fea,132.04
186638bdb0f600c9bf2bd60e4b14537c,164.69
e2381d9bb9b49c35fff077d4ae613816,710.5799999999999
e9dc392ca45bbd1c3faf921ccd7ebbd1,283.34
3af91c25f393301d27ccd39bce43f29d,103.49
2becf6f55d064453e6d7abe2af4ad36b,266.16
1801a172ccbf9172fa375bb6f0c9765e,121.49
Query:
--Description: Capture the latest (most recent) purchase timestamp per customer to serve as Recency base
SELECT  c."customer_unique_id",
        MAX(o."order_purchase_timestamp") AS "latest_purchase_ts"
FROM    "E_COMMERCE"."E_COMMERCE"."CUSTOMERS" c
JOIN    "E_COMMERCE"."E_COMMERCE"."ORDERS"    o  ON o."customer_id" = c."customer_id"
WHERE   o."order_status" = 'delivered'
GROUP   BY c."customer_unique_id"
LIMIT 20;
Answer:
customer_unique_id,latest_purchase_ts
290c77bc529b7ac935b93aa66c333dc3,2018-01-12 20:48:24
918dc87cd72cd9f6ed4bd442ed785235,2017-09-09 09:54:57
c9158d089637ab443c78984d20da7fc0,2018-01-31 16:43:25
d85547cd859833520b311b4458a14c1c,2017-06-09 15:46:17
95700615deef776ed32faa08f0be634e,2018-07-30 22:31:37
b1a049b952fdc19b69b2865c29986b9c,2018-06-30 21:02:21
29f61e71b90b55a988f45a66bb91bfb7,2017-09-13 21:41:43
691d75928efd2c5dd34b678f19783c28,2018-02-27 10:13:20
9aff27e32725e7f7c395e0a79a5d1
Query:
--Description: Combine raw Recency (latest date), Frequency, and Monetary metrics for each customer
WITH rf AS (
     SELECT  c."customer_unique_id",
             COUNT(DISTINCT o."order_id")        AS "frequency",
             SUM(p."payment_value")              AS "monetary",
             MAX(o."order_purchase_timestamp")   AS "latest_purchase_ts"
     FROM    "E_COMMERCE"."E_COMMERCE"."CUSTOMERS"       c
     JOIN    "E_COMMERCE"."E_COMMERCE"."ORDERS"          o  ON o."customer_id" = c."customer_id"
     JOIN    "E_COMMERCE"."E_COMMERCE"."ORDER_PAYMENTS"  p  ON p."order_id"    = o."order_id"
     WHERE   o."order_status" = 'delivered'
     GROUP   BY c."customer_unique_id"
)
SELECT * FROM rf
LIMIT 20;
Answer:
customer_unique_id,frequency,monetary,latest_purchase_ts
708ab75d2a007f0564aedd11139c7708,1,99.33,2018-04-25 22:01:49
87695ed086ebd36f20404c82d20fca87,1,107.78,2017-12-06 12:04:06
4291db0da71914754618cd789aebcd56,2,627.74,2018-08-01 08:29:38
6e3c218d5f0434ddc4af3d6a60767bbf,1,96.12,2018-05-07 13:20:41
9a3526eee723accd014ec683afe5bf20,1,81.16,2017-06-23 13:11:27
2faf4a1d502b10555a9f39353ea20148,1,141.9,2017-12-13 18:51:45
297ec5afd18366f5ba27520cc4954151,3,1451.0,2018-05-12 21:23:13
99273
Query:
--Description: Score customers into R, F, M quintiles (1 = best / 5 = worst) using NTILE over the raw metrics
WITH rfm_base AS (
     SELECT  c."customer_unique_id",
             COUNT(DISTINCT o."order_id")        AS "frequency",
             SUM(p."payment_value")              AS "monetary",
             MAX(o."order_purchase_timestamp")   AS "latest_purchase_ts"
     FROM    "E_COMMERCE"."E_COMMERCE"."CUSTOMERS"       c
     JOIN    "E_COMMERCE"."E_COMMERCE"."ORDERS"          o  ON o."customer_id" = c."customer_id"
     JOIN    "E_COMMERCE"."E_COMMERCE"."ORDER_PAYMENTS"  p  ON p."order_id"    = o."order_id"
     WHERE   o."order_status" = 'delivered'
     GROUP   BY c."customer_unique_id"
), rfm_scored AS (
     SELECT  *,
             NTILE(5) OVER (ORDER BY "latest_purchase_ts" DESC)              AS "R_score",
             NTILE(5) OVER (ORDER BY "frequency"         DESC)              AS "F_score",
             NTILE(5) OVER (ORDER BY "monetary"          DESC)              AS "M_score"
     FROM    rfm_base
)
SELECT 
       "customer_unique_id",
       "R_score",
       "F_score",
       "M_score",
       CAST("R_score" AS STRING) || CAST("F_score" AS STRING) || CAST("M_score" AS STRING) AS "RFM_code"
FROM   rfm_scored
LIMIT 20;
Answer:
customer_unique_id,R_score,F_score,M_score,RFM_code
0a0a92112bd4c708ca5fde585afaa872,4,5,1,451
da122df9eeddfedc1dc1f5349a1a690c,5,1,1,511
763c8b1c9c68a0229c42c9fc6f662b93,1,2,1,121
dc4802a71eae9be1dd28f5d788ceb526,5,4,1,541
459bef486812aa25204be022145caa62,1,2,1,121
ff4159b92c40ebe40454e3e6a7c35ed6,5,4,1,541
4007669dec559734d6f53e029e360987,4,5,1,451
eebb5dda148d3893cdaf5b5ca3040ccb,5,4,1,541
48e1ac109decbb87765a3eade6854098,1,3,1,131
c8460e4251689ba205045f3ea17884a1,1,1,1,111
Query:
--Description: Classify customers into RFM segments and compute their average sales per order (total spend / orders)
WITH rfm_base AS (
     SELECT  c."customer_unique_id",
             COUNT(DISTINCT o."order_id")        AS "frequency",
             SUM(p."payment_value")              AS "monetary",
             MAX(o."order_purchase_timestamp")   AS "latest_purchase_ts"
     FROM    "E_COMMERCE"."E_COMMERCE"."CUSTOMERS"       c
     JOIN    "E_COMMERCE"."E_COMMERCE"."ORDERS"          o  ON o."customer_id" = c."customer_id"
     JOIN    "E_COMMERCE"."E_COMMERCE"."ORDER_PAYMENTS"  p  ON p."order_id"    = o."order_id"
     WHERE   o."order_status" = 'delivered'
     GROUP   BY c."customer_unique_id"
), rfm_scored AS (
     SELECT  *,
             NTILE(5) OVER (ORDER BY "latest_purchase_ts" DESC) AS "R_score",
             NTILE(5) OVER (ORDER BY "frequency"         DESC)  AS "F_score",
             NTILE(5) OVER (ORDER BY "monetary"          DESC)  AS "M_score"
     FROM    rfm_base
), rfm_labeled AS (
     SELECT  *,
             -- Sum of F & M scores for easier rule checks
             ("F_score" + "M_score") AS "F_plus_M",
             
             -- Segment mapping (as per provided logic)
             CASE 
                 WHEN "R_score" = 1 AND "F_plus_M" BETWEEN 1 AND 4                     THEN 'Champions'
                 WHEN "R_score" IN (4,5) AND "F_plus_M" BETWEEN 1 AND 2               THEN 'Can''t Lose Them'
                 WHEN "R_score" IN (4,5) AND "F_plus_M" BETWEEN 3 AND 6               THEN 'Hibernating'
                 WHEN "R_score" IN (4,5) AND "F_plus_M" BETWEEN 7 AND 10              THEN 'Lost'
                 WHEN "R_score" IN (2,3) AND "F_plus_M" BETWEEN 1 AND 4               THEN 'Loyal Customers'
                 WHEN "R_score"  = 3   AND "F_plus_M" BETWEEN 5 AND 6                 THEN 'Needs Attention'
                 WHEN "R_score"  = 1   AND "F_plus_M" BETWEEN 7 AND 8                 THEN 'Recent Users'
                 WHEN ("R_score" = 1 AND "F_plus_M" BETWEEN 5 AND 6)
                       OR ("R_score" = 2 AND "F_plus_M" BETWEEN 5 AND 8)              THEN 'Potential Loyalists'
                 WHEN "R_score"  = 1   AND "F_plus_M" BETWEEN 9 AND 10                THEN 'Price Sensitive'
                 WHEN "R_score"  = 2   AND "F_plus_M" BETWEEN 9 AND 10                THEN 'Promising'
                 WHEN "R_score"  = 3   AND "F_plus_M" BETWEEN 7 AND 10                THEN 'About to Sleep'
                 ELSE 'Other'
             END AS "RFM_segment"
     FROM    rfm_scored
)
SELECT  "RFM_segment",
        ROUND( SUM("monetary") / SUM("frequency"), 2) AS "avg_sales_per_order"
FROM    rfm_labeled
GROUP   BY "RFM_segment"
ORDER   BY "avg_sales_per_order" DESC
LIMIT 20;
Answer:
RFM_segment,avg_sales_per_order
Champions,301.27
Hibernating,289.33
Loyal Customers,240.58
Can't Lose Them,213.09
Needs Attention,177.21
Potential Loyalists,86.97
About to Sleep,86.4
Lost,79.34
Recent Users,46.84
Task: According to the RFM definition document, calculate the average sales per order for each customer within distinct RFM segments, considering only 'delivered' orders. Use the customer unique identifier. Clearly define how to calculate Recency based on the latest purchase timestamp and specify the criteria for classifying RFM segments. The average sales should be computed as the total spend divided by the total number of orders. Please analyze and report the differences in average sales across the RFM segments

Please think step by step and answer only one complete SQL in snowflake dialect in ```sql``` format.
SQL usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: The table structure information is ({database name: {schema name: [table name]}}): 
{'E_COMMERCE': {'E_COMMERCE': ['LEADS_QUALIFIED', 'GEOLOCATION', 'LEADS_CLOSED', 'ORDER_ITEMS', 'SELLERS', 'CUSTOMERS', 'ORDER_REVIEWS', 'PRODUCTS', 'PRODUCT_CATEGORY_NAME_TRANSLATION', 'ORDERS', 'ORDER_PAYMENTS']}}

When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
If the task description does not specify the number of decimal places, retain all decimals to four places.

[Self-refine]
2025-05-07 06:57:18 - Thread-541 (execute) - INFO - [Try to run SQL in self-refine]
```sql
/* --------------------------------------------------------------
   RFM SEGMENTATION & AVERAGE SALES-PER-ORDER BY SEGMENT
   --------------------------------------------------------------
   • Recency  (R)  = NTILE(5) rank of MAX(order_purchase_timestamp)
                     1 = most recent, 5 = oldest purchase.
   • Frequency (F) = NTILE(5) rank of COUNT(delivered orders)
                     1 = most orders, 5 = fewest.
   • Monetary  (M) = NTILE(5) rank of SUM(payment_value)
                     1 = highest spend, 5 = lowest.
   • Segment   = classification rules supplied in the brief.
   • Avg-sales-per-order (customer level) = total spend / #orders.
-----------------------------------------------------------------*/
WITH delivered_orders AS (          -- only ‘delivered’ orders
    SELECT  o."order_id",
            o."customer_id",
            c."customer_unique_id",
            CAST(o."order_purchase_timestamp" AS TIMESTAMP) AS "purchase_ts"
    FROM    "E_COMMERCE"."E_COMMERCE"."ORDERS"    o
    JOIN    "E_COMMERCE"."E_COMMERCE"."CUSTOMERS" c
           ON c."customer_id" = o."customer_id"
    WHERE   o."order_status" = 'delivered'
), payments AS (                    -- aggregate payments per order
    SELECT  "order_id",
            SUM("payment_value") AS "order_total"
    FROM    "E_COMMERCE"."E_COMMERCE"."ORDER_PAYMENTS"
    GROUP   BY "order_id"
), customer_metrics AS (            -- raw R, F, M values per customer
    SELECT  d."customer_unique_id",
            COUNT(DISTINCT d."order_id") AS "frequency",
            SUM(p."order_total")         AS "monetary",
            MAX(d."purchase_ts")         AS "latest_purchase_ts"
    FROM    delivered_orders d
    JOIN    payments        p ON p."order_id" = d."order_id"
    GROUP   BY d."customer_unique_id"
), rfm_scored AS (                  -- convert to quintile scores
    SELECT  *,
            NTILE(5) OVER (ORDER BY "latest_purchase_ts" DESC NULLS LAST) AS "R_score",
            NTILE(5) OVER (ORDER BY "frequency"         DESC NULLS LAST) AS "F_score",
            NTILE(5) OVER (ORDER BY "monetary"          DESC NULLS LAST) AS "M_score"
    FROM    customer_metrics
), rfm_segmented AS (               -- apply segment rules & calc avg-sales
    SELECT  *,
            ("F_score" + "M_score") AS "F_plus_M",
            CASE
                WHEN "R_score" = 1 AND "F_plus_M" BETWEEN 1 AND 4                 THEN 'Champions'
                WHEN "R_score" IN (4,5) AND "F_plus_M" BETWEEN 1 AND 2           THEN 'Can''t Lose Them'
                WHEN "R_score" IN (4,5) AND "F_plus_M" BETWEEN 3 AND 6           THEN 'Hibernating'
                WHEN "R_score" IN (4,5) AND "F_plus_M" BETWEEN 7 AND 10          THEN 'Lost'
                WHEN "R_score" IN (2,3) AND "F_plus_M" BETWEEN 1 AND 4           THEN 'Loyal Customers'
                WHEN "R_score"  = 3   AND "F_plus_M" BETWEEN 5 AND 6             THEN 'Needs Attention'
                WHEN "R_score"  = 1   AND "F_plus_M" BETWEEN 7 AND 8             THEN 'Recent Users'
                WHEN ("R_score" = 1 AND "F_plus_M" BETWEEN 5 AND 6)
                     OR ("R_score" = 2 AND "F_plus_M" BETWEEN 5 AND 8)           THEN 'Potential Loyalists'
                WHEN "R_score"  = 1   AND "F_plus_M" BETWEEN 9 AND 10            THEN 'Price Sensitive'
                WHEN "R_score"  = 2   AND "F_plus_M" BETWEEN 9 AND 10            THEN 'Promising'
                WHEN "R_score"  = 3   AND "F_plus_M" BETWEEN 7 AND 10            THEN 'About to Sleep'
                ELSE 'Other'
            END                                                        AS "RFM_segment",
            ROUND("monetary" / NULLIF("frequency",0), 2)               AS "avg_sales_per_order"
    FROM    rfm_scored
)
SELECT  "RFM_segment",
        ROUND(AVG("avg_sales_per_order"), 2) AS "segment_avg_sales_per_order",
        COUNT(DISTINCT "customer_unique_id") AS "customers_in_segment"
FROM    rfm_segmented
GROUP   BY "RFM_segment"
ORDER   BY "segment_avg_sales_per_order" DESC NULLS LAST;
```
[Try to run SQL in self-refine]
2025-05-07 06:57:48 - Thread-541 (execute) - INFO - Total iteration counts: 0
