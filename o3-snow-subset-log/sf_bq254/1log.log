2025-05-07 02:22:53 - Thread-258 (execute) - INFO - [Exploration]
```sql
--Description: Find the multipolygon that carries wikidata = 'Q191' and retrieve its geometry.  
SELECT  
      pf."geometry"                                              AS "q191_wkb" ,
      TO_GEOGRAPHY(pf."geometry")                                AS "q191_geo" ,
      f_tag.value:"value"::STRING                                AS "q191_name" ,
      pf."osm_way_id"                                            AS "q191_way_id"
FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES"  pf
       ,LATERAL FLATTEN(input => pf."all_tags")                  f_tag
WHERE  pf."feature_type" = 'multipolygons'
  AND  f_tag.value:"key"::STRING   = 'wikidata'
  AND  f_tag.value:"value"::STRING = 'Q191'
LIMIT  20 ;
```

```sql
--Description: Inspect the complete tag-set for the Q191 multipolygon to understand its meta-data (name, etc.).  
SELECT  
       f.value:"key"::STRING   AS "tag_key",
       f.value:"value"::STRING AS "tag_value"
FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
       LATERAL FLATTEN(input => pf."all_tags")                   f
WHERE  pf."feature_type" = 'multipolygons'
  AND  EXISTS
       ( SELECT 1
         FROM   LATERAL FLATTEN(input => pf."all_tags") f2
         WHERE  f2.value:"key"::STRING   = 'wikidata'
           AND  f2.value:"value"::STRING = 'Q191'
       )
LIMIT  50 ;
```

```sql
--Description: List multipolygons that spatially intersect the Q191 geometry but do NOT contain a wikidata tag themselves.  
WITH q191 AS (                                   -- pick Q191 polygon
      SELECT TO_GEOGRAPHY("geometry") AS geo
      FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES"
      WHERE  "feature_type" = 'multipolygons'
        AND  ARRAY_CONTAINS(OBJECT_CONSTRUCT('key','wikidata','value','Q191') ,
                            "all_tags" )         -- quick filter, refined above
      LIMIT 1 )

SELECT pf."osm_way_id",
       TO_GEOGRAPHY(pf."geometry") AS pf_geo
FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
       q191
WHERE  pf."feature_type" = 'multipolygons'
  AND  ST_INTERSECTS( q191.geo , TO_GEOGRAPHY(pf."geometry") )
  AND  NOT EXISTS       -- exclude any polygon that already owns a wikidata tag
       ( SELECT 1
         FROM   LATERAL FLATTEN(input => pf."all_tags") f
         WHERE  f.value:"key"::STRING = 'wikidata' )
LIMIT  20 ;
```

```sql
--Description: Display name tags for the candidate multipolygons found above (still no wikidata).  
WITH cand AS (                               -- candidates intersecting Q191 but without wikidata
      SELECT pf."osm_way_id", pf."all_tags"
      FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf
      WHERE  pf."feature_type" = 'multipolygons'
        AND  NOT EXISTS
             ( SELECT 1 FROM LATERAL FLATTEN(input => pf."all_tags") f
               WHERE  f.value:"key"::STRING = 'wikidata' )
) 
SELECT  c."osm_way_id",
        f.value:"value"::STRING AS "name"
FROM    cand c ,
        LATERAL FLATTEN(input => c."all_tags") f
WHERE   f.value:"key"::STRING = 'name'
LIMIT   20 ;
```

```sql
--Description: Sample of points (PLANET_FEATURES_POINTS) located in the same broad area to verify geometry coercion works.  
SELECT  "osm_id",
        TO_GEOGRAPHY("geometry") AS "pt_geo"
FROM    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS"
WHERE   "geometry" IS NOT NULL
LIMIT   20 ;
```

```sql
--Description: Count how many points fall inside EACH candidate multipolygon; return top-20 by count.  
WITH q191 AS (
      SELECT TO_GEOGRAPHY("geometry") AS geo
      FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES"
      WHERE  "feature_type" = 'multipolygons'
        AND  ARRAY_CONTAINS(OBJECT_CONSTRUCT('key','wikidata','value','Q191'), "all_tags")
      LIMIT 1
), cand AS (
      SELECT pf."osm_way_id" ,
             TO_GEOGRAPHY(pf."geometry") AS geo ,
             ( SELECT f.value:"value"::STRING
               FROM   LATERAL FLATTEN(input => pf."all_tags") f
               WHERE  f.value:"key"::STRING = 'name'
               LIMIT 1 )                 AS "name"
      FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf
      WHERE  pf."feature_type" = 'multipolygons'
        AND  ST_INTERSECTS( (SELECT geo FROM q191) , TO_GEOGRAPHY(pf."geometry") )
        AND  NOT EXISTS
             ( SELECT 1
               FROM   LATERAL FLATTEN(input => pf."all_tags") f
               WHERE  f.value:"key"::STRING = 'wikidata' )
)
SELECT  c."osm_way_id",
        c."name",
        COUNT(*) AS "inside_point_count"
FROM    cand c
        JOIN "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS" p
          ON ST_CONTAINS( c.geo , TO_GEOGRAPHY(p."geometry") )
GROUP BY 1,2
ORDER BY 3 DESC
LIMIT 20;
```

```sql
--Description: Extract the TOP 2 multipolygons (by inside-point count) and show their names & counts.  
WITH q191 AS (
      SELECT TO_GEOGRAPHY("geometry") AS geo
      FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES"
      WHERE  "feature_type" = 'multipolygons'
        AND  EXISTS ( SELECT 1
                      FROM   LATERAL FLATTEN(input => "all_tags") f
                      WHERE  f.value:"key"::STRING='wikidata'
                        AND  f.value:"value"::STRING='Q191')
      LIMIT 1
), cand AS (
      SELECT pf."osm_way_id",
             TO_GEOGRAPHY(pf."geometry") AS geo,
             ( SELECT f.value:"value"::STRING
               FROM   LATERAL FLATTEN(input => pf."all_tags") f
               WHERE  f.value:"key"::STRING='name'
               LIMIT 1 ) AS "name"
      FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf
      WHERE  pf."feature_type"='multipolygons'
        AND  ST_INTERSECTS( (SELECT geo FROM q191) , TO_GEOGRAPHY(pf."geometry"))
        AND  NOT EXISTS ( SELECT 1
                          FROM   LATERAL FLATTEN(input => pf."all_tags") g
                          WHERE  g.value:"key"::STRING='wikidata')
), ranked AS (
      SELECT  c."osm_way_id",
              c."name",
              COUNT(*) AS "inside_point_count",
              ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS rn
      FROM    cand c
              JOIN "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS" p
                ON ST_CONTAINS( c.geo , TO_GEOGRAPHY(p."geometry") )
      GROUP BY 1,2
)
SELECT  "osm_way_id",
        "name",
        "inside_point_count"
FROM    ranked
WHERE   rn <= 2
ORDER BY "inside_point_count" DESC ;
```

```sql
--Description: Inspect the tag-set for the two top multipolygons to confirm they really lack 'wikidata'.  
WITH top2 AS (                                             -- reuse query above
      SELECT  "osm_way_id"
      FROM    (
              SELECT  c."osm_way_id",
                      COUNT(*) AS cnt,
                      ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) rn
              FROM    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf   c
                      JOIN "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS" p
                        ON ST_CONTAINS( TO_GEOGRAPHY(c."geometry") ,
                                         TO_GEOGRAPHY(p."geometry") )
              GROUP BY 1
             )
      WHERE   rn <= 2
)
SELECT  t."osm_way_id",
        f.value:"key"::STRING   AS "tag_key",
        f.value:"value"::STRING AS "tag_value"
FROM    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
        top2 t ,
        LATERAL FLATTEN(input => pf."all_tags")              f
WHERE   pf."osm_way_id" = t."osm_way_id"
ORDER BY t."osm_way_id", "tag_key"
LIMIT 100 ;
```

```sql
--Description: Quickly show a few points that fall inside the TOP-ranked multipolygon to validate spatial join.  
WITH top_poly AS (
      SELECT  TO_GEOGRAPHY(pf."geometry") AS poly_geo
      FROM    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf
      WHERE   pf."osm_way_id" = (SELECT MIN("osm_way_id")
                                 FROM   ( /* inner sub-query identical to previous ranking */
                                         SELECT c."osm_way_id",
                                                COUNT(*) AS cnt
                                         FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" c
                                                JOIN "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS" p
                                                  ON ST_CONTAINS( TO_GEOGRAPHY(c."geometry"),
                                                                   TO_GEOGRAPHY(p."geometry"))
                                         GROUP BY 1
                                         ORDER BY cnt DESC
                                         LIMIT 1))
)
SELECT  p."osm_id",
        p."geometry"
FROM    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS" p ,
        top_poly
WHERE   ST_CONTAINS( top_poly.poly_geo , TO_GEOGRAPHY(p."geometry") )
LIMIT   20 ;
```

```sql
--Description: OPTIONAL – view bounding box & area of Q191 multipolygon for context.  
SELECT  ST_ENVELOPE( TO_GEOGRAPHY("geometry") ) AS "q191_bbox",
        ST_AREA(     TO_GEOGRAPHY("geometry") ) AS "q191_area_m2"
FROM    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES"
WHERE   "feature_type" = 'multipolygons'
  AND   EXISTS ( SELECT 1
                 FROM   LATERAL FLATTEN(input => "all_tags") f
                 WHERE  f.value:"key"::STRING='wikidata'
                   AND  f.value:"value"::STRING='Q191')
LIMIT 1 ;
```
[Exploration]
2025-05-07 02:22:53 - Thread-258 (execute) - INFO - [Try to execute]
--Description: Find the multipolygon that carries wikidata = 'Q191' and retrieve its geometry.  
SELECT  
      pf."geometry"                                              AS "q191_wkb" ,
      TO_GEOGRAPHY(pf."geometry")                                AS "q191_geo" ,
      f_tag.value:"value"::STRING                                AS "q191_name" ,
      pf."osm_way_id"                                            AS "q191_way_id"
FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES"  pf
       ,LATERAL FLATTEN(input => pf."all_tags")                  f_tag
WHERE  pf."feature_type" = 'multipolygons'
  AND  f_tag.value:"key"::STRING   = 'wikidata'
  AND  f_tag.value:"value"::STRING = 'Q191'
LIMIT  20 ;
[Try to execute]
2025-05-07 02:23:07 - Thread-258 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Find the multipolygon that carries wikidata = 'Q191' and retrieve its geometry.  
SELECT  
      pf."geometry"                                              AS "q191_wkb" ,
      TO_GEOGRAPHY(pf."geometry")                                AS "q191_geo" ,
      f_tag.value:"value"::STRING                                AS "q191_name" ,
      pf."osm_way_id"                                            AS "q191_way_id"
FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES"  pf
       ,LATERAL FLATTEN(input => pf."all_tags")                  f_tag
WHERE  pf."feature_type" = 'multipolygons'
  AND  f_tag.value:"key"::STRING   = 'wikidata'
  AND  f_tag.value:"value"::STRING = 'Q191'
LIMIT  20 ;
Results:
q191_wkb,q191_geo,q191_name,q191_way_id
"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\xb8(\x00\x00p\x82o\x9a>\xcf;@\xc3\xc8\xdc\xc6\xb0\xefL@\xb6\x9e\xc6b@\xcf;@\xe1\xa7\x05\x8a\xb3\xefL@K\xa1\x98aH\xcf;@\xae\x87\x8a\xcc\xb7\xefL@\xf5\xbb\xb05[\xcf;@\x1d\x1dW#\xbb\xefL@\x06ik\xe9v\xcf;@t\\\xe8\xa5\xbd\xefL@=D\xa3;\x88\xcf;@\xab\xf3\xa8\xf8\xbf\xefL@M\x8c\xc0\xb3\x98\xcf;@\xa1\x80\xed`\xc4\xefL@\xb7S),\xa7\xcf;@\xc7):\x92\xcb\xefL@\xde\xc3oT\xb8\xcf;@\xa6\x0f]P\xdf\xefL@c\xf47\xfc\xc9\xcf;@\

[Successfully executed]
2025-05-07 02:23:07 - Thread-258 (execute) - INFO - [Try to execute]
--Description: Inspect the complete tag-set for the Q191 multipolygon to understand its meta-data (name, etc.).  
SELECT  
       f.value:"key"::STRING   AS "tag_key",
       f.value:"value"::STRING AS "tag_value"
FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
       LATERAL FLATTEN(input => pf."all_tags")                   f
WHERE  pf."feature_type" = 'multipolygons'
  AND  EXISTS
       ( SELECT 1
         FROM   LATERAL FLATTEN(input => pf."all_tags") f2
         WHERE  f2.value:"key"::STRING   = 'wikidata'
           AND  f2.value:"value"::STRING = 'Q191'
       )
LIMIT  50 ;
[Try to execute]
2025-05-07 02:23:08 - Thread-258 (execute) - INFO - [Error occurred]
{'status': 'error', 'error_msg': '##ERROR##002031 (42601): SQL compilation error:\nUnsupported subquery type cannot be evaluated'}
[Error occurred]
2025-05-07 02:24:56 - Thread-258 (execute) - INFO - [Corrected SQL]
```sql
--Description: The aim is to list every individual key/value tag that belongs to the single
--             multipolygon carrying wikidata = 'Q191'.
--             Strategy (thinking process):
--             • A multipolygon’s tags live in array-of-objects column "all_tags".
--             • We need to ❶ identify the row whose tags include {"key":"wikidata","value":"Q191"}
--               and then ❷ expand the same row’s full tag array.
--             • Snowflake forbids a correlated ARRAY_CONTAINS inside WHERE, so we instead
--               use two independent LATERAL FLATTEN clauses on the same row:
--                   ‑ ‘wd’-flatten filters for the wikidata match;
--                   ‑ ‘f’-flatten emits *all* tags.
--             • Because both flattens share the same PLANET_FEATURES row, the join is implicit,
--               and only the target polygon’s tags reach the SELECT.
SELECT
       f.value:"key"::STRING   AS tag_key,
       f.value:"value"::STRING AS tag_value
FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf,
       LATERAL FLATTEN(input => pf."all_tags") wd,   -- find wikidata = Q191
       LATERAL FLATTEN(input => pf."all_tags") f     -- list every tag of that same row
WHERE  pf."feature_type" = 'multipolygons'
  AND  wd.value:"key"::STRING   = 'wikidata'
  AND  wd.value:"value"::STRING = 'Q191'
LIMIT 50;
```
[Corrected SQL]
2025-05-07 02:25:03 - Thread-258 (execute) - INFO - [Results for corrected sql]
TAG_KEY,TAG_VALUE
ISO3166-1,EE
ISO3166-1:alpha2,EE
ISO3166-1:alpha3,EST
ISO3166-1:numeric,233
admin_level,2
alt_name:eo,Estonujo
alt_name:pt,Estônia
boundary,administrative
default_language,et
flag,http://upload.wikimedia.org/wikipedia/commons/8/8f/Flag_of_Estonia.svg
int_name,Estonia
is_in:continent,Europe
name,Eesti
name:ace,Èstonia
name:af,Estland
name:als,Estland
name:am,ኤስቶኒያ
name:an,Estonia
name:ang,Estland

[Results for corrected sql]
2025-05-07 02:27:21 - Thread-258 (execute) - INFO - [Successfully corrected]
Successfully corrected. SQL:
--Description: The aim is to list every individual key/value tag that belongs to the single
--             multipolygon carrying wikidata = 'Q191'.
--             Strategy (thinking process):
--             • A multipolygon’s tags live in array-of-objects column "all_tags".
--             • We need to ❶ identify the row whose tags include {"key":"wikidata","value":"Q191"}
--               and then ❷ expand the same row’s full tag array.
--             • Snowflake forbids a correlated ARRAY_CONTAINS inside WHERE, so we instead
--               use two independent LATERAL FLATTEN clauses on the same row:
--                   ‑ ‘wd’-flatten filters for the wikidata match;
--                   ‑ ‘f’-flatten emits *all* tags.
--             • Because both flattens share the same PLANET_FEATURES row, the join is implicit,
--               and only the target polygon’s tags reach the SELECT.
SELECT
       f.value:"key"::STRING   AS tag_key,
       f.value:"value"::STRING AS tag_value
FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf,
       LATERAL FLATTEN(input => pf."all_tags") wd,   -- find wikidata = Q191
       LATERAL FLATTEN(input => pf."all_tags") f     -- list every tag of that same row
WHERE  pf."feature_type" = 'multipolygons'
  AND  wd.value:"key"::STRING   = 'wikidata'
  AND  wd.value:"value"::STRING = 'Q191'
LIMIT 50;
Results:
TAG_KEY,TAG_VALUE
ISO3166-1,EE
ISO3166-1:alpha2,EE
ISO3166-1:alpha3,EST
ISO3166-1:numeric,233
admin_level,2
alt_name:eo,Estonujo
alt_name:pt,Estônia
boundary,administrative
default_language,et
flag,http://upload.wikimedia.org/wikipedia/commons/8/8f/Flag_of_Estonia.svg
int_name,Estonia
is_in:continent,Europe
name,Eesti
name:ace,Èstonia
name:af,Estland
name:als,Estland
name:am,ኤስቶኒያ
name:an,Estonia
name:ang,Estland

[Successfully corrected]
2025-05-07 02:27:21 - Thread-258 (execute) - INFO - [Try to execute]
--Description: List multipolygons that spatially intersect the Q191 geometry but do NOT contain a wikidata tag themselves.  
WITH q191 AS (                                   -- pick Q191 polygon
      SELECT TO_GEOGRAPHY("geometry") AS geo
      FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES"
      WHERE  "feature_type" = 'multipolygons'
        AND  ARRAY_CONTAINS(OBJECT_CONSTRUCT('key','wikidata','value','Q191') ,
                            "all_tags" )         -- quick filter, refined above
      LIMIT 1 )

SELECT pf."osm_way_id",
       TO_GEOGRAPHY(pf."geometry") AS pf_geo
FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
       q191
WHERE  pf."feature_type" = 'multipolygons'
  AND  ST_INTERSECTS( q191.geo , TO_GEOGRAPHY(pf."geometry") )
  AND  NOT EXISTS       -- exclude any polygon that already owns a wikidata tag
       ( SELECT 1
         FROM   LATERAL FLATTEN(input => pf."all_tags") f
         WHERE  f.value:"key"::STRING = 'wikidata' )
LIMIT  20 ;
[Try to execute]
2025-05-07 02:27:21 - Thread-258 (execute) - INFO - [Error occurred]
{'status': 'error', 'error_msg': '##ERROR##002031 (42601): SQL compilation error:\nUnsupported subquery type cannot be evaluated'}
[Error occurred]
2025-05-07 02:30:51 - Thread-258 (execute) - INFO - [Corrected SQL]
```sql
--Description:
-- Count how many point-features fall inside each multipolygon that:
--   • Intersects Estonia (wikidata = Q191) and
--   • Lacks its own ‘wikidata’ tag.
-- Return the 20 polygons with the highest counts, along with their names.
-- -----------------------------------------------------------------------
-- 1) CTE q191 – obtain Estonia’s geometry by flattening its tag array and
--    filtering on key = 'wikidata' / value = 'Q191'.
-- 2) CTE cand – collect every multipolygon that intersects q191.geo and
--    has NO wikidata tag.  Grab its “name” tag (if present) for display.
-- 3) Final SELECT – spatially join those candidates with the
--    PLANET_FEATURES_POINTS table and count contained points.
WITH q191 AS (
      SELECT TO_GEOGRAPHY(pf."geometry") AS geo
      FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf,
             LATERAL FLATTEN(input => pf."all_tags") wd
      WHERE  pf."feature_type" = 'multipolygons'
        AND  wd.value:"key"::STRING   = 'wikidata'
        AND  wd.value:"value"::STRING = 'Q191'
      LIMIT 1
), cand AS (
      SELECT pf."osm_way_id",
             TO_GEOGRAPHY(pf."geometry")                      AS geo,
             ( SELECT f.value:"value"::STRING                 -- fetch name if it exists
               FROM   LATERAL FLATTEN(input => pf."all_tags") f
               WHERE  f.value:"key"::STRING = 'name'
               LIMIT 1 )                                     AS name
      FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf,
             q191
      WHERE  pf."feature_type" = 'multipolygons'
        AND  ST_INTERSECTS(q191.geo , TO_GEOGRAPHY(pf."geometry"))
        AND  NOT EXISTS ( SELECT 1
                          FROM   LATERAL FLATTEN(input => pf."all_tags") w
                          WHERE  w.value:"key"::STRING = 'wikidata' )
)
SELECT  c."osm_way_id",
        COALESCE(c.name,'(no name)')          AS name,
        COUNT(*)                              AS inside_point_count
FROM    cand                  c
JOIN    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS" p
          ON ST_CONTAINS(c.geo , TO_GEOGRAPHY(p."geometry"))
GROUP BY 1,2
ORDER BY inside_point_count DESC
LIMIT 20;
```
[Corrected SQL]
2025-05-07 02:30:52 - Thread-258 (execute) - INFO - [Results for corrected sql]
{'status': 'error', 'error_msg': '##ERROR##002031 (42601): SQL compilation error:\nUnsupported subquery type cannot be evaluated'}
[Results for corrected sql]
2025-05-07 02:35:45 - Thread-258 (execute) - INFO - [Corrected SQL]
```sql
--Description:
-- Objective ── list every multipolygon that
--   (a) geometrically intersects Estonia (identified via wikidata = Q191) and
--   (b) has NO own 'wikidata' tag.
--
-- Why this shape?
-- • A prior NOT-EXISTS approach triggered a Snowflake “unsupported subquery” error.
-- • The workaround: aggregate after a LATERAL FLATTEN that expands each candidate’s
--   tag array, then keep only those with zero wikidata keys (HAVING filter).
--
-- Step-by-step thinking
-- 1. CTE q191
--    ‑ Flatten the tags (alias wd) of every multipolygon row.
--    ‑ Keep the one whose key = 'wikidata' and value = 'Q191'; grab its geography.
-- 2. Main query
--    ‑ Cross-join each other multipolygon with q191; retain those whose geography
--      ST_INTERSECTS q191.geo.
--    ‑ LATERAL FLATTEN (alias t) exposes all tags of each candidate.
--    ‑ GROUP BY osm_way_id + the geography expression, and HAVING the summed
--      indicator for wikidata tags equals zero ⇒ candidate lacks wikidata.
WITH q191 AS (
    SELECT TO_GEOGRAPHY(pf."geometry") AS geo
    FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf,
           LATERAL FLATTEN(input => pf."all_tags") wd
    WHERE  pf."feature_type" = 'multipolygons'
      AND  wd.value:"key"::STRING   = 'wikidata'
      AND  wd.value:"value"::STRING = 'Q191'
    LIMIT 1
)
SELECT  pf."osm_way_id",
        TO_GEOGRAPHY(pf."geometry") AS pf_geo
FROM    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf,
        q191,
        LATERAL FLATTEN(input => pf."all_tags") t          -- expose each tag
WHERE   pf."feature_type" = 'multipolygons'
  AND   ST_INTERSECTS(q191.geo , TO_GEOGRAPHY(pf."geometry"))
GROUP BY
        pf."osm_way_id",
        TO_GEOGRAPHY(pf."geometry")                        -- must repeat expr in GROUP BY
HAVING  SUM(IFF(t.value:"key"::STRING = 'wikidata', 1, 0)) = 0   -- ensure no wikidata
LIMIT 20;
```
[Corrected SQL]
2025-05-07 02:35:46 - Thread-258 (execute) - INFO - [Results for corrected sql]
{'status': 'error', 'error_msg': '##ERROR##092102 (42804): Expressions of type GEOGRAPHY cannot be used as GROUP BY keys'}
[Results for corrected sql]
2025-05-07 02:39:53 - Thread-258 (execute) - INFO - [Corrected SQL]
```sql
--Description:
-- Goal: list multipolygons whose geometries intersect Estonia (wikidata = Q191)
--       but that themselves have NO wikidata tag.  Previous failures came from
--       GROUP BY on a GEOGRAPHY column.  We fix this by:
--   1. CTE q191  – obtain Estonia’s geometry via FLATTEN on its tags.
--   2. Main query
--        • Keep multipolygons that ST_INTERSECT q191.geo.
--        • FLATTEN each candidate’s tags (alias t).
--        • Use QUALIFY with a windowed SUM over osm_way_id to ensure the
--          polygon has zero wikidata tags, thus avoiding any GROUP BY on
--          the GEOGRAPHY field.  DISTINCT gives one row per polygon.
WITH q191 AS (
    SELECT TO_GEOGRAPHY(pf."geometry") AS geo
    FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf,
           LATERAL FLATTEN(input => pf."all_tags") wd
    WHERE  pf."feature_type" = 'multipolygons'
      AND  wd.value:"key"::STRING   = 'wikidata'
      AND  wd.value:"value"::STRING = 'Q191'
    LIMIT 1
)
SELECT DISTINCT
       pf."osm_way_id",
       TO_GEOGRAPHY(pf."geometry") AS pf_geo
FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf,
       q191,
       LATERAL FLATTEN(input => pf."all_tags") t                 -- expose candidate’s tags
WHERE  pf."feature_type" = 'multipolygons'
  AND  ST_INTERSECTS(q191.geo , TO_GEOGRAPHY(pf."geometry"))
QUALIFY SUM(IFF(t.value:"key"::STRING = 'wikidata', 1, 0))
        OVER (PARTITION BY pf."osm_way_id") = 0                  -- exclude polygons with wikidata
LIMIT 20;
```
[Corrected SQL]
2025-05-07 02:40:00 - Thread-258 (execute) - INFO - [Results for corrected sql]
osm_way_id,PF_GEO
672938490,"{
  ""coordinates"": [
    [
      [
        2.426417410000001e+01,
        5.828631960000000e+01
      ],
      [
        2.426422630000000e+01,
        5.828636590000000e+01
      ],
      [
        2.426413420000000e+01,
        5.828639460000000e+01
      ],
      [
        2.426408199999999e+01,
        5.828634840000000e+01
      ],
      [
        2.426417410000001e+01,
        5.828631960000000e+01
      ]
    ]
  ],
  ""type"": ""Polygon""
}"
739923285,"{


[Results for corrected sql]
2025-05-07 02:42:03 - Thread-258 (execute) - INFO - [Successfully corrected]
Successfully corrected. SQL:
--Description:
-- Goal: list multipolygons whose geometries intersect Estonia (wikidata = Q191)
--       but that themselves have NO wikidata tag.  Previous failures came from
--       GROUP BY on a GEOGRAPHY column.  We fix this by:
--   1. CTE q191  – obtain Estonia’s geometry via FLATTEN on its tags.
--   2. Main query
--        • Keep multipolygons that ST_INTERSECT q191.geo.
--        • FLATTEN each candidate’s tags (alias t).
--        • Use QUALIFY with a windowed SUM over osm_way_id to ensure the
--          polygon has zero wikidata tags, thus avoiding any GROUP BY on
--          the GEOGRAPHY field.  DISTINCT gives one row per polygon.
WITH q191 AS (
    SELECT TO_GEOGRAPHY(pf."geometry") AS geo
    FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf,
           LATERAL FLATTEN(input => pf."all_tags") wd
    WHERE  pf."feature_type" = 'multipolygons'
      AND  wd.value:"key"::STRING   = 'wikidata'
      AND  wd.value:"value"::STRING = 'Q191'
    LIMIT 1
)
SELECT DISTINCT
       pf."osm_way_id",
       TO_GEOGRAPHY(pf."geometry") AS pf_geo
FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf,
       q191,
       LATERAL FLATTEN(input => pf."all_tags") t                 -- expose candidate’s tags
WHERE  pf."feature_type" = 'multipolygons'
  AND  ST_INTERSECTS(q191.geo , TO_GEOGRAPHY(pf."geometry"))
QUALIFY SUM(IFF(t.value:"key"::STRING = 'wikidata', 1, 0))
        OVER (PARTITION BY pf."osm_way_id") = 0                  -- exclude polygons with wikidata
LIMIT 20;
Results:
osm_way_id,PF_GEO
672938490,"{
  ""coordinates"": [
    [
      [
        2.426417410000001e+01,
        5.828631960000000e+01
      ],
      [
        2.426422630000000e+01,
        5.828636590000000e+01
      ],
      [
        2.426413420000000e+01,
        5.828639460000000e+01
      ],
      [
        2.426408199999999e+01,
        5.828634840000000e+01
      ],
      [
        2.426417410000001e+01,
        5.828631960000000e+01
      ]
    ]
  ],
  ""type"": ""Polygon""
}"
739923285,"{


[Successfully corrected]
2025-05-07 02:42:03 - Thread-258 (execute) - INFO - [Try to execute]
--Description: Display name tags for the candidate multipolygons found above (still no wikidata).  
WITH cand AS (                               -- candidates intersecting Q191 but without wikidata
      SELECT pf."osm_way_id", pf."all_tags"
      FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf
      WHERE  pf."feature_type" = 'multipolygons'
        AND  NOT EXISTS
             ( SELECT 1 FROM LATERAL FLATTEN(input => pf."all_tags") f
               WHERE  f.value:"key"::STRING = 'wikidata' )
) 
SELECT  c."osm_way_id",
        f.value:"value"::STRING AS "name"
FROM    cand c ,
        LATERAL FLATTEN(input => c."all_tags") f
WHERE   f.value:"key"::STRING = 'name'
LIMIT   20 ;
[Try to execute]
2025-05-07 02:42:03 - Thread-258 (execute) - INFO - [Error occurred]
{'status': 'error', 'error_msg': '##ERROR##002031 (42601): SQL compilation error:\nUnsupported subquery type cannot be evaluated'}
[Error occurred]
2025-05-07 02:47:02 - Thread-258 (execute) - INFO - [Corrected SQL]
```sql
--Description:
-- Count how many point-features lie inside each multipolygon that
--   • intersects Estonia (wikidata = Q191) and
--   • has NO wikidata tag of its own,
-- then list the 20 polygons with the highest counts together with their “name”.
-- Logic / thinking
-- 1. q191 – obtain Estonia’s geometry via FLATTEN on its tags.
-- 2. cand – pick every multipolygon that intersects q191.geo and QUALIFY those
--           whose tag-array contains zero wikidata keys (window SUM).
-- 3. point_counts – spatially join those candidates with PLANET_FEATURES_POINTS
--                   and compute the number of contained points.
-- 4. Final SELECT – re-join to PLANET_FEATURES to fetch the “name” tag
--                   and present the top-20 by point count.
WITH q191 AS (                                        -- Estonia geometry
      SELECT TO_GEOGRAPHY(pf."geometry") AS geo
      FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf,
             LATERAL FLATTEN(input => pf."all_tags") wd
      WHERE  pf."feature_type" = 'multipolygons'
        AND  wd.value:"key"::STRING   = 'wikidata'
        AND  wd.value:"value"::STRING = 'Q191'
      LIMIT 1
), cand AS (                                          -- intersecting polygons without wikidata
      SELECT DISTINCT
             pf."osm_way_id" ,
             TO_GEOGRAPHY(pf."geometry") AS geo
      FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
             q191 ,
             LATERAL FLATTEN(input => pf."all_tags") t
      WHERE  pf."feature_type" = 'multipolygons'
        AND  ST_INTERSECTS(q191.geo , TO_GEOGRAPHY(pf."geometry"))
      QUALIFY SUM(IFF(t.value:"key"::STRING = 'wikidata',1,0))
              OVER (PARTITION BY pf."osm_way_id") = 0
), point_counts AS (                                 -- count points inside each candidate
      SELECT  c."osm_way_id",
              COUNT(*) AS inside_point_count
      FROM    cand                        c
      JOIN    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS" p
              ON ST_CONTAINS(c.geo , TO_GEOGRAPHY(p."geometry"))
      GROUP BY c."osm_way_id"
)
SELECT pc."osm_way_id",
       MAX( IFF(tag.value:"key"::STRING = 'name',
                 tag.value:"value"::STRING , NULL) ) AS name,
       pc.inside_point_count
FROM   point_counts pc
JOIN   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf
       ON pf."osm_way_id" = pc."osm_way_id"
       ,LATERAL FLATTEN(input => pf."all_tags") tag            -- fetch name tag
GROUP BY pc."osm_way_id", pc.inside_point_count
ORDER BY pc.inside_point_count DESC
LIMIT 20;
```
[Corrected SQL]
2025-05-07 02:47:28 - Thread-258 (execute) - INFO - [Results for corrected sql]
osm_way_id,NAME,INSIDE_POINT_COUNT
679451224,Viljandi linna muinsuskaitseala,2013
45452606,,1554
45452841,,1366
180939774,,1218
73903261,,659
653438746,Lossipark,484
45553221,,205
45462066,,197
83052075,,170
45517321,,129
618962928,,118
27482623,,113
193102121,,113
618810455,,108
45452832,,108
99729276,,105
319298306,,105
816445824,,101
45517334,,100
27481545,Valuoja org,96

[Results for corrected sql]
2025-05-07 02:50:20 - Thread-258 (execute) - INFO - [Corrected other sqls]
```sql
--Description: Sample a few point features and display their GEOGRAPHY form – verifies TO_GEOGRAPHY works fine.
SELECT  "osm_id",
        TO_GEOGRAPHY("geometry") AS pt_geo
FROM    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS"
WHERE   "geometry" IS NOT NULL
LIMIT   20;
```

```sql
--Description: Count points inside EACH multipolygon that intersects Estonia (wikidata = Q191) and lacks a wikidata tag; return top-20.
WITH q191 AS (                                   -- Estonia geometry
        SELECT TO_GEOGRAPHY(pf."geometry") AS geo
        FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
               LATERAL FLATTEN(input => pf."all_tags") wd
        WHERE  pf."feature_type" = 'multipolygons'
          AND  wd.value:"key"::STRING   = 'wikidata'
          AND  wd.value:"value"::STRING = 'Q191'
        LIMIT 1
), cand AS (                                     -- intersecting polygons without wikidata
        SELECT DISTINCT
               pf."osm_way_id" ,
               TO_GEOGRAPHY(pf."geometry") AS geo ,
               MAX(IFF(t.value:"key"::STRING = 'name',           -- grab “name” tag
                       t.value:"value"::STRING, NULL))
                 OVER (PARTITION BY pf."osm_way_id") AS name
        FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
               q191 ,
               LATERAL FLATTEN(input => pf."all_tags") t
        WHERE  pf."feature_type" = 'multipolygons'
          AND  ST_INTERSECTS(q191.geo , TO_GEOGRAPHY(pf."geometry"))
        QUALIFY SUM(IFF(t.value:"key"::STRING = 'wikidata',1,0))
                OVER (PARTITION BY pf."osm_way_id") = 0
)
SELECT  c."osm_way_id",
        COALESCE(c.name,'(no name)')               AS name,
        COUNT(*)                                   AS inside_point_count
FROM    cand c
JOIN    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS" p
          ON ST_CONTAINS(c.geo , TO_GEOGRAPHY(p."geometry"))
GROUP BY c."osm_way_id", c.name
ORDER BY inside_point_count DESC
LIMIT 20;
```

```sql
--Description: Extract the TOP-2 multipolygons (by contained-point count) that meet the criteria and show their names & counts.
WITH q191 AS (
        SELECT TO_GEOGRAPHY(pf."geometry") AS geo
        FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
               LATERAL FLATTEN(input => pf."all_tags") wd
        WHERE  pf."feature_type"='multipolygons'
          AND  wd.value:"key"::STRING='wikidata'
          AND  wd.value:"value"::STRING='Q191'
        LIMIT 1
), cand AS (                                      -- polygons intersecting Estonia w/ no wikidata
        SELECT DISTINCT
               pf."osm_way_id",
               TO_GEOGRAPHY(pf."geometry") AS geo,
               MAX(IFF(t.value:"key"::STRING='name',
                       t.value:"value"::STRING,NULL))
               OVER (PARTITION BY pf."osm_way_id") AS name
        FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
               q191 ,
               LATERAL FLATTEN(input => pf."all_tags") t
        WHERE  pf."feature_type"='multipolygons'
          AND  ST_INTERSECTS(q191.geo , TO_GEOGRAPHY(pf."geometry"))
        QUALIFY SUM(IFF(t.value:"key"::STRING='wikidata',1,0))
                OVER (PARTITION BY pf."osm_way_id") = 0
), ranked AS (
        SELECT  c."osm_way_id",
                COALESCE(c.name,'(no name)') AS name,
                COUNT(*)                     AS inside_point_count,
                ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS rn
        FROM    cand c
        JOIN    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS" p
                ON ST_CONTAINS(c.geo , TO_GEOGRAPHY(p."geometry"))
        GROUP BY c."osm_way_id", c.name
)
SELECT  "osm_way_id",
        name,
        inside_point_count
FROM    ranked
WHERE   rn <= 2
ORDER BY inside_point_count DESC;
```

```sql
--Description: Show the full tag-set for the two top-ranked multipolygons to confirm they have no wikidata tag.
WITH top2 AS (                                     -- reuse ranking logic
        SELECT  r."osm_way_id"
        FROM   (
               SELECT  c."osm_way_id",
                       COUNT(*) AS cnt,
                       ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) rn
               FROM   (
                       SELECT DISTINCT
                              pf."osm_way_id",
                              TO_GEOGRAPHY(pf."geometry") AS geo
                       FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
                              LATERAL FLATTEN(input => pf."all_tags") t
                       WHERE  pf."feature_type"='multipolygons'
                         AND  SUM(IFF(t.value:"key"::STRING='wikidata',1,0))
                              OVER (PARTITION BY pf."osm_way_id") = 0
                     ) c
               JOIN   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS" p
                      ON ST_CONTAINS(c.geo , TO_GEOGRAPHY(p."geometry"))
               GROUP BY c."osm_way_id"
              ) r
        WHERE  rn <= 2
)
SELECT  pf."osm_way_id",
        tag.value:"key"::STRING   AS tag_key,
        tag.value:"value"::STRING AS tag_value
FROM    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf
JOIN    top2 t
  ON    pf."osm_way_id" = t."osm_way_id",
        LATERAL FLATTEN(input => pf."all_tags") tag
ORDER BY pf."osm_way_id", tag_key;
```

```sql
--Description: Retrieve a few points that fall inside the single top-ranked multipolygon to validate the spatial join.
WITH top_poly AS (
        SELECT  TO_GEOGRAPHY(pf."geometry") AS poly_geo
        FROM    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf
        WHERE   pf."osm_way_id" = (
                  SELECT "osm_way_id"
                  FROM   (
                         SELECT  c."osm_way_id",
                                 COUNT(*) AS cnt,
                                 ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) rn
                         FROM   (
                                 SELECT DISTINCT
                                        pf2."osm_way_id",
                                        TO_GEOGRAPHY(pf2."geometry") AS geo
                                 FROM    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf2 ,
                                         LATERAL FLATTEN(input => pf2."all_tags") t2
                                 WHERE   pf2."feature_type"='multipolygons'
                                   AND   SUM(IFF(t2.value:"key"::STRING='wikidata',1,0))
                                         OVER (PARTITION BY pf2."osm_way_id") = 0
                               ) c
                         JOIN   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS" p
                                ON ST_CONTAINS(c.geo , TO_GEOGRAPHY(p."geometry"))
                         GROUP BY c."osm_way_id"
                         ORDER BY cnt DESC
                         LIMIT 1)
                  )
        LIMIT 1
)
SELECT  p."osm_id",
        p."geometry"
FROM    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS" p ,
        top_poly
WHERE   ST_CONTAINS(top_poly.poly_geo , TO_GEOGRAPHY(p."geometry"))
LIMIT 20;
```

```sql
--Description: Bounding box and surface area (m²) of Estonia’s multipolygon (wikidata = Q191) – context only.
SELECT  ST_ENVELOPE(TO_GEOGRAPHY(pf."geometry")) AS q191_bbox,
        ST_AREA(    TO_GEOGRAPHY(pf."geometry")) AS q191_area_m2
FROM    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
        LATERAL FLATTEN(input => pf."all_tags") wd
WHERE   pf."feature_type" = 'multipolygons'
  AND   wd.value:"key"::STRING   = 'wikidata'
  AND   wd.value:"value"::STRING = 'Q191'
LIMIT 1;
```
[Corrected other sqls]
2025-05-07 02:50:20 - Thread-258 (execute) - INFO - [Successfully corrected]
Successfully corrected. SQL:
--Description:
-- Count how many point-features lie inside each multipolygon that
--   • intersects Estonia (wikidata = Q191) and
--   • has NO wikidata tag of its own,
-- then list the 20 polygons with the highest counts together with their “name”.
-- Logic / thinking
-- 1. q191 – obtain Estonia’s geometry via FLATTEN on its tags.
-- 2. cand – pick every multipolygon that intersects q191.geo and QUALIFY those
--           whose tag-array contains zero wikidata keys (window SUM).
-- 3. point_counts – spatially join those candidates with PLANET_FEATURES_POINTS
--                   and compute the number of contained points.
-- 4. Final SELECT – re-join to PLANET_FEATURES to fetch the “name” tag
--                   and present the top-20 by point count.
WITH q191 AS (                                        -- Estonia geometry
      SELECT TO_GEOGRAPHY(pf."geometry") AS geo
      FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf,
             LATERAL FLATTEN(input => pf."all_tags") wd
      WHERE  pf."feature_type" = 'multipolygons'
        AND  wd.value:"key"::STRING   = 'wikidata'
        AND  wd.value:"value"::STRING = 'Q191'
      LIMIT 1
), cand AS (                                          -- intersecting polygons without wikidata
      SELECT DISTINCT
             pf."osm_way_id" ,
             TO_GEOGRAPHY(pf."geometry") AS geo
      FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
             q191 ,
             LATERAL FLATTEN(input => pf."all_tags") t
      WHERE  pf."feature_type" = 'multipolygons'
        AND  ST_INTERSECTS(q191.geo , TO_GEOGRAPHY(pf."geometry"))
      QUALIFY SUM(IFF(t.value:"key"::STRING = 'wikidata',1,0))
              OVER (PARTITION BY pf."osm_way_id") = 0
), point_counts AS (                                 -- count points inside each candidate
      SELECT  c."osm_way_id",
              COUNT(*) AS inside_point_count
      FROM    cand                        c
      JOIN    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS" p
              ON ST_CONTAINS(c.geo , TO_GEOGRAPHY(p."geometry"))
      GROUP BY c."osm_way_id"
)
SELECT pc."osm_way_id",
       MAX( IFF(tag.value:"key"::STRING = 'name',
                 tag.value:"value"::STRING , NULL) ) AS name,
       pc.inside_point_count
FROM   point_counts pc
JOIN   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf
       ON pf."osm_way_id" = pc."osm_way_id"
       ,LATERAL FLATTEN(input => pf."all_tags") tag            -- fetch name tag
GROUP BY pc."osm_way_id", pc.inside_point_count
ORDER BY pc.inside_point_count DESC
LIMIT 20;
Results:
osm_way_id,NAME,INSIDE_POINT_COUNT
679451224,Viljandi linna muinsuskaitseala,2013
45452606,,1554
45452841,,1366
180939774,,1218
73903261,,659
653438746,Lossipark,484
45553221,,205
45462066,,197
83052075,,170
45517321,,129
618962928,,118
27482623,,113
193102121,,113
618810455,,108
45452832,,108
99729276,,105
319298306,,105
816445824,,101
45517334,,100
27481545,Valuoja org,96

[Successfully corrected]
2025-05-07 02:50:20 - Thread-258 (execute) - INFO - [Try to execute]
--Description: Sample a few point features and display their GEOGRAPHY form – verifies TO_GEOGRAPHY works fine.
SELECT  "osm_id",
        TO_GEOGRAPHY("geometry") AS pt_geo
FROM    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS"
WHERE   "geometry" IS NOT NULL
LIMIT   20
[Try to execute]
2025-05-07 02:50:21 - Thread-258 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Sample a few point features and display their GEOGRAPHY form – verifies TO_GEOGRAPHY works fine.
SELECT  "osm_id",
        TO_GEOGRAPHY("geometry") AS pt_geo
FROM    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS"
WHERE   "geometry" IS NOT NULL
LIMIT   20
Results:
osm_id,PT_GEO
8242788812,"{
  ""coordinates"": [
    2.060375160000000e+01,
    3.873374509999999e+01
  ],
  ""type"": ""Point""
}"
8242788756,"{
  ""coordinates"": [
    2.060160180000000e+01,
    3.873141300000000e+01
  ],
  ""type"": ""Point""
}"
8242788547,"{
  ""coordinates"": [
    2.060782930000000e+01,
    3.874128510000001e+01
  ],
  ""type"": ""Point""
}"
8242788727,"{
  ""coordinates"": [
    2.060303310000000e+01,
    3.873342430000000e+01
  ],
  ""type"": ""Point""
}"
824278865

[Successfully executed]
2025-05-07 02:50:21 - Thread-258 (execute) - INFO - [Try to execute]
--Description: Count points inside EACH multipolygon that intersects Estonia (wikidata = Q191) and lacks a wikidata tag; return top-20.
WITH q191 AS (                                   -- Estonia geometry
        SELECT TO_GEOGRAPHY(pf."geometry") AS geo
        FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
               LATERAL FLATTEN(input => pf."all_tags") wd
        WHERE  pf."feature_type" = 'multipolygons'
          AND  wd.value:"key"::STRING   = 'wikidata'
          AND  wd.value:"value"::STRING = 'Q191'
        LIMIT 1
), cand AS (                                     -- intersecting polygons without wikidata
        SELECT DISTINCT
               pf."osm_way_id" ,
               TO_GEOGRAPHY(pf."geometry") AS geo ,
               MAX(IFF(t.value:"key"::STRING = 'name',           -- grab “name” tag
                       t.value:"value"::STRING, NULL))
                 OVER (PARTITION BY pf."osm_way_id") AS name
        FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
               q191 ,
               LATERAL FLATTEN(input => pf."all_tags") t
        WHERE  pf."feature_type" = 'multipolygons'
          AND  ST_INTERSECTS(q191.geo , TO_GEOGRAPHY(pf."geometry"))
        QUALIFY SUM(IFF(t.value:"key"::STRING = 'wikidata',1,0))
                OVER (PARTITION BY pf."osm_way_id") = 0
)
SELECT  c."osm_way_id",
        COALESCE(c.name,'(no name)')               AS name,
        COUNT(*)                                   AS inside_point_count
FROM    cand c
JOIN    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS" p
          ON ST_CONTAINS(c.geo , TO_GEOGRAPHY(p."geometry"))
GROUP BY c."osm_way_id", c.name
ORDER BY inside_point_count DESC
LIMIT 20
[Try to execute]
2025-05-07 02:50:32 - Thread-258 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Count points inside EACH multipolygon that intersects Estonia (wikidata = Q191) and lacks a wikidata tag; return top-20.
WITH q191 AS (                                   -- Estonia geometry
        SELECT TO_GEOGRAPHY(pf."geometry") AS geo
        FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
               LATERAL FLATTEN(input => pf."all_tags") wd
        WHERE  pf."feature_type" = 'multipolygons'
          AND  wd.value:"key"::STRING   = 'wikidata'
          AND  wd.value:"value"::STRING = 'Q191'
        LIMIT 1
), cand AS (                                     -- intersecting polygons without wikidata
        SELECT DISTINCT
               pf."osm_way_id" ,
               TO_GEOGRAPHY(pf."geometry") AS geo ,
               MAX(IFF(t.value:"key"::STRING = 'name',           -- grab “name” tag
                       t.value:"value"::STRING, NULL))
                 OVER (PARTITION BY pf."osm_way_id") AS name
        FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
               q191 ,
               LATERAL FLATTEN(input => pf."all_tags") t
        WHERE  pf."feature_type" = 'multipolygons'
          AND  ST_INTERSECTS(q191.geo , TO_GEOGRAPHY(pf."geometry"))
        QUALIFY SUM(IFF(t.value:"key"::STRING = 'wikidata',1,0))
                OVER (PARTITION BY pf."osm_way_id") = 0
)
SELECT  c."osm_way_id",
        COALESCE(c.name,'(no name)')               AS name,
        COUNT(*)                                   AS inside_point_count
FROM    cand c
JOIN    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS" p
          ON ST_CONTAINS(c.geo , TO_GEOGRAPHY(p."geometry"))
GROUP BY c."osm_way_id", c.name
ORDER BY inside_point_count DESC
LIMIT 20
Results:
osm_way_id,NAME,INSIDE_POINT_COUNT
679451224,Viljandi linna muinsuskaitseala,2013
45452606,(no name),1554
45452841,(no name),1366
180939774,(no name),1218
73903261,(no name),659
653438746,Lossipark,484
45553221,(no name),205
45462066,(no name),197
83052075,(no name),170
45517321,(no name),129
618962928,(no name),118
27482623,(no name),113
193102121,(no name),113
45452832,(no name),108
618810455,(no name),108
319298306,(no name),105
99729276,(no name),105

[Successfully executed]
2025-05-07 02:50:32 - Thread-258 (execute) - INFO - [Try to execute]
--Description: Extract the TOP-2 multipolygons (by contained-point count) that meet the criteria and show their names & counts.
WITH q191 AS (
        SELECT TO_GEOGRAPHY(pf."geometry") AS geo
        FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
               LATERAL FLATTEN(input => pf."all_tags") wd
        WHERE  pf."feature_type"='multipolygons'
          AND  wd.value:"key"::STRING='wikidata'
          AND  wd.value:"value"::STRING='Q191'
        LIMIT 1
), cand AS (                                      -- polygons intersecting Estonia w/ no wikidata
        SELECT DISTINCT
               pf."osm_way_id",
               TO_GEOGRAPHY(pf."geometry") AS geo,
               MAX(IFF(t.value:"key"::STRING='name',
                       t.value:"value"::STRING,NULL))
               OVER (PARTITION BY pf."osm_way_id") AS name
        FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
               q191 ,
               LATERAL FLATTEN(input => pf."all_tags") t
        WHERE  pf."feature_type"='multipolygons'
          AND  ST_INTERSECTS(q191.geo , TO_GEOGRAPHY(pf."geometry"))
        QUALIFY SUM(IFF(t.value:"key"::STRING='wikidata',1,0))
                OVER (PARTITION BY pf."osm_way_id") = 0
), ranked AS (
        SELECT  c."osm_way_id",
                COALESCE(c.name,'(no name)') AS name,
                COUNT(*)                     AS inside_point_count,
                ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS rn
        FROM    cand c
        JOIN    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS" p
                ON ST_CONTAINS(c.geo , TO_GEOGRAPHY(p."geometry"))
        GROUP BY c."osm_way_id", c.name
)
SELECT  "osm_way_id",
        name,
        inside_point_count
FROM    ranked
WHERE   rn <= 2
ORDER BY inside_point_count DESC
[Try to execute]
2025-05-07 02:50:43 - Thread-258 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Extract the TOP-2 multipolygons (by contained-point count) that meet the criteria and show their names & counts.
WITH q191 AS (
        SELECT TO_GEOGRAPHY(pf."geometry") AS geo
        FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
               LATERAL FLATTEN(input => pf."all_tags") wd
        WHERE  pf."feature_type"='multipolygons'
          AND  wd.value:"key"::STRING='wikidata'
          AND  wd.value:"value"::STRING='Q191'
        LIMIT 1
), cand AS (                                      -- polygons intersecting Estonia w/ no wikidata
        SELECT DISTINCT
               pf."osm_way_id",
               TO_GEOGRAPHY(pf."geometry") AS geo,
               MAX(IFF(t.value:"key"::STRING='name',
                       t.value:"value"::STRING,NULL))
               OVER (PARTITION BY pf."osm_way_id") AS name
        FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
               q191 ,
               LATERAL FLATTEN(input => pf."all_tags") t
        WHERE  pf."feature_type"='multipolygons'
          AND  ST_INTERSECTS(q191.geo , TO_GEOGRAPHY(pf."geometry"))
        QUALIFY SUM(IFF(t.value:"key"::STRING='wikidata',1,0))
                OVER (PARTITION BY pf."osm_way_id") = 0
), ranked AS (
        SELECT  c."osm_way_id",
                COALESCE(c.name,'(no name)') AS name,
                COUNT(*)                     AS inside_point_count,
                ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS rn
        FROM    cand c
        JOIN    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS" p
                ON ST_CONTAINS(c.geo , TO_GEOGRAPHY(p."geometry"))
        GROUP BY c."osm_way_id", c.name
)
SELECT  "osm_way_id",
        name,
        inside_point_count
FROM    ranked
WHERE   rn <= 2
ORDER BY inside_point_count DESC
Results:
osm_way_id,NAME,INSIDE_POINT_COUNT
679451224,Viljandi linna muinsuskaitseala,2013
45452606,(no name),1554

[Successfully executed]
2025-05-07 02:50:43 - Thread-258 (execute) - INFO - [Try to execute]
--Description: Show the full tag-set for the two top-ranked multipolygons to confirm they have no wikidata tag.
WITH top2 AS (                                     -- reuse ranking logic
        SELECT  r."osm_way_id"
        FROM   (
               SELECT  c."osm_way_id",
                       COUNT(*) AS cnt,
                       ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) rn
               FROM   (
                       SELECT DISTINCT
                              pf."osm_way_id",
                              TO_GEOGRAPHY(pf."geometry") AS geo
                       FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
                              LATERAL FLATTEN(input => pf."all_tags") t
                       WHERE  pf."feature_type"='multipolygons'
                         AND  SUM(IFF(t.value:"key"::STRING='wikidata',1,0))
                              OVER (PARTITION BY pf."osm_way_id") = 0
                     ) c
               JOIN   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS" p
                      ON ST_CONTAINS(c.geo , TO_GEOGRAPHY(p."geometry"))
               GROUP BY c."osm_way_id"
              ) r
        WHERE  rn <= 2
)
SELECT  pf."osm_way_id",
        tag.value:"key"::STRING   AS tag_key,
        tag.value:"value"::STRING AS tag_value
FROM    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf
JOIN    top2 t
  ON    pf."osm_way_id" = t."osm_way_id",
        LATERAL FLATTEN(input => pf."all_tags") tag
ORDER BY pf."osm_way_id", tag_key
[Try to execute]
2025-05-07 02:50:43 - Thread-258 (execute) - INFO - [Error occurred]
{'status': 'error', 'error_msg': '##ERROR##002063 (42601): SQL compilation error:\nWindow function [SUM(IFF((CAST(GET(T.VALUE, \'key\') AS VARCHAR(134217728))) = \'wikidata\', 1, 0)) OVER (PARTITION BY PF."osm_way_id")] appears outside of SELECT, QUALIFY, and ORDER BY clauses.'}
[Error occurred]
2025-05-07 02:55:35 - Thread-258 (execute) - INFO - [Corrected SQL]
```sql
--Description:
-- Purpose: list every tag (key/value) for the two multipolygons that
--          (a) intersect Estonia (wikidata = ‘Q191’),
--          (b) contain NO ‘wikidata’ tag themselves, and
--          (c) have the highest counts of enclosed point-features.
-- Reasoning steps
--   1. q191   – obtain Estonia’s geometry by flattening its tag array and
--               filtering key = 'wikidata' / value = 'Q191'.
--   2. cand   – keep each multipolygon whose geometry ST_INTERSECTS q191.geo
--               and QUALIFY that the window-sum of its own wikidata tags = 0
--               (avoids disallowed window use in WHERE).
--   3. ranked – spatially join those candidates with PLANET_FEATURES_POINTS
--               and rank them by point count.
--   4. top2   – take the two best-ranked polygons.
--   5. Final  – flatten the tag arrays of those two polygons to emit their
--               complete tag-sets.
WITH q191 AS (                                          -- Estonia geometry
      SELECT TO_GEOGRAPHY(pf."geometry") AS geo
      FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf,
             LATERAL FLATTEN(input => pf."all_tags") wd
      WHERE  pf."feature_type" = 'multipolygons'
        AND  wd.value:"key"::STRING   = 'wikidata'
        AND  wd.value:"value"::STRING = 'Q191'
      LIMIT 1
), cand AS (                                            -- polygons intersecting Estonia, w/o wikidata
      SELECT DISTINCT
             pf."osm_way_id",
             TO_GEOGRAPHY(pf."geometry") AS geo
      FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf,
             q191,
             LATERAL FLATTEN(input => pf."all_tags") t
      WHERE  pf."feature_type" = 'multipolygons'
        AND  ST_INTERSECTS(q191.geo , TO_GEOGRAPHY(pf."geometry"))
      QUALIFY SUM(IFF(t.value:"key"::STRING='wikidata',1,0))
              OVER (PARTITION BY pf."osm_way_id") = 0
), ranked AS (                                          -- rank by enclosed points
      SELECT  c."osm_way_id",
              COUNT(*)                               AS inside_point_count,
              ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS rn
      FROM    cand c
      JOIN    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS" p
              ON ST_CONTAINS(c.geo , TO_GEOGRAPHY(p."geometry"))
      GROUP BY c."osm_way_id"
), top2 AS (                                            -- top two polygons
      SELECT "osm_way_id"
      FROM   ranked
      WHERE  rn <= 2
)
SELECT  pf."osm_way_id",
        tag.value:"key"::STRING   AS tag_key,
        tag.value:"value"::STRING AS tag_value
FROM    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf
JOIN    top2
  ON    pf."osm_way_id" = top2."osm_way_id",
        LATERAL FLATTEN(input => pf."all_tags") tag
ORDER BY pf."osm_way_id", tag_key;
```
[Corrected SQL]
2025-05-07 02:55:50 - Thread-258 (execute) - INFO - [Results for corrected sql]
osm_way_id,TAG_KEY,TAG_VALUE
45452606,clc:code,111
45452606,clc:id,2
45452606,clc:year,2006
45452606,landuse,residential
45452606,source,"Corine Land Cover Estonia import, data:2006"
679451224,boundary,protected_area
679451224,heritage,2
679451224,heritage:operator,Muinsuskaitseamet
679451224,heritage:website,https://register.muinas.ee/public.php?menuID=monument&action=view&id=27010
679451224,historic,heritage
679451224,name,Viljandi linna muinsuskaitseala

[Results for corrected sql]
2025-05-07 02:57:13 - Thread-258 (execute) - INFO - [Corrected other sqls]
```sql
--Description: 
-- Show a few point-features that fall inside the single top-ranked multipolygon
-- (i.e., the polygon intersecting Estonia, lacking a wikidata tag, and enclosing
-- the greatest number of points).  Window functions appear only inside QUALIFY.
WITH q191 AS (                                            -- Estonia geometry
        SELECT TO_GEOGRAPHY(pf."geometry") AS geo
        FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
               LATERAL FLATTEN(input => pf."all_tags") wd
        WHERE  pf."feature_type" = 'multipolygons'
          AND  wd.value:"key"::STRING   = 'wikidata'
          AND  wd.value:"value"::STRING = 'Q191'
        LIMIT 1
), cand AS (                                              -- polygons intersecting Estonia, no wikidata
        SELECT DISTINCT
               pf."osm_way_id",
               TO_GEOGRAPHY(pf."geometry") AS geo
        FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
               q191 ,
               LATERAL FLATTEN(input => pf."all_tags") t
        WHERE  pf."feature_type" = 'multipolygons'
          AND  ST_INTERSECTS(q191.geo , TO_GEOGRAPHY(pf."geometry"))
        QUALIFY SUM(IFF(t.value:"key"::STRING = 'wikidata',1,0))
                OVER (PARTITION BY pf."osm_way_id") = 0
), ranked AS (                                            -- rank by enclosed points
        SELECT  c."osm_way_id",
                COUNT(*) AS cnt,
                ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS rn
        FROM    cand c
        JOIN    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS" p
                ON ST_CONTAINS(c.geo , TO_GEOGRAPHY(p."geometry"))
        GROUP BY c."osm_way_id"
), top_poly AS (                                          -- geometry of the #1 polygon
        SELECT TO_GEOGRAPHY(pf."geometry") AS poly_geo
        FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf
        JOIN   ranked r
          ON   pf."osm_way_id" = r."osm_way_id"
        WHERE  r.rn = 1
)
SELECT  p."osm_id",
        p."geometry"
FROM    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS" p ,
        top_poly
WHERE   ST_CONTAINS(top_poly.poly_geo , TO_GEOGRAPHY(p."geometry"))
LIMIT   20;
```

```sql
--Description: 
-- Bounding box and surface area of the Estonia multipolygon (wikidata = Q191).
SELECT  ST_ENVELOPE(TO_GEOGRAPHY(pf."geometry")) AS q191_bbox,
        ST_AREA(    TO_GEOGRAPHY(pf."geometry")) AS q191_area_m2
FROM    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
        LATERAL FLATTEN(input => pf."all_tags") wd
WHERE   pf."feature_type" = 'multipolygons'
  AND   wd.value:"key"::STRING   = 'wikidata'
  AND   wd.value:"value"::STRING = 'Q191'
LIMIT 1;
```
[Corrected other sqls]
2025-05-07 02:57:13 - Thread-258 (execute) - INFO - [Successfully corrected]
Successfully corrected. SQL:
--Description:
-- Purpose: list every tag (key/value) for the two multipolygons that
--          (a) intersect Estonia (wikidata = ‘Q191’),
--          (b) contain NO ‘wikidata’ tag themselves, and
--          (c) have the highest counts of enclosed point-features.
-- Reasoning steps
--   1. q191   – obtain Estonia’s geometry by flattening its tag array and
--               filtering key = 'wikidata' / value = 'Q191'.
--   2. cand   – keep each multipolygon whose geometry ST_INTERSECTS q191.geo
--               and QUALIFY that the window-sum of its own wikidata tags = 0
--               (avoids disallowed window use in WHERE).
--   3. ranked – spatially join those candidates with PLANET_FEATURES_POINTS
--               and rank them by point count.
--   4. top2   – take the two best-ranked polygons.
--   5. Final  – flatten the tag arrays of those two polygons to emit their
--               complete tag-sets.
WITH q191 AS (                                          -- Estonia geometry
      SELECT TO_GEOGRAPHY(pf."geometry") AS geo
      FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf,
             LATERAL FLATTEN(input => pf."all_tags") wd
      WHERE  pf."feature_type" = 'multipolygons'
        AND  wd.value:"key"::STRING   = 'wikidata'
        AND  wd.value:"value"::STRING = 'Q191'
      LIMIT 1
), cand AS (                                            -- polygons intersecting Estonia, w/o wikidata
      SELECT DISTINCT
             pf."osm_way_id",
             TO_GEOGRAPHY(pf."geometry") AS geo
      FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf,
             q191,
             LATERAL FLATTEN(input => pf."all_tags") t
      WHERE  pf."feature_type" = 'multipolygons'
        AND  ST_INTERSECTS(q191.geo , TO_GEOGRAPHY(pf."geometry"))
      QUALIFY SUM(IFF(t.value:"key"::STRING='wikidata',1,0))
              OVER (PARTITION BY pf."osm_way_id") = 0
), ranked AS (                                          -- rank by enclosed points
      SELECT  c."osm_way_id",
              COUNT(*)                               AS inside_point_count,
              ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS rn
      FROM    cand c
      JOIN    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS" p
              ON ST_CONTAINS(c.geo , TO_GEOGRAPHY(p."geometry"))
      GROUP BY c."osm_way_id"
), top2 AS (                                            -- top two polygons
      SELECT "osm_way_id"
      FROM   ranked
      WHERE  rn <= 2
)
SELECT  pf."osm_way_id",
        tag.value:"key"::STRING   AS tag_key,
        tag.value:"value"::STRING AS tag_value
FROM    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf
JOIN    top2
  ON    pf."osm_way_id" = top2."osm_way_id",
        LATERAL FLATTEN(input => pf."all_tags") tag
ORDER BY pf."osm_way_id", tag_key;
Results:
osm_way_id,TAG_KEY,TAG_VALUE
45452606,clc:code,111
45452606,clc:id,2
45452606,clc:year,2006
45452606,landuse,residential
45452606,source,"Corine Land Cover Estonia import, data:2006"
679451224,boundary,protected_area
679451224,heritage,2
679451224,heritage:operator,Muinsuskaitseamet
679451224,heritage:website,https://register.muinas.ee/public.php?menuID=monument&action=view&id=27010
679451224,historic,heritage
679451224,name,Viljandi linna muinsuskaitseala

[Successfully corrected]
2025-05-07 02:57:13 - Thread-258 (execute) - INFO - [Try to execute]
--Description: 
-- Show a few point-features that fall inside the single top-ranked multipolygon
-- (i.e., the polygon intersecting Estonia, lacking a wikidata tag, and enclosing
-- the greatest number of points).  Window functions appear only inside QUALIFY.
WITH q191 AS (                                            -- Estonia geometry
        SELECT TO_GEOGRAPHY(pf."geometry") AS geo
        FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
               LATERAL FLATTEN(input => pf."all_tags") wd
        WHERE  pf."feature_type" = 'multipolygons'
          AND  wd.value:"key"::STRING   = 'wikidata'
          AND  wd.value:"value"::STRING = 'Q191'
        LIMIT 1
), cand AS (                                              -- polygons intersecting Estonia, no wikidata
        SELECT DISTINCT
               pf."osm_way_id",
               TO_GEOGRAPHY(pf."geometry") AS geo
        FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
               q191 ,
               LATERAL FLATTEN(input => pf."all_tags") t
        WHERE  pf."feature_type" = 'multipolygons'
          AND  ST_INTERSECTS(q191.geo , TO_GEOGRAPHY(pf."geometry"))
        QUALIFY SUM(IFF(t.value:"key"::STRING = 'wikidata',1,0))
                OVER (PARTITION BY pf."osm_way_id") = 0
), ranked AS (                                            -- rank by enclosed points
        SELECT  c."osm_way_id",
                COUNT(*) AS cnt,
                ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS rn
        FROM    cand c
        JOIN    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS" p
                ON ST_CONTAINS(c.geo , TO_GEOGRAPHY(p."geometry"))
        GROUP BY c."osm_way_id"
), top_poly AS (                                          -- geometry of the #1 polygon
        SELECT TO_GEOGRAPHY(pf."geometry") AS poly_geo
        FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf
        JOIN   ranked r
          ON   pf."osm_way_id" = r."osm_way_id"
        WHERE  r.rn = 1
)
SELECT  p."osm_id",
        p."geometry"
FROM    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS" p ,
        top_poly
WHERE   ST_CONTAINS(top_poly.poly_geo , TO_GEOGRAPHY(p."geometry"))
LIMIT   20
[Try to execute]
2025-05-07 02:57:26 - Thread-258 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 
-- Show a few point-features that fall inside the single top-ranked multipolygon
-- (i.e., the polygon intersecting Estonia, lacking a wikidata tag, and enclosing
-- the greatest number of points).  Window functions appear only inside QUALIFY.
WITH q191 AS (                                            -- Estonia geometry
        SELECT TO_GEOGRAPHY(pf."geometry") AS geo
        FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
               LATERAL FLATTEN(input => pf."all_tags") wd
        WHERE  pf."feature_type" = 'multipolygons'
          AND  wd.value:"key"::STRING   = 'wikidata'
          AND  wd.value:"value"::STRING = 'Q191'
        LIMIT 1
), cand AS (                                              -- polygons intersecting Estonia, no wikidata
        SELECT DISTINCT
               pf."osm_way_id",
               TO_GEOGRAPHY(pf."geometry") AS geo
        FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
               q191 ,
               LATERAL FLATTEN(input => pf."all_tags") t
        WHERE  pf."feature_type" = 'multipolygons'
          AND  ST_INTERSECTS(q191.geo , TO_GEOGRAPHY(pf."geometry"))
        QUALIFY SUM(IFF(t.value:"key"::STRING = 'wikidata',1,0))
                OVER (PARTITION BY pf."osm_way_id") = 0
), ranked AS (                                            -- rank by enclosed points
        SELECT  c."osm_way_id",
                COUNT(*) AS cnt,
                ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS rn
        FROM    cand c
        JOIN    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS" p
                ON ST_CONTAINS(c.geo , TO_GEOGRAPHY(p."geometry"))
        GROUP BY c."osm_way_id"
), top_poly AS (                                          -- geometry of the #1 polygon
        SELECT TO_GEOGRAPHY(pf."geometry") AS poly_geo
        FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf
        JOIN   ranked r
          ON   pf."osm_way_id" = r."osm_way_id"
        WHERE  r.rn = 1
)
SELECT  p."osm_id",
        p."geometry"
FROM    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS" p ,
        top_poly
WHERE   ST_CONTAINS(top_poly.poly_geo , TO_GEOGRAPHY(p."geometry"))
LIMIT   20
Results:
osm_id,geometry
5434805833,bytearray(b'\x01\x01\x00\x00\x00\xabu\xe2r\xbc\x989@;\x1dm\xc1\xf7-M@')
1996894579,bytearray(b'\x01\x01\x00\x00\x00A\xbe\xdf\xc3\x80\x9a9@\x94\xee\xf8@<.M@')
306980045,bytearray(b'\x01\x01\x00\x00\x00\xdf\xd2{t4\x989@V\xbb&\xa45.M@')
5434760196,bytearray(b'\x01\x01\x00\x00\x00\x86\xb1\xe0\xd9y\x989@\xf3\x1c\x91\xefR.M@')
2849868444,bytearray(b'\x01\x01\x00\x00\x00{k\x05\xf2\x91\x999@i\x8d\x9c\xe0\xf6-M@')
301773596,"bytearray(b'\x01\x01\x00\x00\x00\xfb2b\xb0,\x98

[Successfully executed]
2025-05-07 02:57:26 - Thread-258 (execute) - INFO - [Try to execute]
--Description: 
-- Bounding box and surface area of the Estonia multipolygon (wikidata = Q191).
SELECT  ST_ENVELOPE(TO_GEOGRAPHY(pf."geometry")) AS q191_bbox,
        ST_AREA(    TO_GEOGRAPHY(pf."geometry")) AS q191_area_m2
FROM    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
        LATERAL FLATTEN(input => pf."all_tags") wd
WHERE   pf."feature_type" = 'multipolygons'
  AND   wd.value:"key"::STRING   = 'wikidata'
  AND   wd.value:"value"::STRING = 'Q191'
LIMIT 1
[Try to execute]
2025-05-07 02:57:27 - Thread-258 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 
-- Bounding box and surface area of the Estonia multipolygon (wikidata = Q191).
SELECT  ST_ENVELOPE(TO_GEOGRAPHY(pf."geometry")) AS q191_bbox,
        ST_AREA(    TO_GEOGRAPHY(pf."geometry")) AS q191_area_m2
FROM    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
        LATERAL FLATTEN(input => pf."all_tags") wd
WHERE   pf."feature_type" = 'multipolygons'
  AND   wd.value:"key"::STRING   = 'wikidata'
  AND   wd.value:"value"::STRING = 'Q191'
LIMIT 1
Results:
Q191_BBOX,Q191_AREA_M2
"{
  ""coordinates"": [
    [
      [
        2.138260689999997e+01,
        5.750929969999994e+01
      ],
      [
        2.821001750000003e+01,
        5.750929969999994e+01
      ],
      [
        2.821001750000003e+01,
        5.993837540000006e+01
      ],
      [
        2.138260689999997e+01,
        5.993837540000006e+01
      ],
      [
        2.138260689999997e+01,
        5.750929969999994e+01
      ]
    ]
  ],
  ""type"": ""Polygon""
}",70109039870.71025

[Successfully executed]
2025-05-07 02:57:27 - Thread-258 (execute) - INFO - itercount: 0
2025-05-07 02:57:27 - Thread-258 (execute) - INFO - [Self-refine]
Table full name: GEO_OPENSTREETMAP.GEO_OPENSTREETMAP.HISTORY_RELATIONS
Column name: username Type: TEXT
Column name: members Type: VARIANT
Column name: osm_timestamp Type: NUMBER
Column name: id Type: NUMBER
Column name: visible Type: BOOLEAN
Column name: version Type: NUMBER
Column name: geometry Type: BINARY
Column name: all_tags Type: VARIANT
Column name: changeset Type: NUMBER
Sample rows:
[{'id': 5426265, 'version': 11, 'username': 'Stylez995', 'changeset': 93021604, 'visible': True, 'osm_timestamp': 1603643356000000, 'geometry': 'bytearray(b\'\\x01\\x05\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x01\\x02\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\xcd\\xde\\x08A\\xfd\\x91%@\\x8d5\\xb7\\x9d\\x11\\xf9M@\\xe0"\\x9c\\xbb\\x02\\x92%@\\xb7\\xee\\xe6\\xa9\\x0e\\xf9M@g\\xb6\\xf2\\x92\\xff\\x91%@R\\xb3\\xac\\xa0\\x0e\\xf9M@\\xa3\\xb3\\x82\\x95\\xf9\\x91%@\\x96?\\x95\\x89\\x11\\xf9M@\\xcd\\xde\\x08A\\xfd\\x91%@\\x8d5\\xb7\\x9d\\x11\\xf9M@\\x01\\x02\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\\'\\xc2\\x86\\xa7W\\x8e%@\\xcd\\x12S\\xd8\\xfb\\xf8M@\\x16X\\x11\\x7f^\\x8e%@\\x02&\\x152\\xfc\\xf8M@\\xbbd\\xc1if\\x8e%@79\\xd7\\x8b\\xfc\\xf8M@\\x83LT\\xca\\xc6\\x8e%@=\\x04Dw\\xff\\xf8M@\\xbdO\\xfa\\xe7\\x0e\\x8f%@\\x1dA\\x85~\\x01\\xf9M@\\x01\\x02\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\xce@\\x1bo\\xe1\\x8f%@\\xfb\\xcdz\\xe7\\x06\\xf9M@\\xdb\\xf9E\\t\\xfa\\x8f%@\\xf4\\x80\\xd4\\x81\\x07\\xf9M@\\xb6-Y\\x9a\\x06\\x90%@\\x08S\\x96\\xdd\\x07\\xf9M@\\x0f\\xed\\x08LL\\x90%@;Ut\\xda\\t\\xf9M@\\xc7\\x15r\\x00X\\x90%@\\xb2)\\xb21\\n\\xf9M@\\x01\\x02\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\xf8\\x95\\xbd[\\x0f\\x91%@)Hlw\\x0f\\xf9M@p\\x01h\\x94.\\x91%@\\x85\\x92$c\\x10\\xf9M@\\x10y\\xcb\\xd5\\x8f\\x91%@\\x7f%\\xa1>\\x13\\xf9M@m\\x04\\x98\\xe8\\xe2\\x91%@\\x19\\xf8\\x9b\\x9a\\x15\\xf9M@+\\xe7A0\\xfd\\x91%@\\xad\\x9d\\xcdO\\x16\\xf9M@\\xe3bV9\\xfe\\x91%@\\xcaZT\\xd5\\x15\\xf9M@\\x9cc\\xe5<\\x08\\x92%@^\\x89@\\xf5\\x0f\\xf9M@\\x01\\x02\\x00\\x00\\x00\\x03\\x02\\x00\\x00\\x10O\\x1bz0\\xd2I@\\xb1\\x1c|\\xbc\\xeb?H@d\\xff\\xf2\\x7f\\xfd\\xd1I@\\xa6\\x03\\xa3\\xdc\\xc7?H@\\xcb\\xe6\\xbb\\xa5\\xe6\\xd1I@\\xc4\\xaf\\xb3|\\xb8?H@\\xf4Z\\x03\\xeeD\\xd2I@\\x1bS\\xce\\xd1M@H@\\xfc8\\x9a#+\\xd3I@X\\xc5vR\\xbaAH@\\x8f\\\\H\\xd1\\x14\\xd3I@\\xf3\\xf7\\xad1CAH@\\x1ar\\xd8"\\x0e\\xd3I@\\x13\\x81\\xa0\\x92)AH@\\xa3\\xe4\\xd59\\x06\\xd3I@\\xe7\\xe8L5\\x0eAH@\\x8b72\\x8f\\xfc\\xd2I@\\x18\\x17\\xb3\\xca\\xf1@H@|\\xb6\\x0e\\x0e\\xf6\\xd2I@\\x05F\\xa8c\\xdf@H@\\x07\\xb2\\xf9\\x13\\xf0\\xd2I@0\\x02\\xcfb\\xce@H@\\xff\\xb9\\xc3\\x81\\xeb\\xd2I@/\\xdf\\xb0#\\xc4@H@\\xf4Z\\x03\\xeeD\\xd2I@\\x1bS\\xce\\xd1M@H@v\\x1b\\x8a\\xf1P\\xd0I@Qv\\x9f\\x88\\xea>H@\\xfes\\xe2\\xbcI\\xd0I@\\xee\\xca\\xd3^\\xe9>H@ c\\xeeZB\\xd0I@\\x83\\xa4O\\xab\\xe8>H@<v\\xbcn\\xb6\\xcfI@(\\xf8\\xb7\\x15\\x0c?H@\\xff\\x06\\xed\\xd5\\xc7\\xcfI@t`9B\\x06?H@\\xf4\\xc126^\\xbbI@\\x12\\x06T\\xee\\xc1DH@\\xea|x\\x96\\xf4\\xa6I@\\xb0\\xabn\\x9a}JH@\\xe07\\xbe\\xf6\\x8a\\x92I@NQ\\x89F9PH@\\xd4\\xf2\\x03W!~I@\\xeb\\xf6\\xa3\\xf2\\xf4UH@\\xc9\\xadI\\xb7\\xb7iI@\\x88\\x9c\\xbe\\x9e\\xb0[H@\\xbfh\\x8f\\x17NUI@&B\\xd9JlaH@\\xb2#\\xd5w\\xe4@I@\\xc4\\xe7\\xf3\\xf6\\\'gH@\\xa8\\xde\\x1a\\xd8z,I@b\\x8d\\x0e\\xa3\\xe3lH@\\x9d\\x99`8\\x11\\x18I@\\x003)O\\x9frH@\\x92T\\xa6\\x98\\xa7\\x03I@\\x9d\\xd8C\\xfbZxH@\\x88\\x0f\\xec\\xf8=\\xefH@;~^\\xa7\\x16~H@}\\xca1Y\\xd4\\xdaH@\\xd8#yS\\xd2\\x83H@r\\x85w\\xb9j\\xc6H@v\\xc9\\x93\\xff\\x8d\\x89H@h@\\xbd\\x19\\x01\\xb2H@\\x14o\\xae\\xabI\\x8fH@]\\xfb\\x02z\\x97\\x9dH@\\xb2\\x14\\xc9W\\x05\\x95H@R\\xb6H\\xda-\\x89H@O\\xba\\xe3\\x03\\xc1\\x9aH@Gq\\x8e:\\xc4tH@\\xec_\\xfe\\xaf|\\xa0H@<,\\xd4\\x9aZ`H@\\x8a\\x05\\x19\\\\8\\xa6H@1\\xe7\\x19\\xfb\\xf0KH@(\\xab3\\x08\\xf4\\xabH@\\\'\\xa2_[\\x877H@\\xc6PN\\xb4\\xaf\\xb1H@\\x1c]\\xa5\\xbb\\x1d#H@d\\xf6h`k\\xb7H@\\x12\\x18\\xeb\\x1b\\xb4\\x0eH@\\x01\\x9c\\x83\\x0c\\\'\\xbdH@\\x07\\xd30|J\\xfaG@\\x9fA\\x9e\\xb8\\xe2\\xc2H@\\xfc\\x8dv\\xdc\\xe0\\xe5G@<\\xe7\\xb8d\\x9e\\xc8H@\\xf1H\\xbc<w\\xd1G@\\xd9\\x8c\\xd3\\x10Z\\xceH@\\xe6\\x03\\x02\\x9d\\r\\xbdG@x2\\xee\\xbc\\x15\\xd4H@\\xdc\\xbeG\\xfd\\xa3\\xa8G@\\x16\\xd8\\x08i\\xd1\\xd9H@\\xd1y\\x8d]:\\x94G@\\xb3}#\\x15\\x8d\\xdfH@\\xc64\\xd3\\xbd\\xd0\\x7fG@P#>\\xc1H\\xe5H@\\xbc\\xef\\x18\\x1egkG@\\xee\\xc8Xm\\x04\\xebH@\\xb1\\xaa^~\\xfdVG@\\x8cns\\x19\\xc0\\xf0H@\\xa7e\\xa4\\xde\\x93BG@*\\x14\\x8e\\xc5{\\xf6H@\\x9c \\xea>*.G@\\xc8\\xb9\\xa8q7\\xfcH@\\x90\\xdb/\\x9f\\xc0\\x19G@f_\\xc3\\x1d\\xf3\\x01I@\\x86\\x96u\\xffV\\x05G@\\x04\\x05\\xde\\xc9\\xae\\x07I@{Q\\xbb_\\xed\\xf0F@\\xa1\\xaa\\xf8uj\\rI@p\\x0c\\x01\\xc0\\x83\\xdcF@?P\\x13"&\\x13I@g\\xc7F \\x1a\\xc8F@\\xdc\\xf5-\\xce\\xe1\\x18I@\\\\\\x82\\x8c\\x80\\xb0\\xb3F@z\\x9bHz\\x9d\\x1eI@P=\\xd2\\xe0F\\x9fF@\\x18Ac&Y$I@E\\xf8\\x17A\\xdd\\x8aF@\\xb6\\xe6}\\xd2\\x14*I@:\\xb3]\\xa1svF@T\\x8c\\x98~\\xd0/I@/n\\xa3\\x01\\nbF@\\xf31\\xb3*\\x8c5I@%)\\xe9a\\xa0MF@\\x90\\xd7\\xcd\\xd6G;I@\\x19\\xe4.\\xc269F@,}\\xe8\\x82\\x03AI@\\r\\x9ft"\\xcd$F@\\xca"\\x03/\\xbfFI@\\x03Z\\xba\\x82c\\x10F@h\\xc8\\x1d\\xdbzLI@\\xf9\\x14\\x00\\xe3\\xf9\\xfbE@\\x06n8\\x876RI@\\xef\\xcfEC\\x90\\xe7E@\\xa4\\x13S3\\xf2WI@\\xe4\\x8a\\x8b\\xa3&\\xd3E@B\\xb9m\\xdf\\xad]I@\\xd9E\\xd1\\x03\\xbd\\xbeE@\\xe1^\\x88\\x8bicI@\\xce\\x00\\x17dS\\xaaE@}\\x04\\xa37%iI@\\xc4\\xbb\\\\\\xc4\\xe9\\x95E@\\x1a\\xaa\\xbd\\xe3\\xe0nI@\\xb8v\\xa2$\\x80\\x81E@\\xb8O\\xd8\\x8f\\x9ctI@\\xad1\\xe8\\x84\\x16mE@W\\xf5\\xf2;XzI@\\xa2\\xec-\\xe5\\xacXE@\\xf4\\x9a\\r\\xe8\\x13\\x80I@\\x98\\xa7sECDE@\\x92@(\\x94\\xcf\\x85I@\\x8cb\\xb9\\xa5\\xd9/E@/\\xe6B@\\x8b\\x8bI@\\x82\\x1d\\xff\\x05p\\x1bE@\\xcc\\x8b]\\xecF\\x91I@w\\xd8Df\\x06\\x07E@j1x\\x98\\x02\\x97I@l\\x93\\x8a\\xc6\\x9c\\xf2D@\\x08\\xd7\\x92D\\xbe\\x9cI@aN\\xd0&3\\xdeD@\\xa6|\\xad\\xf0y\\xa2I@W\\t\\x16\\x87\\xc9\\xc9D@E"\\xc8\\x9c5\\xa8I@L\\xc4[\\xe7_\\xb5D@\\xe1\\xc7\\xe2H\\xf1\\xadI@A\\x7f\\xa1G\\xf6\\xa0D@~m\\xfd\\xf4\\xac\\xb3I@7:\\xe7\\xa7\\x8c\\x8cD@\\x1c\\x13\\x18\\xa1h\\xb9I@,\\xf5,\\x08#xD@\\xba\\xb82M$\\xbfI@"\\xb0rh\\xb9cD@X^M\\xf9\\xdf\\xc4I@\\x16k\\xb8\\xc8OOD@\\xf7\\x03h\\xa5\\x9b\\xcaI@\\x0c&\\xfe(\\xe6:D@\\x93\\xa9\\x82QW\\xd0I@\\x02\\xe1C\\x89|&D@0O\\x9d\\xfd\\x12\\xd6I@\\xf6\\x9b\\x89\\xe9\\x12\\x12D@\\xce\\xf4\\xb7\\xa9\\xce\\xdbI@\\xebV\\xcfI\\xa9\\xfdC@l\\x9a\\xd2U\\x8a\\xe1I@\\xe0\\x11\\x15\\xaa?\\xe9C@\\n@\\xed\\x01F\\xe7I@\\xd5\\xccZ\\n\\xd6\\xd4C@\\xa9\\xe5\\x07\\xae\\x01\\xedI@\\xca\\x87\\xa0jl\\xc0C@D\\x8b"Z\\xbd\\xf2I@\\xbfB\\xe6\\xca\\x02\\xacC@\\xe20=\\x06y\\xf8I@\\xb4\\xfd++\\x99\\x97C@\\x80\\xd6W\\xb24\\xfeI@\\xa9\\xb8q\\x8b/\\x83C@\\x1e|r^\\xf0\\x03J@\\x9fs\\xb7\\xeb\\xc5nC@\\xbd!\\x8d\\n\\xac\\tJ@\\x94.\\xfdK\\\\ZC@Z\\xc7\\xa7\\xb6g\\x0fJ@\\x8a\\xe9B\\xac\\xf2EC@\\xf7l\\xc2b#\\x15J@\\x7f\\xa4\\x88\\x0c\\x891C@\\x96\\x12\\xdd\\x0e\\xdf\\x1aJ@t_\\xcel\\x1f\\x1dC@3\\xb8\\xf7\\xba\\x9a J@i\\x1a\\x14\\xcd\\xb5\\x08C@\\xd0]\\x12gV&J@^\\xd5Y-L\\xf4B@n\\x03-\\x13\\x12,J@S\\x90\\x9f\\x8d\\xe2\\xdfB@\\r\\xa9G\\xbf\\xcd1J@HK\\xe5\\xedx\\xcbB@\\xaaNbk\\x897J@=\\x06+N\\x0f\\xb7B@H\\xf4|\\x17E=J@2\\xc1p\\xae\\xa5\\xa2B@\\xe6\\x99\\x97\\xc3\\x00CJ@(|\\xb6\\x0e<\\x8eB@\\x84?\\xb2o\\xbcHJ@\\x1d7\\xfcn\\xd2yB@!\\xe5\\xcc\\x1bxNJ@\\x12\\xf2A\\xcfheB@\\xbe\\x8a\\xe7\\xc73TJ@\\x08\\xad\\x87/\\xffPB@\\\\0\\x02t\\xefYJ@\\xfdg\\xcd\\x8f\\x95<B@\\xfa\\xd5\\x1c \\xab_J@\\xf3"\\x13\\xf0+(B@\\x98{7\\xccfeJ@\\xe7\\xddXP\\xc2\\x13B@6!Rx"kJ@\\xdc\\x98\\x9e\\xb0X\\xffA@\\xd4\\xc6l$\\xdepJ@\\xd2S\\xe4\\x10\\xef\\xeaA@rl\\x87\\xd0\\x99vJ@\\xc7\\x0e*q\\x85\\xd6A@\\x0f\\x12\\xa2|U|J@\\xbc\\xc9o\\xd1\\x1b\\xc2A@\\xac\\xb7\\xbc(\\x11\\x82J@\\xb2\\x84\\xb51\\xb2\\xadA@J]\\xd7\\xd4\\xcc\\x87J@\\xa7?\\xfb\\x91H\\x99A@\\xe8\\x02\\xf2\\x80\\x88\\x8dJ@\\x9c\\xfa@\\xf2\\xde\\x84A@\\x86\\xa8\\x0c-D\\x93J@\\x91\\xb5\\x86RupA@$N\\\'\\xd9\\xff\\x98J@\\x86p\\xcc\\xb2\\x0b\\\\A@\\xc1\\xf3A\\x85\\xbb\\x9eJ@|+\\x12\\x13\\xa2GA@^\\x99\\\\1w\\xa4J@p\\xe6Ws83A@\\xfc>w\\xdd2\\xaaJ@f\\xa1\\x9d\\xd3\\xce\\x1eA@\\x9a\\xe4\\x91\\x89\\xee\\xafJ@\\\\\\\\\\xe33e\\nA@8\\x8a\\xac5\\xaa\\xb5J@Q\\x17)\\x94\\xfb\\xf5@@\\xd6/\\xc7\\xe1e\\xbbJ@F\\xd2n\\xf4\\x91\\xe1@@s\\xd5\\xe1\\x8d!\\xc1J@;\\x8d\\xb4T(\\xcd@@\\x10{\\xfc9\\xdd\\xc6J@0H\\xfa\\xb4\\xbe\\xb8@@\\xae \\x17\\xe6\\x98\\xccJ@&\\x03@\\x15U\\xa4@@M\\xc61\\x92T\\xd2J@\\x1b\\xbe\\x85u\\xeb\\x8f@@\\xeakL>\\x10\\xd8J@\\x10y\\xcb\\xd5\\x81{@@\\x88\\x11g\\xea\\xcb\\xddJ@\\x064\\x116\\x18g@@&\\xb7\\x81\\x96\\x87\\xe3J@\\xfb\\xeeV\\x96\\xaeR@@\\xc2\\\\\\x9cBC\\xe9J@\\xf0\\xa9\\x9c\\xf6D>@@`\\x02\\xb7\\xee\\xfe\\xeeJ@\\xe5d\\xe2V\\xdb)@@\\xfe\\xa7\\xd1\\x9a\\xba\\xf4J@\\xda\\x1f(\\xb7q\\x15@@\\x9cM\\xecFv\\xfaJ@\\xcf\\xdam\\x17\\x08\\x01@@:\\xf3\\x06\\xf31\\x00K@\\x88+g\\xef<\\xd9?@\\xd7\\x98!\\x9f\\xed\\x05K@t\\xa1\\xf2\\xafi\\xb0?@t><K\\xa9\\x0bK@^\\x17~p\\x96\\x87?@\\x12\\xe4V\\xf7d\\x11K@H\\x8d\\t1\\xc3^?@\\xb0\\x89q\\xa3 \\x17K@2\\x03\\x95\\xf1\\xef5?@N/\\x8cO\\xdc\\x1cK@\\x1ey \\xb2\\x1c\\r?@\\xec\\xd4\\xa6\\xfb\\x97"K@\\x07\\xef\\xabrI\\xe4>@\\x8az\\xc1\\xa7S(K@\\xf2d73v\\xbb>@( \\xdcS\\x0f.K@\\xdd\\xda\\xc2\\xf3\\xa2\\x92>@\\xc5\\xc5\\xf6\\xff\\xca3K@\\xc8PN\\xb4\\xcfi>@ak\\x11\\xac\\x869K@\\xb1\\xc6\\xd9t\\xfc@>@\\x00\\x11,XB?K@\\x9d<e5)\\x18>@\\x9e\\xb6F\\x04\\xfeDK@\\x85\\xb2\\xf0\\xf5U\\xef=@<\\\\a\\xb0\\xb9JK@o(|\\xb6\\x82\\xc6=@\\xda\\x01|\\\\uPK@[\\x9e\\x07w\\xaf\\x9d=@w\\xa7\\x96\\x081VK@E\\x14\\x937\\xdct=@\\x14M\\xb1\\xb4\\xec[K@/\\x8a\\x1e\\xf8\\x08L=@\\xb1\\xf2\\xcb`\\xa8aK@\\x19\\x00\\xaa\\xb85#=@P\\x98\\xe6\\x0cdgK@\\x05v5yb\\xfa<@\\xee=\\x01\\xb9\\x1fmK@\\xed\\xeb\\xc09\\x8f\\xd1<@\\x8c\\xe3\\x1be\\xdbrK@\\xd7aL\\xfa\\xbb\\xa8<@)\\x896\\x11\\x97xK@\\xc2\\xd7\\xd7\\xba\\xe8\\x7f<@\\xc6.Q\\xbdR~K@\\xacMc{\\x15W<@c\\xd4ki\\x0e\\x84K@\\x97\\xc3\\xee;B.<@\\x02z\\x86\\x15\\xca\\x89K@\\x839z\\xfcn\\x05<@\\xa0\\x1f\\xa1\\xc1\\x85\\x8fK@l\\xaf\\x05\\xbd\\x9b\\xdc;@>\\xc5\\xbbmA\\x95K@X%\\x91}\\xc8\\xb3;@\\xdbj\\xd6\\x19\\xfd\\x9aK@C\\x9b\\x1c>\\xf5\\x8a;@x\\x10\\xf1\\xc5\\xb8\\xa0K@-\\x11\\xa8\\xfe!b;@\\x15\\xb6\\x0brt\\xa6K@\\x15\\x873\\xbfN9;@\\xb4[&\\x1e0\\xacK@\\x01\\xfd\\xbe\\x7f{\\x10;@R\\x01A\\xca\\xeb\\xb1K@\\xecrJ@\\xa8\\xe7:@\\xf0\\xa6[v\\xa7\\xb7K@\\xd7\\xe8\\xd5\\x00\\xd5\\xbe:@\\x8dLv"c\\xbdK@\\xbe^a\\xc1\\x01\\x96:@*\\xf2\\x90\\xce\\x1e\\xc3K@\\xaa\\xd4\\xec\\x81.m:@\\xc9\\x97\\xabz\\xda\\xc8K@\\x94JxB[D:@f=\\xc6&\\x96\\xceK@\\x7f\\xc0\\x03\\x03\\x88\\x1b:@\\x04\\xe3\\xe0\\xd2Q\\xd4K@j6\\x8f\\xc3\\xb4\\xf29@\\xa2\\x88\\xfb~\\r\\xdaK@S\\xac\\x1a\\x84\\xe1\\xc99@@.\\x16+\\xc9\\xdfK@>"\\xa6D\\x0e\\xa19@\\xdf\\xd30\\xd7\\x84\\xe5K@(\\x981\\x05;x9@{yK\\x83@\\xebK@\\x12\\x0e\\xbd\\xc5gO9@\\x18\\x1ff/\\xfc\\xf0K@\\xfd\\x83H\\x86\\x94&
--------------------------------------------------
Table full name: GEO_OPENSTREETMAP.GEO_OPENSTREETMAP.HISTORY_CHANGESETS
Column name: osm_timestamp_min Type: NUMBER Description: Minimum timestamp of objects contained in this changeset.
Column name: ways Type: VARIANT Description: Ways that are part of this way
Column name: id Type: NUMBER Description: Changeset ID.
Column name: osm_timestamp_max Type: NUMBER Description: Maximum timestamp of objects contained in this changeset.
Column name: relations Type: VARIANT Description: Relations that are part of this way
Column name: nodes Type: VARIANT Description: Nodes that are part of this way
Sample rows:
[{'id': 30256461, 'osm_timestamp_min': 1429167998, 'osm_timestamp_max': 1429167998, 'relations': '[\n  2787405\n]', 'ways': '[]', 'nodes': '[]'}, {'id': 8254690, 'osm_timestamp_min': 1306424582, 'osm_timestamp_max': 1306424582, 'relations': '[\n  1573819\n]', 'ways': '[]', 'nodes': '[]'}, {'id': 12871634, 'osm_timestamp_min': 1346011892, 'osm_timestamp_max': 1346011894, 'relations': '[\n  186430\n]', 'ways': '[]', 'nodes': '[\n  171513871\n]'}, {'id': 33171592, 'osm_timestamp_min': 1438929466, 'osm_timestamp_max': 1438929466, 'relations': '[\n  5419230,\n  5419225\n]', 'ways': '[]', 'nodes': '[]'}, {'id': 65078513, 'osm_timestamp_min': 1543686864, 'osm_timestamp_max': 1543686864, 'relations': '[\n  9068338\n]', 'ways': '[]', 'nodes': '[]'}]
--------------------------------------------------
Table full name: GEO_OPENSTREETMAP.GEO_OPENSTREETMAP.PLANET_FEATURES
Column name: geometry Type: BINARY
Column name: osm_timestamp Type: NUMBER
Column name: all_tags Type: VARIANT
Column name: feature_type Type: TEXT
Column name: osm_version Type: NUMBER
Column name: osm_id Type: NUMBER
Column name: osm_way_id Type: NUMBER
Sample rows:
[{'feature_type': 'multipolygons', 'osm_id': None, 'osm_way_id': 839339694, 'osm_version': 1, 'osm_timestamp': 1598016026000000, 'all_tags': '[\n  {\n    "key": "landuse",\n    "value": "residential"\n  },\n  {\n    "key": "name",\n    "value": "شهرک امام زمان"\n  }\n]', 'geometry': "bytearray(b'\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x17\\x00\\x00\\x00\\\\2}e\\x94\\xdeI@\\xd1\\xb4\\xc4\\xcahX@@\\x12/O\\xe7\\x8a\\xdeI@\\xff\\t\\x89\\x0fGX@@\\x04JT\\xb9\\x9a\\xdeI@\\xb5\\x83\\x11\\xfb\\x04X@@\\x8c\\x8c\\xc4\\xba\\xa7\\xdeI@\\xe1\\xdbO!\\xb2W@@\\xc9\\xee\\xb8\\x97\\xea\\xdeI@\\xbc\\x9c\\x12\\x10\\x93W@@\\x1c\\x04\\xc2\\xf3\\xf7\\xdeI@i|\\x15\\xcf\\x8fW@@\\xab\\x1e\\xd5U&\\xdfI@\\xd8u\\xb9\\xd2|W@@\\xd4\\xf3n,(\\xdfI@\\x1f\\xf4lV}W@@+hZbe\\xdfI@\\x9b\\xf8\\xb4\\xd4\\x8bW@@:\\xe9}\\xe3k\\xdfI@\\x88\\x06\\x18L\\xb2W@@\\x82j(Z^\\xdfI@\\xc6\\x8a\\x1aL\\xc3W@@\\xb1\\xe1DO%\\xdfI@\\xbf\\xa5R\\xa2\\xdbW@@>\\xc3\\x8a\\t \\xdfI@\\x9a\\xb5\\x14\\x90\\xf6W@@L\\x05p\\x0e2\\xdfI@\\xf5td\\x9b\\nX@@\\x94lu9%\\xdfI@\\x891D\\xa9\\x18X@@K\\x83\\xec\\x06\\x1b\\xdfI@\\xf6\\xf4l\\xb16X@@\\xcew\\xf0\\x13\\x07\\xdfI@\\xac6\\xff\\xaf:X@@\\x12\\x18F\\xd5\\n\\xdfI@s\\xb2y\\xc1LX@@h\\x00o\\x81\\x04\\xdfI@\\\\\\x03[%XX@@\\x16\\xd1\\xc0\\xd9\\xf7\\xdeI@E\\xe4\\xaahbX@@\\xfd=\\xc2z\\xed\\xdeI@@6$IkX@@\\xb5\\xef\\x9b\\x0c\\xd8\\xdeI@\\x9c\\x18\\x92\\x93\\x89X@@\\\\2}e\\x94\\xdeI@\\xd1\\xb4\\xc4\\xcahX@@')"}, {'feature_type': 'multipolygons', 'osm_id': None, 'osm_way_id': 322227974, 'osm_version': 1, 'osm_timestamp': 1421329134000000, 'all_tags': '[\n  {\n    "key": "landuse",\n    "value": "farmyard"\n  },\n  {\n    "key": "name",\n    "value": "South Landridge Farm"\n  }\n]', 'geometry': 'bytearray(b\'\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x0b\\x00\\x00\\x00O\\xc2L\\xdb\\xbfB\\x0f\\xc0\\x16s!\\xa0\\x0c\\xeaK@A\\x96\\xaaY\\x0cC\\x0f\\xc0\\xccL\\x1fp\\x13\\xeaK@6\\xca\\x9f\\x14RC\\x0f\\xc0\\xbd\\x9a\\xf2\\xd7\\x1a\\xeaK@\\x96\\xa9\\xee6\\x14C\\x0f\\xc0Eg\\x99E(\\xeaK@N\\x10\\xd0\\xd8\\xf2E\\x0f\\xc0p\\xb6o\\xa4"\\xeaK@\\xbc2\\x14\\x1c\\x03G\\x0f\\xc0O\\xa4E\\xc7\\x1f\\xeaK@\\xde\\x01C\\xfb\\xfdG\\x0f\\xc0\\xa4\\xf6\\xc7 \\x1c\\xeaK@v|\\xb48cH\\x0f\\xc0\\xba_\\xf4\\xcb\\x16\\xeaK@\\xfbsv\\xd7~G\\x0f\\xc0\\xab\\xf8u\\x96\\x0f\\xeaK@\\xdd\\xca\\x12\\x9deF\\x0f\\xc0{=N\\x87\\x04\\xeaK@O\\xc2L\\xdb\\xbfB\\x0f\\xc0\\x16s!\\xa0\\x0c\\xeaK@\')'}, {'feature_type': 'multipolygons', 'osm_id': None, 'osm_way_id': 674038987, 'osm_version': 1, 'osm_timestamp': 1551519849000000, 'all_tags': '[\n  {\n    "key": "landuse",\n    "value": "residential"\n  },\n  {\n    "key": "name",\n    "value": "Cantura Cove"\n  }\n]', 'geometry': 'bytearray(b"\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\r\\x00\\x00\\x00\\xdf\\xe0\\x0b\\x93)$X\\xc0\\x9e\\xdat_)_@@\\xebl\\x12\\xcdM$X\\xc0\\xc6n\\x9fUf_@@\\xdfz\\x03\\x82o$X\\xc0`\\xb0\\x1b\\xb6-_@@\\x8eD\\xc3\\xbd\\x8d$X\\xc0\\x93+\\x06Y`_@@r@\\x01\\xca\\x95$X\\xc0jM\\xf3\\x8eS_@@8\\x881D\\xa9$X\\xc0J\\xeb\\xca\\xc22_@@)\\xd9\\xa0\\xe5\\xaf$X\\xc0\\x93z\\xaa\\x9e\\\'_@@\\xe2\\x80L!F$X\\xc0\\xf4\\xd5\\x9f\\x0eu^@@\\xb1\\x18u\\xad=$X\\xc0F\\x9d\\xb9\\x87\\x84^@@\\xc1\\xb3\\x9836$X\\xc0\\x98\\xe6\\x0c{\\x90^@@lb\\xdch[$X\\xc0\\xa7t\\xb0\\xfe\\xcf^@@\\xfb\\x8f\\xf1\\xcd[$X\\xc09\\xee\\x94\\x0e\\xd6^@@\\xdf\\xe0\\x0b\\x93)$X\\xc0\\x9e\\xdat_)_@@")'}, {'feature_type': 'multipolygons', 'osm_id': None, 'osm_way_id': 886660521, 'osm_version': 1, 'osm_timestamp': 1608467910000000, 'all_tags': '[\n  {\n    "key": "landuse",\n    "value": "farmyard"\n  },\n  {\n    "key": "name",\n    "value": "Craigspark"\n  }\n]', 'geometry': "bytearray(b'\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\t\\x00\\x00\\x00\\x0fi\\xaf\\x99\\xd7$\\x13\\xc0\\xe7\\xb0\\xfb\\x8e\\xe1\\xd5K@5\\xae$\\x1e\\xf5$\\x13\\xc0\\xb3\\x9bt\\xb6\\xdb\\xd5K@\\xed\\xa0\\xb7\\x1d\\xbf$\\x13\\xc0\\x82\\xa6\\xca\\x9c\\xd3\\xd5K@$\\xe6\\xa3\\xd6E#\\x13\\xc0\\xfe+\\xd0\\x93\\xd7\\xd5K@\\xdf`\\xb9\\xefb#\\x13\\xc0\\xbb\\x87:b\\xe3\\xd5K@\\xf1f\\xb2$\\xe5#\\x13\\xc0P\\xd1G\\xcf\\xe3\\xd5K@wV\\xc1^\\x17$\\x13\\xc0\\xfe)U\\xa2\\xec\\xd5K@F\\xfa\\xa3^\\xa6$\\x13\\xc0oU\\xc8K\\xed\\xd5K@\\x0fi\\xaf\\x99\\xd7$\\x13\\xc0\\xe7\\xb0\\xfb\\x8e\\xe1\\xd5K@')"}, {'feature_type': 'multipolygons', 'osm_id': None, 'osm_way_id': 456349582, 'osm_version': 1, 'osm_timestamp': 1480329992000000, 'all_tags': '[\n  {\n    "key": "landuse",\n    "value": "forest"\n  },\n  {\n    "key": "name",\n    "value": "Krughorst"\n  }\n]', 'geometry': 'bytearray(b\'\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x1b\\x00\\x00\\x00\\x95\\xf2Z\\t\\xdd\\xe1\\\'@G\\xa7S\\xc3#\\xc6J@\\xea\\x02\\xa8\\xf3\\xf2\\xe1\\\'@\\xcc*\\xc7\\xbf*\\xc6J@\\xee\\xca\\xd3^\\xe9\\xe1\\\'@G2P\\xbeE\\xc6J@\\xe1\\xe4\\xc8\\x14\\xbd\\xe1\\\'@\\xf6y19Z\\xc6J@\\x1a\\x93\\xb4\\xd1\\xef\\xe1\\\'@\\xe4E\\xcb&e\\xc6J@\\xe3\\xb3+\\xe3\\x95\\xe2\\\'@Ul\\xcc\\xeb\\x88\\xc6J@\\xc1E\\x82\\x04 \\xe1\\\'@g\\x9e\\xb7\\x0c\\x93\\xc6J@\\x89\\xe5;\\x9d\\xd0\\xe0\\\'@}\\x83\\xe5\\xbe\\x8b\\xc6J@\\xfa\\xf8:_\\xa2\\xe0\\\'@F3`\\xda\\x81\\xc6J@\\xbd3\\x7f\\xf1\\xb1\\xe0\\\'@\\xb1\\x92\\xea\\x96x\\xc6J@\\xd6\\xc2\\xd1\\xfa\\x00\\xe1\\\'@\\xf5Q\\xa1\\x15s\\xc6J@\\x02\\xab\\x8f,\\x05\\xe1\\\'@\\xc2\\x98>\\x85m\\xc6J@oX\\t\\xcc\\xf9\\xe0\\\'@\\xd0l\\r[i\\xc6J@\\xae\\xd8\\x04\\xbd\\xdc\\xe0\\\'@\\x8a\\xc6\\x7f&g\\xc6J@"\\xf5\\xe8W\\x84\\xe0\\\'@\\xbf\\x1b\\xc1|h\\xc6J@O\\xe4\\x93_P\\xe0\\\'@bg\\xaf\\xe3d\\xc6J@\\xec\\x07+\\x04(\\xe0\\\'@U:\\xb3\\xb8Z\\xc6J@\\xd9O\\x10\\x86K\\xe0\\\'@\\xe7\\xca\\xfb\\x93S\\xc6J@\\x95\\x03\\xe2\\x1aD\\xe0\\\'@`-\\xe3KM\\xc6J@\\xb8\\x1f\\x95\\x07\\x8e\\xe0\\\'@s\\xcb\\xa2\\x0bE\\xc6J@VV.\\xaf\\xb7\\xe0\\\'@\\xf5\\x0b\\x1b\\nD\\xc6J@d\\xc1\\xb3\\xf3\\xec\\xe0\\\'@B\\x13\\xbc|F\\xc6J@ \\x1b\\xed](\\xe1\\\'@\\x90\\x88)\\x91D\\xc6J@\\xd1\\xba\\xfc=g\\xe1\\\'@\\x1a\\xa3uT5\\xc6J@\\xdc\\xf6\\x98\\xa3"\\xe1\\\'@\\x01\\n?\\x82,\\xc6J@\\xb9\\xe0\\x0c\\xfe~\\xe1\\\'@\\xb9\\x00\\xd9\\x90$\\xc6J@\\x95\\xf2Z\\t\\xdd\\xe1\\\'@G\\xa7S\\xc3#\\xc6J@\')'}]
--------------------------------------------------
Table full name: GEO_OPENSTREETMAP.GEO_OPENSTREETMAP.PLANET_FEATURES_POINTS
Column name: geometry Type: BINARY
Column name: osm_timestamp Type: NUMBER
Column name: osm_way_id Type: NUMBER
Column name: osm_id Type: NUMBER
Column name: osm_version Type: NUMBER
Column name: all_tags Type: VARIANT
Sample rows:
[{'osm_id': 8242788622, 'osm_version': 1, 'osm_way_id': None, 'osm_timestamp': 1608386913000000, 'geometry': "bytearray(b'\\x01\\x01\\x00\\x00\\x00\\xef\\xa6\\xa5\\x03\\xa3\\x9a4@\\xfc\\xb4@q\\xb6^C@')", 'all_tags': '[\n  {\n    "key": "id",\n    "value": "1"\n  }\n]'}, {'osm_id': 8242788645, 'osm_version': 1, 'osm_way_id': None, 'osm_timestamp': 1608386913000000, 'geometry': "bytearray(b'\\x01\\x01\\x00\\x00\\x00\\xb6\\xb5\\x85\\xe7\\xa5\\x9a4@\\\\23\\xd8y^C@')", 'all_tags': '[\n  {\n    "key": "id",\n    "value": "1"\n  }\n]'}, {'osm_id': 8242788728, 'osm_version': 1, 'osm_way_id': None, 'osm_timestamp': 1608386913000000, 'geometry': "bytearray(b'\\x01\\x01\\x00\\x00\\x00S\\x1a\\xd6\\xf9\\\\\\x9a4@e&\\x07\\xa2\\xdd]C@')", 'all_tags': '[\n  {\n    "key": "id",\n    "value": "1"\n  }\n]'}, {'osm_id': 5336182396, 'osm_version': 1, 'osm_way_id': None, 'osm_timestamp': 1515821683000000, 'geometry': "bytearray(b'\\x01\\x01\\x00\\x00\\x00\\xc4\\xa4S\\xb2\\xf7\\xd3<@P\\n\\xa9\\x91L\\x9dD@')", 'all_tags': '[\n  {\n    "key": "MCC",\n    "value": "286"\n  },\n  {\n    "key": "communication:microwave",\n    "value": "yes"\n  },\n  {\n    "key": "communication:mobile_phone",\n    "value": "gsm;umts"\n  },\n  {\n    "key": "man_made",\n    "value": "mast"\n  },\n  {\n    "key": "source",\n    "value": "DigitalGlobe"\n  },\n  {\n    "key": "tower:type",\n    "value": "communication"\n  }\n]'}, {'osm_id': 7746621289, 'osm_version': 1, 'osm_way_id': None, 'osm_timestamp': 1595683421000000, 'geometry': "bytearray(b'\\x01\\x01\\x00\\x00\\x00\\xd3\\xa0h\\x1e\\xc0\\x1bI@\\x18\\x928\\xd0\\xe8O:@')", 'all_tags': '[\n  {\n    "key": "atm",\n    "value": "yes"\n  }\n]'}]
--------------------------------------------------
Table full name: GEO_OPENSTREETMAP.GEO_OPENSTREETMAP.HISTORY_LAYERS
Column name: osm_id Type: NUMBER
Column name: layer_name Type: TEXT
Column name: all_tags Type: VARIANT
Column name: osm_way_id Type: NUMBER
Column name: geometry Type: BINARY
Column name: gdal_type Type: TEXT
Column name: layer_code Type: NUMBER
Column name: osm_timestamp Type: NUMBER
Column name: osm_version Type: NUMBER
Column name: layer_class Type: TEXT
Sample rows:
[{'layer_code': 1500, 'layer_class': 'building', 'layer_name': 'building', 'osm_id': 295106180, 'osm_way_id': 295106180, 'osm_timestamp': 1492347889000000, 'osm_version': 2, 'all_tags': '[\n  {\n    "key": "building",\n    "value": "house"\n  },\n  {\n    "key": "addr:city",\n    "value": "Rawa Mazowiecka"\n  },\n  {\n    "key": "addr:street",\n    "value": "Aleksandrówka"\n  },\n  {\n    "key": "source:addr",\n    "value": "mrawamazowiecka.e-mapa.net"\n  },\n  {\n    "key": "addr:postcode",\n    "value": "96-200"\n  },\n  {\n    "key": "addr:city:simc",\n    "value": "0977077"\n  },\n  {\n    "key": "addr:housenumber",\n    "value": "11"\n  },\n  {\n    "key": "addr:street:sym_ul",\n    "value": "00228"\n  }\n]', 'geometry': "bytearray(b'\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x05\\x00\\x00\\x00S\\x94K\\xe3\\x17F4@U\\x84\\xe5\\x19E\\xe2I@i\\xa7\\x8b\\xb9\\x10F4@\\xa7\\xd0/\\x00C\\xe2I@\\xacO\\xdel\\x18F4@\\xba\\xd1\\xc7|@\\xe2I@\\x97<\\x9e\\x96\\x1fF4@\\xfbDT\\x97B\\xe2I@S\\x94K\\xe3\\x17F4@U\\x84\\xe5\\x19E\\xe2I@')", 'gdal_type': None}, {'layer_code': 1500, 'layer_class': 'building', 'layer_name': 'building', 'osm_id': 295106194, 'osm_way_id': 295106194, 'osm_timestamp': 1492347962000000, 'osm_version': 2, 'all_tags': '[\n  {\n    "key": "building",\n    "value": "house"\n  },\n  {\n    "key": "addr:city",\n    "value": "Rawa Mazowiecka"\n  },\n  {\n    "key": "addr:street",\n    "value": "Aleksandrówka"\n  },\n  {\n    "key": "source:addr",\n    "value": "mrawamazowiecka.e-mapa.net"\n  },\n  {\n    "key": "addr:postcode",\n    "value": "96-200"\n  },\n  {\n    "key": "addr:city:simc",\n    "value": "0977077"\n  },\n  {\n    "key": "addr:housenumber",\n    "value": "1A"\n  },\n  {\n    "key": "addr:street:sym_ul",\n    "value": "00228"\n  }\n]', 'geometry': 'bytearray(b\'\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\n\\x00\\x00\\x00\\xfd\\xe8\\x8a\\x08\\xb5E4@\\xf3\\x18\\x8a\\xe0$\\xe2I@+\\xfc\\x19\\xde\\xacE4@6p\\xac0"\\xe2I@\\xf0\\x12\\xf7\\xb3\\xb3E4@O.|3 \\xe2I@\\xbfvz\\xef\\xb9E4@B\\xa8\\x9c@"\\xe2I@\\xf7,\\xcf\\x83\\xbbE4@\\xa6\\x87\\xb2\\x01"\\xe2I@\\xc7\\xbc\\x9fd\\xbcE4@\\xcb]\\x95U"\\xe2I@\\x12\\xb1\\x1c|\\xbcE4@\\x8f\\xb5u&#\\xe2I@\\x0f\\xe5f\\x13\\xbbE4@w\\xcf\\xcbr#\\xe2I@t\\x82\\xfd\\xd7\\xb9E4@\\x1c\\xcc\\x81y#\\xe2I@\\xfd\\xe8\\x8a\\x08\\xb5E4@\\xf3\\x18\\x8a\\xe0$\\xe2I@\')', 'gdal_type': None}, {'layer_code': 1500, 'layer_class': 'building', 'layer_name': 'building', 'osm_id': 294416267, 'osm_way_id': 294416267, 'osm_timestamp': 1492348012000000, 'osm_version': 2, 'all_tags': '[\n  {\n    "key": "building",\n    "value": "house"\n  },\n  {\n    "key": "addr:city",\n    "value": "Rawa Mazowiecka"\n  },\n  {\n    "key": "addr:street",\n    "value": "Aleksandrówka"\n  },\n  {\n    "key": "source:addr",\n    "value": "mrawamazowiecka.e-mapa.net"\n  },\n  {\n    "key": "addr:postcode",\n    "value": "96-200"\n  },\n  {\n    "key": "addr:city:simc",\n    "value": "0977077"\n  },\n  {\n    "key": "addr:housenumber",\n    "value": "26"\n  },\n  {\n    "key": "addr:street:sym_ul",\n    "value": "00228"\n  }\n]', 'geometry': "bytearray(b'\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x9d\\x00\\xe5J\\x98F4@\\x17x\\xee=\\\\\\xe2I@\\xbc@\\xee\\xc7\\x92F4@\\xae=\\xfd\\xb1Z\\xe2I@\\xdcZ\\x15\\x97\\x99F4@x\\xa6<_X\\xe2I@\\xbe\\x1a\\x0c\\x1a\\x9fF4@\\xe4\\xe0-\\xebY\\xe2I@\\x9d\\x00\\xe5J\\x98F4@\\x17x\\xee=\\\\\\xe2I@')", 'gdal_type': None}, {'layer_code': 1500, 'layer_class': 'building', 'layer_name': 'building', 'osm_id': 295105951, 'osm_way_id': 295105951, 'osm_timestamp': 1492348027000000, 'osm_version': 2, 'all_tags': '[\n  {\n    "key": "building",\n    "value": "house"\n  },\n  {\n    "key": "addr:city",\n    "value": "Rawa Mazowiecka"\n  },\n  {\n    "key": "addr:street",\n    "value": "Aleksandrówka"\n  },\n  {\n    "key": "source:addr",\n    "value": "mrawamazowiecka.e-mapa.net"\n  },\n  {\n    "key": "addr:postcode",\n    "value": "96-200"\n  },\n  {\n    "key": "addr:city:simc",\n    "value": "0977077"\n  },\n  {\n    "key": "addr:housenumber",\n    "value": "29"\n  },\n  {\n    "key": "addr:street:sym_ul",\n    "value": "00228"\n  }\n]', 'geometry': "bytearray(b'\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\xd9\\x9b\\xdf0\\xd1F4@\\x9c\\x85\\xe23~\\xe2I@\\x1f\\x8f\\xe0F\\xcaF4@\\xb5\\xe7\\x8d\\xee{\\xe2I@\\xbd\\x96\\xa1;\\xd2F4@\\x13\\x10\\xa4\\x9cy\\xe2I@x\\xa3\\xa0%\\xd9F4@\\xfa\\xad\\xf8\\xe1{\\xe2I@\\xd9\\x9b\\xdf0\\xd1F4@\\x9c\\x85\\xe23~\\xe2I@')", 'gdal_type': None}, {'layer_code': 1500, 'layer_class': 'building', 'layer_name': 'building', 'osm_id': 294416270, 'osm_way_id': 294416270, 'osm_timestamp': 1492348066000000, 'osm_version': 2, 'all_tags': '[\n  {\n    "key": "building",\n    "value": "house"\n  },\n  {\n    "key": "addr:city",\n    "value": "Rawa Mazowiecka"\n  },\n  {\n    "key": "addr:street",\n    "value": "Aleksandrówka"\n  },\n  {\n    "key": "source:addr",\n    "value": "mrawamazowiecka.e-mapa.net"\n  },\n  {\n    "key": "addr:postcode",\n    "value": "96-200"\n  },\n  {\n    "key": "addr:city:simc",\n    "value": "0977077"\n  },\n  {\n    "key": "addr:housenumber",\n    "value": "36"\n  },\n  {\n    "key": "addr:street:sym_ul",\n    "value": "00228"\n  }\n]', 'geometry': 'bytearray(b\'\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x0b\\x00\\x00\\x00\\xfdA\\x7f\\xfc\\x00G4@%\\x18\\xbd\\tt\\xe2I@}\\x123V\\xf6F4@\\xc6\\x1b\\xf4\\x00q\\xe2I@\\x8d"|9\\xfdF4@\\xba\\x03\\xe1\\xafn\\xe2I@\\xd0\\x05\\x9at\\x00G4@\\x84\\x8e\\xc2\\x9ao\\xe2I@\\xb1\\xb8\\xa4\\x0f\\x02G4@\\x98\\x13Y\\x10o\\xe2I@ \\xe0\\xa4\\xc4\\tG4@\\x8b\\xbb\\x8bAq\\xe2I@\\x1a\\xb3\\xdb\\x1d\\x08G4@b\\xf4&\\xd0q\\xe2I@\\xda\\xf0\\x16\\xa3\\tG4@\\x1f\\xbd\\xe1>r\\xe2I@4\\xbf\\x9a\\x03\\x04G4@*K\\xbe#t\\xe2I@C\\xa6\\x8d4\\x02G4@\\xe4\\xcc\\n\\xa0s\\xe2I@\\xfdA\\x7f\\xfc\\x00G4@%\\x18\\xbd\\tt\\xe2I@\')', 'gdal_type': None}]
--------------------------------------------------
Table full name: GEO_OPENSTREETMAP.GEO_OPENSTREETMAP.PLANET_WAYS
Column name: geometry Type: BINARY
Column name: version Type: NUMBER
Column name: visible Type: BOOLEAN
Column name: username Type: TEXT
Column name: all_tags Type: VARIANT
Column name: osm_timestamp Type: NUMBER
Column name: nodes Type: VARIANT
Column name: id Type: NUMBER
Column name: changeset Type: NUMBER
Sample rows:
[{'id': 73165139, 'version': 2, 'username': 'jumbanho', 'changeset': 10475054, 'visible': True, 'osm_timestamp': 1327342614000000, 'geometry': 'bytearray(b"\\x01\\x02\\x00\\x00\\x00\\x0b\\x00\\x00\\x00o\\xdc\\x18\\xf1\\xd3 ^\\xc0\\xedf\\xa1\\xf8\\x8c\\xb6A@\\xfaA]\\xa4\\xd0 ^\\xc0~\\xee\\xbam\\x95\\xb6A@\\\'\\x07\\xfd\\x96\\xca ^\\xc07y\\x80\\xdd\\x9f\\xb6A@8$Z\\x97\\xbf ^\\xc0\\x17N-\\xb6\\xa4\\xb6A@qC\\x8c\\xd7\\xbc ^\\xc0c}\\xa8\\xd9\\xa8\\xb6A@/Ie\\x8a\\xb9 ^\\xc0\\xff\\xb2{\\xf2\\xb0\\xb6A@\\xcex[\\xe9\\xb5 ^\\xc0\\\\g\\x8d\\x8b\\xb4\\xb6A@d\\xbakd\\xb2 ^\\xc0\\xbb\\xf9\\xfc\\xe6\\xb4\\xb6A@U0t6\\xae ^\\xc0\\x7f\\xf5\\xb8o\\xb5\\xb6A@cL\\xfa{\\xa9 ^\\xc0\\x1f\\xe7G\\r\\xb7\\xb6A@\\x9a\\xab\\xe69\\xa2 ^\\xc0\\xd74J\\xf2\\xb7\\xb6A@")', 'all_tags': '[\n  {\n    "key": "gnis:fcode",\n    "value": "46003"\n  },\n  {\n    "key": "gnis:ftype",\n    "value": "StreamRiver"\n  },\n  {\n    "key": "intermittent",\n    "value": "yes"\n  },\n  {\n    "key": "nhd:com_id",\n    "value": "37346853"\n  },\n  {\n    "key": "nhd:fdate",\n    "value": "Thu Mar 28 00:00:00 PST 2002"\n  },\n  {\n    "key": "nhd:reach_code",\n    "value": "18060005017843"\n  },\n  {\n    "key": "source",\n    "value": "NHD"\n  },\n  {\n    "key": "waterway",\n    "value": "stream"\n  }\n]', 'nodes': '[\n  {\n    "id": 866315580\n  },\n  {\n    "id": 866469140\n  },\n  {\n    "id": 867906160\n  },\n  {\n    "id": 866405284\n  },\n  {\n    "id": 866497492\n  },\n  {\n    "id": 866302007\n  },\n  {\n    "id": 866449818\n  },\n  {\n    "id": 867897625\n  },\n  {\n    "id": 867903637\n  },\n  {\n    "id": 866402859\n  },\n  {\n    "id": 866540640\n  }\n]'}, {'id': 75218666, 'version': 3, 'username': 'jumbanho', 'changeset': 10475054, 'visible': True, 'osm_timestamp': 1327337045000000, 'geometry': 'bytearray(b\'\\x01\\x02\\x00\\x00\\x00m\\x00\\x00\\x00g\\x11@ \\x86\\xeb]\\xc0\\xff\\x9e\\x0e\\x1a\\xb0\\x99A@E\\x9a\\x1dN\\x85\\xeb]\\xc0\\x1c\\xb2\\x81t\\xb1\\x99A@\\xc21\\xcb\\x9e\\x84\\xeb]\\xc0\\xb0\\x992&\\xb3\\x99A@#\\xfe\\xbc\\x04\\x82\\xeb]\\xc0O\\xadc\\x01\\xb8\\x99A@\\xca\\xb8\\xf3\\x0e\\x81\\xeb]\\xc0\\x00\\xf0>}\\xba\\x99A@\\xa7A\\xd1<\\x80\\xeb]\\xc0\\xee\\x08LL\\xbc\\x99A@Z\\xa7%\\xb1\\x7f\\xeb]\\xc0\\x14H?\\xd0\\xc0\\x99A@\\xe3\\xbb\\xdeG\\x7f\\xeb]\\xc0n1\\xe4}\\xc1\\x99A@\\xc6\\xf0"]}\\xeb]\\xc0 t\\xbf\\xf9\\xc3\\x99A@U\\xb1B\\xdb{\\xeb]\\xc0\\xd2\\x8e\\xc0\\xc4\\xc4\\x99A@\\x0f\\xac\\xf4$z\\xeb]\\xc0\\xee\\xa13\\x1f\\xc6\\x99A@W\\x8c\\x04dy\\xeb]\\xc0G\\xd3\\x8f<\\xc6\\x99A@\\xbe)\\x9b(x\\xeb]\\xc0\\x82\\x89\\xe4\\xd0\\xc7\\x99A@#\\xc71\\xedv\\xeb]\\xc04\\\\.,\\xc9\\x99A@6\\xf0\\xa3\\x1av\\xeb]\\xc0R\\xff\\x0ff\\xc9\\x99A@\\r\\xa8\\xdc\\xe9s\\xeb]\\xc0\\x97\\x01\\xc2\\xe2\\xcb\\x99A@O\\xb7G\\xcaq\\xeb]\\xc0\\x0e\\xfe\\xd9\\xea\\xcd\\x99A@\\r\\x83\\x9erq\\xeb]\\xc0ID\\x9d^\\xce\\x99A@\\x98\\x97W\\tq\\xeb]\\xc0JD\\x9d^\\xce\\x99A@\\x92\\xc6\\xb2\\xaao\\xeb]\\xc0\\x1a\\xba\\xc8\\xf3\\xcf\\x99A@\\xf8\\\'\\x02\\xe6k\\xeb]\\xc0\\x06\\x8b\\x1eS\\xd2\\x99A@v\\xd6\\xb8Hk\\xeb]\\xc0\\xca\\xfc\\xa3o\\xd2\\x99A@\\x11\\x14\\xe4\\x0cj\\xeb]\\xc0\\x11\\x8f\\xc4\\xcb\\xd3\\x99A@$=V:i\\xeb]\\xc0\\x99r\\xcf\\x04\\xd4\\x99A@\\x89\\xda\\xec\\xfeg\\xeb]\\xc0i\\xe8\\xfa\\x99\\xd5\\x99A@\\xd0\\xba\\xfc=g\\xeb]\\xc0\\xc2\\xd1\\x9fG\\xd6\\x99A@I\\x98\\x0eBe\\xeb]\\xc0\\xcc\\xfd\\x1fq\\xd9\\x99A@\\xc7/\\xbc\\x92d\\xeb]\\xc0\\x91\\\'\\xee\\x1d\\xda\\x99A@\\x84\\xe4\\t)d\\xeb]\\xc0~\\xd0i\\xcc\\xda\\x99A@\\xb5\\xe1\\x0b\\xeeb\\xeb]\\xc0\\x9bSnG\\xdd\\x99A@"+\\t\\x9a`\\xeb]\\xc0\\x93(j\\x1f\\xe1\\x99A@\\x94E\\xab\\xa4_\\xeb]\\xc0(X\\xd2@\\xe2\\x99A@\\xa7I\\xdfZ\\\\\\xeb]\\xc0b\\x0e\\\'\\xd5\\xe3\\x99A@\\xc4\\x06f\\xe0[\\xeb]\\xc0\\xda\\xe2d,\\xe4\\x99A@\\xd4"\\xec%W\\xeb]\\xc0\\x8b\\xfde\\xf7\\xe4\\x99A@\\xe7=)\\xeeS\\xeb]\\xc0<\\x88\\xf8\\xe2\\xe6\\x99A@O\\x9fx)P\\xeb]\\xc0f\\xbf\\xeet\\xe7\\x99A@\\xa2\\xee^IM\\xeb]\\xc0\\xa1uC\\t\\xe9\\x99A@\\x8d\\xcf\\tFJ\\xeb]\\xc0\\x05\\xe7\\x8c(\\xed\\x99A@\\xe7_&\\xe5I\\xeb]\\xc0\\x9a\\xa6c)\\xed\\x99A@#<\\x90\\xabG\\xeb]\\xc0\\xa3v\\xbf\\n\\xf0\\x99A@B\\xe2\\r\\x1fG\\xeb]\\xc0\\x0e\\xb7\\xe8\\t\\xf0\\x99A@\\x06q\\xd4\\xc0E\\xeb]\\xc0\\xfb\\xcf\\xf5\\xd8\\xf1\\x99A@\\x19\\x9aF\\xeeD\\xeb]\\xc0r\\\\|\\xc0\\xf2\\x99A@\\x971\\xf4>D\\xeb]\\xc0\\x90\\xff]\\xfa\\xf2\\x99A@\\x13\\xc9\\xa1\\x8fC\\xeb]\\xc0$\\xe7\\x0e\\xac\\xf4\\x99A@\\xd92*\\xba?\\xeb]\\xc0t\\xcd\\x89\\xe2\\xfa\\x99A@\\xf9\\xcar\\xc8<\\xeb]\\xc0C\\xb3F\\x98\\xfd\\x99A@\\xb2\\xc5$\\x12;\\xeb]\\xc0\\x89\\xb5\\xf8\\x14\\x00\\x9aA@\\xb9q\\x8b\\xf99\\xeb]\\xc0\\xa7X\\xdaN\\x00\\x9aA@g\\xd8(\\xeb7\\xeb]\\xc0\\xc2#\\x969\\x02\\x9aA@\\xd7\\xf2\\xca\\xf56\\xeb]\\xc0\\x1eU\\xf2V\\x02\\x9aA@\\xfe[\\xb8b5\\xeb]\\xc0\\n\\xb6\\xb6\\x95\\x03\\x9aA@D<\\xc8\\xa14\\xeb]\\xc0\\xcf\\\'<\\xb2\\x03\\x9aA@\\xb6H5G1\\xeb]\\xc0\\xe4\\x0f\\xab\\xe4\\x08\\x9aA@\\x0b\\xa6P\\xcc0\\xeb]\\xc0\\xc5\\xdcZ\\xcb\\t\\x9aA@_\\x1auc0\\xeb]\\xc0\\xb3=\\x1f\\n\\x0b\\x9aA@\\x83lY\\xbe.\\xeb]\\xc0\\xa0j\\x99\\xb1\\r\\x9aA@\\xff\\x03\\x07\\x0f.\\xeb]\\xc0\\xbd\\xb1V\\xa3\\r\\x9aA@w\\xca\\x0f\\x01,\\xeb]\\xc0\\x16\\x9b\\xfbP\\x0e\\x9aA@3\\xc5\\xc1J*\\xeb]\\xc0\\\\\\r?\\xee\\x11\\x9aA@o(\\xc6C)\\xeb]\\xc0\\xefd\\x81\\xc0\\x14\\x9aA@\\xe0BhN(\\xeb]\\xc0ea\\x99\\xc8\\x16\\x9aA@W\\tq@&\\xeb]\\xc0"\\xa8\\x1a\\xbd\\x1a\\x9aA@\\xc2w\\xacc&\\xeb]\\xc0!\\x18\\xac\\xdd\\x1b\\x9aA@\\xf8j\\x91\\xfe(\\xeb]\\xc0*\\xb4\\xbd\\\' \\x9aA@\\xceG\\x08E)\\xeb]\\xc0\\xdc\\xf6\\x98\\xa3"\\x9aA@\\xceG\\x08E)\\xeb]\\xc0\\x04\\xc6\\xfa\\x06&\\x9aA@\\xc0\\xca\\xfc\\xfe(\\xeb]\\xc0"\\xd9ma\\\'\\x9aA@3\\xe5\\x9e\\t(\\xeb]\\xc0\\xd3c\\x00M)\\x9aA@\\xfe\\x1f\\xcc\\x92%\\xeb]\\xc0\\x90\\xaa\\x81A-\\x9aA@|\\xb7y\\xe3$\\xeb]\\xc0\\xadMc{-\\x9aA@*\\x1e\\x17\\xd5"\\xeb]\\xc0Ud\\xbe\\xcd,\\x9aA@\\xb42\\xd0k"\\xeb]\\xc0\\x90:\\xf0 ,\\x9aA@\\xa2\\xe4\\x1f\\xc7 \\xeb]\\xc0\\xaem@:+\\x9aA@="K\\x8b\\x1f\\xeb]\\xc0t\\\'}\\xc6*\\x9aA@Q&\\x7fA\\x1c\\xeb]\\xc0\\xaem@:+\\x9aA@\\xac/\\x01\\xae\\x1a\\xeb]\\xc0\\x7f+#?,\\x9aA@\\x81\\xe79}\\x18\\xeb]\\xc0\\xbaq\\xe6\\xb2,\\x9aA@\\x0c\\xe5\\xe9\\x01\\x18\\xeb]\\xc0`@\\x8a\\x95,\\x9aA@Z\\x88i:\\x16\\xeb]\\xc0\\xa6B<\\x12/\\x9aA@\\xd8\\x1f\\x17\\x8b\\x15\\xeb]\\xc0\\xa6B<\\x12/\\x9aA@\\xc6\\xd1f\\xe6\\x13\\xeb]\\xc0\\xedD\\xee\\x8e1\\x9aA@\\xa9\\x06\\xab\\xfb\\x11\\xeb]\\xc0\\x93\\xcb\\xda\\x012\\x9aA@\\xe6R\\xa6\\xe2\\x10\\xeb]\\xc0\\x81tV\\xb02\\x9aA@(y\\x1a\\xd5\\x0e\\xeb]\\xc0\\x8b\\xa0\\xd6\\xd95\\x9aA@\\xa0?#\\xc7\\x0c\\xeb]\\xc0\\x8b\\xa0\\xd6\\xd95\\x9aA@\\xb2h\\x95\\xf4\\x0b\\xeb]\\xc0\\x8b\\x10h\\xfa6\\x9aA@/\\x00CE\\x0b\\xeb]\\xc0x)u\\xc98\\x9aA@\\xad\\x97\\xf0\\x95\\n\\xeb]\\xc0\\x0cY\\xdd\\xea9\\x9aA@ \\xb2\\x92\\xa0\\t\\xeb]\\xc0\\x0b\\xc9n\\x0b;\\x9aA@8\\x87k\\xb5\\x07\\xeb]\\xc0\\xdc\\xce\\x08\\x80;\\x9aA@\\x1f\\x8dT)\\x07\\xeb]\\xc0R[\\x8fg<\\x9aA@\\xaa\\xb8\\x16\\xd2\\x06\\xeb]\\xc0\\x04\\x9ej\\xe3>\\x9aA@\\x9d$\\x02z\\x06\\xeb]\\xc0!\\xb1\\xdd=@\\x9aA@\\x10?\\xa4\\x84\\x05\\xeb]\\xc0\\xd2;p)B\\x9aA@\\xfe\\xf0\\xf3\\xdf\\x03\\xeb]\\xc0f\\x93\\xb2\\xfbD\\x9aA@_\\xbd\\xe5E\\x01\\xeb]\\xc0]h\\xae\\xd3H\\x9aA@\\xddT\\x93\\x96\\x00\\xeb]\\xc0\\x98\\x1e\\x03hJ\\x9aA@\\xd0\\xd7\\x87P\\x00\\xeb]\\xc0gtQ>N\\x9aA@\\xb8\\xddp\\xc4\\xff\\xea]\\xc0\\x90c\\x90`O\\x9aA@\\x01\\xd5\\x89\\x15\\xff\\xea]\\xc0\\x90\\xd3!\\x81P\\x9aA@\\xb2\\x0c\\xcce\\xfe\\xea]\\xc0\\x07`\\xa8hQ\\x9aA@\\xbc1\\x98\\x1a\\xfc\\xea]\\xc0\\xb9\\x1e\\x85\\xebQ\\x9aA@\\x9d\\xedvb\\xfb\\xea]\\xc0\\xb82\\xf2\\xc3R\\x9aA@ \\xb8%\\xcd\\xfa\\xea]\\xc0\\xd41\\xf8ES\\x9aA@\\xe0\\x83|u\\xfa\\xea]\\xc0/cTcS\\x9aA@X\\xd1\\x1f\\x9a\\xf9\\xea]\\xc0L\\x1a\\xa3uT\\x9aA@\\x11\\xe3\\xda\\xf5\\xf7\\xea]\\xc0\\xcd\\x1aa\\xf6W\\x9aA@\')', 'all_tags': '[\n  {\n    "key": "gnis:fcode",\n    "value": "46003"\n  },\n  {\n    "key": "gnis:ftype",\n    "value": "StreamRiver"\n  },\n  {\n    "key": "intermittent",\n    "value": "yes"\n  },\n  {\n    "key": "nhd:com_id",\n    "value": "146070088"\n  },\n  {\n    "key": "nhd:fdate",\n    "value": "Wed Jun 02 00:00:00 PDT 2010"\n  },\n  {\n    "key": "nhd:reach_code",\n    "value": "18030003021991"\n  },\n  {\n    "key": "source",\n    "value": "NHD"\n  },\n  {\n    "key": "waterway",\n    "value": "stream"\n  }\n]', 'nodes': '[\n  {\n    "id": 887696362\n  },\n  {\n    "id": 887829439\n  },\n  {\n    "id": 887997465\n  },\n  {\n    "id": 887771891\n  },\n  {\n    "id": 887946345\n  },\n  {\n    "id": 887733187\n  },\n  {\n    "id": 887896126\n  },\n  {\n    "id": 887683316\n  },\n  {\n    "id": 887809856\n  },\n  {\n    "id": 887983189\n  },\n  {\n    "id": 887761266\n  },\n  {\n    "id": 887934769\n  },\n  {\n    "id": 887725502\n  },\n  {\n    "id": 887879212\n  },\n  {\n    "id": 887671531\n  },\n  {\n    "id": 887796830\n  },\n  {\n    "id": 887972053\n  },\n  {\n    "id": 887749910\n  },\n  {\n    "id": 887923069\n  },\n  {\n    "id": 887711659\n  },\n  {\n    "id": 887857327\n  },\n  {\n    "id": 888014154\n  },\n  {\n    "id": 887785787\n  },\n  {\n    "id": 887960678\n  },\n  {\n    "id": 887742561\n  },\n  {\n    "id": 887911649\n  },\n  {\n    "id": 887698676\n  },\n  {\n    "id": 887833997\n  },\n  {\n    "id": 888000588\n  },\n  {\n    "id": 887774554\n  },\n  {\n    "id": 887949557\n  },\n  {\n    "id": 887735182\n  },\n  {\n    "id": 887899156\n  },\n  {\n    "id": 887685989\n  },\n  {\n    "id": 887813680\n  },\n  {\n    "id": 887986154\n  },\n  {\n    "id": 887764148\n  },\n  {\n    "id": 887937460\n  },\n  {\n    "id": 887727506\n  },\n  {\n    "id": 887882026\n  },\n  {\n    "id": 887673165\n  },\n  {\n    "id": 887799183\n  },\n  {\n    "id": 887974727\n  },\n  {\n    "id": 887752101\n  },\n  {\n    "id": 887925711\n  },\n  {\n    "id": 887715684\n  },\n  {\n    "id": 887861251\n  },\n  {\n    "id": 887728936\n  },\n  {\n    "id": 887884755\n  },\n  {\n    "id": 887675711\n  },\n  {\n    "id": 887802119\n  },\n  {\n    "id": 887977397\n  },\n  {\n    "id": 887755109\n  },\n  {\n    "id": 887928546\n  },\n  {\n    "id": 887719609\n  },\n  {\n    "id": 887867409\n  },\n  {\n    "id": 887667103\n  },\n  {\n    "id": 887791085\n  },\n  {\n    "id": 887965560\n  },\n  {\n    "id": 887746088\n  },\n  {
--------------------------------------------------
Table full name: GEO_OPENSTREETMAP.GEO_OPENSTREETMAP.HISTORY_NODES
Column name: all_tags Type: VARIANT
Column name: changeset Type: NUMBER
Column name: longitude Type: NUMBER
Column name: username Type: TEXT
Column name: latitude Type: NUMBER
Column name: id Type: NUMBER
Column name: osm_timestamp Type: NUMBER
Column name: geometry Type: BINARY
Column name: visible Type: BOOLEAN
Column name: version Type: NUMBER
Sample rows:
[{'id': 2719410933, 'version': 1, 'username': 'lodde1949', 'changeset': 21119993, 'visible': True, 'osm_timestamp': 1394901096000000, 'geometry': "bytearray(b'\\x01\\x01\\x00\\x00\\x00\\xd4\\xe8\\xc4\\xd4L\\xbd\\n@\\xb8vGk\\xb1_I@')", 'all_tags': '[]', 'latitude': '50.747601900', 'longitude': '3.342431700'}, {'id': 2024704316, 'version': 1, 'username': 'lodde1949', 'changeset': 13957937, 'visible': True, 'osm_timestamp': 1353500660000000, 'geometry': "bytearray(b'\\x01\\x01\\x00\\x00\\x00A$C\\x8e\\xad\\x87\\x0c@GrT\\xc9[gI@')", 'all_tags': '[]', 'latitude': '50.807488600', 'longitude': '3.566249000'}, {'id': 1923480350, 'version': 1, 'username': 'lodde1949', 'changeset': 13181552, 'visible': True, 'osm_timestamp': 1348134836000000, 'geometry': "bytearray(b'\\x01\\x01\\x00\\x00\\x00\\x01F\\xe1\\xc4\\xa1\\xc8\\x0b@s}\\xc4T\\x9fwI@')", 'all_tags': '[]', 'latitude': '50.934549900', 'longitude': '3.472964800'}, {'id': 2688228888, 'version': 1, 'username': 'lodde1949', 'changeset': 20748310, 'visible': True, 'osm_timestamp': 1393239113000000, 'geometry': "bytearray(b'\\x01\\x01\\x00\\x00\\x00\\xe5T!\\xd4\\xfb\\x8c\\n@\\x0c4\\xe9\\x00\\xd2^I@')", 'all_tags': '[]', 'latitude': '50.740783800', 'longitude': '3.318839700'}, {'id': 2156021073, 'version': 1, 'username': 'lodde1949', 'changeset': 15040720, 'visible': True, 'osm_timestamp': 1360938139000000, 'geometry': "bytearray(b'\\x01\\x01\\x00\\x00\\x00\\xdb6\\x8c\\x82\\xe01\\x0c@\\x18q\\xa6\\xae!iI@')", 'all_tags': '[]', 'latitude': '50.821340400', 'longitude': '3.524354000'}]
--------------------------------------------------
Table full name: GEO_OPENSTREETMAP.GEO_OPENSTREETMAP.PLANET_NODES
Column name: all_tags Type: VARIANT
Column name: osm_timestamp Type: NUMBER
Column name: changeset Type: NUMBER
Column name: visible Type: BOOLEAN
Column name: latitude Type: NUMBER
Column name: geometry Type: BINARY
Column name: username Type: TEXT
Column name: version Type: NUMBER
Column name: id Type: NUMBER
Column name: longitude Type: NUMBER
Sample rows:
[{'id': 8809595840, 'version': 1, 'username': 'tschettervictor', 'changeset': 105929128, 'visible': True, 'osm_timestamp': 1623005376000000, 'geometry': None, 'all_tags': '[]', 'latitude': '49.438724700', 'longitude': '-113.443301100'}, {'id': 4811433843, 'version': 1, 'username': 'twesigyegabriel', 'changeset': 48059152, 'visible': True, 'osm_timestamp': 1492951085000000, 'geometry': None, 'all_tags': '[]', 'latitude': '-20.688499500', 'longitude': '28.986649100'}, {'id': 4926349833, 'version': 1, 'username': 'twesigyegabriel', 'changeset': 49688586, 'visible': True, 'osm_timestamp': 1497952209000000, 'geometry': None, 'all_tags': '[]', 'latitude': '3.376556000', 'longitude': '31.774604500'}, {'id': 7825875320, 'version': 1, 'username': 'twesigyegabriel', 'changeset': 89630746, 'visible': True, 'osm_timestamp': 1597836475000000, 'geometry': None, 'all_tags': '[]', 'latitude': '1.249124300', 'longitude': '34.772905300'}, {'id': 2164077960, 'version': 1, 'username': 'umrudasl-import', 'changeset': 15102364, 'visible': True, 'osm_timestamp': 1361379447000000, 'geometry': None, 'all_tags': '[]', 'latitude': '50.309746300', 'longitude': '18.856070600'}]
--------------------------------------------------
Table full name: GEO_OPENSTREETMAP.GEO_OPENSTREETMAP.PLANET_RELATIONS
Column name: visible Type: BOOLEAN
Column name: osm_timestamp Type: NUMBER
Column name: id Type: NUMBER
Column name: username Type: TEXT
Column name: all_tags Type: VARIANT
Column name: geometry Type: BINARY
Column name: members Type: VARIANT
Column name: version Type: NUMBER
Column name: changeset Type: NUMBER
Sample rows:
[{'id': 7463946, 'version': 1, 'username': 'Aurimas Fišeras', 'changeset': 51041273, 'visible': True, 'osm_timestamp': 1502475117000000, 'geometry': 'bytearray(b\'\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00>\\x00\\x00\\x00W$&\\xa8\\xe1\\xd58@[~;\\xe4\\xc1&L@\\xe9\\xdcH4\\xdc\\xd58@\\xb59\\xcem\\xc2&L@l\\xc6X\\\\\\xd2\\xd58@\\xde\\xe6\\x8d\\x93\\xc2&L@\\\'\\xf9\\x11\\xbfb\\xd58@4\\xc4\\x0c\\xe8\\xe0&L@b\\xe3\\xb0\\xeab\\xd58@\\xce\\xb0\\xac\\x8f\\xe2&L@\\xea\\x0b|\\xa0p\\xd58@\\xd3b\\xf00\\xed&L@Ec\\xed\\xefl\\xd58@r\\\\|\\xc0\\xf2&L@\\x07\\x8c?\\x9bf\\xd58@N\\xaes\\x1d\\xf4&L@\\xc7L\\xfd\\x17c\\xd58@\\x12\\xdey=\\xf3&L@\\x93S\\xe0\\tb\\xd58@\\xa3\\x90dV\\xef&L@]&ydb\\xd58@\\xb5IEc\\xed&L@\\xf2/892\\xd58@\\xbb<Br\\xd7&L@\\xa9\\x12eo)\\xd58@1\\x9a:4\\xd1&L@\\t\\xbfy\\x16)\\xd58@\\xd3\\xa3\\xa9\\x9e\\xcc&L@R\\x10\\x97w0\\xd58@\\x9b\\xf9\\xc4\\xf0\\xc7&L@\\xcbWn\\x0e|\\xd58@\\xd2\\xe4b\\x0c\\xac&L@P\\xe1c\\x0b\\x9c\\xd58@\\x8e.\\xdb\\xf3\\xa1&L@\\tz^\\xe0\\xa8\\xd58@\\xd2\\xf5\\x8ed\\xa0&L@\\xfa`\\x19\\x1b\\xba\\xd58@\\x1a\\xbc\\xf9W\\xa0&L@M\\\\}+\\xc8\\xd58@\\xf0\\x0e:2\\xa0&L@\\x01\\xd4\\x1e@\\xd0\\xd58@\\x15\\x1f\\x9f\\x90\\x9d&L@l\\xc6X\\\\\\xd2\\xd58@\\x16\\xe3W\\x07\\x9b&L@\\xc1\\x94\\xdc\\xbc\\xcc\\xd58@AT\\xd0\\xa3\\x98&L@I;$k\\xc3\\xd58@`14\\xe8\\x95&L@\\x96l\\x86e}\\xd68@\\xad\\x7f|\\xae[&L@\\xd1\\xee\\x90b\\x80\\xd68@\\xae\\x7f|\\xae[&L@\\xd9\\xcc!\\xa9\\x85\\xd68@G>\\n2]&L@6X\\xdd\\x8f\\x80\\xd68@3\\xc1p\\xaea&L@\\x1e-\\xbd\\xec\\x8d\\xd68@H-\\xde\\xd9h&L@\\xb7\\xc3p\\xbf\\x8d\\xd68@\\xbc\\xdb\\x06\\xffl&L@\\xad\\xe5\\xdfx\\x88\\xd68@"\\x1dy{k&L@\\xc1\\x1f~\\xfe{\\xd68@\\x94\\xf2\\xffOj&L@C=\\xd8\\xbdp\\xd68@/uFJi&L@:_Gwk\\xd68@<\\x99\\xc9\\x81h&L@`\\xbd\\x9b\\xb8f\\xd68@<\\x99\\xc9\\x81h&L@.\\x97\\x9e\\xfaQ\\xd68@2N\\xe8\\x9an&L@v\\xcaY\\x8eF\\xd68@\\xc0RL\\x94s&L@\\xc4\\xee\\x96?:\\xd68@ip[[x&L@\\xe1nZ:0\\xd68@~>%B~&L@\\xe4\\r0\\xf3\\x1d\\xd68@\\xcc\\x180\\x92\\x87&L@\\x02\\x8e\\xf3\\xed\\x13\\xd68@\\x0cXr\\x15\\x8b&L@\\xeb\\x14\\x9a\\xda\\x08\\xd68@\\x18\\xb8<\\xd6\\x8c&L@\\x1d$\\x9f\\xb2\\xf5\\xd58@\\xf9<5M\\x8e&L@\\xa0A\\xf9q\\xea\\xd58@o\\xaf\\x16\\xe9\\x8f&L@\\x8c\\x1dC\\xb6\\xe2\\xd58@\\xfdw3Y\\x92&L@\\xe6t\\xb4\\x05\\xdf\\xd58@\\xe3\\xfb\\xe2R\\x95&L@S\\xcf\\x82P\\xde\\xd58@`m{q\\x98&L@\\x86\\x94U\\xc7\\xe0\\xd58@\\x9f\\x0e\\x1a\\xb0\\x9a&L@\\xc3J\\xaa[\\xe2\\xd58@\\xe5\\x10\\xcc,\\x9d&L@(\\xe8@ \\xe1\\xd58@\\xf1p\\x96\\xed\\x9e&L@\\xe5S[E\\xda\\xd58@\\x07eu\\x06\\xa1&L@\\t~e\\xef\\xd6\\xd58@6\\x11\\xec\\xae\\xa2&L@>\\xab\\xcc\\x94\\xd6\\xd58@\\xb8\\x17\\xe2\\xa2\\xa4&L@\\xde\\xcamV\\xd8\\xd58@FB[\\xce\\xa5&L@\\x0e\\x07S\\xde\\xd8\\xd58@3\\x89z\\xc1\\xa7&L@\\xcarm\\x03\\xd2\\xd58@g4\\xa8\\xec\\xaa&L@\\x18\\x97\\xaa\\xb4\\xc5\\xd58@\\xf4\\x9ah\\xa1\\xae&L@/\\x8e\\x80\\xc0\\xb9\\xd58@\\xe0\\x1d\\xcf\\x1d\\xb3&L@\\x91n\\xdf\\xfe\\xb7\\xd58@\\x97\\x93\\xab\\xb3\\xb5&L@\\xd0\\xad!\\x82\\xbb\\xd58@\\xb4\\xe8\\x9d\\n\\xb8&L@\\x8b\\x1dC\\xb6\\xe2\\xd58@\\xf8\\x00\\x82\\xde\\xc0&L@W$&\\xa8\\xe1\\xd58@[~;\\xe4\\xc1&L@\')', 'all_tags': '[\n  {\n    "key": "landuse",\n    "value": "forest"\n  },\n  {\n    "key": "type",\n    "value": "multipolygon"\n  }\n]', 'members': '[\n  {\n    "id": 514874852,\n    "role": "outer",\n    "type": "w"\n  },\n  {\n    "id": 514874853,\n    "role": "outer",\n    "type": "w"\n  }\n]'}, {'id': 11022461, 'version': 1, 'username': 'UPegasus', 'changeset': 83900996, 'visible': True, 'osm_timestamp': 1587502152000000, 'geometry': 'bytearray(b\'\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x1e\\x00\\x00\\x00\\xe1\\\\\\x1e\\xc6\\xff.:@\\xee\\x1f\\xb0\\x17\\xaf\\x0bH@\\xbb\\x14\\xb2N\\xf0.:@\\xdc\\x10\\xe35\\xaf\\x0bH@+\\x0eVR\\xdd.:@\\xca\\xe7p\\x08\\xb0\\x0bH@dB\\\'\\xdf\\xc7.:@\\xfe\\x92\\x9e3\\xb3\\x0bH@\\xca\\xf5\\xa5m\\xb2.:@\\xfb\\xdc\\x1a"\\xb8\\x0bH@\\x03\\xc2\\xe2\\xcb\\x9f.:@\\n6d\\xf2\\xbc\\x0bH@\\xe5\\xbf\\x9b\\xc9\\x92.:@\\xf7\\xd8\\xa7-\\xbf\\x0bH@\\xc7\\x89\\n0\\x87.:@\\xf7\\x0c\\xf2\\xc4\\xbd\\x0bH@\\\\\\xcb\\x1a\\xab\\x83.:@\\xc4G\\x1fN\\xbb\\x0bH@\\x92\\xc47\\xb9\\x84.:@\\xa2\\xc5cP\\xb7\\x0bH@O\\xe6\\x1f}\\x93.:@\\xb7\\xa4Y\\x8f\\xb1\\x0bH@\\xab\\xf3^k\\xa5.:@\\xb8\\x0c\\xee\\xbd\\xae\\x0bH@\\x13\\xdf.\\xa0\\xbc.:@\\x97\\x8a2\\xc0\\xaa\\x0bH@\\x8a"\\xff\\\'\\xda.:@\\xaci(\\xff\\xa4\\x0bH@\\xbbH\\xfc\\xe5\\xee.:@\\xaeS\\xf6\\xa7\\x9e\\x0bH@\\xa4\\x85pq\\xf9.:@\\xc3\\xe4\\xfc\\x03\\x9b\\x0bH@\\x81Hu\\xf0\\x02/:@\\xb0\\xa1\\xe5\\x8a\\x9c\\x0bH@,F\\xa7\\xf8\\t/:@\\xc1|h\\xd5\\x9d\\x0bH@tcz\\xc2\\x12/:@\\xe5\\x9a\\x02\\x99\\x9d\\x0bH@\\\'\\xa7\\xd1?\\x1c/:@\\xb0\\xbb\\x8a\\xd6\\x9b\\x0bH@P\\xef=\\xb7+/:@\\xe6\\x02\\x97\\xc7\\x9a\\x0bH@\\xaa\\xfc|\\xa5=/:@\\xb0\\xbb\\x8a\\xd6\\x9b\\x0bH@q\\xc8\\xab\\x18S/:@\\x9e^\\xce\\x11\\x9e\\x0bH@X\\x05 \\xa4]/:@\\xd0\\t\\xfc<\\xa1\\x0bH@\\xbbM\\x13\\x11Y/:@\\xbd^P\\x95\\xa5\\x0bH@0\\xf1\\xfd\\xc3L/:@\\xaa\\xe7\\xee\\x84\\xa8\\x0bH@\\xd6\\xe3\\xbe\\xd5:/:@\\xcc\\xd1>\\xb1\\xa9\\x0bH@\\xd8\\x82\\x94\\x8e(/:@\\xf0\\xd53)\\xaa\\x0bH@\\x00\\x93\\xaf_\\x0b/:@\\xee\\x1f\\xb0\\x17\\xaf\\x0bH@\\xe1\\\\\\x1e\\xc6\\xff.:@\\xee\\x1f\\xb0\\x17\\xaf\\x0bH@\')', 'all_tags': '[\n  {\n    "key": "landuse",\n    "value": "forest"\n  },\n  {\n    "key": "type",\n    "value": "multipolygon"\n  }\n]', 'members': '[\n  {\n    "id": 794546848,\n    "role": "outer",\n    "type": "w"\n  },\n  {\n    "id": 794546849,\n    "role": "outer",\n    "type": "w"\n  }\n]'}, {'id': 13286432, 'version': 1, 'username': 'UPegasus', 'changeset': 112043412, 'visible': True, 'osm_timestamp': 1633283424000000, 'geometry': 'bytearray(b"\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x0e\\x00\\x00\\x00\\xa4V\\xf3wJ\\x989@\\xcf\\n\\xb1\\x9fj\\x00H@eK\\xfb\\x8bE\\x989@\\xd3\\xe9\\x8acn\\x00H@\\xa8]]_5\\x989@4\\xbf\\xf5\\xbcv\\x00H@o\\xf1:,\\x1e\\x989@\\xba\\xe6Dq}\\x00H@\\xe8\\xac\\x05\\xac\\x0b\\x989@`g\\xf9p\\x7f\\x00H@+\\x8b\\x1d\\xe8\\xfc\\x979@\\x87dm\\xf8\\x82\\x00H@\\xe3\\xa1\\x94\\xb5\\xf2\\x979@\\xe2\\xe3\\xb8\\xf8\\x80\\x00H@\\xd9[o@\\xf0\\x979@%u]S{\\x00H@\\x0e\\x89\\xd6\\xe5\\xef\\x979@\\xc6\\x85M\\xaes\\x00H@$\\xad\\x8c\\xa1\\xf7\\x979@VfJ\\xebo\\x00H@\\x7f\\xba\\xcb\\x8f\\t\\x989@\\x1cZ\\t\\x82l\\x00H@\\\'\\xf0N>=\\x989@<\\xcd\\x13\\x19g\\x00H@\\xfb$w\\xd8D\\x989@<\\xb3n\\xcdg\\x00H@\\xa4V\\xf3wJ\\x989@\\xcf\\n\\xb1\\x9fj\\x00H@")', 'all_tags': '[\n  {\n    "key": "landuse",\n    "value": "forest"\n  },\n  {\n    "key": "type",\n    "value": "multipolygon"\n  }\n]', 'members': '[\n  {\n    "id": 989177514,\n    "role": "outer",\n    "type": "w"\n  },\n  {\n    "id": 989177513,\n    "role": "outer",\n    "type": "w"\n  }\n]'}, {'id': 3801191, 'version': 1, 'username': 'Cabeleira', 'changeset': 22769296, 'visible': True, 'osm_timestamp': 1402038563000000, 'geometry': 'bytearray(b\'\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00g\\x00\\x00\\x00\\x1f\\xf8se\\xab\\x868@\\xf9j\\xa2*\\x01\\xfbG@5n\\xd6\\x85\\xc4\\x868@\\x14\\xf6\\xa3\\x97\\x07\\xfbG@Y\\xdf\\x1b\\x9e\\xb9\\x868@\\xdf\\xcete\\x06\\xfbG@\\x02\\x8c\\x1dC\\xb6\\x868@\\xf03.\\x1c\\x08\\xfbG@T\\xa6\\xe2\\x10\\xbb\\x868@\\\\\\xe4\\xe8;\\t\\xfbG@,\\xcc\\x8c\\xc8\\xc1\\x868@I\\x93\\x9c]\\x08\\xfbG@\\xeb8#\\xef\\xc1\\x868@$\\xcb\\xeen\\n\\xfbG@\\xbd%\\x94\\x19\\xca\\x868@d\\xdc\\x1e\\xce\\r\\xfbG@\\x19^\\xa4\\xab\\xcf\\x868@Xv\\x1c\\x9a\\r\\xfbG@\\x13\\xfa\\x99z\\xdd\\x868@\\xf7\\x19\\xbcT\\x11\\xfbG@,7\\xac\\x04\\xe6\\x868@\\x93\\xf8&\\x97\\x10\\xfbG@}e\\xde\\xaa\\xeb\\x868@+i\\xc57\\x14\\xfbG@\\xcf\\x10\\x8eY\\xf6\\x868@\\x0c0=\\xab\\x16\\xfbG@C\\xa4\\x951\\xf4\\x868@\\xe9\\xddXP\\x18\\xfbG@ss\\xe0\\x8b\\xe5\\x868@\\xca&\\n>\\x17\\xfbG@\\xc7Ia\\xde\\xe3\\x868@\\xfc\\xf8\\x95\\x18\\x15\\xfbG@\\x08\\x08\\x9c[\\xd7\\x868@$\\xce/\\xef\\x16\\xfbG@\\xefN\\x88\\xca\\xd0\\x868@\\xa4c\\x18\\xc1\\x10\\xfbG@\\x1cv\\x84x\\xc9\\x868@\\xfd\\xc2\\x86\\x02\\x11\\xfbG@\\xe8T\\x8d\\xb9\\xc6\\x868@\\x88<8\\x8e\\x0e\\xfbG@\\xc8\\xca\\xd4\\xc9\\xbe\\x868@4\\xc8\\x13\\xf7\\x0e\\xfbG@\\xe7+7\\x07\\xbe\\x868@\\xad\\xa8\\xc14\\x0c\\xfbG@@\\xfe-\\\\\\xb1\\x868@\\xa1\\x8avp\\x0b\\xfbG@\\xf7E\\xf8\\xcd\\xb3\\x868@\\x17Y|T\\r\\xfbG@q\\xa2\\xa7\\x12\\xaf\\x868@{\\x8e~\\xea\\x0e\\xfbG@\\x87b<\\x94\\xb2\\x868@\\xbc/\\x1d)\\x11\\xfbG@28\\x94\\xeb\\xb7\\x868@\\xf8\\x8f\\x85\\xe8\\x10\\xfbG@\\xccr#v\\xb7\\x868@\\\'\\x98 \\xd9\\x12\\xfbG@\\x94\\xa9\\xdd\\n\\xbc\\x868@\\xf5\\rLn\\x14\\xfbG@\\xe8T\\x8d\\xb9\\xc6\\x868@\\xc7Mh\\xed\\x11\\xfbG@\\x1f\\xca\\xab\\xce\\xc5\\x868@\\x85\\xe2\\xd8\\xc4\\x13\\xfbG@\\xcep\\xa8\\x84\\xcc\\x868@I\\xf2\\x01&\\x15\\xfbG@qu[}\\xd0\\x868@\\xab\\xed\\x81\\xb1\\x19\\xfbG@\\x93S;\\xc3\\xd4\\x868@\\xf3\\xb3\\xec\\xa4\\x19\\xfbG@woV\\x8e\\xda\\x868@\\x86\\x81\\xf8\\n\\x1c\\xfbG@Pl\\xaa\\x93\\xd8\\x868@\\x14\\xd4K\\xe7\\x1e\\xfbG@\\xaa>\\xa1\\xe8\\xcb\\x868@x\\tN} \\xfbG@26\\x19\\xfa\\xcc\\x868@\\x00qW\\xaf"\\xfbG@\\x89^F\\xb1\\xdc\\x868@\\x9c\\xf3\\x9d\\xa9!\\xfbG@NA\\xd9\\xef\\xe4\\x868@\\x0c\\x8f\\xa2s#\\xfbG@\\xdb\\xb7I\\xfb\\xd5\\x868@]\\xf1\\x1e\\xb1\\\'\\xfbG@\\xd8\\x8e\\xf3H\\xcd\\x868@c\\xdch[(\\xfbG@\\x9aO\\xb1\\xc5\\xc9\\x868@\\x93\\xae\\xf45&\\xfbG@a\\xdc\\r\\xa2\\xb5\\x868@\\xc7\\xa1\\xd9\\xd0(\\xfbG@\\x96\\xfd\\x04a\\xb8\\x868@\\xf0vs\\xa7*\\xfbG@\\xcaI\\xcd\\xc3\\xae\\x868@\\x13\\x19\\x0cd,\\xfbG@\\x86b<\\x94\\xb2\\x868@\\x89\\x9fZ\\xd8.\\xfbG@,\\x92\\xc00\\xaa\\x868@\\xa6\\x9e`Z/\\xfbG@\\xecR~\\xad\\xa6\\x868@\\xacA\\xf3\\x940\\xfbG@>\\xd5\\xd7\\xa9\\xa8\\x868@\\xb7_>Y1\\xfbG@\\x82\\x91\\x975\\xb1\\x868@jf\\xd2K1\\xfbG@\\xbaZ\\xdd\\xa0\\xac\\x868@gT*\\xf25\\xfbG@\\xd5\\x13\\xf11\\xb3\\x868@gT*\\xf25\\xfbG@\\xa3ow{\\xb5\\x868@\\xaa\\xbf\\xb9\\x1a4\\xfbG@\\xa5\\x98\\xcd-\\xbe\\x868@1\\xdf\\x0b\\xdd6\\xfbG@d.\\xba\\x06\\xc7\\x868@\\xd8\\x7f\\x9d\\x9b6\\xfbG@\\x91*\\xe5\\x10\\xcc\\x868@\\x95\\\\\\xc5\\xe27\\xfbG@\\xec%2\\x18\\xc8\\x868@\\xfb\\xd9~\\xe88\\xfbG@\\xea\\xd1\\n\\xc2\\xcb\\x868@\\x8e_\\xd3\\xde;\\xfbG@\\x0b\\x87\\x94U\\xc7\\x868@\\xed\\xa9\\x8b\\xca<\\xfbG@\\xfe?\\xf3\\xde\\xbd\\x868@\\xefs|\\xb48\\xfbG@@\\xfe-\\\\\\xb1\\x868@#\\xaf\\x18\\xbf:\\xfbG@\\x19O\\xa9\\xb7\\xab\\x868@\\x9c\\x8f\\xc6\\xfc7\\xfbG@\\xea\\xfeVW\\xaa\\x868@ku\\x83\\xb2:\\xfbG@r\\xcb\\xfd\\xc4\\xb7\\x868@\\xf3$DT<\\xfbG@s\\
--------------------------------------------------
Table full name: GEO_OPENSTREETMAP.GEO_OPENSTREETMAP.PLANET_LAYERS
Column name: layer_code Type: NUMBER
Column name: osm_id Type: NUMBER
Column name: osm_timestamp Type: NUMBER
Column name: osm_way_id Type: NUMBER
Column name: layer_class Type: TEXT
Column name: all_tags Type: VARIANT
Column name: layer_name Type: TEXT
Column name: geometry Type: BINARY
Column name: gdal_type Type: TEXT
Column name: osm_version Type: NUMBER
Sample rows:
[{'layer_code': 1500, 'layer_class': 'building', 'layer_name': 'building', 'gdal_type': 'multipolygons', 'osm_id': None, 'osm_way_id': 80820903, 'osm_timestamp': 1286621389000000, 'osm_version': 1, 'all_tags': '[\n  {\n    "key": "building",\n    "value": "yes"\n  },\n  {\n    "key": "source",\n    "value": "extraction vectorielle v1 cadastre-dgi-fr source : Direction Générale des Impôts - Cadas. Mise à jour : 2010"\n  },\n  {\n    "key": "wall",\n    "value": "no"\n  }\n]', 'geometry': "bytearray(b'\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x06\\x00\\x00\\x00\\xa5\\xa8\\x8e\\xb0\\x03\\xb2\\x03@\\xae\\xdf\\x02\\xbf\\xfceH@<\\x1e\\xe9\\xc2\\xfe\\xb1\\x03@\\rrr\\x1a\\xfdeH@\\xf7\\xe7\\xa2!\\xe3\\xb1\\x03@\\xfc|J\\x84\\xfceH@Z\\xb5\\x10\\x89\\xe7\\xb1\\x03@H\\xec\\x7f%\\xfceH@\\x80\\xdd\\x9fA\\xf9\\xb1\\x03@%\\xfc\\xf7\\x85\\xfceH@\\xa5\\xa8\\x8e\\xb0\\x03\\xb2\\x03@\\xae\\xdf\\x02\\xbf\\xfceH@')"}, {'layer_code': 1500, 'layer_class': 'building', 'layer_name': 'building', 'gdal_type': 'multipolygons', 'osm_id': None, 'osm_way_id': 159980615, 'osm_timestamp': 1334665988000000, 'osm_version': 1, 'all_tags': '[\n  {\n    "key": "building",\n    "value": "yes"\n  },\n  {\n    "key": "source",\n    "value": "cadastre-dgi-fr source : Direction Générale des Impôts - Cadastre. Mise à jour : 2012"\n  },\n  {\n    "key": "wall",\n    "value": "no"\n  }\n]', 'geometry': 'bytearray(b\'\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x06\\x00\\x00\\x00\\x89\\x8e\\xe4\\xf2\\x1f"\\x1b@\\x06\\xf0\\x16HP\\xc6E@\\xbf3\\xda\\xaa$"\\x1b@+\\xfaC3O\\xc6E@Qf\\x83L2"\\x1b@\\x90\\xbf\\xb4\\xa8O\\xc6E@\\x1e\\xc1\\x8d\\x94-"\\x1b@=1\\xeb\\xc5P\\xc6E@]\\xc3\\x0c\\x8d\\\'"\\x1b@\\x89\\xce2\\x8bP\\xc6E@\\x89\\x8e\\xe4\\xf2\\x1f"\\x1b@\\x06\\xf0\\x16HP\\xc6E@\')'}, {'layer_code': 1500, 'layer_class': 'building', 'layer_name': 'building', 'gdal_type': 'multipolygons', 'osm_id': None, 'osm_way_id': 296636352, 'osm_timestamp': 1407493810000000, 'osm_version': 1, 'all_tags': '[\n  {\n    "key": "building",\n    "value": "yes"\n  },\n  {\n    "key": "source",\n    "value": "cadastre-dgi-fr source : Direction Générale des Finances Publiques - Cadastre. Mise à jour : 2014"\n  },\n  {\n    "key": "wall",\n    "value": "no"\n  }\n]', 'geometry': "bytearray(b'\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\xccy\\xc6\\xbedUJ\\xc0\\x16\\x01N\\xef\\xe2\\x9d\\x14@\\x885\\x95EaUJ\\xc0\\x16\\x01N\\xef\\xe2\\x9d\\x14@\\x875\\x95EaUJ\\xc0&U\\xdbM\\xf0\\x9d\\x14@\\xccy\\xc6\\xbedUJ\\xc0\\xa3v\\xbf\\n\\xf0\\x9d\\x14@\\xccy\\xc6\\xbedUJ\\xc0\\x16\\x01N\\xef\\xe2\\x9d\\x14@')"}, {'layer_code': 1500, 'layer_class': 'building', 'layer_name': 'building', 'gdal_type': 'multipolygons', 'osm_id': None, 'osm_way_id': 181204824, 'osm_timestamp': 1347758554000000, 'osm_version': 1, 'all_tags': '[\n  {\n    "key": "building",\n    "value": "yes"\n  },\n  {\n    "key": "source",\n    "value": "cadastre-dgi-fr source : Direction Générale des Impôts - Cadastre. Mise à jour : 2012"\n  },\n  {\n    "key": "wall",\n    "value": "no"\n  }\n]', 'geometry': 'bytearray(b\'\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x05\\x00\\x00\\x00#*T7\\x17\\x7f\\x17@o\\xd9!\\xfea\\xcbF@\\x8a:s\\x0f\\t\\x7f\\x17@@\\x89\\xcf\\x9d`\\xcbF@\\xb9"1A\\r\\x7f\\x17@L7\\x89A`\\xcbF@R\\x12\\x12i\\x1b\\x7f\\x17@{\\x87\\xdb\\xa1a\\xcbF@#*T7\\x17\\x7f\\x17@o\\xd9!\\xfea\\xcbF@\')'}, {'layer_code': 1500, 'layer_class': 'building', 'layer_name': 'building', 'gdal_type': 'multipolygons', 'osm_id': None, 'osm_way_id': 235356919, 'osm_timestamp': 1377626831000000, 'osm_version': 1, 'all_tags': '[\n  {\n    "key": "building",\n    "value": "yes"\n  },\n  {\n    "key": "source",\n    "value": "cadastre-dgi-fr source : Direction Générale des Finances Publiques - Cadastre. Mise à jour : 2013"\n  },\n  {\n    "key": "wall",\n    "value": "no"\n  }\n]', 'geometry': "bytearray(b'\\x01\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\xcc\\nE\\xba\\x9fS\\xb0?1\\x10\\x04\\xc8\\xd0\\xa7G@\\x88k\\xb5\\x87\\xbdP\\xb0?`\\xc8\\xeaV\\xcf\\xa7G@ \\xbb\\x0b\\x94\\x14X\\xb0?\\x97=\\tl\\xce\\xa7G@\\x8c\\xd7\\xbc\\xaa\\xb3Z\\xb0?\\x96\\t\\xbf\\xd4\\xcf\\xa7G@\\xd3,\\xd0\\xee\\x90b\\xb0?\\x94m\\xe0\\x0e\\xd4\\xa7G@6\\x1d\\x01\\xdc,^\\xb0?\\xe7\\xc7_Z\\xd4\\xa7G@\\x1a\\xfb\\x92\\x8d\\x07[\\xb0?\\xf82Q\\x84\\xd4\\xa7G@\\xcc\\nE\\xba\\x9fS\\xb0?1\\x10\\x04\\xc8\\xd0\\xa7G@')"}]
--------------------------------------------------
External knowledge that might be helpful: 
None
The table structure information is ({database name: {schema name: [table name]}}): 
{'GEO_OPENSTREETMAP': {'GEO_OPENSTREETMAP': ['HISTORY_RELATIONS', 'HISTORY_CHANGESETS', 'PLANET_FEATURES', 'PLANET_FEATURES_POINTS', 'HISTORY_LAYERS', 'PLANET_WAYS', 'HISTORY_NODES', 'PLANET_NODES', 'PLANET_RELATIONS', 'PLANET_LAYERS']}}

Some few-shot examples after column exploration may be helpful:
Query:
--Description: Find the multipolygon that carries wikidata = 'Q191' and retrieve its geometry.  
SELECT  
      pf."geometry"                                              AS "q191_wkb" ,
      TO_GEOGRAPHY(pf."geometry")                                AS "q191_geo" ,
      f_tag.value:"value"::STRING                                AS "q191_name" ,
      pf."osm_way_id"                                            AS "q191_way_id"
FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES"  pf
       ,LATERAL FLATTEN(input => pf."all_tags")                  f_tag
WHERE  pf."feature_type" = 'multipolygons'
  AND  f_tag.value:"key"::STRING   = 'wikidata'
  AND  f_tag.value:"value"::STRING = 'Q191'
LIMIT  20 ;
Answer:
q191_wkb,q191_geo,q191_name,q191_way_id
"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\xb8(\x00\x00p\x82o\x9a>\xcf;@\xc3\xc8\xdc\xc6\xb0\xefL@\xb6\x9e\xc6b@\xcf;@\xe1\xa7\x05\x8a\xb3\xefL@K\xa1\x98aH\xcf;@\xae\x87\x8a\xcc\xb7\xefL@\xf5\xbb\xb05[\xcf;@\x1d\x1dW#\xbb\xefL@\x06ik\xe9v\xcf;@t\\\xe8\xa5\xbd\xefL@=D\xa3;\x88\xcf;@\xab\xf3\xa8\xf8\xbf\xefL@M\x8c\xc0\xb3\x98\xcf;@\xa1\x80\xed`\xc4\xefL@\xb7S),\xa7\xcf;@\xc7):\x92\xcb\xefL@\xde\xc3oT\xb8\xcf;@\xa6\x0f]P\xdf\xefL@c\xf47\xfc\xc9\xcf;@\
Query:
--Description: Sample a few point features and display their GEOGRAPHY form – verifies TO_GEOGRAPHY works fine.
SELECT  "osm_id",
        TO_GEOGRAPHY("geometry") AS pt_geo
FROM    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS"
WHERE   "geometry" IS NOT NULL
LIMIT   20
Answer:
osm_id,PT_GEO
8242788812,"{
  ""coordinates"": [
    2.060375160000000e+01,
    3.873374509999999e+01
  ],
  ""type"": ""Point""
}"
8242788756,"{
  ""coordinates"": [
    2.060160180000000e+01,
    3.873141300000000e+01
  ],
  ""type"": ""Point""
}"
8242788547,"{
  ""coordinates"": [
    2.060782930000000e+01,
    3.874128510000001e+01
  ],
  ""type"": ""Point""
}"
8242788727,"{
  ""coordinates"": [
    2.060303310000000e+01,
    3.873342430000000e+01
  ],
  ""type"": ""Point""
}"
824278865
Query:
--Description: Count points inside EACH multipolygon that intersects Estonia (wikidata = Q191) and lacks a wikidata tag; return top-20.
WITH q191 AS (                                   -- Estonia geometry
        SELECT TO_GEOGRAPHY(pf."geometry") AS geo
        FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
               LATERAL FLATTEN(input => pf."all_tags") wd
        WHERE  pf."feature_type" = 'multipolygons'
          AND  wd.value:"key"::STRING   = 'wikidata'
          AND  wd.value:"value"::STRING = 'Q191'
        LIMIT 1
), cand AS (                                     -- intersecting polygons without wikidata
        SELECT DISTINCT
               pf."osm_way_id" ,
               TO_GEOGRAPHY(pf."geometry") AS geo ,
               MAX(IFF(t.value:"key"::STRING = 'name',           -- grab “name” tag
                       t.value:"value"::STRING, NULL))
                 OVER (PARTITION BY pf."osm_way_id") AS name
        FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
               q191 ,
               LATERAL FLATTEN(input => pf."all_tags") t
        WHERE  pf."feature_type" = 'multipolygons'
          AND  ST_INTERSECTS(q191.geo , TO_GEOGRAPHY(pf."geometry"))
        QUALIFY SUM(IFF(t.value:"key"::STRING = 'wikidata',1,0))
                OVER (PARTITION BY pf."osm_way_id") = 0
)
SELECT  c."osm_way_id",
        COALESCE(c.name,'(no name)')               AS name,
        COUNT(*)                                   AS inside_point_count
FROM    cand c
JOIN    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS" p
          ON ST_CONTAINS(c.geo , TO_GEOGRAPHY(p."geometry"))
GROUP BY c."osm_way_id", c.name
ORDER BY inside_point_count DESC
LIMIT 20
Answer:
osm_way_id,NAME,INSIDE_POINT_COUNT
679451224,Viljandi linna muinsuskaitseala,2013
45452606,(no name),1554
45452841,(no name),1366
180939774,(no name),1218
73903261,(no name),659
653438746,Lossipark,484
45553221,(no name),205
45462066,(no name),197
83052075,(no name),170
45517321,(no name),129
618962928,(no name),118
27482623,(no name),113
193102121,(no name),113
45452832,(no name),108
618810455,(no name),108
319298306,(no name),105
99729276,(no name),105
Query:
--Description: Extract the TOP-2 multipolygons (by contained-point count) that meet the criteria and show their names & counts.
WITH q191 AS (
        SELECT TO_GEOGRAPHY(pf."geometry") AS geo
        FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
               LATERAL FLATTEN(input => pf."all_tags") wd
        WHERE  pf."feature_type"='multipolygons'
          AND  wd.value:"key"::STRING='wikidata'
          AND  wd.value:"value"::STRING='Q191'
        LIMIT 1
), cand AS (                                      -- polygons intersecting Estonia w/ no wikidata
        SELECT DISTINCT
               pf."osm_way_id",
               TO_GEOGRAPHY(pf."geometry") AS geo,
               MAX(IFF(t.value:"key"::STRING='name',
                       t.value:"value"::STRING,NULL))
               OVER (PARTITION BY pf."osm_way_id") AS name
        FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
               q191 ,
               LATERAL FLATTEN(input => pf."all_tags") t
        WHERE  pf."feature_type"='multipolygons'
          AND  ST_INTERSECTS(q191.geo , TO_GEOGRAPHY(pf."geometry"))
        QUALIFY SUM(IFF(t.value:"key"::STRING='wikidata',1,0))
                OVER (PARTITION BY pf."osm_way_id") = 0
), ranked AS (
        SELECT  c."osm_way_id",
                COALESCE(c.name,'(no name)') AS name,
                COUNT(*)                     AS inside_point_count,
                ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS rn
        FROM    cand c
        JOIN    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS" p
                ON ST_CONTAINS(c.geo , TO_GEOGRAPHY(p."geometry"))
        GROUP BY c."osm_way_id", c.name
)
SELECT  "osm_way_id",
        name,
        inside_point_count
FROM    ranked
WHERE   rn <= 2
ORDER BY inside_point_count DESC
Answer:
osm_way_id,NAME,INSIDE_POINT_COUNT
679451224,Viljandi linna muinsuskaitseala,2013
45452606,(no name),1554
Query:
--Description: 
-- Show a few point-features that fall inside the single top-ranked multipolygon
-- (i.e., the polygon intersecting Estonia, lacking a wikidata tag, and enclosing
-- the greatest number of points).  Window functions appear only inside QUALIFY.
WITH q191 AS (                                            -- Estonia geometry
        SELECT TO_GEOGRAPHY(pf."geometry") AS geo
        FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
               LATERAL FLATTEN(input => pf."all_tags") wd
        WHERE  pf."feature_type" = 'multipolygons'
          AND  wd.value:"key"::STRING   = 'wikidata'
          AND  wd.value:"value"::STRING = 'Q191'
        LIMIT 1
), cand AS (                                              -- polygons intersecting Estonia, no wikidata
        SELECT DISTINCT
               pf."osm_way_id",
               TO_GEOGRAPHY(pf."geometry") AS geo
        FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
               q191 ,
               LATERAL FLATTEN(input => pf."all_tags") t
        WHERE  pf."feature_type" = 'multipolygons'
          AND  ST_INTERSECTS(q191.geo , TO_GEOGRAPHY(pf."geometry"))
        QUALIFY SUM(IFF(t.value:"key"::STRING = 'wikidata',1,0))
                OVER (PARTITION BY pf."osm_way_id") = 0
), ranked AS (                                            -- rank by enclosed points
        SELECT  c."osm_way_id",
                COUNT(*) AS cnt,
                ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS rn
        FROM    cand c
        JOIN    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS" p
                ON ST_CONTAINS(c.geo , TO_GEOGRAPHY(p."geometry"))
        GROUP BY c."osm_way_id"
), top_poly AS (                                          -- geometry of the #1 polygon
        SELECT TO_GEOGRAPHY(pf."geometry") AS poly_geo
        FROM   "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf
        JOIN   ranked r
          ON   pf."osm_way_id" = r."osm_way_id"
        WHERE  r.rn = 1
)
SELECT  p."osm_id",
        p."geometry"
FROM    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES_POINTS" p ,
        top_poly
WHERE   ST_CONTAINS(top_poly.poly_geo , TO_GEOGRAPHY(p."geometry"))
LIMIT   20
Answer:
osm_id,geometry
5434805833,bytearray(b'\x01\x01\x00\x00\x00\xabu\xe2r\xbc\x989@;\x1dm\xc1\xf7-M@')
1996894579,bytearray(b'\x01\x01\x00\x00\x00A\xbe\xdf\xc3\x80\x9a9@\x94\xee\xf8@<.M@')
306980045,bytearray(b'\x01\x01\x00\x00\x00\xdf\xd2{t4\x989@V\xbb&\xa45.M@')
5434760196,bytearray(b'\x01\x01\x00\x00\x00\x86\xb1\xe0\xd9y\x989@\xf3\x1c\x91\xefR.M@')
2849868444,bytearray(b'\x01\x01\x00\x00\x00{k\x05\xf2\x91\x999@i\x8d\x9c\xe0\xf6-M@')
301773596,"bytearray(b'\x01\x01\x00\x00\x00\xfb2b\xb0,\x98
Query:
--Description: 
-- Bounding box and surface area of the Estonia multipolygon (wikidata = Q191).
SELECT  ST_ENVELOPE(TO_GEOGRAPHY(pf."geometry")) AS q191_bbox,
        ST_AREA(    TO_GEOGRAPHY(pf."geometry")) AS q191_area_m2
FROM    "GEO_OPENSTREETMAP"."GEO_OPENSTREETMAP"."PLANET_FEATURES" pf ,
        LATERAL FLATTEN(input => pf."all_tags") wd
WHERE   pf."feature_type" = 'multipolygons'
  AND   wd.value:"key"::STRING   = 'wikidata'
  AND   wd.value:"value"::STRING = 'Q191'
LIMIT 1
Answer:
Q191_BBOX,Q191_AREA_M2
"{
  ""coordinates"": [
    [
      [
        2.138260689999997e+01,
        5.750929969999994e+01
      ],
      [
        2.821001750000003e+01,
        5.750929969999994e+01
      ],
      [
        2.821001750000003e+01,
        5.993837540000006e+01
      ],
      [
        2.138260689999997e+01,
        5.993837540000006e+01
      ],
      [
        2.138260689999997e+01,
        5.750929969999994e+01
      ]
    ]
  ],
  ""type"": ""Polygon""
}",70109039870.71025
Task: Among all multipolygons located within the same geographic area as the multipolygon associated with Wikidata item Q191, but lacking a 'wikidata' tag themselves, which two rank highest by the number of points that lie within their boundaries, and what are their names?

Please think step by step and answer only one complete SQL in snowflake dialect in ```sql``` format.
SQL usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: The table structure information is ({database name: {schema name: [table name]}}): 
{'GEO_OPENSTREETMAP': {'GEO_OPENSTREETMAP': ['HISTORY_RELATIONS', 'HISTORY_CHANGESETS', 'PLANET_FEATURES', 'PLANET_FEATURES_POINTS', 'HISTORY_LAYERS', 'PLANET_WAYS', 'HISTORY_NODES', 'PLANET_NODES', 'PLANET_RELATIONS', 'PLANET_LAYERS']}}

When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
If the task description does not specify the number of decimal places, retain all decimals to four places.

[Self-refine]
2025-05-07 02:58:59 - Thread-258 (execute) - INFO - [Try to run SQL in self-refine]
```sql
/*  ---------------------------------------------------------------
    Top-2 multipolygons located inside Estonia (wikidata = Q191)
    that themselves have NO 'wikidata' tag, ordered by the amount
    of point-features they contain.
------------------------------------------------------------------*/
WITH estonia AS (                              -- geometry of Estonia
    SELECT TO_GEOGRAPHY(pf."geometry") AS geo
    FROM   GEO_OPENSTREETMAP.GEO_OPENSTREETMAP.PLANET_FEATURES  pf ,
           LATERAL FLATTEN(input => pf."all_tags")              t
    WHERE  pf."feature_type" = 'multipolygons'
      AND  t.value:"key"::STRING   = 'wikidata'
      AND  t.value:"value"::STRING = 'Q191'
    LIMIT 1
), candidate_polys AS (                        -- polys inside Estonia, w/o wikidata
    SELECT DISTINCT
           pf."osm_way_id" ,
           TO_GEOGRAPHY(pf."geometry")                         AS geo ,
           MAX(IFF(t.value:"key"::STRING = 'name',
                   t.value:"value"::STRING , NULL))
             OVER (PARTITION BY pf."osm_way_id")               AS name
    FROM   GEO_OPENSTREETMAP.GEO_OPENSTREETMAP.PLANET_FEATURES pf ,
           estonia ,
           LATERAL FLATTEN(input => pf."all_tags")             t
    WHERE  pf."feature_type" = 'multipolygons'
      AND  ST_INTERSECTS(estonia.geo , TO_GEOGRAPHY(pf."geometry"))
    QUALIFY SUM(IFF(t.value:"key"::STRING = 'wikidata',1,0))
              OVER (PARTITION BY pf."osm_way_id") = 0
), poly_point_counts AS (                     -- count enclosed points for each poly
    SELECT  c."osm_way_id",
            COALESCE(c.name,'(no name)')      AS poly_name,
            COUNT(*)                          AS point_cnt,
            ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS rn
    FROM    candidate_polys                                   c
    JOIN    GEO_OPENSTREETMAP.GEO_OPENSTREETMAP.PLANET_FEATURES_POINTS p
              ON  p."geometry" IS NOT NULL
             AND ST_CONTAINS(c.geo , TO_GEOGRAPHY(p."geometry"))
    GROUP BY c."osm_way_id", poly_name
)
SELECT  poly_name               AS name,
        point_cnt               AS contained_point_count
FROM    poly_point_counts
WHERE   rn <= 2
ORDER BY point_cnt DESC NULLS LAST;
```
[Try to run SQL in self-refine]
2025-05-07 02:59:14 - Thread-258 (execute) - INFO - Total iteration counts: 0
