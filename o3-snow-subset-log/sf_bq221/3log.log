2025-05-07 01:34:06 - Thread-19 (execute) - INFO - [Exploration]
```sql
--Description: 1) Sample publications that have a filing date and an application number
SELECT 
  "publication_number", 
  "application_number", 
  "filing_date", 
  "cpc"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "application_number" IS NOT NULL
  AND "filing_date" > 0
LIMIT 20;
```

```sql
--Description: 2) Flatten the "cpc" VARIANT column to see the individual CPC objects
SELECT  
  p."publication_number",
  p."filing_date",
  c.value:"code"::STRING AS "cpc_code"
FROM PATENTS.PATENTS.PUBLICATIONS p,
LATERAL FLATTEN(input => p."cpc") c
LIMIT 20;
```

```sql
--Description: 3) Distinct list of raw CPC codes appearing in the data
SELECT DISTINCT  
  c.value:"code"::STRING AS "cpc_code"
FROM PATENTS.PATENTS.PUBLICATIONS p,
LATERAL FLATTEN(input => p."cpc") c
WHERE c.value:"code" IS NOT NULL
LIMIT 20;
```

```sql
--Description: 4) Distinct CPC “group” (the part before ‘/’) extracted from the codes
SELECT DISTINCT  
  SPLIT_PART(c.value:"code"::STRING, '/', 1) AS "cpc_group"
FROM PATENTS.PATENTS.PUBLICATIONS p,
LATERAL FLATTEN(input => p."cpc") c
WHERE c.value:"code" IS NOT NULL
LIMIT 20;
```

```sql
--Description: 5) See CPC_DEFINITION rows at level 5 (their full titles)
SELECT  
  "symbol",
  "titleFull"
FROM PATENTS.PATENTS.CPC_DEFINITION
WHERE "level" = 5
LIMIT 20;
```

```sql
--Description: 6) Join extracted CPC groups to the level-5 CPC definition table to view titles
SELECT DISTINCT  
  g."cpc_group",
  d."titleFull"
FROM (
  SELECT  
    SPLIT_PART(c.value:"code"::STRING, '/', 1) AS "cpc_group"
  FROM PATENTS.PATENTS.PUBLICATIONS p,
  LATERAL FLATTEN(input => p."cpc") c
  WHERE c.value:"code" IS NOT NULL
) g
JOIN PATENTS.PATENTS.CPC_DEFINITION d
  ON g."cpc_group" = d."symbol"
WHERE d."level" = 5
LIMIT 20;
```

```sql
--Description: 7) Annual counts of filings for every CPC code (all codes, not just first)
SELECT  
  SPLIT_PART(c.value:"code"::STRING, '/', 1) AS "cpc_group",
  FLOOR(p."filing_date"/10000)               AS "year",
  COUNT(*)                                   AS "filings"
FROM PATENTS.PATENTS.PUBLICATIONS p,
LATERAL FLATTEN(input => p."cpc") c
WHERE p."application_number" IS NOT NULL
  AND p."filing_date" > 0
GROUP BY "cpc_group", "year"
LIMIT 20;
```

```sql
--Description: 8) Identify the FIRST CPC code per publication together with the filing year
SELECT  
  x."publication_number",
  x."first_cpc",
  x."filing_year"
FROM (
  SELECT  
    p."publication_number",
    SPLIT_PART(c.value:"code"::STRING, '/', 1) AS "first_cpc",
    FLOOR(p."filing_date"/10000)               AS "filing_year",
    ROW_NUMBER() OVER (PARTITION BY p."publication_number" ORDER BY c.index) AS rn
  FROM PATENTS.PATENTS.PUBLICATIONS p,
  LATERAL FLATTEN(input => p."cpc") c
  WHERE p."application_number" IS NOT NULL
    AND p."filing_date" > 0
) x
WHERE x.rn = 1
LIMIT 20;
```

```sql
--Description: 9) Annual filing counts for the first CPC code only
SELECT  
  t."first_cpc"  AS "cpc_group",
  t."filing_year" AS "year",
  COUNT(*)        AS "filings"
FROM (
  SELECT  
    p."publication_number",
    SPLIT_PART(c.value:"code"::STRING, '/', 1) AS "first_cpc",
    FLOOR(p."filing_date"/10000)               AS "filing_year",
    ROW_NUMBER() OVER (PARTITION BY p."publication_number" ORDER BY c.index) AS rn
  FROM PATENTS.PATENTS.PUBLICATIONS p,
  LATERAL FLATTEN(input => p."cpc") c
  WHERE p."application_number" IS NOT NULL
    AND p."filing_date" > 0
) t
WHERE t.rn = 1
GROUP BY t."first_cpc", t."filing_year"
LIMIT 20;
```

```sql
--Description: 10) Example calculation of exponential moving average (α = 0.2) on yearly counts
WITH yearly AS (
  SELECT  
    t."first_cpc"  AS "cpc_group",
    t."filing_year" AS "year",
    COUNT(*)        AS "filings"
  FROM (
    SELECT  
      p."publication_number",
      SPLIT_PART(c.value:"code"::STRING, '/', 1) AS "first_cpc",
      FLOOR(p."filing_date"/10000)               AS "filing_year",
      ROW_NUMBER() OVER (PARTITION BY p."publication_number" ORDER BY c.index) AS rn
    FROM PATENTS.PATENTS.PUBLICATIONS p,
    LATERAL FLATTEN(input => p."cpc") c
    WHERE p."application_number" IS NOT NULL
      AND p."filing_date" > 0
  ) t
  WHERE t.rn = 1
  GROUP BY t."first_cpc", t."filing_year"
)
SELECT  
  y."cpc_group",
  y."year",
  SUM(y2."filings" * POWER(0.8, y."year" - y2."year")) AS "ema_alpha_0_2"
FROM yearly y
JOIN yearly y2
  ON y."cpc_group" = y2."cpc_group"
 AND y2."year" <= y."year"
GROUP BY y."cpc_group", y."year"
LIMIT 20;
```
[Exploration]
2025-05-07 01:34:06 - Thread-19 (execute) - INFO - [Try to execute]
--Description: 1) Sample publications that have a filing date and an application number
SELECT 
  "publication_number", 
  "application_number", 
  "filing_date", 
  "cpc"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "application_number" IS NOT NULL
  AND "filing_date" > 0
LIMIT 20;
[Try to execute]
2025-05-07 01:34:07 - Thread-19 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 1) Sample publications that have a filing date and an application number
SELECT 
  "publication_number", 
  "application_number", 
  "filing_date", 
  "cpc"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "application_number" IS NOT NULL
  AND "filing_date" > 0
LIMIT 20;
Results:
publication_number,application_number,filing_date,cpc
IE-20080323-A1,IE-20080323-A,20080425,"[
  {
    ""code"": ""B62H5/144"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B60R25/093"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B62H3/08"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B62H3/08"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  }


[Successfully executed]
2025-05-07 01:34:07 - Thread-19 (execute) - INFO - [Try to execute]
--Description: 2) Flatten the "cpc" VARIANT column to see the individual CPC objects
SELECT  
  p."publication_number",
  p."filing_date",
  c.value:"code"::STRING AS "cpc_code"
FROM PATENTS.PATENTS.PUBLICATIONS p,
LATERAL FLATTEN(input => p."cpc") c
LIMIT 20;
[Try to execute]
2025-05-07 01:34:08 - Thread-19 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 2) Flatten the "cpc" VARIANT column to see the individual CPC objects
SELECT  
  p."publication_number",
  p."filing_date",
  c.value:"code"::STRING AS "cpc_code"
FROM PATENTS.PATENTS.PUBLICATIONS p,
LATERAL FLATTEN(input => p."cpc") c
LIMIT 20;
Results:
publication_number,filing_date,cpc_code
CN-2669058-Y,20031230,F24F1/48
CN-2669058-Y,20031230,F24F1/38
CN-2746550-Y,20041103,Y02E60/12
CN-201124248-Y,20071207,Y02P70/10
IT-BO20010459-A0,20010718,B65D41/485
IT-BO20010459-A0,20010718,B65D2401/35
IT-BO20010459-A0,20010718,B65D2401/20
IT-BO20010459-A0,20010718,B65D2401/25
IT-MI962322-A0,19961108,H02J7/1492
IT-MI962322-A0,19961108,H02P9/48
IT-MI962322-A0,19961108,Y02T10/92
IT-MI962322-A0,19961108,Y02T10/70
IT-MI941663-A0,19940729,F02P1/08

[Successfully executed]
2025-05-07 01:34:08 - Thread-19 (execute) - INFO - [Try to execute]
--Description: 3) Distinct list of raw CPC codes appearing in the data
SELECT DISTINCT  
  c.value:"code"::STRING AS "cpc_code"
FROM PATENTS.PATENTS.PUBLICATIONS p,
LATERAL FLATTEN(input => p."cpc") c
WHERE c.value:"code" IS NOT NULL
LIMIT 20;
[Try to execute]
2025-05-07 01:34:09 - Thread-19 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 3) Distinct list of raw CPC codes appearing in the data
SELECT DISTINCT  
  c.value:"code"::STRING AS "cpc_code"
FROM PATENTS.PATENTS.PUBLICATIONS p,
LATERAL FLATTEN(input => p."cpc") c
WHERE c.value:"code" IS NOT NULL
LIMIT 20;
Results:
cpc_code
Y02P70/10
B65D2401/35
H05K1/0373
A61P37/08
H01H71/16
B65D41/485
C08L33/00
C07C51/31
B63H8/22
C08G8/38
F02B19/14
C07D213/38
H05K3/185
F21Y2115/10
C07D403/06
A61K47/6855
H04Q2011/0013
A61K39/099
C25D5/56
H05K2203/0517

[Successfully executed]
2025-05-07 01:34:09 - Thread-19 (execute) - INFO - [Try to execute]
--Description: 4) Distinct CPC “group” (the part before ‘/’) extracted from the codes
SELECT DISTINCT  
  SPLIT_PART(c.value:"code"::STRING, '/', 1) AS "cpc_group"
FROM PATENTS.PATENTS.PUBLICATIONS p,
LATERAL FLATTEN(input => p."cpc") c
WHERE c.value:"code" IS NOT NULL
LIMIT 20;
[Try to execute]
2025-05-07 01:34:10 - Thread-19 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 4) Distinct CPC “group” (the part before ‘/’) extracted from the codes
SELECT DISTINCT  
  SPLIT_PART(c.value:"code"::STRING, '/', 1) AS "cpc_group"
FROM PATENTS.PATENTS.PUBLICATIONS p,
LATERAL FLATTEN(input => p."cpc") c
WHERE c.value:"code" IS NOT NULL
LIMIT 20;
Results:
cpc_group
A61Q5
C07D471
B30B9
F24F1
H05K2203
G07F7
C08L67
C12N2730
A61Q19
A61P29
H01L2924
F01N13
A23N1
A61K33
F21V13
C14B1
E03D1
Y02E60
H02J7
H04Q11

[Successfully executed]
2025-05-07 01:34:10 - Thread-19 (execute) - INFO - [Try to execute]
--Description: 5) See CPC_DEFINITION rows at level 5 (their full titles)
SELECT  
  "symbol",
  "titleFull"
FROM PATENTS.PATENTS.CPC_DEFINITION
WHERE "level" = 5
LIMIT 20;
[Try to execute]
2025-05-07 01:34:10 - Thread-19 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 5) See CPC_DEFINITION rows at level 5 (their full titles)
SELECT  
  "symbol",
  "titleFull"
FROM PATENTS.PATENTS.CPC_DEFINITION
WHERE "level" = 5
LIMIT 20;
Results:
symbol,titleFull
A01H,NEW PLANTS OR NON-TRANSGENIC PROCESSES FOR OBTAINING THEM; PLANT REPRODUCTION BY TISSUE CULTURE TECHNIQUES
A01F,PROCESSING OF HARVESTED PRODUCE; HAY OR STRAW PRESSES; DEVICES FOR STORING AGRICULTURAL OR HORTICULTURAL PRODUCE
A01C,PLANTING; SOWING; FERTILISING
A01G,"HORTICULTURE; CULTIVATION OF VEGETABLES, FLOWERS, RICE, FRUIT, VINES, HOPS OR SEAWEED; FORESTRY; WATERING"
A01N,"PRESERVATION OF BODIES OF HUMANS OR ANIMALS OR PLANTS OR PARTS THEREOF; BIOCIDES, e.g. AS DISI

[Successfully executed]
2025-05-07 01:34:10 - Thread-19 (execute) - INFO - [Try to execute]
--Description: 6) Join extracted CPC groups to the level-5 CPC definition table to view titles
SELECT DISTINCT  
  g."cpc_group",
  d."titleFull"
FROM (
  SELECT  
    SPLIT_PART(c.value:"code"::STRING, '/', 1) AS "cpc_group"
  FROM PATENTS.PATENTS.PUBLICATIONS p,
  LATERAL FLATTEN(input => p."cpc") c
  WHERE c.value:"code" IS NOT NULL
) g
JOIN PATENTS.PATENTS.CPC_DEFINITION d
  ON g."cpc_group" = d."symbol"
WHERE d."level" = 5
LIMIT 20;
[Try to execute]
2025-05-07 01:34:11 - Thread-19 (execute) - INFO - [Error occurred]
No data found for the specified query.

[Error occurred]
2025-05-07 01:36:09 - Thread-19 (execute) - INFO - [Corrected SQL]
```sql
--Description:  We previously joined on very specific CPC “group” codes at level-5 and obtained
--no rows.  To broaden the match (and verify that a link really exists), we now:
--  • Flatten each “cpc” JSON array row in PUBLICATIONS.
--  • Trim every CPC code down to its first four characters (the CPC subclass, e.g. “H04L”).
--    Subclasses are far more common in CPC_DEFINITION than full group symbols.
--  • Join those subclasses to CPC_DEFINITION.symbol (no extra filter on level).
--If subclasses appearing in patents also appear in the definition table, this query will
--return their titles.  Limiting to 20 rows just to inspect a sample of the results.

SELECT DISTINCT
       SUBSTR(c.value:"code"::STRING, 1, 4) AS "cpc_subclass",
       d."titleFull"
FROM PATENTS.PATENTS.PUBLICATIONS p,
     LATERAL FLATTEN(input => p."cpc") c
JOIN PATENTS.PATENTS.CPC_DEFINITION d
  ON SUBSTR(c.value:"code"::STRING, 1, 4) = d."symbol"
LIMIT 20;
```
[Corrected SQL]
2025-05-07 01:39:30 - Thread-19 (execute) - INFO - [Results for corrected sql]
{'status': 'error', 'error_msg': '##ERROR##000630 (57014): Statement reached its statement or warehouse timeout of 200 second(s) and was canceled.'}
[Results for corrected sql]
2025-05-07 01:40:46 - Thread-19 (execute) - INFO - [Corrected SQL]
```sql
--Description:  To avoid a full-table scan and the resulting timeout, we take a 0.5 % random
--SAMPLE of the PUBLICATIONS table, extract the CPC “group” part (text before ‘/’) from every
--code in that sample, deduplicate them, and then join the much smaller set to the
--CPC_DEFINITION table (level = 5) to obtain the corresponding CPC group titles.
--Limiting to 20 rows keeps the result concise.

WITH sampled_groups AS (
    SELECT DISTINCT
           SPLIT_PART(c.value:"code"::STRING, '/', 1) AS "cpc_group"
    FROM PATENTS.PATENTS.PUBLICATIONS SAMPLE (0.5) p,   -- 0.5 % random sample
         LATERAL FLATTEN(input => p."cpc") c
)
SELECT
       sg."cpc_group",
       cd."titleFull"
FROM sampled_groups sg
JOIN PATENTS.PATENTS.CPC_DEFINITION cd
  ON sg."cpc_group" = cd."symbol"
WHERE cd."level" = 5
LIMIT 20;
```
[Corrected SQL]
2025-05-07 01:40:46 - Thread-19 (execute) - INFO - [Results for corrected sql]
{'status': 'error', 'error_msg': "##ERROR##001003 (42000): SQL compilation error:\nsyntax error line 4 at position 51 unexpected 'p'.\nsyntax error line 5 at position 17 unexpected 'FLATTEN'.\nsyntax error line 5 at position 25 unexpected 'input'.\nsyntax error line 5 at position 43 unexpected 'c'."}
[Results for corrected sql]
2025-05-07 01:42:02 - Thread-19 (execute) - INFO - [Corrected SQL]
```sql
--Description:  Identify CPC “group” codes that actually occur in the publications data and look
--up their official level-5 titles.  Steps encoded in the query:
-- 1) Flatten each publication’s "cpc" array so every code is a row (alias f).
-- 2) From each code keep the text BEFORE the slash (SPLIT_PART(..., '/', 1)), i.e. the CPC group.
-- 3) Deduplicate these group strings in a CTE (cpc_groups) to minimise join workload.
-- 4) Join that set to CPC_DEFINITION on symbol, restricting to level = 5 to fetch the
--    authoritative full title for each CPC group.
-- 5) Show 20 sample rows to verify the linkage quickly.

WITH cpc_groups AS (
    SELECT DISTINCT
           SPLIT_PART(f.value:"code"::STRING, '/', 1) AS "cpc_group"
    FROM PATENTS.PATENTS.PUBLICATIONS p
         ,LATERAL FLATTEN(input => p."cpc") f
    WHERE f.value:"code" IS NOT NULL
)
SELECT
       cg."cpc_group",
       cd."titleFull"
FROM cpc_groups cg
JOIN PATENTS.PATENTS.CPC_DEFINITION cd
  ON cg."cpc_group" = cd."symbol"
WHERE cd."level" = 5
LIMIT 20;
```
[Corrected SQL]
2025-05-07 01:42:11 - Thread-19 (execute) - INFO - [Results for corrected sql]
No data found for the specified query.

[Results for corrected sql]
2025-05-07 01:42:11 - Thread-19 (execute) - INFO - [Try to execute]
--Description: 7) Annual counts of filings for every CPC code (all codes, not just first)
SELECT  
  SPLIT_PART(c.value:"code"::STRING, '/', 1) AS "cpc_group",
  FLOOR(p."filing_date"/10000)               AS "year",
  COUNT(*)                                   AS "filings"
FROM PATENTS.PATENTS.PUBLICATIONS p,
LATERAL FLATTEN(input => p."cpc") c
WHERE p."application_number" IS NOT NULL
  AND p."filing_date" > 0
GROUP BY "cpc_group", "year"
LIMIT 20;
[Try to execute]
2025-05-07 01:42:30 - Thread-19 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 7) Annual counts of filings for every CPC code (all codes, not just first)
SELECT  
  SPLIT_PART(c.value:"code"::STRING, '/', 1) AS "cpc_group",
  FLOOR(p."filing_date"/10000)               AS "year",
  COUNT(*)                                   AS "filings"
FROM PATENTS.PATENTS.PUBLICATIONS p,
LATERAL FLATTEN(input => p."cpc") c
WHERE p."application_number" IS NOT NULL
  AND p."filing_date" > 0
GROUP BY "cpc_group", "year"
LIMIT 20;
Results:
cpc_group,year,filings
Y02B10,2021,46
Y02E10,2023,222
Y02E40,2023,10
Y02A30,2008,17
B28B1,1996,1
A01N43,1988,50
A61Q19,2010,83
E04C5,2016,34
G01R19,1991,1
G05B19,1975,4
C07C37,1990,7
G01N35,2002,17
H04W8,2005,62
Y02T10,2007,230
C07K7,2009,36
F05B2240,2010,35
A61F2002,2015,228
F24F3,2018,38
B60W2720,2018,21
C08J5,2018,149

[Successfully executed]
2025-05-07 01:42:30 - Thread-19 (execute) - INFO - [Try to execute]
--Description: 8) Identify the FIRST CPC code per publication together with the filing year
SELECT  
  x."publication_number",
  x."first_cpc",
  x."filing_year"
FROM (
  SELECT  
    p."publication_number",
    SPLIT_PART(c.value:"code"::STRING, '/', 1) AS "first_cpc",
    FLOOR(p."filing_date"/10000)               AS "filing_year",
    ROW_NUMBER() OVER (PARTITION BY p."publication_number" ORDER BY c.index) AS rn
  FROM PATENTS.PATENTS.PUBLICATIONS p,
  LATERAL FLATTEN(input => p."cpc") c
  WHERE p."application_number" IS NOT NULL
    AND p."filing_date" > 0
) x
WHERE x.rn = 1
LIMIT 20;
[Try to execute]
2025-05-07 01:42:34 - Thread-19 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 8) Identify the FIRST CPC code per publication together with the filing year
SELECT  
  x."publication_number",
  x."first_cpc",
  x."filing_year"
FROM (
  SELECT  
    p."publication_number",
    SPLIT_PART(c.value:"code"::STRING, '/', 1) AS "first_cpc",
    FLOOR(p."filing_date"/10000)               AS "filing_year",
    ROW_NUMBER() OVER (PARTITION BY p."publication_number" ORDER BY c.index) AS rn
  FROM PATENTS.PATENTS.PUBLICATIONS p,
  LATERAL FLATTEN(input => p."cpc") c
  WHERE p."application_number" IS NOT NULL
    AND p."filing_date" > 0
) x
WHERE x.rn = 1
LIMIT 20;
Results:
publication_number,first_cpc,filing_year
KR-20110082195-A,Y02E10,2009
CN-104612746-B,E21B43,2015
BR-0211893-B1,C05D3,2002
CN-106440581-A,F25B2700,2016
TW-201216335-A,G06F3,2011
US-2020016476-A1,A63H30,2019
KR-20230161821-A,H01M4,2022
KR-20150009339-A,A61Q19,2013
WO-2013020894-A1,F16B37,2012
JP-7015375-B2,B41F35,2018
US-2023259686-A1,H01L2027,2022
US-2007130266-A1,H04L51,2006
EP-1928183-A2,H04N21,2007
DE-2013630-A1,E04B1,1970
KR-20210094514-A,G01S19,2018

[Successfully executed]
2025-05-07 01:42:34 - Thread-19 (execute) - INFO - [Try to execute]
--Description: 9) Annual filing counts for the first CPC code only
SELECT  
  t."first_cpc"  AS "cpc_group",
  t."filing_year" AS "year",
  COUNT(*)        AS "filings"
FROM (
  SELECT  
    p."publication_number",
    SPLIT_PART(c.value:"code"::STRING, '/', 1) AS "first_cpc",
    FLOOR(p."filing_date"/10000)               AS "filing_year",
    ROW_NUMBER() OVER (PARTITION BY p."publication_number" ORDER BY c.index) AS rn
  FROM PATENTS.PATENTS.PUBLICATIONS p,
  LATERAL FLATTEN(input => p."cpc") c
  WHERE p."application_number" IS NOT NULL
    AND p."filing_date" > 0
) t
WHERE t.rn = 1
GROUP BY t."first_cpc", t."filing_year"
LIMIT 20;
[Try to execute]
2025-05-07 01:42:42 - Thread-19 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 9) Annual filing counts for the first CPC code only
SELECT  
  t."first_cpc"  AS "cpc_group",
  t."filing_year" AS "year",
  COUNT(*)        AS "filings"
FROM (
  SELECT  
    p."publication_number",
    SPLIT_PART(c.value:"code"::STRING, '/', 1) AS "first_cpc",
    FLOOR(p."filing_date"/10000)               AS "filing_year",
    ROW_NUMBER() OVER (PARTITION BY p."publication_number" ORDER BY c.index) AS rn
  FROM PATENTS.PATENTS.PUBLICATIONS p,
  LATERAL FLATTEN(input => p."cpc") c
  WHERE p."application_number" IS NOT NULL
    AND p."filing_date" > 0
) t
WHERE t.rn = 1
GROUP BY t."first_cpc", t."filing_year"
LIMIT 20;
Results:
cpc_group,year,filings
B05B3,1965,1
G09F21,1933,1
A61B2018,2016,6
B68G7,2014,2
F21Y2103,2016,1
B65B13,2017,2
H01L31,2023,13
B60J5,2010,2
B65D55,2007,1
B25C1,1973,2
F16K27,2020,3
G09G2300,2003,3
B23Q35,1966,1
B60R16,2017,14
B29C48,2020,7
Y02E60,1998,20
H02M1,2017,18
E04F10,1914,1
F28F19,1939,1
C22C19,2014,1

[Successfully executed]
2025-05-07 01:42:42 - Thread-19 (execute) - INFO - [Try to execute]
--Description: 10) Example calculation of exponential moving average (α = 0.2) on yearly counts
WITH yearly AS (
  SELECT  
    t."first_cpc"  AS "cpc_group",
    t."filing_year" AS "year",
    COUNT(*)        AS "filings"
  FROM (
    SELECT  
      p."publication_number",
      SPLIT_PART(c.value:"code"::STRING, '/', 1) AS "first_cpc",
      FLOOR(p."filing_date"/10000)               AS "filing_year",
      ROW_NUMBER() OVER (PARTITION BY p."publication_number" ORDER BY c.index) AS rn
    FROM PATENTS.PATENTS.PUBLICATIONS p,
    LATERAL FLATTEN(input => p."cpc") c
    WHERE p."application_number" IS NOT NULL
      AND p."filing_date" > 0
  ) t
  WHERE t.rn = 1
  GROUP BY t."first_cpc", t."filing_year"
)
SELECT  
  y."cpc_group",
  y."year",
  SUM(y2."filings" * POWER(0.8, y."year" - y2."year")) AS "ema_alpha_0_2"
FROM yearly y
JOIN yearly y2
  ON y."cpc_group" = y2."cpc_group"
 AND y2."year" <= y."year"
GROUP BY y."cpc_group", y."year"
LIMIT 20;
[Try to execute]
2025-05-07 01:42:44 - Thread-19 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 10) Example calculation of exponential moving average (α = 0.2) on yearly counts
WITH yearly AS (
  SELECT  
    t."first_cpc"  AS "cpc_group",
    t."filing_year" AS "year",
    COUNT(*)        AS "filings"
  FROM (
    SELECT  
      p."publication_number",
      SPLIT_PART(c.value:"code"::STRING, '/', 1) AS "first_cpc",
      FLOOR(p."filing_date"/10000)               AS "filing_year",
      ROW_NUMBER() OVER (PARTITION BY p."publication_number" ORDER BY c.index) AS rn
    FROM PATENTS.PATENTS.PUBLICATIONS p,
    LATERAL FLATTEN(input => p."cpc") c
    WHERE p."application_number" IS NOT NULL
      AND p."filing_date" > 0
  ) t
  WHERE t.rn = 1
  GROUP BY t."first_cpc", t."filing_year"
)
SELECT  
  y."cpc_group",
  y."year",
  SUM(y2."filings" * POWER(0.8, y."year" - y2."year")) AS "ema_alpha_0_2"
FROM yearly y
JOIN yearly y2
  ON y."cpc_group" = y2."cpc_group"
 AND y2."year" <= y."year"
GROUP BY y."cpc_group", y."year"
LIMIT 20;
Results:
cpc_group,year,ema_alpha_0_2
D10B2403,2004,1.9342177280000001
G03G15,2019,96.5715132373796
H01R13,2022,149.5608552754088
B09B3,1998,7.392414771218871
C12P21,2016,11.310655272771745
C08L89,2018,2.0285585708047194
A61B2017,2016,88.54963316040536
B05B11,2018,24.911332519458366
H01L29,2020,245.96174147912933
A47L15,2023,23.050151323724524
G06K7,2003,15.090207880168771
H02P8,1971,1.0
G06K19,2006,30.35677988849588
D06M15,1966,3.2178536123181085
Y10T292,1977,5.009403919102572

[Successfully executed]
2025-05-07 01:42:44 - Thread-19 (execute) - INFO - itercount: 0
2025-05-07 01:42:44 - Thread-19 (execute) - INFO - [Self-refine]
Table full name: PATENTS.PATENTS.DISCLOSURES_13
Column name: serial_cleaned Type: TEXT
Column name: sso Type: TEXT
Column name: disclosure_event Type: TEXT
Column name: reciprocity Type: TEXT
Column name: patent_owner_harmonized Type: TEXT
Column name: record_id Type: TEXT
Column name: family_id Type: TEXT
Column name: blanket_scope Type: TEXT
Column name: copyright Type: TEXT
Column name: standard Type: TEXT
Column name: licensing_commitment Type: TEXT
Column name: committee_project Type: TEXT
Column name: sc_name Type: TEXT
Column name: blanket_type Type: TEXT
Column name: pub_cleaned Type: TEXT
Column name: third_party Type: TEXT
Column name: wg_name Type: TEXT
Column name: patent_owner_unharmonized Type: TEXT
Column name: tc_name Type: TEXT
Column name: date Type: NUMBER
Sample rows:
[{'family_id': '22549751', 'record_id': 'REC00002', 'disclosure_event': 'DE0001', 'sso': 'ANSI', 'patent_owner_harmonized': '3M', 'patent_owner_unharmonized': '3M', 'date': 19751124, 'standard': 'X3.55;X3.56', 'committee_project': '', 'tc_name': '', 'sc_name': '', 'wg_name': '', 'licensing_commitment': 'FRAND', 'copyright': '', 'blanket_type': '0', 'blanket_scope': '', 'third_party': '0', 'reciprocity': '0', 'serial_cleaned': '', 'pub_cleaned': 'US3692255'}, {'family_id': '23170520', 'record_id': 'REC00001', 'disclosure_event': 'DE0001', 'sso': 'ANSI', 'patent_owner_harmonized': '3M', 'patent_owner_unharmonized': '3M', 'date': 19751124, 'standard': 'X3.55;X3.56', 'committee_project': '', 'tc_name': '', 'sc_name': '', 'wg_name': '', 'licensing_commitment': 'FRAND', 'copyright': '', 'blanket_type': '0', 'blanket_scope': '', 'third_party': '0', 'reciprocity': '0', 'serial_cleaned': '', 'pub_cleaned': 'US3861619'}, {'family_id': '23170520', 'record_id': 'REC00006', 'disclosure_event': 'DE0003', 'sso': 'ANSI', 'patent_owner_harmonized': '3M', 'patent_owner_unharmonized': '3M', 'date': 19890711, 'standard': 'X3.55;X3.56;X3.72;X3.116;X3.127;X3.136', 'committee_project': '', 'tc_name': '', 'sc_name': '', 'wg_name': '', 'licensing_commitment': 'Specific Terms', 'copyright': '', 'blanket_type': '0', 'blanket_scope': '', 'third_party': '0', 'reciprocity': '0', 'serial_cleaned': '', 'pub_cleaned': 'US3861619'}, {'family_id': '22549751', 'record_id': 'REC00008', 'disclosure_event': 'DE0004', 'sso': 'ANSI', 'patent_owner_harmonized': '3M', 'patent_owner_unharmonized': '3M', 'date': 19890906, 'standard': '', 'committee_project': '', 'tc_name': '', 'sc_name': '', 'wg_name': '', 'licensing_commitment': 'FRAND', 'copyright': '', 'blanket_type': '2', 'blanket_scope': '', 'third_party': '0', 'reciprocity': '0', 'serial_cleaned': '', 'pub_cleaned': 'US3692255'}, {'family_id': '23418274', 'record_id': 'REC00024', 'disclosure_event': 'DE0013', 'sso': 'ANSI', 'patent_owner_harmonized': 'Agilent Technologies', 'patent_owner_unharmonized': 'Agilent Technologies', 'date': 20020606, 'standard': '1588', 'committee_project': 'IEEE', 'tc_name': '', 'sc_name': '', 'wg_name': '', 'licensing_commitment': 'FRAND', 'copyright': '', 'blanket_type': '0', 'blanket_scope': '', 'third_party': '0', 'reciprocity': '0', 'serial_cleaned': '', 'pub_cleaned': 'US5566180'}]

--------------------------------------------------
Table full name: PATENTS.PATENTS.PUBLICATIONS
Column name: examiner Type: VARIANT Description: Is this text truncated?
Column name: fterm Type: VARIANT Description: For US publications only, the description in HTML, limited to the first 9 megabytes
Column name: application_number_formatted Type: TEXT Description: Application number, formatted to the patent office format where possible.
Column name: application_number Type: TEXT Description: Patent application number (DOCDB compatible), eg: 'US-87124404-A'. This may not always be set.
Column name: grant_date Type: NUMBER Description: For US publications only, the claims in plain text
Column name: cpc Type: VARIANT Description: Two-letter language code for this text
Column name: locarno Type: VARIANT Description: Localized text
Column name: description_localized_html Type: VARIANT Description: Localized text
Column name: publication_date Type: NUMBER Description: Two-letter language code for this text
Column name: kind_code Type: TEXT Description: Kind code, indicating application, grant, search report, correction, etc. These are different for each country.
Column name: spif_publication_number Type: TEXT Description: SPIF standard (spif.group) publication number, after 2000
Column name: ipc Type: VARIANT Description: Localized text
Column name: pct_number Type: TEXT Description: PCT number for this application if it was part of a PCT filing, eg: 'PCT/EP2008/062623'.
Column name: entity_status Type: TEXT Description: The filing date.
Column name: filing_date Type: NUMBER Description: Is this text truncated?
Column name: abstract_localized Type: VARIANT Description: Localized text
Column name: description_localized Type: VARIANT Description: The publication abstracts in different languages
Column name: assignee Type: VARIANT Description: Localized text
Column name: citation Type: VARIANT Description: Two-letter language code for this text
Column name: fi Type: VARIANT Description: Is this text truncated?
Column name: claims_localized_html Type: VARIANT Description: Is this text truncated?
Column name: inventor_harmonized Type: VARIANT Description: For US publications only, the claims in HTML
Column name: inventor Type: VARIANT Description: Is this text truncated?
Column name: claims_localized Type: VARIANT Description: Two-letter language code for this text
Column name: priority_date Type: NUMBER Description: Localized text
Column name: application_kind Type: TEXT Description: High-level kind of the application: A=patent; U=utility; P=provision; W= PCT; F=design; T=translation.
Column name: priority_claim Type: VARIANT Description: Two-letter language code for this text
Column name: assignee_harmonized Type: VARIANT Description: Two-letter language code for this text
Column name: title_localized Type: VARIANT Description: The publication titles in different languages
Column name: art_unit Type: TEXT Description: The grant date, or 0 if not granted.
Column name: child Type: VARIANT Description: The publication date.
Column name: family_id Type: TEXT Description: Family ID (simple family). Grouping on family ID will return all publications associated with a simple patent family (all publications share the same priority claims).
Column name: spif_application_number Type: TEXT Description: SPIF standard (spif.group) application number, after 2000
Column name: uspc Type: VARIANT Description: For US publications only, the description in plain text, limited to the first 9 megabytes
Column name: publication_number Type: TEXT Description: Patent publication number (DOCDB compatible), eg: 'US-7650331-B1'
Column name: country_code Type: TEXT Description: Country code, eg: 'US', 'EP', etc
Column name: parent Type: VARIANT Description: Is this text truncated?
Sample rows:
[{'publication_number': 'DE-69611147-T2', 'application_number': 'DE-69611147-T', 'country_code': 'DE', 'kind_code': 'T2', 'application_kind': 'T', 'application_number_formatted': 'DE1996611147', 'pct_number': '', 'family_id': '9483724', 'spif_publication_number': '', 'spif_application_number': '', 'title_localized': '[\n  {\n    "language": "de",\n    "text": "Schloss vom Typ eines entkuppelbaren Rotors",\n    "truncated": false\n  }\n]', 'abstract_localized': '[]', 'claims_localized': '[]', 'claims_localized_html': '[]', 'description_localized': '[]', 'description_localized_html': '[]', 'publication_date': 20010621, 'filing_date': 19961015, 'grant_date': 20010621, 'priority_date': 19951018, 'priority_claim': '[\n  {\n    "application_number": "FR-9512326-A",\n    "category": "",\n    "filing_date": 19951018,\n    "npl_text": "",\n    "publication_number": "",\n    "type": ""\n  }\n]', 'inventor': '[\n  "MENAGER, CHRISTOPHE",\n  "CANARD, LOUIS",\n  "CADOUOT, PATRICK",\n  "GOURDIN, DOMINIQUE"\n]', 'inventor_harmonized': '[\n  {\n    "country_code": "FR",\n    "name": "MENAGER CHRISTOPHE"\n  },\n  {\n    "country_code": "FR",\n    "name": "CANARD LOUIS"\n  },\n  {\n    "country_code": "FR",\n    "name": "CADOUOT PATRICK"\n  },\n  {\n    "country_code": "FR",\n    "name": "GOURDIN DOMINIQUE"\n  }\n]', 'assignee': '[\n  "Valeo Securite Habitacle, Creteil Cedex"\n]', 'assignee_harmonized': '[\n  {\n    "country_code": "FR",\n    "name": "VALEO SECURITE HABITACLE"\n  }\n]', 'examiner': '[]', 'uspc': '[]', 'ipc': '[\n  {\n    "code": "E05B17/04",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "E05B17/00",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  }\n]', 'cpc': '[\n  {\n    "code": "E05B77/00",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "E05B17/0058",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  }\n]', 'fi': '[]', 'fterm': '[]', 'locarno': '[]', 'citation': '[]', 'parent': '[]', 'child': '[]', 'entity_status': '', 'art_unit': ''}, {'publication_number': 'DE-69630331-T2', 'application_number': 'DE-69630331-T', 'country_code': 'DE', 'kind_code': 'T2', 'application_kind': 'T', 'application_number_formatted': 'DE1996630331', 'pct_number': '', 'family_id': '23689246', 'spif_publication_number': '', 'spif_application_number': '', 'title_localized': '[\n  {\n    "language": "de",\n    "text": "Verfahren zur gesicherten Sitzungsschlüsselerzeugung und zur Authentifizierung",\n    "truncated": false\n  }\n]', 'abstract_localized': '[]', 'claims_localized': '[]', 'claims_localized_html': '[]', 'description_localized': '[]', 'description_localized_html': '[]', 'publication_date': 20040729, 'filing_date': 19960416, 'grant_date': 20040729, 'priority_date': 19950421, 'priority_claim': '[\n  {\n    "application_number": "US-42609095-A",\n    "category": "",\n    "filing_date": 19950421,\n    "npl_text": "",\n    "publication_number": "",\n    "type": ""\n  }\n]', 'inventor': '[\n  "VANSTONE SCOTT .A, WATERLOO",\n  "MENEZES ALFRED JOHN, AUBURN",\n  "MINGHUA QU,"\n]', 'inventor_harmonized': '[\n  {\n    "country_code": "CA",\n    "name": "VANSTONE SCOTT A WATERLOO"\n  },\n  {\n    "country_code": "US",\n    "name": "MENEZES ALFRED JOHN AUBURN"\n  },\n  {\n    "country_code": "CA",\n    "name": "MINGHUA QU"\n  }\n]', 'assignee': '[\n  "Certicom Corp., Mississauga"\n]', 'assignee_harmonized': '[\n  {\n    "country_code": "CA",\n    "name": "CERTICOM CORP"\n  }\n]', 'examiner': '[]', 'uspc': '[]', 'ipc': '[\n  {\n    "code": "H04L9/08",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "G06F7/72",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  }\n]', 'cpc': '[\n  {\n    "code": "G06F7/725",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "H04L9/0844",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "H04L9/0838",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "H04L9/0844",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "G06F7/725",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  }\n]', 'fi': '[]', 'fterm': '[]', 'locarno': '[]', 'citation': '[]', 'parent': '[]', 'child': '[]', 'entity_status': '', 'art_unit': ''}, {'publication_number': 'DE-69636755-T2', 'application_number': 'DE-69636755-T', 'country_code': 'DE', 'kind_code': 'T2', 'application_kind': 'T', 'application_number_formatted': 'DE1996636755', 'pct_number': '', 'family_id': '8224764', 'spif_publication_number': '', 'spif_application_number': '', 'title_localized': '[\n  {\n    "language": "de",\n    "text": "Immortalisierte menschliche Epithelzell-Linie",\n    "truncated": false\n  }\n]', 'abstract_localized': '[\n  {\n    "language": "en",\n    "text": "Immortalised human corneal epithelial cell line, comprises cells of the cell line which are capable of stratification and expressing metabolic markers specific for nonimmortalised human epithelial cells, differentiation markers specific for nonimmortalised human corneal epithelial cells and markers specific for an inflammatory reaction.",\n    "truncated": false\n  }\n]', 'claims_localized': '[]', 'claims_localized_html': '[]', 'description_localized': '[]', 'description_localized_html': '[]', 'publication_date': 20071011, 'filing_date': 19961224, 'grant_date': 20071011, 'priority_date': 19961224, 'priority_claim': '[\n  {\n    "application_number": "EP-96203707-A",\n    "category": "",\n    "filing_date": 19961224,\n    "npl_text": "",\n    "publication_number": "",\n    "type": ""\n  }\n]', 'inventor': '[\n  "OFFORD CAVIN, ELIZABETH",\n  "TROMVOUKIS, YVONNE",\n  "PFEIFER, ANDREA M.A.",\n  "SHARIF, NAJ"\n]', 'inventor_harmonized': '[\n  {\n    "country_code": "CH",\n    "name": "OFFORD CAVIN ELIZABETH"\n  },\n  {\n    "country_code": "CH",\n    "name": "TROMVOUKIS YVONNE"\n  },\n  {\n    "country_code": "CH",\n    "name": "PFEIFER ANDREA M A"\n  },\n  {\n    "country_code": "US",\n    "name": "SHARIF NAJ"\n  }\n]', 'assignee': '[\n  "Société des Produits Nestlé S.A."\n]', 'assignee_harmonized': '[\n  {\n    "country_code": "CH",\n    "name": "NESTLE SA"\n  }\n]', 'examiner': '[]', 'uspc': '[]', 'ipc': '[\n  {\n    "code": "C12N5/10",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "G01N33/50",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "C12R1/91",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "C12N15/09",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "C12N5/00",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "A61K35/44",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "G01N33/48",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "C12Q1/68",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "C12N5/071",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  }\n]', 'cpc': '[\n  {\n    "code": "C12N2503/02",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "C12N5/0621",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "C12N2503/02",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "C12N2510/04",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "C12N5/0621",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "C12N2510/04",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  }\n]', 'fi': '[]', 'fterm': '[]', 'locarno': '[]', 'citation': '[]', 'parent': '[]', 'child': '[]', 'entity_status': '', 'art_unit': ''}, {'publication_number': 'DE-69728658-T2', 'application_number': 'DE-69728658-T', 'country_code': 'DE', 'kind_code': 'T2', 'application_kind': 'T', 'application_number_formatted': 'DE1997628658', 'pct_number': '', 'family_id': '24437397', 'spif_publication_number': '', 'spif_application_number': '', 'title_localized': '[\n  {\n    "language": "de",\n    "text": "Lithographische dünne filmstruktur und diese enthaltende druckplatte",\n    "truncated": false\n  }\n]', 'abstract_localized': '[\n  {\n    "language": "en",\n    "text": "A lithographic laser imageable thin film structure comprising a substrate having first and second surfaces. A vacuum-deposited metal layer is carried by the first surface of the substrate. A layer of semiconductor material is adhered to and overlies the metal layer. The metal layer and the semiconductor material have thicknesses which are selected to maximize absorption of laser energy impinging on the same.",\n    "truncated": false\n  }\n]', 'claims_localized': '[]', 'claims_localized_html': '[]', 'description_localized': '[]', 'description_localized_html': '[]', 'publication_date': 20040812, 'filing_date': 19970115, 'grant_date': 20040812, 'priority_date': 19960229, 'priority_claim': '[\n  {\n    "application_number": "US-9700408-W",\n    "category": "",\n    "filing_date": 19970115,\n    "npl_text": "",\n    "publication_number": "",\n    "type": ""\n  },\n  {\n    "application_number": "US-60864696-A",\n    "category": "",\n    "filing_date": 19960229,\n    "npl_text": "",\n    "publication_number": "",\n    "type": ""\n  }\n]', 'inventor': '[\n  "FISHER, P.",\n  "PHILLIPS, W.",\n  "DAVIS, F.",\n  "LEGALLEE, CHARLOTTE"\n]', 'inventor_harmonized': '[\n  {\n    "country_code": "US",\n    "name": "FISHER P"\n  },\n  {\n    "country_code": "US",\n    "name": "PHILLIPS W"\n  },\n  {\n    "country_code": "US",\n    "name": "DAVIS F"\n  },\n  {\n    "country_code": "US",\n    "name": "LEGALLEE CHARLOTTE"\n  }\n]', 'assignee': '[\n  "Presstek, Inc."\n]', 'assignee_harmonized': '[\n  {\n    "country_code": "US",\n    "name": "PRESSTEK INC"\n  }\n]', 'examiner': '[]', 'uspc': '[]', 'ipc': '[\n  {\n    "code": "B32B15/04",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B41C1/10",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B41N1/00",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B41N1/14",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B32B27/20",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B32B7/02",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  }\n]', 'cpc': '[\n  {\n    "code": "B32B15/04",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/12674",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B32B27/20",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/31678",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/12458",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/31678",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/12458",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B32B15/20",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/31504",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B41N1/00",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B32B15/09",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B32B2367/00",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B32B27/20",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/12493",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B32B15/043",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B32B27/36",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B32B27/08",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B32B15/04",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/12493",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/12674",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B41C1/1033",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B41N1/00",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/12528",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/31504",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B41C1/1033",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B32B2311/24",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/12528",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  }\n]', 'fi': '[]', 'fterm': '[]', 'locarno': '[]', 'citation': '[]', 'parent': '[]', 'child': '[]', 'entity_status': '', 'art_unit': ''}, {'publication_number': 'DE-69807539-T2', 'application_number': 'DE-69807539-T', 'country_code': 'DE', 'kind_code': 'T2', 'application_kind': 'T', 'application_number_formatted': 'DE1998607539', 'pct_number': '', 'family_id': '11877005', 'spif_publication_number': '', 'spif_application_number': '', 'title_localized': '[\n  {\n    "language": "de",\n    "text": "Automatisches Analysegerät",\n    "truncated": false\n  }\n]', 'abstract_localized': '[]', 'claims_localized': '[]', 'claims_localized_html': '[]', 'description_localized': '[]', 'description_localized_html': '[]', 'publication_date': 20030116, 'filing_date': 19980120, 'grant_date': 20030116, 'priority_date': 19970129, 'priority_claim': '[\n  {\n    "application_number": "JP-1501397-A",\n    "category": "",\n    "filing_date": 19970129,\n    "npl_text": "",\n    "publication_number": "",\n    "type": ""\n  }\n]', 'inventor': '[\n  "HANAWA, MASAAKI",\n  "MITSUMAKI, HIROSHI",\n  "OHISHI, TADASHI",\n  "KAI, SUSUMU",\n  "WATANABE, HIROSHI"\n]', 'inventor_harmonized': '[\n  {\n    "country_code": "JP",\n    "name": "HANAWA MASAAKI"\n  },\n  {\n    "country_code": "JP",\n    "name": "MITSUMAKI HIROSHI"\n  },\n  {\n    "country_code": "JP",\n    "name": "OHISHI TADASHI"\n  },\n  {\n    "country_code": "JP",\n    "name": "KAI SUSUMU"\n  },\n  {\n    "country_code": "JP",\n    "name": "WATANABE HIROSHI"\n  }\n]', 'assignee': '[\n  "Hitachi, Ltd."\n]', 'assignee_harmonized': '[\n  {\n    "country_code": "JP",\n    "name": "HITACHI LTD"\n  }\n]', 'examiner': '[]', 'uspc': '[]', 'ipc': '[\n  {\n    "code": "G01N35/00",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "G01N35/02",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "G01N35/04",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  }\n]', 'cpc': '[\n  {\n    "code": "Y10T436/115831",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T436/114165",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "G01N2035/0465",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "G01N35/026",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "G01N2035/0467",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T436/113332",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T436/114165",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "G01N35/00603",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "Y10T436/11",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "G01N2035/00326",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "G01N2035/0467",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "G01N35/00603",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "G01N2035/00326",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "G01N2035/0465",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "G01N35/026",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "Y10T436/11",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T436/113332",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T436/115831",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  }\n]', 'fi': '[]', 'fterm': '[]', 'locarno': '[]', 'citation': '[]', 'parent': '[]', 'child': '[]', 'entity_status': '', 'art_unit': ''}]

--------------------------------------------------
Table full name: PATENTS.PATENTS.CPC_DEFINITION
Column name: status Type: TEXT
Column name: precedenceLimitingReferences Type: VARIANT
Column name: rules Type: VARIANT
Column name: childGroups Type: VARIANT
Column name: scopeLimitingReferences Type: VARIANT
Column name: level Type: FLOAT
Column name: titlePart Type: VARIANT
Column name: residualReferences Type: VARIANT
Column name: definition Type: VARIANT
Column name: breakdownCode Type: BOOLEAN
Column name: limitingReferences Type: VARIANT
Column name: glossary Type: VARIANT
Column name: applicationReferences Type: VARIANT
Column name: notAllocatable Type: BOOLEAN
Column name: titleFull Type: TEXT
Column name: dateRevised Type: FLOAT
Column name: informativeReferences Type: VARIANT
Column name: symbol Type: TEXT
Column name: synonyms Type: VARIANT
Column name: children Type: VARIANT
Column name: parents Type: VARIANT
Column name: ipcConcordant Type: TEXT
Sample rows:
[{'applicationReferences': '[]', 'breakdownCode': True, 'childGroups': '[]', 'children': '[]', 'dateRevised': 20130101.0, 'definition': '[]', 'glossary': '[]', 'informativeReferences': '[]', 'ipcConcordant': 'CPCONLY', 'level': 9.0, 'limitingReferences': '[]', 'notAllocatable': False, 'parents': '[\n  "A01K2227/10",\n  "A01K2227/00",\n  "A01K",\n  "A01",\n  "A"\n]', 'precedenceLimitingReferences': '[]', 'residualReferences': '[]', 'rules': '[]', 'scopeLimitingReferences': '[]', 'status': 'published', 'symbol': 'A01K2227/108', 'synonyms': '[]', 'titleFull': 'Swine', 'titlePart': '[\n  "Swine"\n]'}, {'applicationReferences': '[]', 'breakdownCode': True, 'childGroups': '[]', 'children': '[]', 'dateRevised': 20130101.0, 'definition': '[]', 'glossary': '[]', 'informativeReferences': '[]', 'ipcConcordant': 'CPCONLY', 'level': 9.0, 'limitingReferences': '[]', 'notAllocatable': False, 'parents': '[\n  "A01K2227/10",\n  "A01K2227/00",\n  "A01K",\n  "A01",\n  "A"\n]', 'precedenceLimitingReferences': '[]', 'residualReferences': '[]', 'rules': '[]', 'scopeLimitingReferences': '[]', 'status': 'published', 'symbol': 'A01K2227/105', 'synonyms': '[]', 'titleFull': 'Murine', 'titlePart': '[\n  "Murine"\n]'}, {'applicationReferences': '[]', 'breakdownCode': True, 'childGroups': '[]', 'children': '[]', 'dateRevised': 20130101.0, 'definition': '[]', 'glossary': '[]', 'informativeReferences': '[]', 'ipcConcordant': 'CPCONLY', 'level': 9.0, 'limitingReferences': '[]', 'notAllocatable': False, 'parents': '[\n  "A01K2227/10",\n  "A01K2227/00",\n  "A01K",\n  "A01",\n  "A"\n]', 'precedenceLimitingReferences': '[]', 'residualReferences': '[]', 'rules': '[]', 'scopeLimitingReferences': '[]', 'status': 'published', 'symbol': 'A01K2227/107', 'synonyms': '[]', 'titleFull': 'Rabbit', 'titlePart': '[\n  "Rabbit"\n]'}, {'applicationReferences': '[]', 'breakdownCode': True, 'childGroups': '[]', 'children': '[]', 'dateRevised': 20130101.0, 'definition': '[]', 'glossary': '[]', 'informativeReferences': '[]', 'ipcConcordant': 'CPCONLY', 'level': 9.0, 'limitingReferences': '[]', 'notAllocatable': False, 'parents': '[\n  "A01K2267/02",\n  "A01K2267/00",\n  "A01K",\n  "A01",\n  "A"\n]', 'precedenceLimitingReferences': '[]', 'residualReferences': '[]', 'rules': '[]', 'scopeLimitingReferences': '[]', 'status': 'published', 'symbol': 'A01K2267/025', 'synonyms': '[]', 'titleFull': 'Animal producing cells or organs for transplantation', 'titlePart': '[\n  "Animal producing cells or organs for transplantation"\n]'}, {'applicationReferences': '[]', 'breakdownCode': True, 'childGroups': '[]', 'children': '[\n  "A01K2267/0312",\n  "A01K2267/0318",\n  "A01K2267/0325"\n]', 'dateRevised': 20130101.0, 'definition': '[]', 'glossary': '[]', 'informativeReferences': '[]', 'ipcConcordant': 'CPCONLY', 'level': 9.0, 'limitingReferences': '[]', 'notAllocatable': False, 'parents': '[\n  "A01K2267/03",\n  "A01K2267/00",\n  "A01K",\n  "A01",\n  "A"\n]', 'precedenceLimitingReferences': '[]', 'residualReferences': '[]', 'rules': '[]', 'scopeLimitingReferences': '[]', 'status': 'published', 'symbol': 'A01K2267/0306', 'synonyms': '[]', 'titleFull': 'Animal model for genetic diseases', 'titlePart': '[\n  "Animal model for genetic diseases"\n]'}]

--------------------------------------------------
External knowledge that might be helpful: 
None
The table structure information is ({database name: {schema name: [table name]}}): 
{'PATENTS': {'PATENTS': ['DISCLOSURES_13', 'PUBLICATIONS', 'CPC_DEFINITION']}}

Some few-shot examples after column exploration may be helpful:
Query:
--Description: 1) Sample publications that have a filing date and an application number
SELECT 
  "publication_number", 
  "application_number", 
  "filing_date", 
  "cpc"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "application_number" IS NOT NULL
  AND "filing_date" > 0
LIMIT 20;
Answer:
publication_number,application_number,filing_date,cpc
IE-20080323-A1,IE-20080323-A,20080425,"[
  {
    ""code"": ""B62H5/144"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B60R25/093"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B62H3/08"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B62H3/08"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  }

Query:
--Description: 2) Flatten the "cpc" VARIANT column to see the individual CPC objects
SELECT  
  p."publication_number",
  p."filing_date",
  c.value:"code"::STRING AS "cpc_code"
FROM PATENTS.PATENTS.PUBLICATIONS p,
LATERAL FLATTEN(input => p."cpc") c
LIMIT 20;
Answer:
publication_number,filing_date,cpc_code
CN-2669058-Y,20031230,F24F1/48
CN-2669058-Y,20031230,F24F1/38
CN-2746550-Y,20041103,Y02E60/12
CN-201124248-Y,20071207,Y02P70/10
IT-BO20010459-A0,20010718,B65D41/485
IT-BO20010459-A0,20010718,B65D2401/35
IT-BO20010459-A0,20010718,B65D2401/20
IT-BO20010459-A0,20010718,B65D2401/25
IT-MI962322-A0,19961108,H02J7/1492
IT-MI962322-A0,19961108,H02P9/48
IT-MI962322-A0,19961108,Y02T10/92
IT-MI962322-A0,19961108,Y02T10/70
IT-MI941663-A0,19940729,F02P1/08
Query:
--Description: 3) Distinct list of raw CPC codes appearing in the data
SELECT DISTINCT  
  c.value:"code"::STRING AS "cpc_code"
FROM PATENTS.PATENTS.PUBLICATIONS p,
LATERAL FLATTEN(input => p."cpc") c
WHERE c.value:"code" IS NOT NULL
LIMIT 20;
Answer:
cpc_code
Y02P70/10
B65D2401/35
H05K1/0373
A61P37/08
H01H71/16
B65D41/485
C08L33/00
C07C51/31
B63H8/22
C08G8/38
F02B19/14
C07D213/38
H05K3/185
F21Y2115/10
C07D403/06
A61K47/6855
H04Q2011/0013
A61K39/099
C25D5/56
H05K2203/0517
Query:
--Description: 4) Distinct CPC “group” (the part before ‘/’) extracted from the codes
SELECT DISTINCT  
  SPLIT_PART(c.value:"code"::STRING, '/', 1) AS "cpc_group"
FROM PATENTS.PATENTS.PUBLICATIONS p,
LATERAL FLATTEN(input => p."cpc") c
WHERE c.value:"code" IS NOT NULL
LIMIT 20;
Answer:
cpc_group
A61Q5
C07D471
B30B9
F24F1
H05K2203
G07F7
C08L67
C12N2730
A61Q19
A61P29
H01L2924
F01N13
A23N1
A61K33
F21V13
C14B1
E03D1
Y02E60
H02J7
H04Q11
Query:
--Description: 5) See CPC_DEFINITION rows at level 5 (their full titles)
SELECT  
  "symbol",
  "titleFull"
FROM PATENTS.PATENTS.CPC_DEFINITION
WHERE "level" = 5
LIMIT 20;
Answer:
symbol,titleFull
A01H,NEW PLANTS OR NON-TRANSGENIC PROCESSES FOR OBTAINING THEM; PLANT REPRODUCTION BY TISSUE CULTURE TECHNIQUES
A01F,PROCESSING OF HARVESTED PRODUCE; HAY OR STRAW PRESSES; DEVICES FOR STORING AGRICULTURAL OR HORTICULTURAL PRODUCE
A01C,PLANTING; SOWING; FERTILISING
A01G,"HORTICULTURE; CULTIVATION OF VEGETABLES, FLOWERS, RICE, FRUIT, VINES, HOPS OR SEAWEED; FORESTRY; WATERING"
A01N,"PRESERVATION OF BODIES OF HUMANS OR ANIMALS OR PLANTS OR PARTS THEREOF; BIOCIDES, e.g. AS DISI
Query:
--Description: 7) Annual counts of filings for every CPC code (all codes, not just first)
SELECT  
  SPLIT_PART(c.value:"code"::STRING, '/', 1) AS "cpc_group",
  FLOOR(p."filing_date"/10000)               AS "year",
  COUNT(*)                                   AS "filings"
FROM PATENTS.PATENTS.PUBLICATIONS p,
LATERAL FLATTEN(input => p."cpc") c
WHERE p."application_number" IS NOT NULL
  AND p."filing_date" > 0
GROUP BY "cpc_group", "year"
LIMIT 20;
Answer:
cpc_group,year,filings
Y02B10,2021,46
Y02E10,2023,222
Y02E40,2023,10
Y02A30,2008,17
B28B1,1996,1
A01N43,1988,50
A61Q19,2010,83
E04C5,2016,34
G01R19,1991,1
G05B19,1975,4
C07C37,1990,7
G01N35,2002,17
H04W8,2005,62
Y02T10,2007,230
C07K7,2009,36
F05B2240,2010,35
A61F2002,2015,228
F24F3,2018,38
B60W2720,2018,21
C08J5,2018,149
Query:
--Description: 8) Identify the FIRST CPC code per publication together with the filing year
SELECT  
  x."publication_number",
  x."first_cpc",
  x."filing_year"
FROM (
  SELECT  
    p."publication_number",
    SPLIT_PART(c.value:"code"::STRING, '/', 1) AS "first_cpc",
    FLOOR(p."filing_date"/10000)               AS "filing_year",
    ROW_NUMBER() OVER (PARTITION BY p."publication_number" ORDER BY c.index) AS rn
  FROM PATENTS.PATENTS.PUBLICATIONS p,
  LATERAL FLATTEN(input => p."cpc") c
  WHERE p."application_number" IS NOT NULL
    AND p."filing_date" > 0
) x
WHERE x.rn = 1
LIMIT 20;
Answer:
publication_number,first_cpc,filing_year
KR-20110082195-A,Y02E10,2009
CN-104612746-B,E21B43,2015
BR-0211893-B1,C05D3,2002
CN-106440581-A,F25B2700,2016
TW-201216335-A,G06F3,2011
US-2020016476-A1,A63H30,2019
KR-20230161821-A,H01M4,2022
KR-20150009339-A,A61Q19,2013
WO-2013020894-A1,F16B37,2012
JP-7015375-B2,B41F35,2018
US-2023259686-A1,H01L2027,2022
US-2007130266-A1,H04L51,2006
EP-1928183-A2,H04N21,2007
DE-2013630-A1,E04B1,1970
KR-20210094514-A,G01S19,2018
Query:
--Description: 9) Annual filing counts for the first CPC code only
SELECT  
  t."first_cpc"  AS "cpc_group",
  t."filing_year" AS "year",
  COUNT(*)        AS "filings"
FROM (
  SELECT  
    p."publication_number",
    SPLIT_PART(c.value:"code"::STRING, '/', 1) AS "first_cpc",
    FLOOR(p."filing_date"/10000)               AS "filing_year",
    ROW_NUMBER() OVER (PARTITION BY p."publication_number" ORDER BY c.index) AS rn
  FROM PATENTS.PATENTS.PUBLICATIONS p,
  LATERAL FLATTEN(input => p."cpc") c
  WHERE p."application_number" IS NOT NULL
    AND p."filing_date" > 0
) t
WHERE t.rn = 1
GROUP BY t."first_cpc", t."filing_year"
LIMIT 20;
Answer:
cpc_group,year,filings
B05B3,1965,1
G09F21,1933,1
A61B2018,2016,6
B68G7,2014,2
F21Y2103,2016,1
B65B13,2017,2
H01L31,2023,13
B60J5,2010,2
B65D55,2007,1
B25C1,1973,2
F16K27,2020,3
G09G2300,2003,3
B23Q35,1966,1
B60R16,2017,14
B29C48,2020,7
Y02E60,1998,20
H02M1,2017,18
E04F10,1914,1
F28F19,1939,1
C22C19,2014,1
Query:
--Description: 10) Example calculation of exponential moving average (α = 0.2) on yearly counts
WITH yearly AS (
  SELECT  
    t."first_cpc"  AS "cpc_group",
    t."filing_year" AS "year",
    COUNT(*)        AS "filings"
  FROM (
    SELECT  
      p."publication_number",
      SPLIT_PART(c.value:"code"::STRING, '/', 1) AS "first_cpc",
      FLOOR(p."filing_date"/10000)               AS "filing_year",
      ROW_NUMBER() OVER (PARTITION BY p."publication_number" ORDER BY c.index) AS rn
    FROM PATENTS.PATENTS.PUBLICATIONS p,
    LATERAL FLATTEN(input => p."cpc") c
    WHERE p."application_number" IS NOT NULL
      AND p."filing_date" > 0
  ) t
  WHERE t.rn = 1
  GROUP BY t."first_cpc", t."filing_year"
)
SELECT  
  y."cpc_group",
  y."year",
  SUM(y2."filings" * POWER(0.8, y."year" - y2."year")) AS "ema_alpha_0_2"
FROM yearly y
JOIN yearly y2
  ON y."cpc_group" = y2."cpc_group"
 AND y2."year" <= y."year"
GROUP BY y."cpc_group", y."year"
LIMIT 20;
Answer:
cpc_group,year,ema_alpha_0_2
D10B2403,2004,1.9342177280000001
G03G15,2019,96.5715132373796
H01R13,2022,149.5608552754088
B09B3,1998,7.392414771218871
C12P21,2016,11.310655272771745
C08L89,2018,2.0285585708047194
A61B2017,2016,88.54963316040536
B05B11,2018,24.911332519458366
H01L29,2020,245.96174147912933
A47L15,2023,23.050151323724524
G06K7,2003,15.090207880168771
H02P8,1971,1.0
G06K19,2006,30.35677988849588
D06M15,1966,3.2178536123181085
Y10T292,1977,5.009403919102572
Task: Identify the CPC technology areas with the highest exponential moving average of patent filings each year (with a smoothing factor of 0.2), considering only the first CPC code for each patent that has a valid filing date and a non-empty application number, and report the full CPC title along with the best year associated with the highest exponential moving average for each CPC group at level 5.

Please think step by step and answer only one complete SQL in snowflake dialect in ```sql``` format.
SQL usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: The table structure information is ({database name: {schema name: [table name]}}): 
{'PATENTS': {'PATENTS': ['DISCLOSURES_13', 'PUBLICATIONS', 'CPC_DEFINITION']}}

When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
If the task description does not specify the number of decimal places, retain all decimals to four places.

[Self-refine]
2025-05-07 01:43:17 - Thread-19 (execute) - INFO - [Try to run SQL in self-refine]
```sql
/* 1) Take the first CPC code for every publication that has a
      filing date and an application number                                    */
WITH first_cpc AS (
    SELECT
        p."publication_number",
        SPLIT_PART(c.value:"code"::STRING,'/',1)                     AS "cpc_group",
        FLOOR(p."filing_date"/10000)                                 AS "year",
        ROW_NUMBER() OVER (PARTITION BY p."publication_number"
                           ORDER BY c.index)                         AS "rn"
    FROM PATENTS.PATENTS.PUBLICATIONS  p,
         LATERAL FLATTEN(input => p."cpc") c
    WHERE p."application_number" IS NOT NULL
      AND p."filing_date"        > 0
),
/* 2) Yearly filing counts per CPC group (only the first CPC)                 */
counts_by_year AS (
    SELECT
        "cpc_group",
        "year",
        COUNT(*) AS "filings"
    FROM first_cpc
    WHERE "rn" = 1
    GROUP BY "cpc_group","year"
),
/* 3) Exponential moving average (α = 0.2 → weight = 0.8 for past years)      */
ema AS (
    SELECT
        y1."cpc_group",
        y1."year",
        SUM( y2."filings" * POWER(0.8, y1."year" - y2."year") )     AS "ema_val"
    FROM counts_by_year y1
    JOIN counts_by_year y2
      ON y1."cpc_group" = y2."cpc_group"
     AND y2."year"      <= y1."year"
    GROUP BY y1."cpc_group", y1."year"
),
/* 4) For each CPC group pick the year with the highest EMA value              */
best_per_group AS (
    SELECT
        "cpc_group",
        "year"        AS "best_year",
        "ema_val"     AS "max_ema",
        ROW_NUMBER() OVER (PARTITION BY "cpc_group"
                           ORDER BY "ema_val" DESC, "year" ASC) AS "rn"
    FROM ema
)
/* 5) Attach the full CPC title (level-5 definitions) and list the results     */
SELECT
    d."symbol"    AS "cpc_group",
    d."titleFull" AS "cpc_title",
    b."best_year",
    b."max_ema"
FROM best_per_group                b
JOIN PATENTS.PATENTS.CPC_DEFINITION d
  ON d."symbol" = b."cpc_group"
 AND d."level"  = 5
WHERE b."rn" = 1
ORDER BY b."max_ema" DESC NULLS LAST;
```
[Try to run SQL in self-refine]
2025-05-07 01:43:18 - Thread-19 (execute) - INFO - itercount: 1
2025-05-07 01:43:18 - Thread-19 (execute) - INFO - [Self-refine]
Input sql:
/* 1) Take the first CPC code for every publication that has a
      filing date and an application number                                    */
WITH first_cpc AS (
    SELECT
        p."publication_number",
        SPLIT_PART(c.value:"code"::STRING,'/',1)                     AS "cpc_group",
        FLOOR(p."filing_date"/10000)                                 AS "year",
        ROW_NUMBER() OVER (PARTITION BY p."publication_number"
                           ORDER BY c.index)                         AS "rn"
    FROM PATENTS.PATENTS.PUBLICATIONS  p,
         LATERAL FLATTEN(input => p."cpc") c
    WHERE p."application_number" IS NOT NULL
      AND p."filing_date"        > 0
),
/* 2) Yearly filing counts per CPC group (only the first CPC)                 */
counts_by_year AS (
    SELECT
        "cpc_group",
        "year",
        COUNT(*) AS "filings"
    FROM first_cpc
    WHERE "rn" = 1
    GROUP BY "cpc_group","year"
),
/* 3) Exponential moving average (α = 0.2 → weight = 0.8 for past years)      */
ema AS (
    SELECT
        y1."cpc_group",
        y1."year",
        SUM( y2."filings" * POWER(0.8, y1."year" - y2."year") )     AS "ema_val"
    FROM counts_by_year y1
    JOIN counts_by_year y2
      ON y1."cpc_group" = y2."cpc_group"
     AND y2."year"      <= y1."year"
    GROUP BY y1."cpc_group", y1."year"
),
/* 4) For each CPC group pick the year with the highest EMA value              */
best_per_group AS (
    SELECT
        "cpc_group",
        "year"        AS "best_year",
        "ema_val"     AS "max_ema",
        ROW_NUMBER() OVER (PARTITION BY "cpc_group"
                           ORDER BY "ema_val" DESC, "year" ASC) AS "rn"
    FROM ema
)
/* 5) Attach the full CPC title (level-5 definitions) and list the results     */
SELECT
    d."symbol"    AS "cpc_group",
    d."titleFull" AS "cpc_title",
    b."best_year",
    b."max_ema"
FROM best_per_group                b
JOIN PATENTS.PATENTS.CPC_DEFINITION d
  ON d."symbol" = b."cpc_group"
 AND d."level"  = 5
WHERE b."rn" = 1
ORDER BY b."max_ema" DESC NULLS LAST;
The error information is:
No data found for the specified query.

Please correct it and output only 1 complete SQL query.
[Self-refine]
2025-05-07 01:43:58 - Thread-19 (execute) - INFO - [Try to run SQL in self-refine]
```sql
/* ---------------------------------------------------------------------------
   Identify the CPC subclasses (level-5 symbols) that reach the highest
   exponential moving average (α = 0.2) of yearly patent-filing counts.
   -------------------------------------------------------------------------*/
WITH first_cpc AS (           /* first CPC code per publication */
    SELECT
        p."publication_number",
        /* subclass = one letter, two digits, one letter  (level-5 symbol) */
        REGEXP_SUBSTR(
            SPLIT_PART(c.value:"code"::STRING, '/', 1),
            '^[A-Z][0-9]{2}[A-Z]'
        )                                   AS "subclass",
        FLOOR(p."filing_date" / 10000)      AS "year",
        ROW_NUMBER() OVER (
            PARTITION BY p."publication_number"
            ORDER BY c.index
        )                                   AS "rn"
    FROM PATENTS.PATENTS.PUBLICATIONS p,
         LATERAL FLATTEN(input => p."cpc") c
    WHERE p."application_number" IS NOT NULL
      AND p."filing_date"        > 0
),
counts_by_year AS (           /* yearly counts per subclass */
    SELECT
        "subclass"  AS "cpc_group",
        "year",
        COUNT(*)     AS "filings"
    FROM first_cpc
    WHERE "rn" = 1
      AND "subclass" IS NOT NULL
    GROUP BY "subclass", "year"
),
ema AS (                      /* exponential moving average, α = 0.2 */
    SELECT
        y1."cpc_group",
        y1."year",
        SUM(
            y2."filings" * POWER(0.8, y1."year" - y2."year")
        )                     AS "ema_val"
    FROM counts_by_year y1
    JOIN counts_by_year y2
      ON y1."cpc_group" = y2."cpc_group"
     AND y2."year"      <= y1."year"
    GROUP BY y1."cpc_group", y1."year"
),
best_per_group AS (           /* year with the maximum EMA per subclass */
    SELECT
        "cpc_group",
        "year"    AS "best_year",
        "ema_val" AS "max_ema",
        ROW_NUMBER() OVER (
            PARTITION BY "cpc_group"
            ORDER BY "ema_val" DESC, "year" ASC
        )                     AS "rn"
    FROM ema
)
SELECT
    COALESCE(d."symbol", b."cpc_group")      AS "cpc_group",
    d."titleFull"                           AS "cpc_title",
    b."best_year",
    b."max_ema"
FROM best_per_group b
LEFT JOIN PATENTS.PATENTS.CPC_DEFINITION d
       ON d."symbol" = b."cpc_group"
      AND d."level"  = 5
WHERE b."rn" = 1
ORDER BY b."max_ema" DESC NULLS LAST;
```
[Try to run SQL in self-refine]
2025-05-07 01:44:00 - Thread-19 (execute) - INFO - Total iteration counts: 1
