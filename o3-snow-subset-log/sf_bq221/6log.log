2025-05-07 01:32:31 - Thread-30 (execute) - INFO - [Exploration]
```sql
--Description: 1) Look at some key columns in PATENTS.PATENTS.PUBLICATIONS
SELECT 
  "publication_number",
  "application_number",
  "filing_date",
  "cpc"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "application_number" IS NOT NULL
  AND "application_number" <> ''
  AND "filing_date" IS NOT NULL
LIMIT 20;
```

```sql
--Description: 2) Flatten the "cpc" column to see the individual CPC objects for a handful of publications
SELECT 
  p."publication_number",
  f.value:"code"::STRING   AS "cpc_code",
  f.value:"first"::BOOLEAN AS "is_first",
  f.seq                    AS "order_in_list"
FROM PATENTS.PATENTS.PUBLICATIONS p
     ,LATERAL FLATTEN(input => p."cpc") f
WHERE p."application_number" IS NOT NULL
  AND p."application_number" <> ''
  AND p."filing_date" IS NOT NULL
LIMIT 20;
```

```sql
--Description: 3) Grab only the *first* CPC code for each publication (order_in_list = 0)
SELECT 
  p."publication_number",
  p."application_number",
  p."filing_date",
  f.value:"code"::STRING AS "first_cpc_code"
FROM PATENTS.PATENTS.PUBLICATIONS p
     ,LATERAL FLATTEN(input => p."cpc") f
WHERE f.seq = 0
  AND p."application_number" IS NOT NULL
  AND p."application_number" <> ''
  AND p."filing_date" IS NOT NULL
LIMIT 20;
```

```sql
--Description: 4) Preview distinct CPC codes we captured (first code only) – useful for later grouping
SELECT DISTINCT
  f.value:"code"::STRING AS "first_cpc_code"
FROM PATENTS.PATENTS.PUBLICATIONS p
     ,LATERAL FLATTEN(input => p."cpc") f
WHERE f.seq = 0
  AND p."application_number" IS NOT NULL
  AND p."application_number" <> ''
  AND p."filing_date" IS NOT NULL
LIMIT 20;
```

```sql
--Description: 5) Show the structure of CPC_DEFINITION rows for a few symbols
SELECT 
  "symbol",
  "level",
  "titleFull"
FROM PATENTS.PATENTS.CPC_DEFINITION
WHERE "level" <= 5      -- keep it small to inspect level hierarchy
LIMIT 20;
```

```sql
--Description: 6) Get all CPC groups at *level 5* together with their titles
SELECT 
  "symbol"    AS "cpc_level5",
  "titleFull" AS "cpc_title"
FROM PATENTS.PATENTS.CPC_DEFINITION
WHERE "level" = 5
LIMIT 20;
```

```sql
--Description: 7) Join first CPC codes from publications to their LEVEL-5 parent groups
SELECT 
  SUBSTR(f.value:"code"::STRING, 1, 7) AS "cpc_group_candidate",  -- rough cut; adjust later
  COUNT(*)                             AS "pub_count"
FROM PATENTS.PATENTS.PUBLICATIONS p
     ,LATERAL FLATTEN(input => p."cpc") f
WHERE f.seq = 0
  AND p."application_number" IS NOT NULL
  AND p."application_number" <> ''
  AND p."filing_date" IS NOT NULL
GROUP BY 1
ORDER BY 2 DESC
LIMIT 20;
```

```sql
--Description: 8) Yearly filing counts for each first-CPC level-5 group (rough group via LEFT 7 chars)
SELECT 
  YEAR(TO_DATE(TO_CHAR("filing_date")))                      AS "filing_year",
  SUBSTR(f.value:"code"::STRING, 1, 7)                       AS "cpc_group",
  COUNT(*)                                                   AS "yearly_filings"
FROM PATENTS.PATENTS.PUBLICATIONS p
     ,LATERAL FLATTEN(input => p."cpc") f
WHERE f.seq = 0
  AND p."application_number" IS NOT NULL
  AND p."application_number" <> ''
  AND p."filing_date" IS NOT NULL
GROUP BY 1,2
ORDER BY 2,1
LIMIT 20;
```

```sql
--Description: 9) Illustrative EMA (α = 0.2) for one CPC group to verify formula
WITH yearly AS (
  SELECT 
    YEAR(TO_DATE(TO_CHAR("filing_date"))) AS yr,
    COUNT(*) AS filings
  FROM PATENTS.PATENTS.PUBLICATIONS p
       ,LATERAL FLATTEN(input => p."cpc") f
  WHERE f.seq = 0
    AND p."application_number" IS NOT NULL
    AND p."application_number" <> ''
    AND p."filing_date" IS NOT NULL
    AND SUBSTR(f.value:"code"::STRING, 1, 7) = 'H04L9/0'      -- example CPC group
  GROUP BY yr
)
SELECT 
  yr,
  filings,
  -- EMA: 0.2 * current + 0.8 * prev_ema
  filings * 0.2 + 0.8 * COALESCE(LAG(filings * 0.2 + 0.8 * 0) OVER (ORDER BY yr), filings) AS ema_check
FROM yearly
ORDER BY yr
LIMIT 20;
```

```sql
--Description: 10) Bring in the LEVEL-5 CPC title once more for clarity when inspecting results
SELECT 
  cd."symbol"    AS "cpc_group_L5",
  cd."titleFull" AS "cpc_group_title"
FROM PATENTS.PATENTS.CPC_DEFINITION cd
WHERE cd."level" = 5
  AND cd."symbol" ILIKE '%H04L9/0%'   -- fuzzy search for one of the groups seen above
LIMIT 20;
```
[Exploration]
2025-05-07 01:32:31 - Thread-30 (execute) - INFO - [Try to execute]
--Description: 1) Look at some key columns in PATENTS.PATENTS.PUBLICATIONS
SELECT 
  "publication_number",
  "application_number",
  "filing_date",
  "cpc"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "application_number" IS NOT NULL
  AND "application_number" <> ''
  AND "filing_date" IS NOT NULL
LIMIT 20;
[Try to execute]
2025-05-07 01:32:33 - Thread-30 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 1) Look at some key columns in PATENTS.PATENTS.PUBLICATIONS
SELECT 
  "publication_number",
  "application_number",
  "filing_date",
  "cpc"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "application_number" IS NOT NULL
  AND "application_number" <> ''
  AND "filing_date" IS NOT NULL
LIMIT 20;
Results:
publication_number,application_number,filing_date,cpc
CR-5634-A,CR-5634-A,19971015,[]
CR-5990-A,CR-5990-A,19990322,[]
FI-429-A,FI-429D-A,0,[]
HK-6083-A,HK-6083-A,19830217,"[
  {
    ""code"": ""H02M5/00"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  }
]"
HU-T52763-A,HU-7590-A,19900109,"[
  {
    ""code"": ""A01N47/36"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""C07D521/00"",
    ""first"": true,
    ""inventive"": true,
   

[Successfully executed]
2025-05-07 01:32:33 - Thread-30 (execute) - INFO - [Try to execute]
--Description: 2) Flatten the "cpc" column to see the individual CPC objects for a handful of publications
SELECT 
  p."publication_number",
  f.value:"code"::STRING   AS "cpc_code",
  f.value:"first"::BOOLEAN AS "is_first",
  f.seq                    AS "order_in_list"
FROM PATENTS.PATENTS.PUBLICATIONS p
     ,LATERAL FLATTEN(input => p."cpc") f
WHERE p."application_number" IS NOT NULL
  AND p."application_number" <> ''
  AND p."filing_date" IS NOT NULL
LIMIT 20;
[Try to execute]
2025-05-07 01:32:35 - Thread-30 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 2) Flatten the "cpc" column to see the individual CPC objects for a handful of publications
SELECT 
  p."publication_number",
  f.value:"code"::STRING   AS "cpc_code",
  f.value:"first"::BOOLEAN AS "is_first",
  f.seq                    AS "order_in_list"
FROM PATENTS.PATENTS.PUBLICATIONS p
     ,LATERAL FLATTEN(input => p."cpc") f
WHERE p."application_number" IS NOT NULL
  AND p."application_number" <> ''
  AND p."filing_date" IS NOT NULL
LIMIT 20;
Results:
publication_number,cpc_code,is_first,order_in_list
US-2017299239-A1,H01L23/427,False,115
US-2017299239-A1,F28F2210/02,False,115
US-2017299239-A1,F28F9/0224,False,115
US-2017299239-A1,F28F9/028,False,115
US-2017299239-A1,F25B39/00,True,115
US-2017299239-A1,F28F9/026,False,115
US-2017299239-A1,F25B39/02,False,115
US-2017299239-A1,F25B39/02,False,115
US-2017299239-A1,F25B2500/26,False,115
US-2017299239-A1,F28D2021/0029,False,115
US-2017299239-A1,F28D2021/0029,False,115

[Successfully executed]
2025-05-07 01:32:35 - Thread-30 (execute) - INFO - [Try to execute]
--Description: 3) Grab only the *first* CPC code for each publication (order_in_list = 0)
SELECT 
  p."publication_number",
  p."application_number",
  p."filing_date",
  f.value:"code"::STRING AS "first_cpc_code"
FROM PATENTS.PATENTS.PUBLICATIONS p
     ,LATERAL FLATTEN(input => p."cpc") f
WHERE f.seq = 0
  AND p."application_number" IS NOT NULL
  AND p."application_number" <> ''
  AND p."filing_date" IS NOT NULL
LIMIT 20;
[Try to execute]
2025-05-07 01:32:38 - Thread-30 (execute) - INFO - [Error occurred]
No data found for the specified query.

[Error occurred]
2025-05-07 01:34:30 - Thread-30 (execute) - INFO - [Corrected SQL]
```sql
--Description: Flatten the CPC array for every publication, capture the index of each
--element (f.seq).  Using QUALIFY + ROW_NUMBER() we retain only the lowest‐index
--element for each publication, revealing its “first” CPC code.  Showing 20 examples
--lets us confirm that the logic actually returns data.
WITH flat AS (
    SELECT
        p."publication_number",
        p."application_number",
        p."filing_date",
        f.seq                       AS seq_index,          -- position in array
        f.value:"code"::STRING      AS cpc_code            -- CPC symbol text
    FROM PATENTS.PATENTS.PUBLICATIONS p
         ,LATERAL FLATTEN(input => p."cpc") f              -- explode JSON array
)
SELECT
    "publication_number",
    "application_number",
    "filing_date",
    cpc_code AS "first_cpc_code",
    seq_index
FROM flat
QUALIFY ROW_NUMBER() OVER (PARTITION BY "publication_number" ORDER BY seq_index) = 1
LIMIT 20;
```
[Corrected SQL]
2025-05-07 01:36:22 - Thread-30 (execute) - INFO - [Results for corrected sql]
publication_number,application_number,filing_date,first_cpc_code,SEQ_INDEX
US-2021353898-A1,US-202117331793-A,20210527,A61M16/085,1645
AT-E548410-T1,AT-05736267-T,20050421,B32B2307/558,122956
US-6187063-B1,US-8186798-A,19980520,C10L1/328,149677
DE-546409-C,DE-P0060947-D,0,B05B11/06,767149
JP-2021511751-A,JP-2020540831-A,20190326,B62D15/0285,192166
KR-20100136691-A,KR-20090054912-A,20090619,F02M25/0836,334393
JP-S5610525-A,JP-8770380-A,19800627,C08G18/08,201419
BG-40653-A3,BG-5944182-A,19

[Results for corrected sql]
2025-05-07 01:37:31 - Thread-30 (execute) - INFO - [Corrected other sqls]
```sql
--Description: 4) Preview DISTINCT “first” CPC codes we captured – useful for later grouping
WITH flat AS (
    SELECT
        p."publication_number",
        f.value:"code"::STRING AS cpc_code,
        f.seq                 AS seq_index
    FROM PATENTS.PATENTS.PUBLICATIONS p
         ,LATERAL FLATTEN(input => p."cpc") f
), first_cpc AS (
    SELECT
        "publication_number",
        cpc_code
    FROM flat
    QUALIFY ROW_NUMBER() OVER (PARTITION BY "publication_number" ORDER BY seq_index) = 1
)
SELECT DISTINCT
  cpc_code AS "first_cpc_code"
FROM first_cpc
LIMIT 20;
```

```sql
--Description: 5) Show the structure of CPC_DEFINITION rows for a few symbols (levels 1-5)
SELECT 
  "symbol",
  "level",
  "titleFull"
FROM PATENTS.PATENTS.CPC_DEFINITION
WHERE "level" <= 5
LIMIT 20;
```

```sql
--Description: 6) Get all CPC groups at level-5 together with their full titles
SELECT 
  "symbol"    AS "cpc_level5",
  "titleFull" AS "cpc_title"
FROM PATENTS.PATENTS.CPC_DEFINITION
WHERE "level" = 5
LIMIT 20;
```

```sql
--Description: 7) Count publications per *first*-CPC group (roughly first 7 chars)  
WITH flat AS (
    SELECT p."publication_number",
           f.value:"code"::STRING AS cpc_code,
           f.seq AS seq_index
    FROM PATENTS.PATENTS.PUBLICATIONS p
         ,LATERAL FLATTEN(input => p."cpc") f
), first_cpc AS (
    SELECT "publication_number",
           cpc_code
    FROM flat
    QUALIFY ROW_NUMBER() OVER (PARTITION BY "publication_number" ORDER BY seq_index) = 1
)
SELECT 
  SUBSTR(cpc_code, 1, 7)           AS "cpc_group_candidate",
  COUNT(*)                         AS "pub_count"
FROM first_cpc
GROUP BY 1
ORDER BY 2 DESC
LIMIT 20;
```

```sql
--Description: 8) Yearly filing counts for each first-CPC group (year = floor(filing_date/10000))
WITH flat AS (
    SELECT p."publication_number",
           p."filing_date",
           f.value:"code"::STRING AS cpc_code,
           f.seq AS seq_index
    FROM PATENTS.PATENTS.PUBLICATIONS p
         ,LATERAL FLATTEN(input => p."cpc") f
    WHERE p."filing_date" IS NOT NULL
), first_cpc AS (
    SELECT 
        "publication_number",
        FLOOR("filing_date"/10000) AS filing_year,
        cpc_code
    FROM flat
    QUALIFY ROW_NUMBER() OVER (PARTITION BY "publication_number" ORDER BY seq_index) = 1
)
SELECT 
  filing_year,
  SUBSTR(cpc_code, 1, 7) AS "cpc_group",
  COUNT(*)               AS "yearly_filings"
FROM first_cpc
GROUP BY filing_year, "cpc_group"
ORDER BY "cpc_group", filing_year
LIMIT 20;
```

```sql
--Description: 9) Illustrative EMA (α = 0.2) for one CPC group (e.g., H04L9/0) to verify formula
WITH first_codes AS (
    SELECT 
        FLOOR(p."filing_date"/10000)        AS yr,
        SUBSTR(f.value:"code"::STRING,1,7)  AS grp,
        f.seq                               AS seq_index
    FROM PATENTS.PATENTS.PUBLICATIONS p
         ,LATERAL FLATTEN(input => p."cpc") f
    WHERE p."filing_date" IS NOT NULL
), first_only AS (
    SELECT yr, grp
    FROM first_codes
    QUALIFY ROW_NUMBER() OVER (PARTITION BY "grp", "yr", p."publication_number" ORDER BY seq_index)=1
), yearly AS (
    SELECT yr, COUNT(*) AS filings
    FROM first_only
    WHERE grp = 'H04L9/0'
    GROUP BY yr
)
SELECT 
  yr,
  filings,
  -- simple recursive EMA via window; seed previous EMA with first year’s filings
  filings * 0.2 + 0.8 * COALESCE(LAG(filings * 0.2 + 0.8 * 0) OVER (ORDER BY yr), filings) AS ema_check
FROM yearly
ORDER BY yr
LIMIT 20;
```

```sql
--Description: 10) Bring in the LEVEL-5 CPC title when inspecting results for a sample group
SELECT 
  cd."symbol"    AS "cpc_group_L5",
  cd."titleFull" AS "cpc_group_title"
FROM PATENTS.PATENTS.CPC_DEFINITION cd
WHERE cd."level" = 5
  AND cd."symbol" ILIKE '%H04L9/0%'
LIMIT 20;
```
[Corrected other sqls]
2025-05-07 01:37:31 - Thread-30 (execute) - INFO - [Successfully corrected]
Successfully corrected. SQL:
--Description: Flatten the CPC array for every publication, capture the index of each
--element (f.seq).  Using QUALIFY + ROW_NUMBER() we retain only the lowest‐index
--element for each publication, revealing its “first” CPC code.  Showing 20 examples
--lets us confirm that the logic actually returns data.
WITH flat AS (
    SELECT
        p."publication_number",
        p."application_number",
        p."filing_date",
        f.seq                       AS seq_index,          -- position in array
        f.value:"code"::STRING      AS cpc_code            -- CPC symbol text
    FROM PATENTS.PATENTS.PUBLICATIONS p
         ,LATERAL FLATTEN(input => p."cpc") f              -- explode JSON array
)
SELECT
    "publication_number",
    "application_number",
    "filing_date",
    cpc_code AS "first_cpc_code",
    seq_index
FROM flat
QUALIFY ROW_NUMBER() OVER (PARTITION BY "publication_number" ORDER BY seq_index) = 1
LIMIT 20;
Results:
publication_number,application_number,filing_date,first_cpc_code,SEQ_INDEX
US-2021353898-A1,US-202117331793-A,20210527,A61M16/085,1645
AT-E548410-T1,AT-05736267-T,20050421,B32B2307/558,122956
US-6187063-B1,US-8186798-A,19980520,C10L1/328,149677
DE-546409-C,DE-P0060947-D,0,B05B11/06,767149
JP-2021511751-A,JP-2020540831-A,20190326,B62D15/0285,192166
KR-20100136691-A,KR-20090054912-A,20090619,F02M25/0836,334393
JP-S5610525-A,JP-8770380-A,19800627,C08G18/08,201419
BG-40653-A3,BG-5944182-A,19

[Successfully corrected]
2025-05-07 01:37:31 - Thread-30 (execute) - INFO - [Try to execute]
--Description: 4) Preview DISTINCT “first” CPC codes we captured – useful for later grouping
WITH flat AS (
    SELECT
        p."publication_number",
        f.value:"code"::STRING AS cpc_code,
        f.seq                 AS seq_index
    FROM PATENTS.PATENTS.PUBLICATIONS p
         ,LATERAL FLATTEN(input => p."cpc") f
), first_cpc AS (
    SELECT
        "publication_number",
        cpc_code
    FROM flat
    QUALIFY ROW_NUMBER() OVER (PARTITION BY "publication_number" ORDER BY seq_index) = 1
)
SELECT DISTINCT
  cpc_code AS "first_cpc_code"
FROM first_cpc
LIMIT 20
[Try to execute]
2025-05-07 01:38:33 - Thread-30 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 4) Preview DISTINCT “first” CPC codes we captured – useful for later grouping
WITH flat AS (
    SELECT
        p."publication_number",
        f.value:"code"::STRING AS cpc_code,
        f.seq                 AS seq_index
    FROM PATENTS.PATENTS.PUBLICATIONS p
         ,LATERAL FLATTEN(input => p."cpc") f
), first_cpc AS (
    SELECT
        "publication_number",
        cpc_code
    FROM flat
    QUALIFY ROW_NUMBER() OVER (PARTITION BY "publication_number" ORDER BY seq_index) = 1
)
SELECT DISTINCT
  cpc_code AS "first_cpc_code"
FROM first_cpc
LIMIT 20
Results:
first_cpc_code
H01B17/54
H04W76/007
E02D5/10
C07C43/202
B63B73/43
B60W40/09
A61B1/055
G06F40/258
B26B5/005
H04N19/577
F04C14/26
G11B27/34
C07C2602/08
B61D11/00
C07K5/06139
B41M5/3375
G02C2200/08
F16N7/30
C08K5/3417
B43L13/20

[Successfully executed]
2025-05-07 01:38:33 - Thread-30 (execute) - INFO - [Try to execute]
--Description: 5) Show the structure of CPC_DEFINITION rows for a few symbols (levels 1-5)
SELECT 
  "symbol",
  "level",
  "titleFull"
FROM PATENTS.PATENTS.CPC_DEFINITION
WHERE "level" <= 5
LIMIT 20
[Try to execute]
2025-05-07 01:38:33 - Thread-30 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 5) Show the structure of CPC_DEFINITION rows for a few symbols (levels 1-5)
SELECT 
  "symbol",
  "level",
  "titleFull"
FROM PATENTS.PATENTS.CPC_DEFINITION
WHERE "level" <= 5
LIMIT 20
Results:
symbol,level,titleFull
B,2.0,PERFORMING OPERATIONS; TRANSPORTING
H,2.0,ELECTRICITY
Y,2.0,GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
D,2.0,TEXTILES; PAPER
F,2.0,MECHANICAL ENGINEERING; LIGHTING; HEATING; WEAPONS; BLASTING
E,2.0,FIXED CONSTRUCTIONS
C,2.0,CHEMISTRY; METALLURGY
G,2.0,PHYSICS

[Successfully executed]
2025-05-07 01:38:33 - Thread-30 (execute) - INFO - [Try to execute]
--Description: 6) Get all CPC groups at level-5 together with their full titles
SELECT 
  "symbol"    AS "cpc_level5",
  "titleFull" AS "cpc_title"
FROM PATENTS.PATENTS.CPC_DEFINITION
WHERE "level" = 5
LIMIT 20
[Try to execute]
2025-05-07 01:38:34 - Thread-30 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 6) Get all CPC groups at level-5 together with their full titles
SELECT 
  "symbol"    AS "cpc_level5",
  "titleFull" AS "cpc_title"
FROM PATENTS.PATENTS.CPC_DEFINITION
WHERE "level" = 5
LIMIT 20
Results:
cpc_level5,cpc_title
A01H,NEW PLANTS OR NON-TRANSGENIC PROCESSES FOR OBTAINING THEM; PLANT REPRODUCTION BY TISSUE CULTURE TECHNIQUES
A01F,PROCESSING OF HARVESTED PRODUCE; HAY OR STRAW PRESSES; DEVICES FOR STORING AGRICULTURAL OR HORTICULTURAL PRODUCE
A01C,PLANTING; SOWING; FERTILISING
A01G,"HORTICULTURE; CULTIVATION OF VEGETABLES, FLOWERS, RICE, FRUIT, VINES, HOPS OR SEAWEED; FORESTRY; WATERING"
A01N,"PRESERVATION OF BODIES OF HUMANS OR ANIMALS OR PLANTS OR PARTS THEREOF; BIOCIDES, e.g. AS 

[Successfully executed]
2025-05-07 01:38:34 - Thread-30 (execute) - INFO - [Try to execute]
--Description: 7) Count publications per *first*-CPC group (roughly first 7 chars)  
WITH flat AS (
    SELECT p."publication_number",
           f.value:"code"::STRING AS cpc_code,
           f.seq AS seq_index
    FROM PATENTS.PATENTS.PUBLICATIONS p
         ,LATERAL FLATTEN(input => p."cpc") f
), first_cpc AS (
    SELECT "publication_number",
           cpc_code
    FROM flat
    QUALIFY ROW_NUMBER() OVER (PARTITION BY "publication_number" ORDER BY seq_index) = 1
)
SELECT 
  SUBSTR(cpc_code, 1, 7)           AS "cpc_group_candidate",
  COUNT(*)                         AS "pub_count"
FROM first_cpc
GROUP BY 1
ORDER BY 2 DESC
LIMIT 20
[Try to execute]
2025-05-07 01:39:36 - Thread-30 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 7) Count publications per *first*-CPC group (roughly first 7 chars)  
WITH flat AS (
    SELECT p."publication_number",
           f.value:"code"::STRING AS cpc_code,
           f.seq AS seq_index
    FROM PATENTS.PATENTS.PUBLICATIONS p
         ,LATERAL FLATTEN(input => p."cpc") f
), first_cpc AS (
    SELECT "publication_number",
           cpc_code
    FROM flat
    QUALIFY ROW_NUMBER() OVER (PARTITION BY "publication_number" ORDER BY seq_index) = 1
)
SELECT 
  SUBSTR(cpc_code, 1, 7)           AS "cpc_group_candidate",
  COUNT(*)                         AS "pub_count"
FROM first_cpc
GROUP BY 1
ORDER BY 2 DESC
LIMIT 20
Results:
cpc_group_candidate,pub_count
Y02E60/,3133
Y02E10/,2321
H01L21/,2288
G06F3/0,1625
Y02T10/,1616
Y02P70/,1601
A61K31/,1504
G06F16/,1450
Y02W30/,1189
Y02A40/,1183
H01L29/,1137
H04N21/,1041
G02F1/1,1038
G01N33/,1032
G06Q10/,986
H01L222,979
H04N19/,877
Y02P20/,864
Y10T428,845
G06Q30/,843

[Successfully executed]
2025-05-07 01:39:36 - Thread-30 (execute) - INFO - [Try to execute]
--Description: 8) Yearly filing counts for each first-CPC group (year = floor(filing_date/10000))
WITH flat AS (
    SELECT p."publication_number",
           p."filing_date",
           f.value:"code"::STRING AS cpc_code,
           f.seq AS seq_index
    FROM PATENTS.PATENTS.PUBLICATIONS p
         ,LATERAL FLATTEN(input => p."cpc") f
    WHERE p."filing_date" IS NOT NULL
), first_cpc AS (
    SELECT 
        "publication_number",
        FLOOR("filing_date"/10000) AS filing_year,
        cpc_code
    FROM flat
    QUALIFY ROW_NUMBER() OVER (PARTITION BY "publication_number" ORDER BY seq_index) = 1
)
SELECT 
  filing_year,
  SUBSTR(cpc_code, 1, 7) AS "cpc_group",
  COUNT(*)               AS "yearly_filings"
FROM first_cpc
GROUP BY filing_year, "cpc_group"
ORDER BY "cpc_group", filing_year
LIMIT 20
[Try to execute]
2025-05-07 01:40:05 - Thread-30 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 8) Yearly filing counts for each first-CPC group (year = floor(filing_date/10000))
WITH flat AS (
    SELECT p."publication_number",
           p."filing_date",
           f.value:"code"::STRING AS cpc_code,
           f.seq AS seq_index
    FROM PATENTS.PATENTS.PUBLICATIONS p
         ,LATERAL FLATTEN(input => p."cpc") f
    WHERE p."filing_date" IS NOT NULL
), first_cpc AS (
    SELECT 
        "publication_number",
        FLOOR("filing_date"/10000) AS filing_year,
        cpc_code
    FROM flat
    QUALIFY ROW_NUMBER() OVER (PARTITION BY "publication_number" ORDER BY seq_index) = 1
)
SELECT 
  filing_year,
  SUBSTR(cpc_code, 1, 7) AS "cpc_group",
  COUNT(*)               AS "yearly_filings"
FROM first_cpc
GROUP BY filing_year, "cpc_group"
ORDER BY "cpc_group", filing_year
LIMIT 20
Results:
FILING_YEAR,cpc_group,yearly_filings
0,A01B1/0,2
1948,A01B1/0,1
1950,A01B1/0,1
1959,A01B1/0,1
1986,A01B1/0,1
2003,A01B1/0,1
2006,A01B1/0,1
2010,A01B1/0,1
2015,A01B1/0,1
2018,A01B1/0,1
0,A01B1/1,1
1941,A01B1/1,1
1981,A01B1/1,1
1993,A01B1/1,1
2004,A01B1/1,1
0,A01B1/2,3
1941,A01B1/2,1
2002,A01B1/2,1
2015,A01B1/2,1
2018,A01B1/2,1

[Successfully executed]
2025-05-07 01:40:05 - Thread-30 (execute) - INFO - [Try to execute]
--Description: 9) Illustrative EMA (α = 0.2) for one CPC group (e.g., H04L9/0) to verify formula
WITH first_codes AS (
    SELECT 
        FLOOR(p."filing_date"/10000)        AS yr,
        SUBSTR(f.value:"code"::STRING,1,7)  AS grp,
        f.seq                               AS seq_index
    FROM PATENTS.PATENTS.PUBLICATIONS p
         ,LATERAL FLATTEN(input => p."cpc") f
    WHERE p."filing_date" IS NOT NULL
), first_only AS (
    SELECT yr, grp
    FROM first_codes
    QUALIFY ROW_NUMBER() OVER (PARTITION BY "grp", "yr", p."publication_number" ORDER BY seq_index)=1
), yearly AS (
    SELECT yr, COUNT(*) AS filings
    FROM first_only
    WHERE grp = 'H04L9/0'
    GROUP BY yr
)
SELECT 
  yr,
  filings,
  -- simple recursive EMA via window; seed previous EMA with first year’s filings
  filings * 0.2 + 0.8 * COALESCE(LAG(filings * 0.2 + 0.8 * 0) OVER (ORDER BY yr), filings) AS ema_check
FROM yearly
ORDER BY yr
LIMIT 20
[Try to execute]
2025-05-07 01:40:06 - Thread-30 (execute) - INFO - [Error occurred]
{'status': 'error', 'error_msg': '##ERROR##000904 (42000): SQL compilation error: error line 12 at position 44\ninvalid identifier \'"grp"\''}
[Error occurred]
2025-05-07 01:43:42 - Thread-30 (execute) - INFO - [Corrected SQL]
```sql
--Description:  Illustrative check of the α = 0.2 exponential-moving average (EMA) for
--CPC group prefix ‘H04L9/0’.
--Logic:
-- 1. Flatten every publication’s CPC list (LATERAL FLATTEN) and keep the array index (f.seq).
-- 2. Use ROW_NUMBER so only the *first* CPC for each publication is kept (rn = 1).
-- 3. Filter to those publications whose first CPC begins with ‘H04L9/0’.
-- 4. Aggregate yearly filing counts (year = INT(filing_date / 10000)).
-- 5. Compute EMA:  EMAₜ = 0.2·filingsₜ + 0.8·filingsₜ₋₁ (via LAG window).
WITH first_cpc AS (                         -- Step 1 & 2
    SELECT
        FLOOR(p."filing_date" / 10000)             AS yr,            -- filing year
        SUBSTR(f.value:"code"::STRING, 1, 7)       AS grp,           -- CPC prefix
        ROW_NUMBER() OVER (PARTITION BY p."publication_number"
                           ORDER BY f.seq)         AS rn,
        p."publication_number"
    FROM PATENTS.PATENTS.PUBLICATIONS p
         ,LATERAL FLATTEN(input => p."cpc") f
    WHERE p."filing_date" IS NOT NULL
), yearly AS (                                -- Step 3 & 4
    SELECT
        yr,
        COUNT(*) AS filings
    FROM first_cpc
    WHERE rn = 1                 -- keep only first CPC per publication
      AND grp = 'H04L9/0'        -- target CPC group prefix
    GROUP BY yr
)
SELECT
    yr,
    filings,
    0.2 * filings + 0.8 * LAG(filings) OVER (ORDER BY yr) AS ema_0p2
FROM yearly
ORDER BY yr
LIMIT 20;
```
[Corrected SQL]
2025-05-07 01:43:43 - Thread-30 (execute) - INFO - [Results for corrected sql]
YR,FILINGS,EMA_0P2
1954,1,
1976,1,1.0
1984,1,1.0
1986,1,1.0
1987,1,1.0
1991,1,1.0
1994,2,1.2
1997,1,1.8
1998,2,1.2
2000,2,2.0
2001,4,2.4
2002,3,3.8
2003,5,3.4
2004,3,4.6
2005,3,3.0
2006,3,3.0
2007,4,3.2
2008,6,4.4
2009,6,6.0
2010,2,5.2

[Results for corrected sql]
2025-05-07 01:44:10 - Thread-30 (execute) - INFO - [Corrected other sqls]
```sql
--Description: 10) Fetch the level-5 CPC definition whose symbol begins with the
--prefix ‘H04L9/’, allowing us to view its full title text.
SELECT
    cd."symbol"    AS "cpc_group_L5",
    cd."titleFull" AS "cpc_group_title"
FROM PATENTS.PATENTS.CPC_DEFINITION cd
WHERE cd."level" = 5
  AND cd."symbol" LIKE 'H04L9/%'      -- prefix match for the target CPC group
LIMIT 20;
```
[Corrected other sqls]
2025-05-07 01:44:10 - Thread-30 (execute) - INFO - [Successfully corrected]
Successfully corrected. SQL:
--Description:  Illustrative check of the α = 0.2 exponential-moving average (EMA) for
--CPC group prefix ‘H04L9/0’.
--Logic:
-- 1. Flatten every publication’s CPC list (LATERAL FLATTEN) and keep the array index (f.seq).
-- 2. Use ROW_NUMBER so only the *first* CPC for each publication is kept (rn = 1).
-- 3. Filter to those publications whose first CPC begins with ‘H04L9/0’.
-- 4. Aggregate yearly filing counts (year = INT(filing_date / 10000)).
-- 5. Compute EMA:  EMAₜ = 0.2·filingsₜ + 0.8·filingsₜ₋₁ (via LAG window).
WITH first_cpc AS (                         -- Step 1 & 2
    SELECT
        FLOOR(p."filing_date" / 10000)             AS yr,            -- filing year
        SUBSTR(f.value:"code"::STRING, 1, 7)       AS grp,           -- CPC prefix
        ROW_NUMBER() OVER (PARTITION BY p."publication_number"
                           ORDER BY f.seq)         AS rn,
        p."publication_number"
    FROM PATENTS.PATENTS.PUBLICATIONS p
         ,LATERAL FLATTEN(input => p."cpc") f
    WHERE p."filing_date" IS NOT NULL
), yearly AS (                                -- Step 3 & 4
    SELECT
        yr,
        COUNT(*) AS filings
    FROM first_cpc
    WHERE rn = 1                 -- keep only first CPC per publication
      AND grp = 'H04L9/0'        -- target CPC group prefix
    GROUP BY yr
)
SELECT
    yr,
    filings,
    0.2 * filings + 0.8 * LAG(filings) OVER (ORDER BY yr) AS ema_0p2
FROM yearly
ORDER BY yr
LIMIT 20;
Results:
YR,FILINGS,EMA_0P2
1954,1,
1976,1,1.0
1984,1,1.0
1986,1,1.0
1987,1,1.0
1991,1,1.0
1994,2,1.2
1997,1,1.8
1998,2,1.2
2000,2,2.0
2001,4,2.4
2002,3,3.8
2003,5,3.4
2004,3,4.6
2005,3,3.0
2006,3,3.0
2007,4,3.2
2008,6,4.4
2009,6,6.0
2010,2,5.2

[Successfully corrected]
2025-05-07 01:44:10 - Thread-30 (execute) - INFO - [Try to execute]
--Description: 10) Fetch the level-5 CPC definition whose symbol begins with the
--prefix ‘H04L9/’, allowing us to view its full title text.
SELECT
    cd."symbol"    AS "cpc_group_L5",
    cd."titleFull" AS "cpc_group_title"
FROM PATENTS.PATENTS.CPC_DEFINITION cd
WHERE cd."level" = 5
  AND cd."symbol" LIKE 'H04L9/%'      -- prefix match for the target CPC group
LIMIT 20
[Try to execute]
2025-05-07 01:44:11 - Thread-30 (execute) - INFO - [Error occurred]
No data found for the specified query.

[Error occurred]
2025-05-07 01:45:41 - Thread-30 (execute) - INFO - [Corrected SQL]
```sql
--Description: Broaden the search for CPC definitions beginning with “H04L9”.
--Instead of limiting to level-5 and a slash, match any symbol that starts with
--‘H04L9’ (with or without additional characters) and list its level and title.
SELECT
    "symbol",
    "level",
    "titleFull"
FROM PATENTS.PATENTS.CPC_DEFINITION
WHERE "symbol" LIKE 'H04L9%'          -- broader prefix search
ORDER BY "level"
LIMIT 20;
```
[Corrected SQL]
2025-05-07 01:45:42 - Thread-30 (execute) - INFO - [Results for corrected sql]
symbol,level,titleFull
H04L9/00,7.0,Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
H04L9/40,8.0,Network security protocols
H04L9/50,8.0,"Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols using hash chains, e.g. blockchains or hash trees"
H04L9/36,8.0,Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network secu

[Results for corrected sql]
2025-05-07 01:45:42 - Thread-30 (execute) - INFO - [Successfully corrected]
Successfully corrected. SQL:
--Description: Broaden the search for CPC definitions beginning with “H04L9”.
--Instead of limiting to level-5 and a slash, match any symbol that starts with
--‘H04L9’ (with or without additional characters) and list its level and title.
SELECT
    "symbol",
    "level",
    "titleFull"
FROM PATENTS.PATENTS.CPC_DEFINITION
WHERE "symbol" LIKE 'H04L9%'          -- broader prefix search
ORDER BY "level"
LIMIT 20;
Results:
symbol,level,titleFull
H04L9/00,7.0,Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
H04L9/40,8.0,Network security protocols
H04L9/50,8.0,"Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols using hash chains, e.g. blockchains or hash trees"
H04L9/36,8.0,Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network secu

[Successfully corrected]
2025-05-07 01:45:42 - Thread-30 (execute) - INFO - itercount: 0
2025-05-07 01:45:42 - Thread-30 (execute) - INFO - [Self-refine]
Table full name: PATENTS.PATENTS.DISCLOSURES_13
Column name: serial_cleaned Type: TEXT
Column name: sso Type: TEXT
Column name: disclosure_event Type: TEXT
Column name: reciprocity Type: TEXT
Column name: patent_owner_harmonized Type: TEXT
Column name: record_id Type: TEXT
Column name: family_id Type: TEXT
Column name: blanket_scope Type: TEXT
Column name: copyright Type: TEXT
Column name: standard Type: TEXT
Column name: licensing_commitment Type: TEXT
Column name: committee_project Type: TEXT
Column name: sc_name Type: TEXT
Column name: blanket_type Type: TEXT
Column name: pub_cleaned Type: TEXT
Column name: third_party Type: TEXT
Column name: wg_name Type: TEXT
Column name: patent_owner_unharmonized Type: TEXT
Column name: tc_name Type: TEXT
Column name: date Type: NUMBER
Sample rows:
[{'family_id': '22549751', 'record_id': 'REC00002', 'disclosure_event': 'DE0001', 'sso': 'ANSI', 'patent_owner_harmonized': '3M', 'patent_owner_unharmonized': '3M', 'date': 19751124, 'standard': 'X3.55;X3.56', 'committee_project': '', 'tc_name': '', 'sc_name': '', 'wg_name': '', 'licensing_commitment': 'FRAND', 'copyright': '', 'blanket_type': '0', 'blanket_scope': '', 'third_party': '0', 'reciprocity': '0', 'serial_cleaned': '', 'pub_cleaned': 'US3692255'}, {'family_id': '23170520', 'record_id': 'REC00001', 'disclosure_event': 'DE0001', 'sso': 'ANSI', 'patent_owner_harmonized': '3M', 'patent_owner_unharmonized': '3M', 'date': 19751124, 'standard': 'X3.55;X3.56', 'committee_project': '', 'tc_name': '', 'sc_name': '', 'wg_name': '', 'licensing_commitment': 'FRAND', 'copyright': '', 'blanket_type': '0', 'blanket_scope': '', 'third_party': '0', 'reciprocity': '0', 'serial_cleaned': '', 'pub_cleaned': 'US3861619'}, {'family_id': '23170520', 'record_id': 'REC00006', 'disclosure_event': 'DE0003', 'sso': 'ANSI', 'patent_owner_harmonized': '3M', 'patent_owner_unharmonized': '3M', 'date': 19890711, 'standard': 'X3.55;X3.56;X3.72;X3.116;X3.127;X3.136', 'committee_project': '', 'tc_name': '', 'sc_name': '', 'wg_name': '', 'licensing_commitment': 'Specific Terms', 'copyright': '', 'blanket_type': '0', 'blanket_scope': '', 'third_party': '0', 'reciprocity': '0', 'serial_cleaned': '', 'pub_cleaned': 'US3861619'}, {'family_id': '22549751', 'record_id': 'REC00008', 'disclosure_event': 'DE0004', 'sso': 'ANSI', 'patent_owner_harmonized': '3M', 'patent_owner_unharmonized': '3M', 'date': 19890906, 'standard': '', 'committee_project': '', 'tc_name': '', 'sc_name': '', 'wg_name': '', 'licensing_commitment': 'FRAND', 'copyright': '', 'blanket_type': '2', 'blanket_scope': '', 'third_party': '0', 'reciprocity': '0', 'serial_cleaned': '', 'pub_cleaned': 'US3692255'}, {'family_id': '23418274', 'record_id': 'REC00024', 'disclosure_event': 'DE0013', 'sso': 'ANSI', 'patent_owner_harmonized': 'Agilent Technologies', 'patent_owner_unharmonized': 'Agilent Technologies', 'date': 20020606, 'standard': '1588', 'committee_project': 'IEEE', 'tc_name': '', 'sc_name': '', 'wg_name': '', 'licensing_commitment': 'FRAND', 'copyright': '', 'blanket_type': '0', 'blanket_scope': '', 'third_party': '0', 'reciprocity': '0', 'serial_cleaned': '', 'pub_cleaned': 'US5566180'}]

--------------------------------------------------
Table full name: PATENTS.PATENTS.PUBLICATIONS
Column name: examiner Type: VARIANT Description: Is this text truncated?
Column name: fterm Type: VARIANT Description: For US publications only, the description in HTML, limited to the first 9 megabytes
Column name: application_number_formatted Type: TEXT Description: Application number, formatted to the patent office format where possible.
Column name: application_number Type: TEXT Description: Patent application number (DOCDB compatible), eg: 'US-87124404-A'. This may not always be set.
Column name: grant_date Type: NUMBER Description: For US publications only, the claims in plain text
Column name: cpc Type: VARIANT Description: Two-letter language code for this text
Column name: locarno Type: VARIANT Description: Localized text
Column name: description_localized_html Type: VARIANT Description: Localized text
Column name: publication_date Type: NUMBER Description: Two-letter language code for this text
Column name: kind_code Type: TEXT Description: Kind code, indicating application, grant, search report, correction, etc. These are different for each country.
Column name: spif_publication_number Type: TEXT Description: SPIF standard (spif.group) publication number, after 2000
Column name: ipc Type: VARIANT Description: Localized text
Column name: pct_number Type: TEXT Description: PCT number for this application if it was part of a PCT filing, eg: 'PCT/EP2008/062623'.
Column name: entity_status Type: TEXT Description: The filing date.
Column name: filing_date Type: NUMBER Description: Is this text truncated?
Column name: abstract_localized Type: VARIANT Description: Localized text
Column name: description_localized Type: VARIANT Description: The publication abstracts in different languages
Column name: assignee Type: VARIANT Description: Localized text
Column name: citation Type: VARIANT Description: Two-letter language code for this text
Column name: fi Type: VARIANT Description: Is this text truncated?
Column name: claims_localized_html Type: VARIANT Description: Is this text truncated?
Column name: inventor_harmonized Type: VARIANT Description: For US publications only, the claims in HTML
Column name: inventor Type: VARIANT Description: Is this text truncated?
Column name: claims_localized Type: VARIANT Description: Two-letter language code for this text
Column name: priority_date Type: NUMBER Description: Localized text
Column name: application_kind Type: TEXT Description: High-level kind of the application: A=patent; U=utility; P=provision; W= PCT; F=design; T=translation.
Column name: priority_claim Type: VARIANT Description: Two-letter language code for this text
Column name: assignee_harmonized Type: VARIANT Description: Two-letter language code for this text
Column name: title_localized Type: VARIANT Description: The publication titles in different languages
Column name: art_unit Type: TEXT Description: The grant date, or 0 if not granted.
Column name: child Type: VARIANT Description: The publication date.
Column name: family_id Type: TEXT Description: Family ID (simple family). Grouping on family ID will return all publications associated with a simple patent family (all publications share the same priority claims).
Column name: spif_application_number Type: TEXT Description: SPIF standard (spif.group) application number, after 2000
Column name: uspc Type: VARIANT Description: For US publications only, the description in plain text, limited to the first 9 megabytes
Column name: publication_number Type: TEXT Description: Patent publication number (DOCDB compatible), eg: 'US-7650331-B1'
Column name: country_code Type: TEXT Description: Country code, eg: 'US', 'EP', etc
Column name: parent Type: VARIANT Description: Is this text truncated?
Sample rows:
[{'publication_number': 'DE-69611147-T2', 'application_number': 'DE-69611147-T', 'country_code': 'DE', 'kind_code': 'T2', 'application_kind': 'T', 'application_number_formatted': 'DE1996611147', 'pct_number': '', 'family_id': '9483724', 'spif_publication_number': '', 'spif_application_number': '', 'title_localized': '[\n  {\n    "language": "de",\n    "text": "Schloss vom Typ eines entkuppelbaren Rotors",\n    "truncated": false\n  }\n]', 'abstract_localized': '[]', 'claims_localized': '[]', 'claims_localized_html': '[]', 'description_localized': '[]', 'description_localized_html': '[]', 'publication_date': 20010621, 'filing_date': 19961015, 'grant_date': 20010621, 'priority_date': 19951018, 'priority_claim': '[\n  {\n    "application_number": "FR-9512326-A",\n    "category": "",\n    "filing_date": 19951018,\n    "npl_text": "",\n    "publication_number": "",\n    "type": ""\n  }\n]', 'inventor': '[\n  "MENAGER, CHRISTOPHE",\n  "CANARD, LOUIS",\n  "CADOUOT, PATRICK",\n  "GOURDIN, DOMINIQUE"\n]', 'inventor_harmonized': '[\n  {\n    "country_code": "FR",\n    "name": "MENAGER CHRISTOPHE"\n  },\n  {\n    "country_code": "FR",\n    "name": "CANARD LOUIS"\n  },\n  {\n    "country_code": "FR",\n    "name": "CADOUOT PATRICK"\n  },\n  {\n    "country_code": "FR",\n    "name": "GOURDIN DOMINIQUE"\n  }\n]', 'assignee': '[\n  "Valeo Securite Habitacle, Creteil Cedex"\n]', 'assignee_harmonized': '[\n  {\n    "country_code": "FR",\n    "name": "VALEO SECURITE HABITACLE"\n  }\n]', 'examiner': '[]', 'uspc': '[]', 'ipc': '[\n  {\n    "code": "E05B17/04",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "E05B17/00",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  }\n]', 'cpc': '[\n  {\n    "code": "E05B77/00",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "E05B17/0058",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  }\n]', 'fi': '[]', 'fterm': '[]', 'locarno': '[]', 'citation': '[]', 'parent': '[]', 'child': '[]', 'entity_status': '', 'art_unit': ''}, {'publication_number': 'DE-69630331-T2', 'application_number': 'DE-69630331-T', 'country_code': 'DE', 'kind_code': 'T2', 'application_kind': 'T', 'application_number_formatted': 'DE1996630331', 'pct_number': '', 'family_id': '23689246', 'spif_publication_number': '', 'spif_application_number': '', 'title_localized': '[\n  {\n    "language": "de",\n    "text": "Verfahren zur gesicherten Sitzungsschlüsselerzeugung und zur Authentifizierung",\n    "truncated": false\n  }\n]', 'abstract_localized': '[]', 'claims_localized': '[]', 'claims_localized_html': '[]', 'description_localized': '[]', 'description_localized_html': '[]', 'publication_date': 20040729, 'filing_date': 19960416, 'grant_date': 20040729, 'priority_date': 19950421, 'priority_claim': '[\n  {\n    "application_number": "US-42609095-A",\n    "category": "",\n    "filing_date": 19950421,\n    "npl_text": "",\n    "publication_number": "",\n    "type": ""\n  }\n]', 'inventor': '[\n  "VANSTONE SCOTT .A, WATERLOO",\n  "MENEZES ALFRED JOHN, AUBURN",\n  "MINGHUA QU,"\n]', 'inventor_harmonized': '[\n  {\n    "country_code": "CA",\n    "name": "VANSTONE SCOTT A WATERLOO"\n  },\n  {\n    "country_code": "US",\n    "name": "MENEZES ALFRED JOHN AUBURN"\n  },\n  {\n    "country_code": "CA",\n    "name": "MINGHUA QU"\n  }\n]', 'assignee': '[\n  "Certicom Corp., Mississauga"\n]', 'assignee_harmonized': '[\n  {\n    "country_code": "CA",\n    "name": "CERTICOM CORP"\n  }\n]', 'examiner': '[]', 'uspc': '[]', 'ipc': '[\n  {\n    "code": "H04L9/08",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "G06F7/72",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  }\n]', 'cpc': '[\n  {\n    "code": "G06F7/725",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "H04L9/0844",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "H04L9/0838",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "H04L9/0844",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "G06F7/725",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  }\n]', 'fi': '[]', 'fterm': '[]', 'locarno': '[]', 'citation': '[]', 'parent': '[]', 'child': '[]', 'entity_status': '', 'art_unit': ''}, {'publication_number': 'DE-69636755-T2', 'application_number': 'DE-69636755-T', 'country_code': 'DE', 'kind_code': 'T2', 'application_kind': 'T', 'application_number_formatted': 'DE1996636755', 'pct_number': '', 'family_id': '8224764', 'spif_publication_number': '', 'spif_application_number': '', 'title_localized': '[\n  {\n    "language": "de",\n    "text": "Immortalisierte menschliche Epithelzell-Linie",\n    "truncated": false\n  }\n]', 'abstract_localized': '[\n  {\n    "language": "en",\n    "text": "Immortalised human corneal epithelial cell line, comprises cells of the cell line which are capable of stratification and expressing metabolic markers specific for nonimmortalised human epithelial cells, differentiation markers specific for nonimmortalised human corneal epithelial cells and markers specific for an inflammatory reaction.",\n    "truncated": false\n  }\n]', 'claims_localized': '[]', 'claims_localized_html': '[]', 'description_localized': '[]', 'description_localized_html': '[]', 'publication_date': 20071011, 'filing_date': 19961224, 'grant_date': 20071011, 'priority_date': 19961224, 'priority_claim': '[\n  {\n    "application_number": "EP-96203707-A",\n    "category": "",\n    "filing_date": 19961224,\n    "npl_text": "",\n    "publication_number": "",\n    "type": ""\n  }\n]', 'inventor': '[\n  "OFFORD CAVIN, ELIZABETH",\n  "TROMVOUKIS, YVONNE",\n  "PFEIFER, ANDREA M.A.",\n  "SHARIF, NAJ"\n]', 'inventor_harmonized': '[\n  {\n    "country_code": "CH",\n    "name": "OFFORD CAVIN ELIZABETH"\n  },\n  {\n    "country_code": "CH",\n    "name": "TROMVOUKIS YVONNE"\n  },\n  {\n    "country_code": "CH",\n    "name": "PFEIFER ANDREA M A"\n  },\n  {\n    "country_code": "US",\n    "name": "SHARIF NAJ"\n  }\n]', 'assignee': '[\n  "Société des Produits Nestlé S.A."\n]', 'assignee_harmonized': '[\n  {\n    "country_code": "CH",\n    "name": "NESTLE SA"\n  }\n]', 'examiner': '[]', 'uspc': '[]', 'ipc': '[\n  {\n    "code": "C12N5/10",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "G01N33/50",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "C12R1/91",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "C12N15/09",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "C12N5/00",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "A61K35/44",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "G01N33/48",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "C12Q1/68",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "C12N5/071",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  }\n]', 'cpc': '[\n  {\n    "code": "C12N2503/02",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "C12N5/0621",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "C12N2503/02",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "C12N2510/04",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "C12N5/0621",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "C12N2510/04",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  }\n]', 'fi': '[]', 'fterm': '[]', 'locarno': '[]', 'citation': '[]', 'parent': '[]', 'child': '[]', 'entity_status': '', 'art_unit': ''}, {'publication_number': 'DE-69728658-T2', 'application_number': 'DE-69728658-T', 'country_code': 'DE', 'kind_code': 'T2', 'application_kind': 'T', 'application_number_formatted': 'DE1997628658', 'pct_number': '', 'family_id': '24437397', 'spif_publication_number': '', 'spif_application_number': '', 'title_localized': '[\n  {\n    "language": "de",\n    "text": "Lithographische dünne filmstruktur und diese enthaltende druckplatte",\n    "truncated": false\n  }\n]', 'abstract_localized': '[\n  {\n    "language": "en",\n    "text": "A lithographic laser imageable thin film structure comprising a substrate having first and second surfaces. A vacuum-deposited metal layer is carried by the first surface of the substrate. A layer of semiconductor material is adhered to and overlies the metal layer. The metal layer and the semiconductor material have thicknesses which are selected to maximize absorption of laser energy impinging on the same.",\n    "truncated": false\n  }\n]', 'claims_localized': '[]', 'claims_localized_html': '[]', 'description_localized': '[]', 'description_localized_html': '[]', 'publication_date': 20040812, 'filing_date': 19970115, 'grant_date': 20040812, 'priority_date': 19960229, 'priority_claim': '[\n  {\n    "application_number": "US-9700408-W",\n    "category": "",\n    "filing_date": 19970115,\n    "npl_text": "",\n    "publication_number": "",\n    "type": ""\n  },\n  {\n    "application_number": "US-60864696-A",\n    "category": "",\n    "filing_date": 19960229,\n    "npl_text": "",\n    "publication_number": "",\n    "type": ""\n  }\n]', 'inventor': '[\n  "FISHER, P.",\n  "PHILLIPS, W.",\n  "DAVIS, F.",\n  "LEGALLEE, CHARLOTTE"\n]', 'inventor_harmonized': '[\n  {\n    "country_code": "US",\n    "name": "FISHER P"\n  },\n  {\n    "country_code": "US",\n    "name": "PHILLIPS W"\n  },\n  {\n    "country_code": "US",\n    "name": "DAVIS F"\n  },\n  {\n    "country_code": "US",\n    "name": "LEGALLEE CHARLOTTE"\n  }\n]', 'assignee': '[\n  "Presstek, Inc."\n]', 'assignee_harmonized': '[\n  {\n    "country_code": "US",\n    "name": "PRESSTEK INC"\n  }\n]', 'examiner': '[]', 'uspc': '[]', 'ipc': '[\n  {\n    "code": "B32B15/04",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B41C1/10",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B41N1/00",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B41N1/14",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B32B27/20",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B32B7/02",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  }\n]', 'cpc': '[\n  {\n    "code": "B32B15/04",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/12674",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B32B27/20",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/31678",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/12458",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/31678",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/12458",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B32B15/20",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/31504",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B41N1/00",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B32B15/09",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B32B2367/00",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B32B27/20",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/12493",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B32B15/043",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B32B27/36",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B32B27/08",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B32B15/04",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/12493",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/12674",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B41C1/1033",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B41N1/00",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/12528",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/31504",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B41C1/1033",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B32B2311/24",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/12528",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  }\n]', 'fi': '[]', 'fterm': '[]', 'locarno': '[]', 'citation': '[]', 'parent': '[]', 'child': '[]', 'entity_status': '', 'art_unit': ''}, {'publication_number': 'DE-69807539-T2', 'application_number': 'DE-69807539-T', 'country_code': 'DE', 'kind_code': 'T2', 'application_kind': 'T', 'application_number_formatted': 'DE1998607539', 'pct_number': '', 'family_id': '11877005', 'spif_publication_number': '', 'spif_application_number': '', 'title_localized': '[\n  {\n    "language": "de",\n    "text": "Automatisches Analysegerät",\n    "truncated": false\n  }\n]', 'abstract_localized': '[]', 'claims_localized': '[]', 'claims_localized_html': '[]', 'description_localized': '[]', 'description_localized_html': '[]', 'publication_date': 20030116, 'filing_date': 19980120, 'grant_date': 20030116, 'priority_date': 19970129, 'priority_claim': '[\n  {\n    "application_number": "JP-1501397-A",\n    "category": "",\n    "filing_date": 19970129,\n    "npl_text": "",\n    "publication_number": "",\n    "type": ""\n  }\n]', 'inventor': '[\n  "HANAWA, MASAAKI",\n  "MITSUMAKI, HIROSHI",\n  "OHISHI, TADASHI",\n  "KAI, SUSUMU",\n  "WATANABE, HIROSHI"\n]', 'inventor_harmonized': '[\n  {\n    "country_code": "JP",\n    "name": "HANAWA MASAAKI"\n  },\n  {\n    "country_code": "JP",\n    "name": "MITSUMAKI HIROSHI"\n  },\n  {\n    "country_code": "JP",\n    "name": "OHISHI TADASHI"\n  },\n  {\n    "country_code": "JP",\n    "name": "KAI SUSUMU"\n  },\n  {\n    "country_code": "JP",\n    "name": "WATANABE HIROSHI"\n  }\n]', 'assignee': '[\n  "Hitachi, Ltd."\n]', 'assignee_harmonized': '[\n  {\n    "country_code": "JP",\n    "name": "HITACHI LTD"\n  }\n]', 'examiner': '[]', 'uspc': '[]', 'ipc': '[\n  {\n    "code": "G01N35/00",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "G01N35/02",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "G01N35/04",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  }\n]', 'cpc': '[\n  {\n    "code": "Y10T436/115831",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T436/114165",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "G01N2035/0465",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "G01N35/026",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "G01N2035/0467",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T436/113332",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T436/114165",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "G01N35/00603",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "Y10T436/11",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "G01N2035/00326",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "G01N2035/0467",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "G01N35/00603",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "G01N2035/00326",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "G01N2035/0465",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "G01N35/026",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "Y10T436/11",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T436/113332",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T436/115831",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  }\n]', 'fi': '[]', 'fterm': '[]', 'locarno': '[]', 'citation': '[]', 'parent': '[]', 'child': '[]', 'entity_status': '', 'art_unit': ''}]

--------------------------------------------------
Table full name: PATENTS.PATENTS.CPC_DEFINITION
Column name: status Type: TEXT
Column name: precedenceLimitingReferences Type: VARIANT
Column name: rules Type: VARIANT
Column name: childGroups Type: VARIANT
Column name: scopeLimitingReferences Type: VARIANT
Column name: level Type: FLOAT
Column name: titlePart Type: VARIANT
Column name: residualReferences Type: VARIANT
Column name: definition Type: VARIANT
Column name: breakdownCode Type: BOOLEAN
Column name: limitingReferences Type: VARIANT
Column name: glossary Type: VARIANT
Column name: applicationReferences Type: VARIANT
Column name: notAllocatable Type: BOOLEAN
Column name: titleFull Type: TEXT
Column name: dateRevised Type: FLOAT
Column name: informativeReferences Type: VARIANT
Column name: symbol Type: TEXT
Column name: synonyms Type: VARIANT
Column name: children Type: VARIANT
Column name: parents Type: VARIANT
Column name: ipcConcordant Type: TEXT
Sample rows:
[{'applicationReferences': '[]', 'breakdownCode': True, 'childGroups': '[]', 'children': '[]', 'dateRevised': 20130101.0, 'definition': '[]', 'glossary': '[]', 'informativeReferences': '[]', 'ipcConcordant': 'CPCONLY', 'level': 9.0, 'limitingReferences': '[]', 'notAllocatable': False, 'parents': '[\n  "A01K2227/10",\n  "A01K2227/00",\n  "A01K",\n  "A01",\n  "A"\n]', 'precedenceLimitingReferences': '[]', 'residualReferences': '[]', 'rules': '[]', 'scopeLimitingReferences': '[]', 'status': 'published', 'symbol': 'A01K2227/108', 'synonyms': '[]', 'titleFull': 'Swine', 'titlePart': '[\n  "Swine"\n]'}, {'applicationReferences': '[]', 'breakdownCode': True, 'childGroups': '[]', 'children': '[]', 'dateRevised': 20130101.0, 'definition': '[]', 'glossary': '[]', 'informativeReferences': '[]', 'ipcConcordant': 'CPCONLY', 'level': 9.0, 'limitingReferences': '[]', 'notAllocatable': False, 'parents': '[\n  "A01K2227/10",\n  "A01K2227/00",\n  "A01K",\n  "A01",\n  "A"\n]', 'precedenceLimitingReferences': '[]', 'residualReferences': '[]', 'rules': '[]', 'scopeLimitingReferences': '[]', 'status': 'published', 'symbol': 'A01K2227/105', 'synonyms': '[]', 'titleFull': 'Murine', 'titlePart': '[\n  "Murine"\n]'}, {'applicationReferences': '[]', 'breakdownCode': True, 'childGroups': '[]', 'children': '[]', 'dateRevised': 20130101.0, 'definition': '[]', 'glossary': '[]', 'informativeReferences': '[]', 'ipcConcordant': 'CPCONLY', 'level': 9.0, 'limitingReferences': '[]', 'notAllocatable': False, 'parents': '[\n  "A01K2227/10",\n  "A01K2227/00",\n  "A01K",\n  "A01",\n  "A"\n]', 'precedenceLimitingReferences': '[]', 'residualReferences': '[]', 'rules': '[]', 'scopeLimitingReferences': '[]', 'status': 'published', 'symbol': 'A01K2227/107', 'synonyms': '[]', 'titleFull': 'Rabbit', 'titlePart': '[\n  "Rabbit"\n]'}, {'applicationReferences': '[]', 'breakdownCode': True, 'childGroups': '[]', 'children': '[]', 'dateRevised': 20130101.0, 'definition': '[]', 'glossary': '[]', 'informativeReferences': '[]', 'ipcConcordant': 'CPCONLY', 'level': 9.0, 'limitingReferences': '[]', 'notAllocatable': False, 'parents': '[\n  "A01K2267/02",\n  "A01K2267/00",\n  "A01K",\n  "A01",\n  "A"\n]', 'precedenceLimitingReferences': '[]', 'residualReferences': '[]', 'rules': '[]', 'scopeLimitingReferences': '[]', 'status': 'published', 'symbol': 'A01K2267/025', 'synonyms': '[]', 'titleFull': 'Animal producing cells or organs for transplantation', 'titlePart': '[\n  "Animal producing cells or organs for transplantation"\n]'}, {'applicationReferences': '[]', 'breakdownCode': True, 'childGroups': '[]', 'children': '[\n  "A01K2267/0312",\n  "A01K2267/0318",\n  "A01K2267/0325"\n]', 'dateRevised': 20130101.0, 'definition': '[]', 'glossary': '[]', 'informativeReferences': '[]', 'ipcConcordant': 'CPCONLY', 'level': 9.0, 'limitingReferences': '[]', 'notAllocatable': False, 'parents': '[\n  "A01K2267/03",\n  "A01K2267/00",\n  "A01K",\n  "A01",\n  "A"\n]', 'precedenceLimitingReferences': '[]', 'residualReferences': '[]', 'rules': '[]', 'scopeLimitingReferences': '[]', 'status': 'published', 'symbol': 'A01K2267/0306', 'synonyms': '[]', 'titleFull': 'Animal model for genetic diseases', 'titlePart': '[\n  "Animal model for genetic diseases"\n]'}]

--------------------------------------------------
External knowledge that might be helpful: 
None
The table structure information is ({database name: {schema name: [table name]}}): 
{'PATENTS': {'PATENTS': ['DISCLOSURES_13', 'PUBLICATIONS', 'CPC_DEFINITION']}}

Some few-shot examples after column exploration may be helpful:
Query:
--Description: 1) Look at some key columns in PATENTS.PATENTS.PUBLICATIONS
SELECT 
  "publication_number",
  "application_number",
  "filing_date",
  "cpc"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "application_number" IS NOT NULL
  AND "application_number" <> ''
  AND "filing_date" IS NOT NULL
LIMIT 20;
Answer:
publication_number,application_number,filing_date,cpc
CR-5634-A,CR-5634-A,19971015,[]
CR-5990-A,CR-5990-A,19990322,[]
FI-429-A,FI-429D-A,0,[]
HK-6083-A,HK-6083-A,19830217,"[
  {
    ""code"": ""H02M5/00"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  }
]"
HU-T52763-A,HU-7590-A,19900109,"[
  {
    ""code"": ""A01N47/36"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""C07D521/00"",
    ""first"": true,
    ""inventive"": true,
   
Query:
--Description: 2) Flatten the "cpc" column to see the individual CPC objects for a handful of publications
SELECT 
  p."publication_number",
  f.value:"code"::STRING   AS "cpc_code",
  f.value:"first"::BOOLEAN AS "is_first",
  f.seq                    AS "order_in_list"
FROM PATENTS.PATENTS.PUBLICATIONS p
     ,LATERAL FLATTEN(input => p."cpc") f
WHERE p."application_number" IS NOT NULL
  AND p."application_number" <> ''
  AND p."filing_date" IS NOT NULL
LIMIT 20;
Answer:
publication_number,cpc_code,is_first,order_in_list
US-2017299239-A1,H01L23/427,False,115
US-2017299239-A1,F28F2210/02,False,115
US-2017299239-A1,F28F9/0224,False,115
US-2017299239-A1,F28F9/028,False,115
US-2017299239-A1,F25B39/00,True,115
US-2017299239-A1,F28F9/026,False,115
US-2017299239-A1,F25B39/02,False,115
US-2017299239-A1,F25B39/02,False,115
US-2017299239-A1,F25B2500/26,False,115
US-2017299239-A1,F28D2021/0029,False,115
US-2017299239-A1,F28D2021/0029,False,115
Query:
--Description: 4) Preview DISTINCT “first” CPC codes we captured – useful for later grouping
WITH flat AS (
    SELECT
        p."publication_number",
        f.value:"code"::STRING AS cpc_code,
        f.seq                 AS seq_index
    FROM PATENTS.PATENTS.PUBLICATIONS p
         ,LATERAL FLATTEN(input => p."cpc") f
), first_cpc AS (
    SELECT
        "publication_number",
        cpc_code
    FROM flat
    QUALIFY ROW_NUMBER() OVER (PARTITION BY "publication_number" ORDER BY seq_index) = 1
)
SELECT DISTINCT
  cpc_code AS "first_cpc_code"
FROM first_cpc
LIMIT 20
Answer:
first_cpc_code
H01B17/54
H04W76/007
E02D5/10
C07C43/202
B63B73/43
B60W40/09
A61B1/055
G06F40/258
B26B5/005
H04N19/577
F04C14/26
G11B27/34
C07C2602/08
B61D11/00
C07K5/06139
B41M5/3375
G02C2200/08
F16N7/30
C08K5/3417
B43L13/20
Query:
--Description: 5) Show the structure of CPC_DEFINITION rows for a few symbols (levels 1-5)
SELECT 
  "symbol",
  "level",
  "titleFull"
FROM PATENTS.PATENTS.CPC_DEFINITION
WHERE "level" <= 5
LIMIT 20
Answer:
symbol,level,titleFull
B,2.0,PERFORMING OPERATIONS; TRANSPORTING
H,2.0,ELECTRICITY
Y,2.0,GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
D,2.0,TEXTILES; PAPER
F,2.0,MECHANICAL ENGINEERING; LIGHTING; HEATING; WEAPONS; BLASTING
E,2.0,FIXED CONSTRUCTIONS
C,2.0,CHEMISTRY; METALLURGY
G,2.0,PHYSICS
Query:
--Description: 6) Get all CPC groups at level-5 together with their full titles
SELECT 
  "symbol"    AS "cpc_level5",
  "titleFull" AS "cpc_title"
FROM PATENTS.PATENTS.CPC_DEFINITION
WHERE "level" = 5
LIMIT 20
Answer:
cpc_level5,cpc_title
A01H,NEW PLANTS OR NON-TRANSGENIC PROCESSES FOR OBTAINING THEM; PLANT REPRODUCTION BY TISSUE CULTURE TECHNIQUES
A01F,PROCESSING OF HARVESTED PRODUCE; HAY OR STRAW PRESSES; DEVICES FOR STORING AGRICULTURAL OR HORTICULTURAL PRODUCE
A01C,PLANTING; SOWING; FERTILISING
A01G,"HORTICULTURE; CULTIVATION OF VEGETABLES, FLOWERS, RICE, FRUIT, VINES, HOPS OR SEAWEED; FORESTRY; WATERING"
A01N,"PRESERVATION OF BODIES OF HUMANS OR ANIMALS OR PLANTS OR PARTS THEREOF; BIOCIDES, e.g. AS 
Query:
--Description: 7) Count publications per *first*-CPC group (roughly first 7 chars)  
WITH flat AS (
    SELECT p."publication_number",
           f.value:"code"::STRING AS cpc_code,
           f.seq AS seq_index
    FROM PATENTS.PATENTS.PUBLICATIONS p
         ,LATERAL FLATTEN(input => p."cpc") f
), first_cpc AS (
    SELECT "publication_number",
           cpc_code
    FROM flat
    QUALIFY ROW_NUMBER() OVER (PARTITION BY "publication_number" ORDER BY seq_index) = 1
)
SELECT 
  SUBSTR(cpc_code, 1, 7)           AS "cpc_group_candidate",
  COUNT(*)                         AS "pub_count"
FROM first_cpc
GROUP BY 1
ORDER BY 2 DESC
LIMIT 20
Answer:
cpc_group_candidate,pub_count
Y02E60/,3133
Y02E10/,2321
H01L21/,2288
G06F3/0,1625
Y02T10/,1616
Y02P70/,1601
A61K31/,1504
G06F16/,1450
Y02W30/,1189
Y02A40/,1183
H01L29/,1137
H04N21/,1041
G02F1/1,1038
G01N33/,1032
G06Q10/,986
H01L222,979
H04N19/,877
Y02P20/,864
Y10T428,845
G06Q30/,843
Query:
--Description: 8) Yearly filing counts for each first-CPC group (year = floor(filing_date/10000))
WITH flat AS (
    SELECT p."publication_number",
           p."filing_date",
           f.value:"code"::STRING AS cpc_code,
           f.seq AS seq_index
    FROM PATENTS.PATENTS.PUBLICATIONS p
         ,LATERAL FLATTEN(input => p."cpc") f
    WHERE p."filing_date" IS NOT NULL
), first_cpc AS (
    SELECT 
        "publication_number",
        FLOOR("filing_date"/10000) AS filing_year,
        cpc_code
    FROM flat
    QUALIFY ROW_NUMBER() OVER (PARTITION BY "publication_number" ORDER BY seq_index) = 1
)
SELECT 
  filing_year,
  SUBSTR(cpc_code, 1, 7) AS "cpc_group",
  COUNT(*)               AS "yearly_filings"
FROM first_cpc
GROUP BY filing_year, "cpc_group"
ORDER BY "cpc_group", filing_year
LIMIT 20
Answer:
FILING_YEAR,cpc_group,yearly_filings
0,A01B1/0,2
1948,A01B1/0,1
1950,A01B1/0,1
1959,A01B1/0,1
1986,A01B1/0,1
2003,A01B1/0,1
2006,A01B1/0,1
2010,A01B1/0,1
2015,A01B1/0,1
2018,A01B1/0,1
0,A01B1/1,1
1941,A01B1/1,1
1981,A01B1/1,1
1993,A01B1/1,1
2004,A01B1/1,1
0,A01B1/2,3
1941,A01B1/2,1
2002,A01B1/2,1
2015,A01B1/2,1
2018,A01B1/2,1
Task: Identify the CPC technology areas with the highest exponential moving average of patent filings each year (with a smoothing factor of 0.2), considering only the first CPC code for each patent that has a valid filing date and a non-empty application number, and report the full CPC title along with the best year associated with the highest exponential moving average for each CPC group at level 5.

Please think step by step and answer only one complete SQL in snowflake dialect in ```sql``` format.
SQL usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: The table structure information is ({database name: {schema name: [table name]}}): 
{'PATENTS': {'PATENTS': ['DISCLOSURES_13', 'PUBLICATIONS', 'CPC_DEFINITION']}}

When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
If the task description does not specify the number of decimal places, retain all decimals to four places.

[Self-refine]
2025-05-07 01:47:46 - Thread-30 (execute) - INFO - [Try to run SQL in self-refine]
```sql
/* -----------------------------------------------
   Identify, for each CPC subclass (level-5 group),
   the year in which its Exponential Moving Average
   (EMA, α = 0.20) of patent-filing counts is highest.
   Only the *first* CPC code of every publication that
   has a non-empty application number and a valid filing
   date is considered.  Results are returned together
   with the full CPC title taken from CPC_DEFINITION.
---------------------------------------------------*/
WITH first_cpc AS (          -- 1. keep only the first CPC code / valid filings
    SELECT  p."publication_number",
            FLOOR(p."filing_date"/10000)      AS filing_year,
            SUBSTR( f.value:"code"::STRING ,1,4)  AS subclass_code,   -- e.g. H01L
            ROW_NUMBER() OVER (PARTITION BY p."publication_number"
                               ORDER BY f.seq)  AS rn_in_pub
    FROM PATENTS.PATENTS.PUBLICATIONS  p
         ,LATERAL FLATTEN( INPUT => p."cpc")  f
    WHERE p."application_number" IS NOT NULL
      AND p."application_number" <> ''
      AND p."filing_date" IS NOT NULL
)
, first_only AS (            -- keep only first CPC row per publication
    SELECT  publication_number,
            filing_year,
            subclass_code
    FROM    first_cpc
    WHERE   rn_in_pub = 1
      AND   filing_year > 0                      -- discard missing / invalid years
)
, annual_filings AS (        -- 2. yearly counts per CPC subclass
    SELECT  subclass_code,
            filing_year,
            COUNT(*) AS filings
    FROM    first_only
    GROUP BY subclass_code, filing_year
)
, ordered AS (               -- 3. ensure continuous ordering per subclass
    SELECT  subclass_code,
            filing_year,
            filings,
            ROW_NUMBER() OVER (PARTITION BY subclass_code
                               ORDER BY filing_year) AS rn
    FROM    annual_filings
)
, RECURSIVE ema_cte AS (     -- 4. recursive EMA computation (α = 0.20)
    SELECT  subclass_code,
            filing_year,
            filings,
            CAST(filings AS FLOAT)  AS ema,   -- seed: EMA₀ = filings₀
            rn
    FROM    ordered
    WHERE   rn = 1

    UNION ALL

    SELECT  o.subclass_code,
            o.filing_year,
            o.filings,
            0.20 * o.filings + 0.80 * r.ema   AS ema,
            o.rn
    FROM    ema_cte        r
            JOIN ordered   o
              ON  o.subclass_code = r.subclass_code
             AND o.rn        = r.rn + 1
)
, best_year_per_cpc AS (     -- 5. pick year with highest EMA for each subclass
    SELECT  subclass_code,
            filing_year          AS best_year,
            ema                  AS highest_ema
    FROM    ema_cte
    QUALIFY ROW_NUMBER() OVER (PARTITION BY subclass_code
                               ORDER BY ema DESC NULLS LAST) = 1
)
SELECT  d."symbol"     AS cpc_level5,
        d."titleFull"  AS cpc_title,
        b.best_year,
        ROUND(b.highest_ema,4) AS highest_ema
FROM    best_year_per_cpc     b
        JOIN PATENTS.PATENTS.CPC_DEFINITION d
          ON d."symbol" = b.subclass_code
WHERE   d."level" = 5           -- ensure we only keep level-5 groups
ORDER BY b.highest_ema DESC NULLS LAST;
```
[Try to run SQL in self-refine]
2025-05-07 01:47:46 - Thread-30 (execute) - INFO - itercount: 1
2025-05-07 01:47:46 - Thread-30 (execute) - INFO - [Self-refine]
Input sql:
/* -----------------------------------------------
   Identify, for each CPC subclass (level-5 group),
   the year in which its Exponential Moving Average
   (EMA, α = 0.20) of patent-filing counts is highest.
   Only the *first* CPC code of every publication that
   has a non-empty application number and a valid filing
   date is considered.  Results are returned together
   with the full CPC title taken from CPC_DEFINITION.
---------------------------------------------------*/
WITH first_cpc AS (          -- 1. keep only the first CPC code / valid filings
    SELECT  p."publication_number",
            FLOOR(p."filing_date"/10000)      AS filing_year,
            SUBSTR( f.value:"code"::STRING ,1,4)  AS subclass_code,   -- e.g. H01L
            ROW_NUMBER() OVER (PARTITION BY p."publication_number"
                               ORDER BY f.seq)  AS rn_in_pub
    FROM PATENTS.PATENTS.PUBLICATIONS  p
         ,LATERAL FLATTEN( INPUT => p."cpc")  f
    WHERE p."application_number" IS NOT NULL
      AND p."application_number" <> ''
      AND p."filing_date" IS NOT NULL
)
, first_only AS (            -- keep only first CPC row per publication
    SELECT  publication_number,
            filing_year,
            subclass_code
    FROM    first_cpc
    WHERE   rn_in_pub = 1
      AND   filing_year > 0                      -- discard missing / invalid years
)
, annual_filings AS (        -- 2. yearly counts per CPC subclass
    SELECT  subclass_code,
            filing_year,
            COUNT(*) AS filings
    FROM    first_only
    GROUP BY subclass_code, filing_year
)
, ordered AS (               -- 3. ensure continuous ordering per subclass
    SELECT  subclass_code,
            filing_year,
            filings,
            ROW_NUMBER() OVER (PARTITION BY subclass_code
                               ORDER BY filing_year) AS rn
    FROM    annual_filings
)
, RECURSIVE ema_cte AS (     -- 4. recursive EMA computation (α = 0.20)
    SELECT  subclass_code,
            filing_year,
            filings,
            CAST(filings AS FLOAT)  AS ema,   -- seed: EMA₀ = filings₀
            rn
    FROM    ordered
    WHERE   rn = 1

    UNION ALL

    SELECT  o.subclass_code,
            o.filing_year,
            o.filings,
            0.20 * o.filings + 0.80 * r.ema   AS ema,
            o.rn
    FROM    ema_cte        r
            JOIN ordered   o
              ON  o.subclass_code = r.subclass_code
             AND o.rn        = r.rn + 1
)
, best_year_per_cpc AS (     -- 5. pick year with highest EMA for each subclass
    SELECT  subclass_code,
            filing_year          AS best_year,
            ema                  AS highest_ema
    FROM    ema_cte
    QUALIFY ROW_NUMBER() OVER (PARTITION BY subclass_code
                               ORDER BY ema DESC NULLS LAST) = 1
)
SELECT  d."symbol"     AS cpc_level5,
        d."titleFull"  AS cpc_title,
        b.best_year,
        ROUND(b.highest_ema,4) AS highest_ema
FROM    best_year_per_cpc     b
        JOIN PATENTS.PATENTS.CPC_DEFINITION d
          ON d."symbol" = b.subclass_code
WHERE   d."level" = 5           -- ensure we only keep level-5 groups
ORDER BY b.highest_ema DESC NULLS LAST;
The error information is:
{'status': 'error', 'error_msg': "##ERROR##001003 (42000): SQL compilation error:\nsyntax error line 36 at position 12 unexpected 'ema_cte'."}
Please correct it and output only 1 complete SQL query.
[Self-refine]
2025-05-07 01:48:57 - Thread-30 (execute) - INFO - [Try to run SQL in self-refine]
```sql
/* -------------------------------------------------
   Highest exponential-moving-average (α = 0.20) of
   yearly patent-filing counts for each CPC level-5
   group, based on the *first* CPC code of every
   publication with a valid filing date & application
   number.
--------------------------------------------------*/
WITH RECURSIVE
/* 1) First CPC code per publication having good data */
first_cpc AS (
    SELECT  p."publication_number",
            FLOOR(p."filing_date"/10000)                    AS filing_year,
            SUBSTR( f.value:"code"::STRING , 1, 4)          AS subclass_code,   -- e.g. H01L
            ROW_NUMBER() OVER (PARTITION BY p."publication_number"
                               ORDER BY f.seq)              AS rn_in_pub
    FROM PATENTS.PATENTS.PUBLICATIONS  p,
         LATERAL FLATTEN(INPUT => p."cpc")  f
    WHERE p."application_number" IS NOT NULL
      AND p."application_number" <> ''
      AND p."filing_date" IS NOT NULL
),
/* 2) Keep only that first CPC row and discard bad years */
first_only AS (
    SELECT  publication_number,
            filing_year,
            subclass_code
    FROM    first_cpc
    WHERE   rn_in_pub = 1
      AND   filing_year > 0
),
/* 3) Yearly filing counts per CPC subclass */
annual_filings AS (
    SELECT  subclass_code,
            filing_year,
            COUNT(*) AS filings
    FROM    first_only
    GROUP BY subclass_code, filing_year
),
/* 4) Order years for each subclass */
ordered AS (
    SELECT  subclass_code,
            filing_year,
            filings,
            ROW_NUMBER() OVER (PARTITION BY subclass_code
                               ORDER BY filing_year) AS rn
    FROM    annual_filings
),
/* 5) Recursive EMA calculation (seed = first year's count) */
ema_cte AS (
    -- seed
    SELECT  subclass_code,
            filing_year,
            filings,
            CAST(filings AS FLOAT) AS ema,
            rn
    FROM    ordered
    WHERE   rn = 1
    UNION ALL
    -- recursion
    SELECT  o.subclass_code,
            o.filing_year,
            o.filings,
            0.20 * o.filings + 0.80 * r.ema  AS ema,
            o.rn
    FROM    ema_cte r
           JOIN ordered o
             ON o.subclass_code = r.subclass_code
            AND o.rn            = r.rn + 1
),
/* 6) Best year (highest EMA) per subclass */
best_year_per_cpc AS (
    SELECT  subclass_code,
            filing_year  AS best_year,
            ema          AS highest_ema
    FROM    ema_cte
    QUALIFY ROW_NUMBER() OVER (PARTITION BY subclass_code
                               ORDER BY ema DESC NULLS LAST) = 1
)
/* 7) Final output with CPC titles */
SELECT  d."symbol"     AS cpc_level5,
        d."titleFull"  AS cpc_title,
        b.best_year,
        ROUND(b.highest_ema, 4) AS highest_ema
FROM    best_year_per_cpc b
JOIN    PATENTS.PATENTS.CPC_DEFINITION d
       ON d."symbol" = b.subclass_code
WHERE   d."level" = 5
ORDER BY b.highest_ema DESC NULLS LAST;
```
[Try to run SQL in self-refine]
2025-05-07 01:48:57 - Thread-30 (execute) - INFO - itercount: 2
2025-05-07 01:48:57 - Thread-30 (execute) - INFO - [Self-refine]
Input sql:
/* -------------------------------------------------
   Highest exponential-moving-average (α = 0.20) of
   yearly patent-filing counts for each CPC level-5
   group, based on the *first* CPC code of every
   publication with a valid filing date & application
   number.
--------------------------------------------------*/
WITH RECURSIVE
/* 1) First CPC code per publication having good data */
first_cpc AS (
    SELECT  p."publication_number",
            FLOOR(p."filing_date"/10000)                    AS filing_year,
            SUBSTR( f.value:"code"::STRING , 1, 4)          AS subclass_code,   -- e.g. H01L
            ROW_NUMBER() OVER (PARTITION BY p."publication_number"
                               ORDER BY f.seq)              AS rn_in_pub
    FROM PATENTS.PATENTS.PUBLICATIONS  p,
         LATERAL FLATTEN(INPUT => p."cpc")  f
    WHERE p."application_number" IS NOT NULL
      AND p."application_number" <> ''
      AND p."filing_date" IS NOT NULL
),
/* 2) Keep only that first CPC row and discard bad years */
first_only AS (
    SELECT  publication_number,
            filing_year,
            subclass_code
    FROM    first_cpc
    WHERE   rn_in_pub = 1
      AND   filing_year > 0
),
/* 3) Yearly filing counts per CPC subclass */
annual_filings AS (
    SELECT  subclass_code,
            filing_year,
            COUNT(*) AS filings
    FROM    first_only
    GROUP BY subclass_code, filing_year
),
/* 4) Order years for each subclass */
ordered AS (
    SELECT  subclass_code,
            filing_year,
            filings,
            ROW_NUMBER() OVER (PARTITION BY subclass_code
                               ORDER BY filing_year) AS rn
    FROM    annual_filings
),
/* 5) Recursive EMA calculation (seed = first year's count) */
ema_cte AS (
    -- seed
    SELECT  subclass_code,
            filing_year,
            filings,
            CAST(filings AS FLOAT) AS ema,
            rn
    FROM    ordered
    WHERE   rn = 1
    UNION ALL
    -- recursion
    SELECT  o.subclass_code,
            o.filing_year,
            o.filings,
            0.20 * o.filings + 0.80 * r.ema  AS ema,
            o.rn
    FROM    ema_cte r
           JOIN ordered o
             ON o.subclass_code = r.subclass_code
            AND o.rn            = r.rn + 1
),
/* 6) Best year (highest EMA) per subclass */
best_year_per_cpc AS (
    SELECT  subclass_code,
            filing_year  AS best_year,
            ema          AS highest_ema
    FROM    ema_cte
    QUALIFY ROW_NUMBER() OVER (PARTITION BY subclass_code
                               ORDER BY ema DESC NULLS LAST) = 1
)
/* 7) Final output with CPC titles */
SELECT  d."symbol"     AS cpc_level5,
        d."titleFull"  AS cpc_title,
        b.best_year,
        ROUND(b.highest_ema, 4) AS highest_ema
FROM    best_year_per_cpc b
JOIN    PATENTS.PATENTS.CPC_DEFINITION d
       ON d."symbol" = b.subclass_code
WHERE   d."level" = 5
ORDER BY b.highest_ema DESC NULLS LAST;
The error information is:
{'status': 'error', 'error_msg': "##ERROR##000904 (42000): SQL compilation error: error line 17 at position 12\ninvalid identifier 'PUBLICATION_NUMBER'"}
Please correct it and output only 1 complete SQL query.
[Self-refine]
2025-05-07 01:50:43 - Thread-30 (execute) - INFO - [Try to run SQL in self-refine]
```sql
/* -------------------------------------------------
   Highest exponential-moving-average (α = 0.20) of
   yearly patent-filing counts for each CPC level-5
   group, based on the *first* CPC code of every
   publication with a valid filing date & application
   number.
--------------------------------------------------*/
WITH RECURSIVE
/* 1) First CPC code per publication having good data */
first_cpc AS (
    SELECT  p."publication_number"                              AS pub_num,
            FLOOR(p."filing_date" / 10000)                      AS filing_year,
            SUBSTR(f.value:"code"::STRING, 1, 4)                AS subclass_code,   -- e.g. H01L
            ROW_NUMBER() OVER (PARTITION BY p."publication_number"
                               ORDER BY f.seq)                  AS rn_in_pub
    FROM PATENTS.PATENTS.PUBLICATIONS p
         ,LATERAL FLATTEN(INPUT => p."cpc") f
    WHERE p."application_number" IS NOT NULL
      AND p."application_number" <> ''
      AND p."filing_date" IS NOT NULL
),
/* 2) Keep only that first CPC row and discard bad years */
first_only AS (
    SELECT  pub_num,
            filing_year,
            subclass_code
    FROM    first_cpc
    WHERE   rn_in_pub = 1
      AND   filing_year > 0
),
/* 3) Yearly filing counts per CPC subclass */
annual_filings AS (
    SELECT  subclass_code,
            filing_year,
            COUNT(*) AS filings
    FROM    first_only
    GROUP BY subclass_code, filing_year
),
/* 4) Order years for each subclass */
ordered AS (
    SELECT  subclass_code,
            filing_year,
            filings,
            ROW_NUMBER() OVER (PARTITION BY subclass_code
                               ORDER BY filing_year) AS rn
    FROM    annual_filings
),
/* 5) Recursive EMA calculation (seed = first year's count) */
ema_cte AS (
    /* anchor */
    SELECT  subclass_code,
            filing_year,
            filings,
            CAST(filings AS FLOAT) AS ema,
            rn
    FROM    ordered
    WHERE   rn = 1
    UNION ALL
    /* recursive step */
    SELECT  o.subclass_code,
            o.filing_year,
            o.filings,
            0.20 * o.filings + 0.80 * r.ema      AS ema,
            o.rn
    FROM    ema_cte r
            JOIN ordered o
              ON  o.subclass_code = r.subclass_code
             AND o.rn            = r.rn + 1
),
/* 6) Best year (highest EMA) per subclass */
best_year_per_cpc AS (
    SELECT  subclass_code,
            filing_year  AS best_year,
            ema          AS highest_ema
    FROM    ema_cte
    QUALIFY ROW_NUMBER() OVER (PARTITION BY subclass_code
                               ORDER BY ema DESC NULLS LAST) = 1
)
/* 7) Final output with CPC titles */
SELECT  d."symbol"     AS cpc_level5,
        d."titleFull"  AS cpc_title,
        b.best_year,
        ROUND(b.highest_ema, 4) AS highest_ema
FROM    best_year_per_cpc b
JOIN    PATENTS.PATENTS.CPC_DEFINITION d
       ON d."symbol" = b.subclass_code
WHERE   d."level" = 5
ORDER BY b.highest_ema DESC NULLS LAST;
```
[Try to run SQL in self-refine]
2025-05-07 01:50:48 - Thread-30 (execute) - INFO - Total iteration counts: 2
