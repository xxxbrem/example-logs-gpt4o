2025-05-07 01:32:58 - Thread-24 (execute) - INFO - [Exploration]
```sql
--Description: Preview raw CPC arrays and application numbers for a handful of publications
SELECT 
  "publication_number",
  "application_number",
  "filing_date",
  "cpc"
FROM PATENTS.PATENTS.PUBLICATIONS
LIMIT 20;
```

```sql
--Description: Flatten the CPC array to see the individual CPC codes (first 20 rows)
SELECT 
  p."publication_number",
  f.value:"code"::STRING  AS "cpc_code",
  f.index                AS "cpc_rank"     -- 0 = first CPC code
FROM PATENTS.PATENTS.PUBLICATIONS  p,
     LATERAL FLATTEN(input => p."cpc") f
LIMIT 20;
```

```sql
--Description: Show the distinct first CPC code (rank = 0) values that appear
SELECT DISTINCT
  f.value:"code"::STRING AS "first_cpc_code"
FROM PATENTS.PATENTS.PUBLICATIONS p,
     LATERAL FLATTEN(input => p."cpc") f
WHERE f.index = 0
LIMIT 20;
```

```sql
--Description: Inspect how filing dates are stored and extract the four–digit year
SELECT
  "publication_number",
  "filing_date",
  FLOOR("filing_date" / 10000) AS "filing_year"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "filing_date" IS NOT NULL
LIMIT 20;
```

```sql
--Description: Count publications per CPC *group* (first 4 characters of first CPC) to see the busiest areas
SELECT
  SUBSTR(f.value:"code"::STRING, 1, 4)          AS "cpc_group",
  COUNT(*)                                       AS "pub_count"
FROM PATENTS.PATENTS.PUBLICATIONS p,
     LATERAL FLATTEN(input => p."cpc") f
WHERE f.index = 0
  AND p."filing_date" IS NOT NULL
  AND p."application_number" <> ''
GROUP BY 1
ORDER BY "pub_count" DESC
LIMIT 20;
```

```sql
--Description: Glimpse the CPC definition table at level 5 (technology-area level)
SELECT
  "symbol",
  "level",
  "titleFull"
FROM PATENTS.PATENTS.CPC_DEFINITION
WHERE "level" = 5
LIMIT 20;
```

```sql
--Description: Retrieve the full title for a few popular CPC groups gathered from the publication data
SELECT DISTINCT
  d."symbol",
  d."titleFull"
FROM PATENTS.PATENTS.CPC_DEFINITION d
JOIN (
       SELECT DISTINCT SUBSTR(f.value:"code"::STRING, 1, 4) AS "cpc_group"
       FROM PATENTS.PATENTS.PUBLICATIONS p,
            LATERAL FLATTEN(input => p."cpc") f
       WHERE f.index = 0
       LIMIT 100
     ) g
ON d."symbol" = g."cpc_group"
LIMIT 20;
```

```sql
--Description: Build a year-by-year filings table for each CPC group (first 4-char code, rank 0 only)
SELECT
  SUBSTR(f.value:"code"::STRING, 1, 4)                  AS "cpc_group",
  FLOOR(p."filing_date" / 10000)                        AS "year",
  COUNT(*)                                              AS "yearly_filings"
FROM PATENTS.PATENTS.PUBLICATIONS p,
     LATERAL FLATTEN(input => p."cpc") f
WHERE f.index = 0
  AND p."filing_date" IS NOT NULL
  AND p."application_number" <> ''
GROUP BY 1, 2
ORDER BY 1, 2
LIMIT 20;
```

```sql
--Description: Calculate the exponential moving average (α = 0.2) of yearly filings per CPC group
SELECT
  "cpc_group",
  "year",
  "yearly_filings",
  EXP_MOVING_AVG("yearly_filings", 0.2) 
      OVER (PARTITION BY "cpc_group" ORDER BY "year")  AS "ema_0_2"
FROM (
  SELECT
    SUBSTR(f.value:"code"::STRING, 1, 4)         AS "cpc_group",
    FLOOR(p."filing_date" / 10000)               AS "year",
    COUNT(*)                                     AS "yearly_filings"
  FROM PATENTS.PATENTS.PUBLICATIONS p,
       LATERAL FLATTEN(input => p."cpc") f
  WHERE f.index = 0
    AND p."filing_date" IS NOT NULL
    AND p."application_number" <> ''
  GROUP BY 1, 2
) t
LIMIT 20;
```

```sql
--Description: Identify, for each CPC group (level 5 title), the year with the highest EMA value
SELECT
  g."symbol"                          AS "cpc_group",
  g."titleFull"                       AS "cpc_title",
  t."year",
  t."ema_0_2"
FROM (
  SELECT
    "cpc_group",
    "year",
    EXP_MOVING_AVG("yearly_filings", 0.2)
      OVER (PARTITION BY "cpc_group" ORDER BY "year") AS "ema_0_2",
    ROW_NUMBER() OVER (PARTITION BY "cpc_group"
                       ORDER BY EXP_MOVING_AVG("yearly_filings", 0.2) DESC) AS rnk
  FROM (
    SELECT
      SUBSTR(f.value:"code"::STRING, 1, 4)       AS "cpc_group",
      FLOOR(p."filing_date" / 10000)             AS "year",
      COUNT(*)                                   AS "yearly_filings"
    FROM PATENTS.PATENTS.PUBLICATIONS p,
         LATERAL FLATTEN(input => p."cpc") f
    WHERE f.index = 0
      AND p."filing_date" IS NOT NULL
      AND p."application_number" <> ''
    GROUP BY 1, 2
  )
) t
JOIN PATENTS.PATENTS.CPC_DEFINITION g
  ON g."symbol" = t."cpc_group"
WHERE g."level" = 5
  AND t.rnk = 1            -- best (highest EMA) year per CPC group
LIMIT 20;
```
[Exploration]
2025-05-07 01:32:58 - Thread-24 (execute) - INFO - [Try to execute]
--Description: Preview raw CPC arrays and application numbers for a handful of publications
SELECT 
  "publication_number",
  "application_number",
  "filing_date",
  "cpc"
FROM PATENTS.PATENTS.PUBLICATIONS
LIMIT 20;
[Try to execute]
2025-05-07 01:32:59 - Thread-24 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Preview raw CPC arrays and application numbers for a handful of publications
SELECT 
  "publication_number",
  "application_number",
  "filing_date",
  "cpc"
FROM PATENTS.PATENTS.PUBLICATIONS
LIMIT 20;
Results:
publication_number,application_number,filing_date,cpc
CR-5634-A,CR-5634-A,19971015,[]
CR-5990-A,CR-5990-A,19990322,[]
FI-429-A,FI-429D-A,0,[]
HK-6083-A,HK-6083-A,19830217,"[
  {
    ""code"": ""H02M5/00"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  }
]"
HU-T52763-A,HU-7590-A,19900109,"[
  {
    ""code"": ""A01N47/36"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""C07D521/00"",
    ""first"": true,
    ""inventive"": true,
   

[Successfully executed]
2025-05-07 01:32:59 - Thread-24 (execute) - INFO - [Try to execute]
--Description: Flatten the CPC array to see the individual CPC codes (first 20 rows)
SELECT 
  p."publication_number",
  f.value:"code"::STRING  AS "cpc_code",
  f.index                AS "cpc_rank"     -- 0 = first CPC code
FROM PATENTS.PATENTS.PUBLICATIONS  p,
     LATERAL FLATTEN(input => p."cpc") f
LIMIT 20;
[Try to execute]
2025-05-07 01:33:03 - Thread-24 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Flatten the CPC array to see the individual CPC codes (first 20 rows)
SELECT 
  p."publication_number",
  f.value:"code"::STRING  AS "cpc_code",
  f.index                AS "cpc_rank"     -- 0 = first CPC code
FROM PATENTS.PATENTS.PUBLICATIONS  p,
     LATERAL FLATTEN(input => p."cpc") f
LIMIT 20;
Results:
publication_number,cpc_code,cpc_rank
US-2015177816-A1,G06F1/3253,0
US-2015177816-A1,G06F1/266,1
US-2015177816-A1,G06F13/364,2
US-2015177816-A1,G06F1/3237,3
US-2015177816-A1,G06F1/266,4
US-2015177816-A1,G06F1/3237,5
US-2015177816-A1,G06F1/3253,6
US-2015177816-A1,G06F13/364,7
US-2015177816-A1,Y02D10/00,8
US-2015177816-A1,Y02D30/50,9
US-2015177816-A1,Y02D10/00,10
US-2015177816-A1,Y02D30/50,11
US-2015177816-A1,G06F13/364,12
US-2015180461-A1,H03K17/08,0

[Successfully executed]
2025-05-07 01:33:03 - Thread-24 (execute) - INFO - [Try to execute]
--Description: Show the distinct first CPC code (rank = 0) values that appear
SELECT DISTINCT
  f.value:"code"::STRING AS "first_cpc_code"
FROM PATENTS.PATENTS.PUBLICATIONS p,
     LATERAL FLATTEN(input => p."cpc") f
WHERE f.index = 0
LIMIT 20;
[Try to execute]
2025-05-07 01:33:08 - Thread-24 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Show the distinct first CPC code (rank = 0) values that appear
SELECT DISTINCT
  f.value:"code"::STRING AS "first_cpc_code"
FROM PATENTS.PATENTS.PUBLICATIONS p,
     LATERAL FLATTEN(input => p."cpc") f
WHERE f.index = 0
LIMIT 20;
Results:
first_cpc_code
C07D403/06
C10L1/06
H01L27/0266
E21B17/18
B27D5/003
A45C11/00
D05B87/00
F25B7/00
C08K5/0008
B33Y80/00
H04L27/0004
G06F16/90332
G02B13/14
A61B5/7257
G06Q10/107
H04N23/61
A01N33/18
A63F13/53
H02P31/00
A61M2025/0098

[Successfully executed]
2025-05-07 01:33:08 - Thread-24 (execute) - INFO - [Try to execute]
--Description: Inspect how filing dates are stored and extract the four–digit year
SELECT
  "publication_number",
  "filing_date",
  FLOOR("filing_date" / 10000) AS "filing_year"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "filing_date" IS NOT NULL
LIMIT 20;
[Try to execute]
2025-05-07 01:33:08 - Thread-24 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Inspect how filing dates are stored and extract the four–digit year
SELECT
  "publication_number",
  "filing_date",
  FLOOR("filing_date" / 10000) AS "filing_year"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "filing_date" IS NOT NULL
LIMIT 20;
Results:
publication_number,filing_date,filing_year
CR-5634-A,19971015,1997
CR-5990-A,19990322,1999
FI-429-A,0,0
HK-6083-A,19830217,1983
HU-T52763-A,19900109,1990
JP-H03206829-A,19900101,1990
JP-S62159089-A,19860106,1986
US-416-A,0,0
US-2528225-A,19480102,1948
AT-A41580-A,19800125,1980
AT-A47682-A,19820209,1982
AT-A63682-A,19820219,1982
CA-920790-A,19700116,1970
CA-950907-A,19700224,1970
CA-920830-A,19700501,1970
CA-9086-A,0,0
CH-3256-A,18901220,1890
CH-540255-A,19690318,1969

[Successfully executed]
2025-05-07 01:33:08 - Thread-24 (execute) - INFO - [Try to execute]
--Description: Count publications per CPC *group* (first 4 characters of first CPC) to see the busiest areas
SELECT
  SUBSTR(f.value:"code"::STRING, 1, 4)          AS "cpc_group",
  COUNT(*)                                       AS "pub_count"
FROM PATENTS.PATENTS.PUBLICATIONS p,
     LATERAL FLATTEN(input => p."cpc") f
WHERE f.index = 0
  AND p."filing_date" IS NOT NULL
  AND p."application_number" <> ''
GROUP BY 1
ORDER BY "pub_count" DESC
LIMIT 20;
[Try to execute]
2025-05-07 01:33:14 - Thread-24 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Count publications per CPC *group* (first 4 characters of first CPC) to see the busiest areas
SELECT
  SUBSTR(f.value:"code"::STRING, 1, 4)          AS "cpc_group",
  COUNT(*)                                       AS "pub_count"
FROM PATENTS.PATENTS.PUBLICATIONS p,
     LATERAL FLATTEN(input => p."cpc") f
WHERE f.index = 0
  AND p."filing_date" IS NOT NULL
  AND p."application_number" <> ''
GROUP BY 1
ORDER BY "pub_count" DESC
LIMIT 20;
Results:
cpc_group,pub_count
G06F,10097
H01L,7840
Y02E,6964
A61P,6778
H04L,6060
H04N,5172
A61K,4906
Y02P,4873
H04W,4417
G01N,4320
A61B,4082
Y10T,3197
G06Q,3147
Y02A,3124
C07D,2927
G02B,2671
H01M,2538
B29C,2384
B65D,2295
C07C,2290

[Successfully executed]
2025-05-07 01:33:14 - Thread-24 (execute) - INFO - [Try to execute]
--Description: Glimpse the CPC definition table at level 5 (technology-area level)
SELECT
  "symbol",
  "level",
  "titleFull"
FROM PATENTS.PATENTS.CPC_DEFINITION
WHERE "level" = 5
LIMIT 20;
[Try to execute]
2025-05-07 01:33:15 - Thread-24 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Glimpse the CPC definition table at level 5 (technology-area level)
SELECT
  "symbol",
  "level",
  "titleFull"
FROM PATENTS.PATENTS.CPC_DEFINITION
WHERE "level" = 5
LIMIT 20;
Results:
symbol,level,titleFull
A01H,5.0,NEW PLANTS OR NON-TRANSGENIC PROCESSES FOR OBTAINING THEM; PLANT REPRODUCTION BY TISSUE CULTURE TECHNIQUES
A01F,5.0,PROCESSING OF HARVESTED PRODUCE; HAY OR STRAW PRESSES; DEVICES FOR STORING AGRICULTURAL OR HORTICULTURAL PRODUCE
A01C,5.0,PLANTING; SOWING; FERTILISING
A01G,5.0,"HORTICULTURE; CULTIVATION OF VEGETABLES, FLOWERS, RICE, FRUIT, VINES, HOPS OR SEAWEED; FORESTRY; WATERING"
A01N,5.0,"PRESERVATION OF BODIES OF HUMANS OR ANIMALS OR PLANTS OR PARTS THERE

[Successfully executed]
2025-05-07 01:33:15 - Thread-24 (execute) - INFO - [Try to execute]
--Description: Retrieve the full title for a few popular CPC groups gathered from the publication data
SELECT DISTINCT
  d."symbol",
  d."titleFull"
FROM PATENTS.PATENTS.CPC_DEFINITION d
JOIN (
       SELECT DISTINCT SUBSTR(f.value:"code"::STRING, 1, 4) AS "cpc_group"
       FROM PATENTS.PATENTS.PUBLICATIONS p,
            LATERAL FLATTEN(input => p."cpc") f
       WHERE f.index = 0
       LIMIT 100
     ) g
ON d."symbol" = g."cpc_group"
LIMIT 20;
[Try to execute]
2025-05-07 01:33:18 - Thread-24 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Retrieve the full title for a few popular CPC groups gathered from the publication data
SELECT DISTINCT
  d."symbol",
  d."titleFull"
FROM PATENTS.PATENTS.CPC_DEFINITION d
JOIN (
       SELECT DISTINCT SUBSTR(f.value:"code"::STRING, 1, 4) AS "cpc_group"
       FROM PATENTS.PATENTS.PUBLICATIONS p,
            LATERAL FLATTEN(input => p."cpc") f
       WHERE f.index = 0
       LIMIT 100
     ) g
ON d."symbol" = g."cpc_group"
LIMIT 20;
Results:
symbol,titleFull
G03B,APPARATUS OR ARRANGEMENTS FOR TAKING PHOTOGRAPHS OR FOR PROJECTING OR VIEWING THEM; APPARATUS OR ARRANGEMENTS EMPLOYING ANALOGOUS TECHNIQUES USING WAVES OTHER THAN OPTICAL WAVES; ACCESSORIES THEREFOR
G10L,SPEECH ANALYSIS TECHNIQUES OR SPEECH SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING TECHNIQUES; SPEECH OR AUDIO CODING OR DECODING
H03L,"AUTOMATIC CONTROL, STARTING, SYNCHRONISATION OR STABILISATION OF GENERATORS OF ELECTRONIC OSCILLATIONS OR PULSES"
A47J,KI

[Successfully executed]
2025-05-07 01:33:18 - Thread-24 (execute) - INFO - [Try to execute]
--Description: Build a year-by-year filings table for each CPC group (first 4-char code, rank 0 only)
SELECT
  SUBSTR(f.value:"code"::STRING, 1, 4)                  AS "cpc_group",
  FLOOR(p."filing_date" / 10000)                        AS "year",
  COUNT(*)                                              AS "yearly_filings"
FROM PATENTS.PATENTS.PUBLICATIONS p,
     LATERAL FLATTEN(input => p."cpc") f
WHERE f.index = 0
  AND p."filing_date" IS NOT NULL
  AND p."application_number" <> ''
GROUP BY 1, 2
ORDER BY 1, 2
LIMIT 20;
[Try to execute]
2025-05-07 01:33:21 - Thread-24 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Build a year-by-year filings table for each CPC group (first 4-char code, rank 0 only)
SELECT
  SUBSTR(f.value:"code"::STRING, 1, 4)                  AS "cpc_group",
  FLOOR(p."filing_date" / 10000)                        AS "year",
  COUNT(*)                                              AS "yearly_filings"
FROM PATENTS.PATENTS.PUBLICATIONS p,
     LATERAL FLATTEN(input => p."cpc") f
WHERE f.index = 0
  AND p."filing_date" IS NOT NULL
  AND p."application_number" <> ''
GROUP BY 1, 2
ORDER BY 1, 2
LIMIT 20;
Results:
cpc_group,year,yearly_filings
A01B,0,52
A01B,1901,2
A01B,1902,2
A01B,1904,1
A01B,1905,1
A01B,1906,1
A01B,1908,1
A01B,1911,2
A01B,1912,1
A01B,1913,3
A01B,1916,1
A01B,1917,1
A01B,1918,3
A01B,1919,1
A01B,1920,1
A01B,1922,1
A01B,1925,1
A01B,1926,3
A01B,1927,1
A01B,1931,1

[Successfully executed]
2025-05-07 01:33:21 - Thread-24 (execute) - INFO - [Try to execute]
--Description: Calculate the exponential moving average (α = 0.2) of yearly filings per CPC group
SELECT
  "cpc_group",
  "year",
  "yearly_filings",
  EXP_MOVING_AVG("yearly_filings", 0.2) 
      OVER (PARTITION BY "cpc_group" ORDER BY "year")  AS "ema_0_2"
FROM (
  SELECT
    SUBSTR(f.value:"code"::STRING, 1, 4)         AS "cpc_group",
    FLOOR(p."filing_date" / 10000)               AS "year",
    COUNT(*)                                     AS "yearly_filings"
  FROM PATENTS.PATENTS.PUBLICATIONS p,
       LATERAL FLATTEN(input => p."cpc") f
  WHERE f.index = 0
    AND p."filing_date" IS NOT NULL
    AND p."application_number" <> ''
  GROUP BY 1, 2
) t
LIMIT 20;
[Try to execute]
2025-05-07 01:33:21 - Thread-24 (execute) - INFO - [Error occurred]
{'status': 'error', 'error_msg': '##ERROR##002060 (42601): SQL compilation error:\nInvalid function type [EXP_MOVING_AVG] for window function.'}
[Error occurred]
2025-05-07 01:35:49 - Thread-24 (execute) - INFO - [Corrected SQL]
```sql
--Description / Thinking process:
-- Goal:  For every CPC technology area (first 4-char code of the first CPC entry on a patent)
--        find the year where its exponential moving average (EMA, α = 0.2) of yearly
--        patent-filing counts is highest, and show that CPC’s full title.
-- Steps:
--   1.  yearly  – count filings per CPC group & year, ignoring records with bad dates
--                or empty application numbers; use only the first CPC (f.index = 0).
--   2.  ema     – compute the EMA across ascending years for each CPC group with an
--                explicit window frame (Snowflake requirement).
--   3.  best    – rank years inside each CPC group by EMA value to keep the peak.
--   4.  final   – join to CPC_DEFINITION (level 5) for the full CPC title and
--                return CPC code, title, best year, and peak EMA, sorted by EMA.
WITH yearly AS (
    SELECT
        SUBSTR(f.value:"code"::STRING, 1, 4)                           AS "cpc_group",
        FLOOR(p."filing_date" / 10000)                                 AS "year",
        COUNT(*)                                                       AS "yearly_filings"
    FROM PATENTS.PATENTS.PUBLICATIONS p,
         LATERAL FLATTEN(input => p."cpc") f
    WHERE f.index = 0                          -- first CPC only
      AND p."filing_date" IS NOT NULL
      AND p."filing_date" > 0                  -- filter out zero dates
      AND p."application_number" <> ''
    GROUP BY 1, 2
),
ema AS (
    SELECT
        y."cpc_group",
        y."year",
        EXP_MOVING_AVG(y."yearly_filings", 0.2)
          OVER (PARTITION BY y."cpc_group"
                ORDER BY     y."year"
                ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)     AS "ema_0_2"
    FROM yearly y
),
best AS (
    SELECT
        e.*,
        ROW_NUMBER() OVER (PARTITION BY e."cpc_group"
                           ORDER BY e."ema_0_2" DESC)                 AS "rnk"
    FROM ema e
)
SELECT
    b."cpc_group"                                    AS "cpc_code_lvl5",
    d."titleFull"                                    AS "cpc_title",
    b."year"                                         AS "best_year",
    b."ema_0_2"                                      AS "highest_ema"
FROM best b
LEFT JOIN PATENTS.PATENTS.CPC_DEFINITION d
       ON d."symbol" = b."cpc_group"
      AND d."level"  = 5
WHERE b."rnk" = 1
ORDER BY b."highest_ema" DESC
LIMIT 20;
```
[Corrected SQL]
2025-05-07 01:35:50 - Thread-24 (execute) - INFO - [Results for corrected sql]
{'status': 'error', 'error_msg': '##ERROR##002303 (0A000): SQL compilation error: error line 21 at position 16\nCumulative window frame unsupported for function EXP_MOVING_AVG'}
[Results for corrected sql]
2025-05-07 01:39:02 - Thread-24 (execute) - INFO - [Corrected SQL]
```sql
--Description / Thinking process:
-- We must identify, for each CPC technology area (first 4-character code from the first CPC
-- code on every patent), the year in which that area’s exponential moving average (EMA, α = 0.20)
-- of yearly patent-filing counts is highest.  Snowflake’s EXP_MOVING_AVG cannot be used with a
-- cumulative window, so we compute the EMA manually via a recursive CTE.
--
-- Steps:
--   1) yearly   – Count patents per CPC group & filing-year, using only first CPC (f.index = 0),
--                 and exclude records with NULL / 0 filing dates or blank application numbers.
--   2) ordered  – Add a row number per CPC group (chronological order) to drive recursion.
--   3) ema_r    – Recursive CTE to calculate EMA:
--        • Seed row (earliest year in each CPC group):  ema = yearly_filings.
--        • Subsequent rows:  ema = 0.2 * current_count + 0.8 * previous_ema.
--   4) best     – For each CPC group, pick the row with the highest EMA (rnk = 1).
--   5) final    – Join with CPC_DEFINITION (level 5) to obtain the full CPC title and
--                 list CPC code, title, “best year”, and the peak EMA value.  Display the
--                 top 20 groups by highest EMA.
WITH yearly AS (
    SELECT
        SUBSTR(f.value:"code"::STRING, 1, 4)         AS "cpc_group",
        FLOOR(p."filing_date" / 10000)               AS "year",
        COUNT(*)                                     AS "yearly_filings"
    FROM PATENTS.PATENTS.PUBLICATIONS p,
         LATERAL FLATTEN(input => p."cpc") f
    WHERE f.index = 0                    -- first CPC only
      AND p."filing_date" IS NOT NULL
      AND p."filing_date" > 0            -- exclude zero dates
      AND p."application_number" <> ''
    GROUP BY 1, 2
), ordered AS (
    SELECT
        y.*,
        ROW_NUMBER() OVER (PARTITION BY y."cpc_group"
                           ORDER BY y."year")        AS "rn"
    FROM yearly y
), ema_r AS (
    -- Base case: first year per CPC group
    SELECT
        o."cpc_group",
        o."year",
        o."yearly_filings",
        o."rn",
        CAST(o."yearly_filings" AS FLOAT)            AS "ema_0_2"
    FROM ordered o
    WHERE o."rn" = 1
    UNION ALL
    -- Recursive case: later years
    SELECT
        o."cpc_group",
        o."year",
        o."yearly_filings",
        o."rn",
        0.2 * o."yearly_filings" + 0.8 * r."ema_0_2" AS "ema_0_2"
    FROM ordered o
    JOIN ema_r  r
      ON o."cpc_group" = r."cpc_group"
     AND o."rn"        = r."rn" + 1
), best AS (
    SELECT
        e.*,
        ROW_NUMBER() OVER (PARTITION BY e."cpc_group"
                           ORDER BY e."ema_0_2" DESC) AS "rnk"
    FROM ema_r e
)
SELECT
    b."cpc_group"                 AS "cpc_code_lvl5",
    d."titleFull"                 AS "cpc_title",
    b."year"                      AS "best_year",
    b."ema_0_2"                   AS "highest_ema"
FROM best b
LEFT JOIN PATENTS.PATENTS.CPC_DEFINITION d
       ON d."symbol" = b."cpc_group"
      AND d."level"  = 5
WHERE b."rnk" = 1
ORDER BY b."highest_ema" DESC
LIMIT 20;
```
[Corrected SQL]
2025-05-07 01:39:03 - Thread-24 (execute) - INFO - [Results for corrected sql]
{'status': 'error', 'error_msg': '##ERROR##000904 (42000): SQL compilation error: error line 58 at position 9\ninvalid identifier \'B."highest_ema"\''}
[Results for corrected sql]
2025-05-07 01:43:40 - Thread-24 (execute) - INFO - [Corrected SQL]
```sql
--Description / Thinking process:
-- Objective:  For each CPC technology area (first 4-character code taken from the first CPC entry
--             on every patent) we want the year in which its exponential moving average (EMA,
--             smoothing factor α = 0.20) of annual patent-filing counts is highest, together with
--             the CPC level-5 title.  Snowflake’s EXP_MOVING_AVG cannot be used with a cumulative
--             window, so we compute the EMA ourselves with a recursive CTE.
--
-- Logical steps (all wrapped in one SQL statement):
--   1) “yearly”   – count patents per CPC group & filing year (skip NULL/0 dates, empty apps,
--                   use only the first CPC ‑- f.index = 0).
--   2) “ordered”  – assign a row number per CPC group ordered by year; that index lets us walk
--                   through the years sequentially.
--   3) “ema_r”    – recursive CTE:  the first row’s EMA equals its count; every subsequent row
--                   uses EMA = 0.2*count + 0.8*prev_ema.
--   4) “best”     – rank rows inside each CPC group by EMA, keeping the maximum (rnk = 1).
--   5) Final SELECT – join CPC_DEFINITION (level 5) for the full title, and output CPC code,
--                   title, “best year”, and its peak EMA, ordered by that EMA (top 20).
WITH RECURSIVE
/*--------------------------------------------------------------*/
"yearly" AS (           -- 1. yearly counts
    SELECT
        SUBSTR(f.value:"code"::STRING, 1, 4)      AS "cpc_group",
        FLOOR(p."filing_date" / 10000)            AS "year",
        COUNT(*)                                  AS "yearly_filings"
    FROM PATENTS.PATENTS.PUBLICATIONS p,
         LATERAL FLATTEN(input => p."cpc") f
    WHERE f.index = 0                             -- first CPC only
      AND p."filing_date" IS NOT NULL
      AND p."filing_date" > 0                     -- exclude filing_date = 0
      AND p."application_number" <> ''
    GROUP BY 1, 2
),
/*--------------------------------------------------------------*/
"ordered" AS (          -- 2. chronological ordering per CPC group
    SELECT
        y."cpc_group",
        y."year",
        y."yearly_filings",
        ROW_NUMBER() OVER (PARTITION BY y."cpc_group"
                           ORDER BY y."year")     AS "rn"
    FROM "yearly" y
),
/*--------------------------------------------------------------*/
"ema_r" ("cpc_group","year","yearly_filings","rn","ema_0_2") AS (  -- 3. recursive EMA
    -- anchor (earliest year)
    SELECT
        o."cpc_group",
        o."year",
        o."yearly_filings",
        o."rn",
        CAST(o."yearly_filings" AS FLOAT)            AS "ema_0_2"
    FROM "ordered" o
    WHERE o."rn" = 1
    UNION ALL
    -- recursive step (later years)
    SELECT
        o."cpc_group",
        o."year",
        o."yearly_filings",
        o."rn",
        0.2 * o."yearly_filings" + 0.8 * r."ema_0_2" AS "ema_0_2"
    FROM "ordered" o
    JOIN "ema_r"  r
      ON o."cpc_group" = r."cpc_group"
     AND o."rn"        = r."rn" + 1
),
/*--------------------------------------------------------------*/
"best" AS (             -- 4. pick the peak EMA per CPC group
    SELECT
        e."cpc_group",
        e."year",
        e."ema_0_2",
        ROW_NUMBER() OVER (PARTITION BY e."cpc_group"
                           ORDER BY e."ema_0_2" DESC) AS "rnk"
    FROM "ema_r" e
)
/*--------------------------------------------------------------*/
SELECT                   -- 5. final output with titles
    b."cpc_group"                         AS "cpc_code_lvl5",
    d."titleFull"                         AS "cpc_title",
    b."year"                              AS "best_year",
    b."ema_0_2"                           AS "highest_ema"
FROM "best" b
LEFT JOIN PATENTS.PATENTS.CPC_DEFINITION d
       ON d."symbol" = b."cpc_group"
      AND d."level"  = 5
WHERE b."rnk" = 1
ORDER BY "highest_ema" DESC
LIMIT 20;
```
[Corrected SQL]
2025-05-07 01:43:41 - Thread-24 (execute) - INFO - [Results for corrected sql]
{'status': 'error', 'error_msg': "##ERROR##001100 (42601): SQL compilation error:\n'ema_r' is an invalid Recursive CTE"}
[Results for corrected sql]
2025-05-07 01:43:41 - Thread-24 (execute) - INFO - [Try to execute]
--Description: Identify, for each CPC group (level 5 title), the year with the highest EMA value
SELECT
  g."symbol"                          AS "cpc_group",
  g."titleFull"                       AS "cpc_title",
  t."year",
  t."ema_0_2"
FROM (
  SELECT
    "cpc_group",
    "year",
    EXP_MOVING_AVG("yearly_filings", 0.2)
      OVER (PARTITION BY "cpc_group" ORDER BY "year") AS "ema_0_2",
    ROW_NUMBER() OVER (PARTITION BY "cpc_group"
                       ORDER BY EXP_MOVING_AVG("yearly_filings", 0.2) DESC) AS rnk
  FROM (
    SELECT
      SUBSTR(f.value:"code"::STRING, 1, 4)       AS "cpc_group",
      FLOOR(p."filing_date" / 10000)             AS "year",
      COUNT(*)                                   AS "yearly_filings"
    FROM PATENTS.PATENTS.PUBLICATIONS p,
         LATERAL FLATTEN(input => p."cpc") f
    WHERE f.index = 0
      AND p."filing_date" IS NOT NULL
      AND p."application_number" <> ''
    GROUP BY 1, 2
  )
) t
JOIN PATENTS.PATENTS.CPC_DEFINITION g
  ON g."symbol" = t."cpc_group"
WHERE g."level" = 5
  AND t.rnk = 1            -- best (highest EMA) year per CPC group
LIMIT 20;
[Try to execute]
2025-05-07 01:43:42 - Thread-24 (execute) - INFO - [Error occurred]
{'status': 'error', 'error_msg': '##ERROR##002060 (42601): SQL compilation error:\nInvalid function type [EXP_MOVING_AVG] for window function.'}
[Error occurred]
2025-05-07 01:46:05 - Thread-24 (execute) - INFO - [Corrected SQL]
```sql
--Description / Thinking process:
-- Aim:  For each CPC technology area (defined as the first 4-character code of the first CPC
--       entry on a patent) determine the year in which the exponential moving average
--       (EMA, α = 0.20) of annual patent-filing counts peaks, and return that CPC code,
--       its level-5 title, the “best year”, and the peak EMA value.
--
-- Why a recursive CTE?  Snowflake’s EXP_MOVING_AVG cannot be run with a cumulative window
-- frame, so we calculate the EMA ourselves:
--       EMA₁ = Count₁
--       EMAₙ = 0.2 × Countₙ  +  0.8 × EMAₙ₋₁
--
-- CTE layers:
--   1) yearly   – annual counts per CPC group (first CPC only, valid filing_date > 0,
--                 non-empty application numbers).
--   2) ordered  – adds a sequential row number per CPC group (ascending year) to drive recursion.
--   3) ema_r    – recursively computes EMA per CPC group & year.
--   4) best     – ranks rows by EMA inside each group and keeps the maximum (rnk = 1).
--   5) final    – joins CPC_DEFINITION (level 5) to bring in the full CPC title and shows
--                 the results ordered by the highest EMA (top 20 for brevity).
WITH RECURSIVE
/*--------------------------------------------------*/
yearly AS (                -- 1. yearly counts
    SELECT
        SUBSTR(f.value:"code"::STRING, 1, 4) AS cpc_group,
        FLOOR(p.filing_date / 10000)         AS year,
        COUNT(*)                             AS yearly_filings
    FROM PATENTS.PATENTS.PUBLICATIONS p,
         LATERAL FLATTEN(input => p.cpc) f
    WHERE f.index = 0                       -- first CPC code only
      AND p.filing_date IS NOT NULL
      AND p.filing_date > 0                 -- exclude zero dates
      AND p.application_number <> ''
    GROUP BY 1, 2
),
/*--------------------------------------------------*/
ordered AS (               -- 2. chronological order
    SELECT
        y.*,
        ROW_NUMBER() OVER (PARTITION BY y.cpc_group ORDER BY y.year) AS rn
    FROM yearly y
),
/*--------------------------------------------------*/
ema_r (cpc_group, year, yearly_filings, rn, ema_0_2) AS (  -- 3. recursive EMA
    -- anchor row (earliest year)
    SELECT
        o.cpc_group,
        o.year,
        o.yearly_filings,
        o.rn,
        CAST(o.yearly_filings AS FLOAT)  AS ema_0_2
    FROM ordered o
    WHERE o.rn = 1
    UNION ALL
    -- subsequent rows
    SELECT
        o.cpc_group,
        o.year,
        o.yearly_filings,
        o.rn,
        0.2 * o.yearly_filings + 0.8 * r.ema_0_2
    FROM ordered o
    JOIN ema_r  r
      ON o.cpc_group = r.cpc_group
     AND o.rn        = r.rn + 1
),
/*--------------------------------------------------*/
best AS (                 -- 4. pick peak EMA per group
    SELECT
        e.cpc_group,
        e.year,
        e.ema_0_2,
        ROW_NUMBER() OVER (PARTITION BY e.cpc_group ORDER BY e.ema_0_2 DESC) AS rnk
    FROM ema_r e
)
/*--------------------------------------------------*/
SELECT                     -- 5. final result with CPC title
    b.cpc_group          AS cpc_code_lvl5,
    d.titleFull          AS cpc_title,
    b.year               AS best_year,
    b.ema_0_2            AS highest_ema
FROM best b
LEFT JOIN PATENTS.PATENTS.CPC_DEFINITION d
       ON d.symbol = b.cpc_group
      AND d.level  = 5
WHERE b.rnk = 1
ORDER BY highest_ema DESC
LIMIT 20;
```
[Corrected SQL]
2025-05-07 01:46:05 - Thread-24 (execute) - INFO - [Results for corrected sql]
{'status': 'error', 'error_msg': "##ERROR##000904 (42000): SQL compilation error: error line 6 at position 14\ninvalid identifier 'P.FILING_DATE'"}
[Results for corrected sql]
2025-05-07 01:49:46 - Thread-24 (execute) - INFO - [Corrected SQL]
```sql
--Description / Thinking process:
-- Purpose:  For every CPC technology area (taken as the first 4-character code of the
--           FIRST CPC entry on each patent) determine the year in which its exponential
--           moving average (EMA, α = 0.20) of annual patent-filing counts is highest.
--           The built-in EXP_MOVING_AVG cannot be used with a cumulative window, so the
--           EMA is calculated recursively.
--
-- CTE sequence inside this single statement
--   1) "yearly"   – count patents per CPC group & filing-year
--                   (filters: first CPC only, non-zero filing_date, non-blank application_number).
--   2) "ordered"  – assign a sequential row number per CPC group (ascending year) for recursion.
--   3) "ema_r"    – recursive EMA calculation:
--                      ema₁ = count₁
--                      emaₙ = 0.2*countₙ + 0.8*emaₙ₋₁
--   4) "best"     – keep the row with the highest EMA for each CPC group.
--   5) Final      – join CPC_DEFINITION (level = 5) to fetch the full CPC title, and
--                   display CPC code, title, best year, and peak EMA (top 20).
WITH RECURSIVE
"yearly" AS (               -- 1. yearly filing counts
    SELECT
        SUBSTR(f.value:"code"::STRING, 1, 4)    AS "cpc_group",
        FLOOR(p."filing_date" / 10000)          AS "year",
        COUNT(*)                                AS "yearly_filings"
    FROM PATENTS.PATENTS.PUBLICATIONS p,
         LATERAL FLATTEN(input => p."cpc") f
    WHERE f.index = 0                           -- only the first CPC code
      AND p."filing_date" IS NOT NULL
      AND p."filing_date" > 0                   -- exclude 0-dates
      AND p."application_number" <> ''
    GROUP BY 1, 2
),
"ordered" AS (              -- 2. chronological ordering within each CPC group
    SELECT
        y.*,
        ROW_NUMBER() OVER (PARTITION BY y."cpc_group"
                           ORDER BY y."year")   AS "rn"
    FROM "yearly" y
),
"ema_r" ("cpc_group","year","yearly_filings","rn","ema_0_2") AS (  -- 3. recursive EMA
    -- Anchor row (earliest year)
    SELECT
        o."cpc_group",
        o."year",
        o."yearly_filings",
        o."rn",
        CAST(o."yearly_filings" AS FLOAT)        AS "ema_0_2"
    FROM "ordered" o
    WHERE o."rn" = 1
    UNION ALL
    -- Recursive computation
    SELECT
        o."cpc_group",
        o."year",
        o."yearly_filings",
        o."rn",
        0.2 * o."yearly_filings" + 0.8 * r."ema_0_2"
    FROM "ordered" o
    JOIN "ema_r"  r
      ON o."cpc_group" = r."cpc_group"
     AND o."rn"        = r."rn" + 1
),
"best" AS (                 -- 4. select peak EMA per CPC group
    SELECT
        e."cpc_group",
        e."year",
        e."ema_0_2",
        ROW_NUMBER() OVER (PARTITION BY e."cpc_group"
                           ORDER BY e."ema_0_2" DESC) AS "rnk"
    FROM "ema_r" e
)
SELECT                       -- 5. final output with CPC level-5 title
    b."cpc_group"                  AS "cpc_code_lvl5",
    d."titleFull"                  AS "cpc_title",
    b."year"                       AS "best_year",
    b."ema_0_2"                    AS "highest_ema"
FROM "best" b
LEFT JOIN PATENTS.PATENTS."CPC_DEFINITION" d
       ON d."symbol" = b."cpc_group" AND d."level" = 5
WHERE b."rnk" = 1
ORDER BY "highest_ema" DESC
LIMIT 20;
```
[Corrected SQL]
2025-05-07 01:49:47 - Thread-24 (execute) - INFO - [Results for corrected sql]
{'status': 'error', 'error_msg': "##ERROR##001100 (42601): SQL compilation error:\n'ema_r' is an invalid Recursive CTE"}
[Results for corrected sql]
2025-05-07 01:56:28 - Thread-24 (execute) - INFO - [Corrected SQL]
```sql
--Description / Thinking process:
-- 1.  Build “yearly” counts:  for each patent take only the first CPC code (f.index = 0),
--     keep patents with a non-zero filing_date and non-empty application_number, then
--     count publications per CPC 4-character group and year.
-- 2.  Add an ordering index “rn” per CPC group (“ordered” CTE) to drive a recursive
--     calculation.
-- 3.  “ema_r” CTE recursively computes the exponential moving average (EMA) with
--     smoothing factor α = 0.20:
--          EMA₁ = count₁
--          EMAₙ = 0.2 * countₙ + 0.8 * EMAₙ₋₁
-- 4.  “best” CTE ranks the years inside each CPC group by the computed EMA and keeps
--     the row where the EMA is highest (rnk = 1).
-- 5.  Final SELECT joins CPC_DEFINITION (level 5) to obtain the full CPC title and
--     lists the CPC code, title, year of peak EMA, and the EMA value, ordered by that
--     EMA.  (Top 20 rows shown.)

WITH RECURSIVE
yearly AS (        -- 1) yearly counts
    SELECT
        SUBSTR(f.value:"code"::STRING, 1, 4)          AS cpc_group,
        FLOOR(p.filing_date / 10000)                  AS year,
        COUNT(*)                                      AS yearly_filings
    FROM PATENTS.PATENTS.PUBLICATIONS p,
         LATERAL FLATTEN(input => p.cpc) f
    WHERE f.index = 0                    -- first CPC only
      AND p.filing_date IS NOT NULL
      AND p.filing_date > 0              -- exclude zero-dates
      AND p.application_number <> ''
    GROUP BY 1, 2
),
ordered AS (       -- 2) chronological row number
    SELECT
        y.*,
        ROW_NUMBER() OVER (PARTITION BY y.cpc_group
                           ORDER BY y.year)           AS rn
    FROM yearly y
),
ema_r (cpc_group, year, yearly_filings, rn, ema_0_2) AS (  -- 3) recursive EMA
    -- anchor (earliest year for each CPC group)
    SELECT
        o.cpc_group,
        o.year,
        o.yearly_filings,
        o.rn,
        CAST(o.yearly_filings AS FLOAT)               AS ema_0_2
    FROM ordered o
    WHERE o.rn = 1
    UNION ALL
    -- recursive calculation
    SELECT
        o.cpc_group,
        o.year,
        o.yearly_filings,
        o.rn,
        0.2 * o.yearly_filings + 0.8 * r.ema_0_2      AS ema_0_2
    FROM ordered o
    JOIN ema_r  r
      ON o.cpc_group = r.cpc_group
     AND o.rn        = r.rn + 1
),
best AS (          -- 4) pick the year with highest EMA per CPC group
    SELECT
        e.cpc_group,
        e.year,
        e.ema_0_2,
        ROW_NUMBER() OVER (PARTITION BY e.cpc_group
                           ORDER BY e.ema_0_2 DESC)   AS rnk
    FROM ema_r e
)
SELECT             -- 5) final output with CPC level-5 title
    b.cpc_group                          AS cpc_code_lvl5,
    d.titleFull                          AS cpc_title,
    b.year                               AS best_year,
    b.ema_0_2                            AS highest_ema
FROM best b
LEFT JOIN PATENTS.PATENTS.CPC_DEFINITION d
       ON d.symbol = b.cpc_group
      AND d.level  = 5
WHERE b.rnk = 1
ORDER BY highest_ema DESC
LIMIT 20;
```
[Corrected SQL]
2025-05-07 01:56:29 - Thread-24 (execute) - INFO - [Results for corrected sql]
{'status': 'error', 'error_msg': "##ERROR##000904 (42000): SQL compilation error: error line 5 at position 14\ninvalid identifier 'P.FILING_DATE'"}
[Results for corrected sql]
2025-05-07 01:56:29 - Thread-24 (execute) - INFO - itercount: 0
2025-05-07 01:56:29 - Thread-24 (execute) - INFO - [Self-refine]
Table full name: PATENTS.PATENTS.DISCLOSURES_13
Column name: serial_cleaned Type: TEXT
Column name: sso Type: TEXT
Column name: disclosure_event Type: TEXT
Column name: reciprocity Type: TEXT
Column name: patent_owner_harmonized Type: TEXT
Column name: record_id Type: TEXT
Column name: family_id Type: TEXT
Column name: blanket_scope Type: TEXT
Column name: copyright Type: TEXT
Column name: standard Type: TEXT
Column name: licensing_commitment Type: TEXT
Column name: committee_project Type: TEXT
Column name: sc_name Type: TEXT
Column name: blanket_type Type: TEXT
Column name: pub_cleaned Type: TEXT
Column name: third_party Type: TEXT
Column name: wg_name Type: TEXT
Column name: patent_owner_unharmonized Type: TEXT
Column name: tc_name Type: TEXT
Column name: date Type: NUMBER
Sample rows:
[{'family_id': '22549751', 'record_id': 'REC00002', 'disclosure_event': 'DE0001', 'sso': 'ANSI', 'patent_owner_harmonized': '3M', 'patent_owner_unharmonized': '3M', 'date': 19751124, 'standard': 'X3.55;X3.56', 'committee_project': '', 'tc_name': '', 'sc_name': '', 'wg_name': '', 'licensing_commitment': 'FRAND', 'copyright': '', 'blanket_type': '0', 'blanket_scope': '', 'third_party': '0', 'reciprocity': '0', 'serial_cleaned': '', 'pub_cleaned': 'US3692255'}, {'family_id': '23170520', 'record_id': 'REC00001', 'disclosure_event': 'DE0001', 'sso': 'ANSI', 'patent_owner_harmonized': '3M', 'patent_owner_unharmonized': '3M', 'date': 19751124, 'standard': 'X3.55;X3.56', 'committee_project': '', 'tc_name': '', 'sc_name': '', 'wg_name': '', 'licensing_commitment': 'FRAND', 'copyright': '', 'blanket_type': '0', 'blanket_scope': '', 'third_party': '0', 'reciprocity': '0', 'serial_cleaned': '', 'pub_cleaned': 'US3861619'}, {'family_id': '23170520', 'record_id': 'REC00006', 'disclosure_event': 'DE0003', 'sso': 'ANSI', 'patent_owner_harmonized': '3M', 'patent_owner_unharmonized': '3M', 'date': 19890711, 'standard': 'X3.55;X3.56;X3.72;X3.116;X3.127;X3.136', 'committee_project': '', 'tc_name': '', 'sc_name': '', 'wg_name': '', 'licensing_commitment': 'Specific Terms', 'copyright': '', 'blanket_type': '0', 'blanket_scope': '', 'third_party': '0', 'reciprocity': '0', 'serial_cleaned': '', 'pub_cleaned': 'US3861619'}, {'family_id': '22549751', 'record_id': 'REC00008', 'disclosure_event': 'DE0004', 'sso': 'ANSI', 'patent_owner_harmonized': '3M', 'patent_owner_unharmonized': '3M', 'date': 19890906, 'standard': '', 'committee_project': '', 'tc_name': '', 'sc_name': '', 'wg_name': '', 'licensing_commitment': 'FRAND', 'copyright': '', 'blanket_type': '2', 'blanket_scope': '', 'third_party': '0', 'reciprocity': '0', 'serial_cleaned': '', 'pub_cleaned': 'US3692255'}, {'family_id': '23418274', 'record_id': 'REC00024', 'disclosure_event': 'DE0013', 'sso': 'ANSI', 'patent_owner_harmonized': 'Agilent Technologies', 'patent_owner_unharmonized': 'Agilent Technologies', 'date': 20020606, 'standard': '1588', 'committee_project': 'IEEE', 'tc_name': '', 'sc_name': '', 'wg_name': '', 'licensing_commitment': 'FRAND', 'copyright': '', 'blanket_type': '0', 'blanket_scope': '', 'third_party': '0', 'reciprocity': '0', 'serial_cleaned': '', 'pub_cleaned': 'US5566180'}]

--------------------------------------------------
Table full name: PATENTS.PATENTS.PUBLICATIONS
Column name: examiner Type: VARIANT Description: Is this text truncated?
Column name: fterm Type: VARIANT Description: For US publications only, the description in HTML, limited to the first 9 megabytes
Column name: application_number_formatted Type: TEXT Description: Application number, formatted to the patent office format where possible.
Column name: application_number Type: TEXT Description: Patent application number (DOCDB compatible), eg: 'US-87124404-A'. This may not always be set.
Column name: grant_date Type: NUMBER Description: For US publications only, the claims in plain text
Column name: cpc Type: VARIANT Description: Two-letter language code for this text
Column name: locarno Type: VARIANT Description: Localized text
Column name: description_localized_html Type: VARIANT Description: Localized text
Column name: publication_date Type: NUMBER Description: Two-letter language code for this text
Column name: kind_code Type: TEXT Description: Kind code, indicating application, grant, search report, correction, etc. These are different for each country.
Column name: spif_publication_number Type: TEXT Description: SPIF standard (spif.group) publication number, after 2000
Column name: ipc Type: VARIANT Description: Localized text
Column name: pct_number Type: TEXT Description: PCT number for this application if it was part of a PCT filing, eg: 'PCT/EP2008/062623'.
Column name: entity_status Type: TEXT Description: The filing date.
Column name: filing_date Type: NUMBER Description: Is this text truncated?
Column name: abstract_localized Type: VARIANT Description: Localized text
Column name: description_localized Type: VARIANT Description: The publication abstracts in different languages
Column name: assignee Type: VARIANT Description: Localized text
Column name: citation Type: VARIANT Description: Two-letter language code for this text
Column name: fi Type: VARIANT Description: Is this text truncated?
Column name: claims_localized_html Type: VARIANT Description: Is this text truncated?
Column name: inventor_harmonized Type: VARIANT Description: For US publications only, the claims in HTML
Column name: inventor Type: VARIANT Description: Is this text truncated?
Column name: claims_localized Type: VARIANT Description: Two-letter language code for this text
Column name: priority_date Type: NUMBER Description: Localized text
Column name: application_kind Type: TEXT Description: High-level kind of the application: A=patent; U=utility; P=provision; W= PCT; F=design; T=translation.
Column name: priority_claim Type: VARIANT Description: Two-letter language code for this text
Column name: assignee_harmonized Type: VARIANT Description: Two-letter language code for this text
Column name: title_localized Type: VARIANT Description: The publication titles in different languages
Column name: art_unit Type: TEXT Description: The grant date, or 0 if not granted.
Column name: child Type: VARIANT Description: The publication date.
Column name: family_id Type: TEXT Description: Family ID (simple family). Grouping on family ID will return all publications associated with a simple patent family (all publications share the same priority claims).
Column name: spif_application_number Type: TEXT Description: SPIF standard (spif.group) application number, after 2000
Column name: uspc Type: VARIANT Description: For US publications only, the description in plain text, limited to the first 9 megabytes
Column name: publication_number Type: TEXT Description: Patent publication number (DOCDB compatible), eg: 'US-7650331-B1'
Column name: country_code Type: TEXT Description: Country code, eg: 'US', 'EP', etc
Column name: parent Type: VARIANT Description: Is this text truncated?
Sample rows:
[{'publication_number': 'DE-69611147-T2', 'application_number': 'DE-69611147-T', 'country_code': 'DE', 'kind_code': 'T2', 'application_kind': 'T', 'application_number_formatted': 'DE1996611147', 'pct_number': '', 'family_id': '9483724', 'spif_publication_number': '', 'spif_application_number': '', 'title_localized': '[\n  {\n    "language": "de",\n    "text": "Schloss vom Typ eines entkuppelbaren Rotors",\n    "truncated": false\n  }\n]', 'abstract_localized': '[]', 'claims_localized': '[]', 'claims_localized_html': '[]', 'description_localized': '[]', 'description_localized_html': '[]', 'publication_date': 20010621, 'filing_date': 19961015, 'grant_date': 20010621, 'priority_date': 19951018, 'priority_claim': '[\n  {\n    "application_number": "FR-9512326-A",\n    "category": "",\n    "filing_date": 19951018,\n    "npl_text": "",\n    "publication_number": "",\n    "type": ""\n  }\n]', 'inventor': '[\n  "MENAGER, CHRISTOPHE",\n  "CANARD, LOUIS",\n  "CADOUOT, PATRICK",\n  "GOURDIN, DOMINIQUE"\n]', 'inventor_harmonized': '[\n  {\n    "country_code": "FR",\n    "name": "MENAGER CHRISTOPHE"\n  },\n  {\n    "country_code": "FR",\n    "name": "CANARD LOUIS"\n  },\n  {\n    "country_code": "FR",\n    "name": "CADOUOT PATRICK"\n  },\n  {\n    "country_code": "FR",\n    "name": "GOURDIN DOMINIQUE"\n  }\n]', 'assignee': '[\n  "Valeo Securite Habitacle, Creteil Cedex"\n]', 'assignee_harmonized': '[\n  {\n    "country_code": "FR",\n    "name": "VALEO SECURITE HABITACLE"\n  }\n]', 'examiner': '[]', 'uspc': '[]', 'ipc': '[\n  {\n    "code": "E05B17/04",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "E05B17/00",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  }\n]', 'cpc': '[\n  {\n    "code": "E05B77/00",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "E05B17/0058",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  }\n]', 'fi': '[]', 'fterm': '[]', 'locarno': '[]', 'citation': '[]', 'parent': '[]', 'child': '[]', 'entity_status': '', 'art_unit': ''}, {'publication_number': 'DE-69630331-T2', 'application_number': 'DE-69630331-T', 'country_code': 'DE', 'kind_code': 'T2', 'application_kind': 'T', 'application_number_formatted': 'DE1996630331', 'pct_number': '', 'family_id': '23689246', 'spif_publication_number': '', 'spif_application_number': '', 'title_localized': '[\n  {\n    "language": "de",\n    "text": "Verfahren zur gesicherten Sitzungsschlüsselerzeugung und zur Authentifizierung",\n    "truncated": false\n  }\n]', 'abstract_localized': '[]', 'claims_localized': '[]', 'claims_localized_html': '[]', 'description_localized': '[]', 'description_localized_html': '[]', 'publication_date': 20040729, 'filing_date': 19960416, 'grant_date': 20040729, 'priority_date': 19950421, 'priority_claim': '[\n  {\n    "application_number": "US-42609095-A",\n    "category": "",\n    "filing_date": 19950421,\n    "npl_text": "",\n    "publication_number": "",\n    "type": ""\n  }\n]', 'inventor': '[\n  "VANSTONE SCOTT .A, WATERLOO",\n  "MENEZES ALFRED JOHN, AUBURN",\n  "MINGHUA QU,"\n]', 'inventor_harmonized': '[\n  {\n    "country_code": "CA",\n    "name": "VANSTONE SCOTT A WATERLOO"\n  },\n  {\n    "country_code": "US",\n    "name": "MENEZES ALFRED JOHN AUBURN"\n  },\n  {\n    "country_code": "CA",\n    "name": "MINGHUA QU"\n  }\n]', 'assignee': '[\n  "Certicom Corp., Mississauga"\n]', 'assignee_harmonized': '[\n  {\n    "country_code": "CA",\n    "name": "CERTICOM CORP"\n  }\n]', 'examiner': '[]', 'uspc': '[]', 'ipc': '[\n  {\n    "code": "H04L9/08",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "G06F7/72",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  }\n]', 'cpc': '[\n  {\n    "code": "G06F7/725",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "H04L9/0844",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "H04L9/0838",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "H04L9/0844",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "G06F7/725",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  }\n]', 'fi': '[]', 'fterm': '[]', 'locarno': '[]', 'citation': '[]', 'parent': '[]', 'child': '[]', 'entity_status': '', 'art_unit': ''}, {'publication_number': 'DE-69636755-T2', 'application_number': 'DE-69636755-T', 'country_code': 'DE', 'kind_code': 'T2', 'application_kind': 'T', 'application_number_formatted': 'DE1996636755', 'pct_number': '', 'family_id': '8224764', 'spif_publication_number': '', 'spif_application_number': '', 'title_localized': '[\n  {\n    "language": "de",\n    "text": "Immortalisierte menschliche Epithelzell-Linie",\n    "truncated": false\n  }\n]', 'abstract_localized': '[\n  {\n    "language": "en",\n    "text": "Immortalised human corneal epithelial cell line, comprises cells of the cell line which are capable of stratification and expressing metabolic markers specific for nonimmortalised human epithelial cells, differentiation markers specific for nonimmortalised human corneal epithelial cells and markers specific for an inflammatory reaction.",\n    "truncated": false\n  }\n]', 'claims_localized': '[]', 'claims_localized_html': '[]', 'description_localized': '[]', 'description_localized_html': '[]', 'publication_date': 20071011, 'filing_date': 19961224, 'grant_date': 20071011, 'priority_date': 19961224, 'priority_claim': '[\n  {\n    "application_number": "EP-96203707-A",\n    "category": "",\n    "filing_date": 19961224,\n    "npl_text": "",\n    "publication_number": "",\n    "type": ""\n  }\n]', 'inventor': '[\n  "OFFORD CAVIN, ELIZABETH",\n  "TROMVOUKIS, YVONNE",\n  "PFEIFER, ANDREA M.A.",\n  "SHARIF, NAJ"\n]', 'inventor_harmonized': '[\n  {\n    "country_code": "CH",\n    "name": "OFFORD CAVIN ELIZABETH"\n  },\n  {\n    "country_code": "CH",\n    "name": "TROMVOUKIS YVONNE"\n  },\n  {\n    "country_code": "CH",\n    "name": "PFEIFER ANDREA M A"\n  },\n  {\n    "country_code": "US",\n    "name": "SHARIF NAJ"\n  }\n]', 'assignee': '[\n  "Société des Produits Nestlé S.A."\n]', 'assignee_harmonized': '[\n  {\n    "country_code": "CH",\n    "name": "NESTLE SA"\n  }\n]', 'examiner': '[]', 'uspc': '[]', 'ipc': '[\n  {\n    "code": "C12N5/10",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "G01N33/50",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "C12R1/91",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "C12N15/09",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "C12N5/00",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "A61K35/44",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "G01N33/48",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "C12Q1/68",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "C12N5/071",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  }\n]', 'cpc': '[\n  {\n    "code": "C12N2503/02",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "C12N5/0621",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "C12N2503/02",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "C12N2510/04",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "C12N5/0621",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "C12N2510/04",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  }\n]', 'fi': '[]', 'fterm': '[]', 'locarno': '[]', 'citation': '[]', 'parent': '[]', 'child': '[]', 'entity_status': '', 'art_unit': ''}, {'publication_number': 'DE-69728658-T2', 'application_number': 'DE-69728658-T', 'country_code': 'DE', 'kind_code': 'T2', 'application_kind': 'T', 'application_number_formatted': 'DE1997628658', 'pct_number': '', 'family_id': '24437397', 'spif_publication_number': '', 'spif_application_number': '', 'title_localized': '[\n  {\n    "language": "de",\n    "text": "Lithographische dünne filmstruktur und diese enthaltende druckplatte",\n    "truncated": false\n  }\n]', 'abstract_localized': '[\n  {\n    "language": "en",\n    "text": "A lithographic laser imageable thin film structure comprising a substrate having first and second surfaces. A vacuum-deposited metal layer is carried by the first surface of the substrate. A layer of semiconductor material is adhered to and overlies the metal layer. The metal layer and the semiconductor material have thicknesses which are selected to maximize absorption of laser energy impinging on the same.",\n    "truncated": false\n  }\n]', 'claims_localized': '[]', 'claims_localized_html': '[]', 'description_localized': '[]', 'description_localized_html': '[]', 'publication_date': 20040812, 'filing_date': 19970115, 'grant_date': 20040812, 'priority_date': 19960229, 'priority_claim': '[\n  {\n    "application_number": "US-9700408-W",\n    "category": "",\n    "filing_date": 19970115,\n    "npl_text": "",\n    "publication_number": "",\n    "type": ""\n  },\n  {\n    "application_number": "US-60864696-A",\n    "category": "",\n    "filing_date": 19960229,\n    "npl_text": "",\n    "publication_number": "",\n    "type": ""\n  }\n]', 'inventor': '[\n  "FISHER, P.",\n  "PHILLIPS, W.",\n  "DAVIS, F.",\n  "LEGALLEE, CHARLOTTE"\n]', 'inventor_harmonized': '[\n  {\n    "country_code": "US",\n    "name": "FISHER P"\n  },\n  {\n    "country_code": "US",\n    "name": "PHILLIPS W"\n  },\n  {\n    "country_code": "US",\n    "name": "DAVIS F"\n  },\n  {\n    "country_code": "US",\n    "name": "LEGALLEE CHARLOTTE"\n  }\n]', 'assignee': '[\n  "Presstek, Inc."\n]', 'assignee_harmonized': '[\n  {\n    "country_code": "US",\n    "name": "PRESSTEK INC"\n  }\n]', 'examiner': '[]', 'uspc': '[]', 'ipc': '[\n  {\n    "code": "B32B15/04",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B41C1/10",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B41N1/00",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B41N1/14",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B32B27/20",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B32B7/02",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  }\n]', 'cpc': '[\n  {\n    "code": "B32B15/04",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/12674",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B32B27/20",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/31678",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/12458",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/31678",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/12458",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B32B15/20",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/31504",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B41N1/00",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B32B15/09",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B32B2367/00",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B32B27/20",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/12493",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B32B15/043",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B32B27/36",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B32B27/08",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B32B15/04",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/12493",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/12674",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B41C1/1033",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B41N1/00",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/12528",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/31504",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B41C1/1033",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B32B2311/24",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/12528",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  }\n]', 'fi': '[]', 'fterm': '[]', 'locarno': '[]', 'citation': '[]', 'parent': '[]', 'child': '[]', 'entity_status': '', 'art_unit': ''}, {'publication_number': 'DE-69807539-T2', 'application_number': 'DE-69807539-T', 'country_code': 'DE', 'kind_code': 'T2', 'application_kind': 'T', 'application_number_formatted': 'DE1998607539', 'pct_number': '', 'family_id': '11877005', 'spif_publication_number': '', 'spif_application_number': '', 'title_localized': '[\n  {\n    "language": "de",\n    "text": "Automatisches Analysegerät",\n    "truncated": false\n  }\n]', 'abstract_localized': '[]', 'claims_localized': '[]', 'claims_localized_html': '[]', 'description_localized': '[]', 'description_localized_html': '[]', 'publication_date': 20030116, 'filing_date': 19980120, 'grant_date': 20030116, 'priority_date': 19970129, 'priority_claim': '[\n  {\n    "application_number": "JP-1501397-A",\n    "category": "",\n    "filing_date": 19970129,\n    "npl_text": "",\n    "publication_number": "",\n    "type": ""\n  }\n]', 'inventor': '[\n  "HANAWA, MASAAKI",\n  "MITSUMAKI, HIROSHI",\n  "OHISHI, TADASHI",\n  "KAI, SUSUMU",\n  "WATANABE, HIROSHI"\n]', 'inventor_harmonized': '[\n  {\n    "country_code": "JP",\n    "name": "HANAWA MASAAKI"\n  },\n  {\n    "country_code": "JP",\n    "name": "MITSUMAKI HIROSHI"\n  },\n  {\n    "country_code": "JP",\n    "name": "OHISHI TADASHI"\n  },\n  {\n    "country_code": "JP",\n    "name": "KAI SUSUMU"\n  },\n  {\n    "country_code": "JP",\n    "name": "WATANABE HIROSHI"\n  }\n]', 'assignee': '[\n  "Hitachi, Ltd."\n]', 'assignee_harmonized': '[\n  {\n    "country_code": "JP",\n    "name": "HITACHI LTD"\n  }\n]', 'examiner': '[]', 'uspc': '[]', 'ipc': '[\n  {\n    "code": "G01N35/00",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "G01N35/02",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "G01N35/04",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  }\n]', 'cpc': '[\n  {\n    "code": "Y10T436/115831",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T436/114165",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "G01N2035/0465",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "G01N35/026",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "G01N2035/0467",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T436/113332",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T436/114165",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "G01N35/00603",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "Y10T436/11",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "G01N2035/00326",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "G01N2035/0467",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "G01N35/00603",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "G01N2035/00326",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "G01N2035/0465",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "G01N35/026",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "Y10T436/11",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T436/113332",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T436/115831",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  }\n]', 'fi': '[]', 'fterm': '[]', 'locarno': '[]', 'citation': '[]', 'parent': '[]', 'child': '[]', 'entity_status': '', 'art_unit': ''}]

--------------------------------------------------
Table full name: PATENTS.PATENTS.CPC_DEFINITION
Column name: status Type: TEXT
Column name: precedenceLimitingReferences Type: VARIANT
Column name: rules Type: VARIANT
Column name: childGroups Type: VARIANT
Column name: scopeLimitingReferences Type: VARIANT
Column name: level Type: FLOAT
Column name: titlePart Type: VARIANT
Column name: residualReferences Type: VARIANT
Column name: definition Type: VARIANT
Column name: breakdownCode Type: BOOLEAN
Column name: limitingReferences Type: VARIANT
Column name: glossary Type: VARIANT
Column name: applicationReferences Type: VARIANT
Column name: notAllocatable Type: BOOLEAN
Column name: titleFull Type: TEXT
Column name: dateRevised Type: FLOAT
Column name: informativeReferences Type: VARIANT
Column name: symbol Type: TEXT
Column name: synonyms Type: VARIANT
Column name: children Type: VARIANT
Column name: parents Type: VARIANT
Column name: ipcConcordant Type: TEXT
Sample rows:
[{'applicationReferences': '[]', 'breakdownCode': True, 'childGroups': '[]', 'children': '[]', 'dateRevised': 20130101.0, 'definition': '[]', 'glossary': '[]', 'informativeReferences': '[]', 'ipcConcordant': 'CPCONLY', 'level': 9.0, 'limitingReferences': '[]', 'notAllocatable': False, 'parents': '[\n  "A01K2227/10",\n  "A01K2227/00",\n  "A01K",\n  "A01",\n  "A"\n]', 'precedenceLimitingReferences': '[]', 'residualReferences': '[]', 'rules': '[]', 'scopeLimitingReferences': '[]', 'status': 'published', 'symbol': 'A01K2227/108', 'synonyms': '[]', 'titleFull': 'Swine', 'titlePart': '[\n  "Swine"\n]'}, {'applicationReferences': '[]', 'breakdownCode': True, 'childGroups': '[]', 'children': '[]', 'dateRevised': 20130101.0, 'definition': '[]', 'glossary': '[]', 'informativeReferences': '[]', 'ipcConcordant': 'CPCONLY', 'level': 9.0, 'limitingReferences': '[]', 'notAllocatable': False, 'parents': '[\n  "A01K2227/10",\n  "A01K2227/00",\n  "A01K",\n  "A01",\n  "A"\n]', 'precedenceLimitingReferences': '[]', 'residualReferences': '[]', 'rules': '[]', 'scopeLimitingReferences': '[]', 'status': 'published', 'symbol': 'A01K2227/105', 'synonyms': '[]', 'titleFull': 'Murine', 'titlePart': '[\n  "Murine"\n]'}, {'applicationReferences': '[]', 'breakdownCode': True, 'childGroups': '[]', 'children': '[]', 'dateRevised': 20130101.0, 'definition': '[]', 'glossary': '[]', 'informativeReferences': '[]', 'ipcConcordant': 'CPCONLY', 'level': 9.0, 'limitingReferences': '[]', 'notAllocatable': False, 'parents': '[\n  "A01K2227/10",\n  "A01K2227/00",\n  "A01K",\n  "A01",\n  "A"\n]', 'precedenceLimitingReferences': '[]', 'residualReferences': '[]', 'rules': '[]', 'scopeLimitingReferences': '[]', 'status': 'published', 'symbol': 'A01K2227/107', 'synonyms': '[]', 'titleFull': 'Rabbit', 'titlePart': '[\n  "Rabbit"\n]'}, {'applicationReferences': '[]', 'breakdownCode': True, 'childGroups': '[]', 'children': '[]', 'dateRevised': 20130101.0, 'definition': '[]', 'glossary': '[]', 'informativeReferences': '[]', 'ipcConcordant': 'CPCONLY', 'level': 9.0, 'limitingReferences': '[]', 'notAllocatable': False, 'parents': '[\n  "A01K2267/02",\n  "A01K2267/00",\n  "A01K",\n  "A01",\n  "A"\n]', 'precedenceLimitingReferences': '[]', 'residualReferences': '[]', 'rules': '[]', 'scopeLimitingReferences': '[]', 'status': 'published', 'symbol': 'A01K2267/025', 'synonyms': '[]', 'titleFull': 'Animal producing cells or organs for transplantation', 'titlePart': '[\n  "Animal producing cells or organs for transplantation"\n]'}, {'applicationReferences': '[]', 'breakdownCode': True, 'childGroups': '[]', 'children': '[\n  "A01K2267/0312",\n  "A01K2267/0318",\n  "A01K2267/0325"\n]', 'dateRevised': 20130101.0, 'definition': '[]', 'glossary': '[]', 'informativeReferences': '[]', 'ipcConcordant': 'CPCONLY', 'level': 9.0, 'limitingReferences': '[]', 'notAllocatable': False, 'parents': '[\n  "A01K2267/03",\n  "A01K2267/00",\n  "A01K",\n  "A01",\n  "A"\n]', 'precedenceLimitingReferences': '[]', 'residualReferences': '[]', 'rules': '[]', 'scopeLimitingReferences': '[]', 'status': 'published', 'symbol': 'A01K2267/0306', 'synonyms': '[]', 'titleFull': 'Animal model for genetic diseases', 'titlePart': '[\n  "Animal model for genetic diseases"\n]'}]

--------------------------------------------------
External knowledge that might be helpful: 
None
The table structure information is ({database name: {schema name: [table name]}}): 
{'PATENTS': {'PATENTS': ['DISCLOSURES_13', 'PUBLICATIONS', 'CPC_DEFINITION']}}

Some few-shot examples after column exploration may be helpful:
Query:
--Description: Preview raw CPC arrays and application numbers for a handful of publications
SELECT 
  "publication_number",
  "application_number",
  "filing_date",
  "cpc"
FROM PATENTS.PATENTS.PUBLICATIONS
LIMIT 20;
Answer:
publication_number,application_number,filing_date,cpc
CR-5634-A,CR-5634-A,19971015,[]
CR-5990-A,CR-5990-A,19990322,[]
FI-429-A,FI-429D-A,0,[]
HK-6083-A,HK-6083-A,19830217,"[
  {
    ""code"": ""H02M5/00"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  }
]"
HU-T52763-A,HU-7590-A,19900109,"[
  {
    ""code"": ""A01N47/36"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""C07D521/00"",
    ""first"": true,
    ""inventive"": true,
   
Query:
--Description: Flatten the CPC array to see the individual CPC codes (first 20 rows)
SELECT 
  p."publication_number",
  f.value:"code"::STRING  AS "cpc_code",
  f.index                AS "cpc_rank"     -- 0 = first CPC code
FROM PATENTS.PATENTS.PUBLICATIONS  p,
     LATERAL FLATTEN(input => p."cpc") f
LIMIT 20;
Answer:
publication_number,cpc_code,cpc_rank
US-2015177816-A1,G06F1/3253,0
US-2015177816-A1,G06F1/266,1
US-2015177816-A1,G06F13/364,2
US-2015177816-A1,G06F1/3237,3
US-2015177816-A1,G06F1/266,4
US-2015177816-A1,G06F1/3237,5
US-2015177816-A1,G06F1/3253,6
US-2015177816-A1,G06F13/364,7
US-2015177816-A1,Y02D10/00,8
US-2015177816-A1,Y02D30/50,9
US-2015177816-A1,Y02D10/00,10
US-2015177816-A1,Y02D30/50,11
US-2015177816-A1,G06F13/364,12
US-2015180461-A1,H03K17/08,0
Query:
--Description: Show the distinct first CPC code (rank = 0) values that appear
SELECT DISTINCT
  f.value:"code"::STRING AS "first_cpc_code"
FROM PATENTS.PATENTS.PUBLICATIONS p,
     LATERAL FLATTEN(input => p."cpc") f
WHERE f.index = 0
LIMIT 20;
Answer:
first_cpc_code
C07D403/06
C10L1/06
H01L27/0266
E21B17/18
B27D5/003
A45C11/00
D05B87/00
F25B7/00
C08K5/0008
B33Y80/00
H04L27/0004
G06F16/90332
G02B13/14
A61B5/7257
G06Q10/107
H04N23/61
A01N33/18
A63F13/53
H02P31/00
A61M2025/0098
Query:
--Description: Inspect how filing dates are stored and extract the four–digit year
SELECT
  "publication_number",
  "filing_date",
  FLOOR("filing_date" / 10000) AS "filing_year"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "filing_date" IS NOT NULL
LIMIT 20;
Answer:
publication_number,filing_date,filing_year
CR-5634-A,19971015,1997
CR-5990-A,19990322,1999
FI-429-A,0,0
HK-6083-A,19830217,1983
HU-T52763-A,19900109,1990
JP-H03206829-A,19900101,1990
JP-S62159089-A,19860106,1986
US-416-A,0,0
US-2528225-A,19480102,1948
AT-A41580-A,19800125,1980
AT-A47682-A,19820209,1982
AT-A63682-A,19820219,1982
CA-920790-A,19700116,1970
CA-950907-A,19700224,1970
CA-920830-A,19700501,1970
CA-9086-A,0,0
CH-3256-A,18901220,1890
CH-540255-A,19690318,1969
Query:
--Description: Count publications per CPC *group* (first 4 characters of first CPC) to see the busiest areas
SELECT
  SUBSTR(f.value:"code"::STRING, 1, 4)          AS "cpc_group",
  COUNT(*)                                       AS "pub_count"
FROM PATENTS.PATENTS.PUBLICATIONS p,
     LATERAL FLATTEN(input => p."cpc") f
WHERE f.index = 0
  AND p."filing_date" IS NOT NULL
  AND p."application_number" <> ''
GROUP BY 1
ORDER BY "pub_count" DESC
LIMIT 20;
Answer:
cpc_group,pub_count
G06F,10097
H01L,7840
Y02E,6964
A61P,6778
H04L,6060
H04N,5172
A61K,4906
Y02P,4873
H04W,4417
G01N,4320
A61B,4082
Y10T,3197
G06Q,3147
Y02A,3124
C07D,2927
G02B,2671
H01M,2538
B29C,2384
B65D,2295
C07C,2290
Query:
--Description: Glimpse the CPC definition table at level 5 (technology-area level)
SELECT
  "symbol",
  "level",
  "titleFull"
FROM PATENTS.PATENTS.CPC_DEFINITION
WHERE "level" = 5
LIMIT 20;
Answer:
symbol,level,titleFull
A01H,5.0,NEW PLANTS OR NON-TRANSGENIC PROCESSES FOR OBTAINING THEM; PLANT REPRODUCTION BY TISSUE CULTURE TECHNIQUES
A01F,5.0,PROCESSING OF HARVESTED PRODUCE; HAY OR STRAW PRESSES; DEVICES FOR STORING AGRICULTURAL OR HORTICULTURAL PRODUCE
A01C,5.0,PLANTING; SOWING; FERTILISING
A01G,5.0,"HORTICULTURE; CULTIVATION OF VEGETABLES, FLOWERS, RICE, FRUIT, VINES, HOPS OR SEAWEED; FORESTRY; WATERING"
A01N,5.0,"PRESERVATION OF BODIES OF HUMANS OR ANIMALS OR PLANTS OR PARTS THERE
Query:
--Description: Retrieve the full title for a few popular CPC groups gathered from the publication data
SELECT DISTINCT
  d."symbol",
  d."titleFull"
FROM PATENTS.PATENTS.CPC_DEFINITION d
JOIN (
       SELECT DISTINCT SUBSTR(f.value:"code"::STRING, 1, 4) AS "cpc_group"
       FROM PATENTS.PATENTS.PUBLICATIONS p,
            LATERAL FLATTEN(input => p."cpc") f
       WHERE f.index = 0
       LIMIT 100
     ) g
ON d."symbol" = g."cpc_group"
LIMIT 20;
Answer:
symbol,titleFull
G03B,APPARATUS OR ARRANGEMENTS FOR TAKING PHOTOGRAPHS OR FOR PROJECTING OR VIEWING THEM; APPARATUS OR ARRANGEMENTS EMPLOYING ANALOGOUS TECHNIQUES USING WAVES OTHER THAN OPTICAL WAVES; ACCESSORIES THEREFOR
G10L,SPEECH ANALYSIS TECHNIQUES OR SPEECH SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING TECHNIQUES; SPEECH OR AUDIO CODING OR DECODING
H03L,"AUTOMATIC CONTROL, STARTING, SYNCHRONISATION OR STABILISATION OF GENERATORS OF ELECTRONIC OSCILLATIONS OR PULSES"
A47J,KI
Query:
--Description: Build a year-by-year filings table for each CPC group (first 4-char code, rank 0 only)
SELECT
  SUBSTR(f.value:"code"::STRING, 1, 4)                  AS "cpc_group",
  FLOOR(p."filing_date" / 10000)                        AS "year",
  COUNT(*)                                              AS "yearly_filings"
FROM PATENTS.PATENTS.PUBLICATIONS p,
     LATERAL FLATTEN(input => p."cpc") f
WHERE f.index = 0
  AND p."filing_date" IS NOT NULL
  AND p."application_number" <> ''
GROUP BY 1, 2
ORDER BY 1, 2
LIMIT 20;
Answer:
cpc_group,year,yearly_filings
A01B,0,52
A01B,1901,2
A01B,1902,2
A01B,1904,1
A01B,1905,1
A01B,1906,1
A01B,1908,1
A01B,1911,2
A01B,1912,1
A01B,1913,3
A01B,1916,1
A01B,1917,1
A01B,1918,3
A01B,1919,1
A01B,1920,1
A01B,1922,1
A01B,1925,1
A01B,1926,3
A01B,1927,1
A01B,1931,1
Task: Identify the CPC technology areas with the highest exponential moving average of patent filings each year (with a smoothing factor of 0.2), considering only the first CPC code for each patent that has a valid filing date and a non-empty application number, and report the full CPC title along with the best year associated with the highest exponential moving average for each CPC group at level 5.

Please think step by step and answer only one complete SQL in snowflake dialect in ```sql``` format.
SQL usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: The table structure information is ({database name: {schema name: [table name]}}): 
{'PATENTS': {'PATENTS': ['DISCLOSURES_13', 'PUBLICATIONS', 'CPC_DEFINITION']}}

When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
If the task description does not specify the number of decimal places, retain all decimals to four places.

[Self-refine]
2025-05-07 02:00:55 - Thread-24 (execute) - INFO - [Try to run SQL in self-refine]
```sql
/* --------------------------------------------------------------
   CPC level-5 technology areas – peak exponential moving average
   --------------------------------------------------------------*/
WITH
/*1)  Extract first-listed CPC code, filing year and 4-character
      CPC level-5 group for publications that have a valid filing
      date and a non-empty application number.                       */
pubs AS (
    SELECT
        SUBSTR(f.value:"code"::STRING,1,4)          AS cpc_group,   -- level-5 symbol
        FLOOR(p."filing_date"/10000)                AS filing_year  -- YYYY
    FROM PATENTS.PATENTS.PUBLICATIONS p,
         LATERAL FLATTEN (INPUT => p."cpc") f
    WHERE f.index = 0                              -- first CPC only
      AND p."filing_date" IS NOT NULL
      AND p."filing_date" >= 10000                 -- exclude 0 / junk
      AND COALESCE(p."application_number",'') <> ''
),
/*2)  Year-by-year filing counts for every CPC group                */
year_counts AS (
    SELECT
        cpc_group,
        filing_year  AS yr,
        COUNT(*)     AS filings_cnt
    FROM pubs
    GROUP BY cpc_group, yr
),
/*3)  Add a row number per group ordered by year (needed for EMA
      recursion)                                                     */
ordered AS (
    SELECT
        cpc_group,
        yr,
        filings_cnt,
        ROW_NUMBER() OVER (PARTITION BY cpc_group ORDER BY yr) AS rn
    FROM year_counts
),
/*4)  Recursive computation of the Exponential Moving Average
      with smoothing factor α = 0.2                                 */
RECURSIVE ema_cte (cpc_group, yr, filings_cnt, ema_val, rn) AS (
    /* anchor – first year of each group                              */
    SELECT
        cpc_group,
        yr,
        filings_cnt::FLOAT,
        filings_cnt::FLOAT            AS ema_val,
        rn
    FROM ordered
    WHERE rn = 1
    
    UNION ALL
    
    /* recursive step                                                 */
    SELECT
        o.cpc_group,
        o.yr,
        o.filings_cnt::FLOAT,
        0.2*o.filings_cnt + 0.8*e.ema_val  AS ema_val,
        o.rn
    FROM ordered    o
    JOIN ema_cte    e
      ON  o.cpc_group = e.cpc_group
     AND o.rn        = e.rn + 1
),
/*5)  For each CPC group, keep the year where its EMA peaks          */
peak_per_group AS (
    SELECT
        cpc_group,
        yr                AS best_year,
        ema_val           AS peak_ema,
        ROW_NUMBER() OVER (PARTITION BY cpc_group
                           ORDER BY ema_val DESC NULLS LAST, yr) AS rk
    FROM ema_cte
)
SELECT
    pg.cpc_group                         AS "CPC_Group",
    d."titleFull"                        AS "CPC_Full_Title",
    pg.best_year                         AS "Best_Year",
    ROUND(pg.peak_ema,4)                 AS "Peak_EMA_Filings"
FROM peak_per_group  pg
JOIN PATENTS.PATENTS.CPC_DEFINITION d
  ON d."symbol" = pg.cpc_group
 WHERE d."level" = 5
   AND pg.rk = 1                         -- take the peak row only
ORDER BY pg.peak_ema DESC NULLS LAST;
```
[Try to run SQL in self-refine]
2025-05-07 02:00:56 - Thread-24 (execute) - INFO - itercount: 1
2025-05-07 02:00:56 - Thread-24 (execute) - INFO - [Self-refine]
Input sql:
/* --------------------------------------------------------------
   CPC level-5 technology areas – peak exponential moving average
   --------------------------------------------------------------*/
WITH
/*1)  Extract first-listed CPC code, filing year and 4-character
      CPC level-5 group for publications that have a valid filing
      date and a non-empty application number.                       */
pubs AS (
    SELECT
        SUBSTR(f.value:"code"::STRING,1,4)          AS cpc_group,   -- level-5 symbol
        FLOOR(p."filing_date"/10000)                AS filing_year  -- YYYY
    FROM PATENTS.PATENTS.PUBLICATIONS p,
         LATERAL FLATTEN (INPUT => p."cpc") f
    WHERE f.index = 0                              -- first CPC only
      AND p."filing_date" IS NOT NULL
      AND p."filing_date" >= 10000                 -- exclude 0 / junk
      AND COALESCE(p."application_number",'') <> ''
),
/*2)  Year-by-year filing counts for every CPC group                */
year_counts AS (
    SELECT
        cpc_group,
        filing_year  AS yr,
        COUNT(*)     AS filings_cnt
    FROM pubs
    GROUP BY cpc_group, yr
),
/*3)  Add a row number per group ordered by year (needed for EMA
      recursion)                                                     */
ordered AS (
    SELECT
        cpc_group,
        yr,
        filings_cnt,
        ROW_NUMBER() OVER (PARTITION BY cpc_group ORDER BY yr) AS rn
    FROM year_counts
),
/*4)  Recursive computation of the Exponential Moving Average
      with smoothing factor α = 0.2                                 */
RECURSIVE ema_cte (cpc_group, yr, filings_cnt, ema_val, rn) AS (
    /* anchor – first year of each group                              */
    SELECT
        cpc_group,
        yr,
        filings_cnt::FLOAT,
        filings_cnt::FLOAT            AS ema_val,
        rn
    FROM ordered
    WHERE rn = 1
    
    UNION ALL
    
    /* recursive step                                                 */
    SELECT
        o.cpc_group,
        o.yr,
        o.filings_cnt::FLOAT,
        0.2*o.filings_cnt + 0.8*e.ema_val  AS ema_val,
        o.rn
    FROM ordered    o
    JOIN ema_cte    e
      ON  o.cpc_group = e.cpc_group
     AND o.rn        = e.rn + 1
),
/*5)  For each CPC group, keep the year where its EMA peaks          */
peak_per_group AS (
    SELECT
        cpc_group,
        yr                AS best_year,
        ema_val           AS peak_ema,
        ROW_NUMBER() OVER (PARTITION BY cpc_group
                           ORDER BY ema_val DESC NULLS LAST, yr) AS rk
    FROM ema_cte
)
SELECT
    pg.cpc_group                         AS "CPC_Group",
    d."titleFull"                        AS "CPC_Full_Title",
    pg.best_year                         AS "Best_Year",
    ROUND(pg.peak_ema,4)                 AS "Peak_EMA_Filings"
FROM peak_per_group  pg
JOIN PATENTS.PATENTS.CPC_DEFINITION d
  ON d."symbol" = pg.cpc_group
 WHERE d."level" = 5
   AND pg.rk = 1                         -- take the peak row only
ORDER BY pg.peak_ema DESC NULLS LAST;
The error information is:
{'status': 'error', 'error_msg': "##ERROR##001003 (42000): SQL compilation error:\nsyntax error line 37 at position 10 unexpected 'ema_cte'.\nsyntax error line 37 at position 19 unexpected 'cpc_group'.\nsyntax error line 37 at position 60 unexpected 'AS'."}
Please correct it and output only 1 complete SQL query.
[Self-refine]
2025-05-07 02:02:53 - Thread-24 (execute) - INFO - [Try to run SQL in self-refine]
```sql
/* --------------------------------------------------------------
   CPC level-5 technology areas – peak exponential moving average
   --------------------------------------------------------------*/
WITH RECURSIVE
/*1)  Extract first-listed CPC code and filing year (YYYY)           */
pubs AS (
    SELECT
        SUBSTR(f.value:"code"::STRING , 1 , 4)        AS cpc_group,   -- level-5 symbol
        FLOOR(p."filing_date" / 10000)                AS filing_year
    FROM PATENTS.PATENTS.PUBLICATIONS p ,
         LATERAL FLATTEN (INPUT => p."cpc") f
    WHERE f.index = 0                                 -- first CPC only
      AND p."filing_date" IS NOT NULL
      AND p."filing_date" >= 10000                    -- exclude 0 / junk
      AND COALESCE(p."application_number", '') <> ''
),
/*2)  Year-by-year filing counts for every CPC group                */
year_counts AS (
    SELECT
        cpc_group,
        filing_year                                  AS yr,
        COUNT(*)                                     AS filings_cnt
    FROM pubs
    GROUP BY cpc_group , yr
),
/*3)  Row numbering within each group (needed for recursion)        */
ordered AS (
    SELECT
        cpc_group,
        yr,
        filings_cnt,
        ROW_NUMBER() OVER (PARTITION BY cpc_group ORDER BY yr) AS rn
    FROM year_counts
),
/*4)  Recursive EMA calculation with α = 0.2                        */
ema_cte (cpc_group, yr, filings_cnt, ema_val, rn) AS (
    /* anchor rows: first year of each group                         */
    SELECT
        cpc_group,
        yr,
        filings_cnt::FLOAT,
        filings_cnt::FLOAT                       AS ema_val,
        rn
    FROM ordered
    WHERE rn = 1

    UNION ALL

    /* recursive step                                                */
    SELECT
        o.cpc_group,
        o.yr,
        o.filings_cnt::FLOAT,
        0.2 * o.filings_cnt + 0.8 * e.ema_val     AS ema_val,
        o.rn
    FROM ema_cte  e
    JOIN ordered o
      ON o.cpc_group = e.cpc_group
     AND o.rn       = e.rn + 1
),
/*5)  Locate peak EMA and its year for each CPC group               */
peak_per_group AS (
    SELECT
        cpc_group,
        yr                      AS best_year,
        ema_val                 AS peak_ema,
        ROW_NUMBER() OVER (PARTITION BY cpc_group
                           ORDER BY ema_val DESC NULLS LAST , yr) AS rk
    FROM ema_cte
)
/*6)  Bring in CPC full title (level-5) and present results         */
SELECT
    pg.cpc_group                           AS "CPC_Group",
    d."titleFull"                          AS "CPC_Full_Title",
    pg.best_year                           AS "Best_Year",
    ROUND(pg.peak_ema, 4)                  AS "Peak_EMA_Filings"
FROM peak_per_group pg
JOIN PATENTS.PATENTS.CPC_DEFINITION d
  ON d."symbol" = pg.cpc_group
WHERE d."level" = 5
  AND pg.rk = 1                            -- keep only the peak row
ORDER BY pg.peak_ema DESC NULLS LAST;
```
[Try to run SQL in self-refine]
2025-05-07 02:02:57 - Thread-24 (execute) - INFO - Total iteration counts: 1
