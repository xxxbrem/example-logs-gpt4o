2025-05-07 01:33:04 - Thread-14 (execute) - INFO - [Exploration]
```sql
--Description: 1) Peek at a few publications that have a non-empty filing date and application number
SELECT 
  "publication_number",
  "application_number",
  "filing_date",
  "cpc"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "application_number" <> ''
  AND "filing_date" IS NOT NULL
LIMIT 20;
```

```sql
--Description: 2) Show distinct values that appear in the “application_kind” column
SELECT DISTINCT 
  "application_kind"
FROM PATENTS.PATENTS.PUBLICATIONS
LIMIT 20;
```

```sql
--Description: 3) Inspect the structure of the JSON CPC array for some records
SELECT 
  p."publication_number",
  f.value AS "cpc_element"
FROM PATENTS.PATENTS.PUBLICATIONS p,
     LATERAL FLATTEN(input => p."cpc") f
WHERE p."application_number" <> ''
  AND p."filing_date" IS NOT NULL
LIMIT 20;
```

```sql
--Description: 4) Grab the FIRST CPC code of each patent (index = 0 after flatten)  
SELECT 
  p."publication_number",
  f.value:"code"::STRING AS "first_cpc_code"
FROM PATENTS.PATENTS.PUBLICATIONS p,
     LATERAL FLATTEN(input => p."cpc") f
WHERE f."index" = 0
  AND p."application_number" <> ''
  AND p."filing_date" IS NOT NULL
LIMIT 20;
```

```sql
--Description: 5) Examine the range of “level” values that exist in the CPC definition table
SELECT DISTINCT 
  "level"
FROM PATENTS.PATENTS.CPC_DEFINITION
ORDER BY "level"
LIMIT 20;
```

```sql
--Description: 6) Display some CPC groups that live at hierarchy level 5 together with their titles
SELECT 
  "symbol",
  "titleFull"
FROM PATENTS.PATENTS.CPC_DEFINITION
WHERE "level" = 5
LIMIT 20;
```

```sql
--Description: 7) Join the first-CPC-code list to the CPC definition table to bring in the full title
SELECT 
  first_cpc."first_cpc_code",
  def."titleFull"
FROM (
      SELECT 
        p."publication_number",
        f.value:"code"::STRING AS "first_cpc_code"
      FROM PATENTS.PATENTS.PUBLICATIONS p,
           LATERAL FLATTEN(input => p."cpc") f
      WHERE f."index" = 0
        AND p."application_number" <> ''
        AND p."filing_date" IS NOT NULL
     ) AS first_cpc
JOIN PATENTS.PATENTS.CPC_DEFINITION def
  ON def."symbol" = first_cpc."first_cpc_code"
LIMIT 20;
```

```sql
--Description: 8) Count yearly filings for each CPC group at hierarchy level 5 (using the 4-digit year of the filing date)
SELECT 
  def."symbol"                        AS "cpc_group",
  YEAR(TO_DATE(p."filing_date"::STRING, 'YYYYMMDD')) AS "filing_year",
  COUNT(*)                            AS "filings"
FROM PATENTS.PATENTS.PUBLICATIONS p
JOIN LATERAL (
        SELECT f.value:"code"::STRING AS "first_cpc_code"
        FROM LATERAL FLATTEN(input => p."cpc") f
        WHERE f."index" = 0
     ) c
  ON TRUE
JOIN PATENTS.PATENTS.CPC_DEFINITION def
  ON def."symbol" = c."first_cpc_code"
WHERE def."level" = 5
  AND p."application_number" <> ''
  AND p."filing_date" IS NOT NULL
GROUP BY def."symbol", YEAR(TO_DATE(p."filing_date"::STRING, 'YYYYMMDD'))
ORDER BY def."symbol", "filing_year"
LIMIT 20;
```

```sql
--Description: 9) Compute the exponential moving average (α = 0.2) of yearly filings per CPC group
SELECT
  cpc_group,
  filing_year,
  filings,
  EMA(filings, 0.2) OVER (PARTITION BY cpc_group ORDER BY filing_year
                          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS "ema_0_2"
FROM (
      /* query 8 re-used, but without LIMIT so window function works */
      SELECT 
        def."symbol"                        AS cpc_group,
        YEAR(TO_DATE(p."filing_date"::STRING, 'YYYYMMDD')) AS filing_year,
        COUNT(*)                            AS filings
      FROM PATENTS.PATENTS.PUBLICATIONS p
      JOIN LATERAL (
              SELECT f.value:"code"::STRING AS first_cpc_code
              FROM LATERAL FLATTEN(input => p."cpc") f
              WHERE f."index" = 0
           ) c
        ON TRUE
      JOIN PATENTS.PATENTS.CPC_DEFINITION def
        ON def."symbol" = c.first_cpc_code
      WHERE def."level" = 5
        AND p."application_number" <> ''
        AND p."filing_date" IS NOT NULL
      GROUP BY def."symbol", YEAR(TO_DATE(p."filing_date"::STRING, 'YYYYMMDD'))
     )
LIMIT 20;
```

```sql
--Description: 10) For each CPC group at level 5, find the year where its EMA is highest and return the title as well
SELECT
  t.cpc_group,
  def."titleFull",
  t.filing_year    AS "best_year",
  t.ema_0_2        AS "highest_ema"
FROM (
      SELECT
        cpc_group,
        filing_year,
        ema_0_2,
        ROW_NUMBER() OVER (PARTITION BY cpc_group ORDER BY ema_0_2 DESC) AS rn
      FROM (
            /* query 9 without LIMIT */
            SELECT
              cpc_group,
              filing_year,
              filings,
              EMA(filings, 0.2) OVER (PARTITION BY cpc_group ORDER BY filing_year
                                      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS ema_0_2
            FROM (
                  /* same aggregation as query 8, without LIMIT */
                  SELECT 
                    def."symbol"                        AS cpc_group,
                    YEAR(TO_DATE(p."filing_date"::STRING, 'YYYYMMDD')) AS filing_year,
                    COUNT(*)                            AS filings
                  FROM PATENTS.PATENTS.PUBLICATIONS p
                  JOIN LATERAL (
                          SELECT f.value:"code"::STRING AS first_cpc_code
                          FROM LATERAL FLATTEN(input => p."cpc") f
                          WHERE f."index" = 0
                       ) c
                    ON TRUE
                  JOIN PATENTS.PATENTS.CPC_DEFINITION def
                    ON def."symbol" = c.first_cpc_code
                  WHERE def."level" = 5
                    AND p."application_number" <> ''
                    AND p."filing_date" IS NOT NULL
                  GROUP BY def."symbol", YEAR(TO_DATE(p."filing_date"::STRING, 'YYYYMMDD'))
                 )
           )
     ) t
JOIN PATENTS.PATENTS.CPC_DEFINITION def
  ON def."symbol" = t.cpc_group
WHERE t.rn = 1
LIMIT 20;
```
[Exploration]
2025-05-07 01:33:04 - Thread-14 (execute) - INFO - [Try to execute]
--Description: 1) Peek at a few publications that have a non-empty filing date and application number
SELECT 
  "publication_number",
  "application_number",
  "filing_date",
  "cpc"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "application_number" <> ''
  AND "filing_date" IS NOT NULL
LIMIT 20;
[Try to execute]
2025-05-07 01:33:10 - Thread-14 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 1) Peek at a few publications that have a non-empty filing date and application number
SELECT 
  "publication_number",
  "application_number",
  "filing_date",
  "cpc"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "application_number" <> ''
  AND "filing_date" IS NOT NULL
LIMIT 20;
Results:
publication_number,application_number,filing_date,cpc
CR-5634-A,CR-5634-A,19971015,[]
CR-5990-A,CR-5990-A,19990322,[]
FI-429-A,FI-429D-A,0,[]
HK-6083-A,HK-6083-A,19830217,"[
  {
    ""code"": ""H02M5/00"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  }
]"
HU-T52763-A,HU-7590-A,19900109,"[
  {
    ""code"": ""A01N47/36"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""C07D521/00"",
    ""first"": true,
    ""inventive"": true,
   

[Successfully executed]
2025-05-07 01:33:10 - Thread-14 (execute) - INFO - [Try to execute]
--Description: 2) Show distinct values that appear in the “application_kind” column
SELECT DISTINCT 
  "application_kind"
FROM PATENTS.PATENTS.PUBLICATIONS
LIMIT 20;
[Try to execute]
2025-05-07 01:33:15 - Thread-14 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 2) Show distinct values that appear in the “application_kind” column
SELECT DISTINCT 
  "application_kind"
FROM PATENTS.PATENTS.PUBLICATIONS
LIMIT 20;
Results:
application_kind
D
U
C
P
B
F
V
""
A
T
W
Q
K
L

[Successfully executed]
2025-05-07 01:33:15 - Thread-14 (execute) - INFO - [Try to execute]
--Description: 3) Inspect the structure of the JSON CPC array for some records
SELECT 
  p."publication_number",
  f.value AS "cpc_element"
FROM PATENTS.PATENTS.PUBLICATIONS p,
     LATERAL FLATTEN(input => p."cpc") f
WHERE p."application_number" <> ''
  AND p."filing_date" IS NOT NULL
LIMIT 20;
[Try to execute]
2025-05-07 01:33:17 - Thread-14 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 3) Inspect the structure of the JSON CPC array for some records
SELECT 
  p."publication_number",
  f.value AS "cpc_element"
FROM PATENTS.PATENTS.PUBLICATIONS p,
     LATERAL FLATTEN(input => p."cpc") f
WHERE p."application_number" <> ''
  AND p."filing_date" IS NOT NULL
LIMIT 20;
Results:
publication_number,cpc_element
CN-2669058-Y,"{
  ""code"": ""F24F1/48"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
CN-2669058-Y,"{
  ""code"": ""F24F1/38"",
  ""first"": true,
  ""inventive"": true,
  ""tree"": []
}"
CN-2746550-Y,"{
  ""code"": ""Y02E60/12"",
  ""first"": false,
  ""inventive"": false,
  ""tree"": []
}"
CN-201124248-Y,"{
  ""code"": ""Y02P70/10"",
  ""first"": false,
  ""inventive"": false,
  ""tree"": []
}"
IT-BO20010459-A0,"{
  ""code"": ""B65D41/485"",

[Successfully executed]
2025-05-07 01:33:17 - Thread-14 (execute) - INFO - [Try to execute]
--Description: 4) Grab the FIRST CPC code of each patent (index = 0 after flatten)  
SELECT 
  p."publication_number",
  f.value:"code"::STRING AS "first_cpc_code"
FROM PATENTS.PATENTS.PUBLICATIONS p,
     LATERAL FLATTEN(input => p."cpc") f
WHERE f."index" = 0
  AND p."application_number" <> ''
  AND p."filing_date" IS NOT NULL
LIMIT 20;
[Try to execute]
2025-05-07 01:33:17 - Thread-14 (execute) - INFO - [Error occurred]
{'status': 'error', 'error_msg': '##ERROR##000904 (42000): SQL compilation error: error line 6 at position 6\ninvalid identifier \'F."index"\''}
[Error occurred]
2025-05-07 01:34:13 - Thread-14 (execute) - INFO - [Corrected SQL]
```sql
--Description: We need to inspect the very first CPC code listed for each patent.
--The "cpc" column is a JSON array; Snowflake’s FLATTEN turns each element into a row.
--The FLATTEN output includes the pseudo-column "INDEX" indicating the array position.
--Selecting rows where "INDEX" = 0 isolates the first CPC entry.
--We also filter for records having a non-empty "application_number" and a non-null "filing_date".
--Finally, we LIMIT the result to 20 rows just to preview the data.
SELECT
    p."publication_number",
    f.value:"code"::STRING AS "first_cpc_code"
FROM PATENTS.PATENTS.PUBLICATIONS AS p,
     LATERAL FLATTEN(INPUT => p."cpc") AS f
WHERE f."INDEX" = 0
  AND p."application_number" <> ''
  AND p."filing_date" IS NOT NULL
LIMIT 20;
```
[Corrected SQL]
2025-05-07 01:34:15 - Thread-14 (execute) - INFO - [Results for corrected sql]
publication_number,first_cpc_code
US-1042918-A,F16B45/049
US-926194-A,Y10S236/06
US-452073-A,B62K25/04
US-2769089-A,H03G3/22
IN-2014MN02166-A,F21S41/336
US-2180615-A,H04R9/025
US-2454443-A,F16B39/32
US-2975132-A,C10M2207/027
US-3062063-A,Y10T74/18528
US-2093395-A,H04N5/123
US-2630039-A,B23B31/305
US-3049472-A,A01N29/02
US-1125417-A,H01R43/033
US-3059202-A,H01R39/00
US-410160-A,A47C21/022
US-1072828-A,B60R1/0602
US-2518931-A,H04B1/54

[Results for corrected sql]
2025-05-07 01:35:48 - Thread-14 (execute) - INFO - [Corrected other sqls]
```sql
--Description: 5) Examine the range of “level” values that exist in the CPC definition table
SELECT DISTINCT 
  "level"
FROM PATENTS.PATENTS.CPC_DEFINITION
ORDER BY "level"
LIMIT 20;
```

```sql
--Description: 6) Display some CPC groups that live at hierarchy level 5 together with their titles
SELECT 
  "symbol",
  "titleFull"
FROM PATENTS.PATENTS.CPC_DEFINITION
WHERE "level" = 5
LIMIT 20;
```

```sql
--Description: 7) Join the first-CPC-code list to the CPC definition table to bring in the full title
SELECT 
  first_cpc."first_cpc_code",
  def."titleFull"
FROM (
      SELECT 
        p."publication_number",
        f.value:"code"::STRING AS "first_cpc_code"
      FROM PATENTS.PATENTS.PUBLICATIONS AS p,
           LATERAL FLATTEN(INPUT => p."cpc") AS f
      WHERE f."INDEX" = 0
        AND p."application_number" <> ''
        AND p."filing_date" IS NOT NULL
     ) AS first_cpc
JOIN PATENTS.PATENTS.CPC_DEFINITION AS def
  ON def."symbol" = first_cpc."first_cpc_code"
LIMIT 20;
```

```sql
--Description: 8) Count yearly filings for each CPC group at hierarchy level 5 (using the 4-digit year of the filing date)
SELECT 
  def."symbol"                                                   AS "cpc_group",
  YEAR(TO_DATE(p."filing_date"::STRING, 'YYYYMMDD'))             AS "filing_year",
  COUNT(*)                                                       AS "filings"
FROM PATENTS.PATENTS.PUBLICATIONS AS p
JOIN LATERAL (
        SELECT f.value:"code"::STRING AS "first_cpc_code"
        FROM LATERAL FLATTEN(INPUT => p."cpc") AS f
        WHERE f."INDEX" = 0
     ) AS c
  ON TRUE
JOIN PATENTS.PATENTS.CPC_DEFINITION AS def
  ON def."symbol" = c."first_cpc_code"
WHERE def."level" = 5
  AND p."application_number" <> ''
  AND p."filing_date" IS NOT NULL
GROUP BY def."symbol", YEAR(TO_DATE(p."filing_date"::STRING, 'YYYYMMDD'))
ORDER BY def."symbol", "filing_year"
LIMIT 20;
```

```sql
--Description: 9) Compute the exponential moving average (α = 0.2) of yearly filings per CPC group
SELECT
  cpc_group,
  filing_year,
  filings,
  EMA(filings, 0.2) OVER (PARTITION BY cpc_group 
                          ORDER BY filing_year
                          ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS "ema_0_2"
FROM (
      SELECT 
        def."symbol"                                               AS cpc_group,
        YEAR(TO_DATE(p."filing_date"::STRING, 'YYYYMMDD'))         AS filing_year,
        COUNT(*)                                                   AS filings
      FROM PATENTS.PATENTS.PUBLICATIONS AS p
      JOIN LATERAL (
              SELECT f.value:"code"::STRING AS first_cpc_code
              FROM LATERAL FLATTEN(INPUT => p."cpc") AS f
              WHERE f."INDEX" = 0
           ) AS c
        ON TRUE
      JOIN PATENTS.PATENTS.CPC_DEFINITION AS def
        ON def."symbol" = c."first_cpc_code"
      WHERE def."level" = 5
        AND p."application_number" <> ''
        AND p."filing_date" IS NOT NULL
      GROUP BY def."symbol", YEAR(TO_DATE(p."filing_date"::STRING, 'YYYYMMDD'))
     )
LIMIT 20;
```

```sql
--Description: 10) For each CPC group at level 5, find the year where its EMA is highest and return the title as well
SELECT
  t.cpc_group,
  def."titleFull",
  t.filing_year  AS "best_year",
  t.ema_0_2      AS "highest_ema"
FROM (
      SELECT
        cpc_group,
        filing_year,
        ema_0_2,
        ROW_NUMBER() OVER (PARTITION BY cpc_group ORDER BY ema_0_2 DESC) AS rn
      FROM (
            SELECT
              cpc_group,
              filing_year,
              filings,
              EMA(filings, 0.2) OVER (PARTITION BY cpc_group 
                                      ORDER BY filing_year
                                      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS ema_0_2
            FROM (
                  SELECT 
                    def."symbol"                                            AS cpc_group,
                    YEAR(TO_DATE(p."filing_date"::STRING, 'YYYYMMDD'))      AS filing_year,
                    COUNT(*)                                                AS filings
                  FROM PATENTS.PATENTS.PUBLICATIONS AS p
                  JOIN LATERAL (
                          SELECT f.value:"code"::STRING AS first_cpc_code
                          FROM LATERAL FLATTEN(INPUT => p."cpc") AS f
                          WHERE f."INDEX" = 0
                       ) AS c
                    ON TRUE
                  JOIN PATENTS.PATENTS.CPC_DEFINITION AS def
                    ON def."symbol" = c."first_cpc_code"
                  WHERE def."level" = 5
                    AND p."application_number" <> ''
                    AND p."filing_date" IS NOT NULL
                  GROUP BY def."symbol", YEAR(TO_DATE(p."filing_date"::STRING, 'YYYYMMDD'))
                 )
           )
     ) AS t
JOIN PATENTS.PATENTS.CPC_DEFINITION AS def
  ON def."symbol" = t.cpc_group
WHERE t.rn = 1
LIMIT 20;
```
[Corrected other sqls]
2025-05-07 01:35:48 - Thread-14 (execute) - INFO - [Successfully corrected]
Successfully corrected. SQL:
--Description: We need to inspect the very first CPC code listed for each patent.
--The "cpc" column is a JSON array; Snowflake’s FLATTEN turns each element into a row.
--The FLATTEN output includes the pseudo-column "INDEX" indicating the array position.
--Selecting rows where "INDEX" = 0 isolates the first CPC entry.
--We also filter for records having a non-empty "application_number" and a non-null "filing_date".
--Finally, we LIMIT the result to 20 rows just to preview the data.
SELECT
    p."publication_number",
    f.value:"code"::STRING AS "first_cpc_code"
FROM PATENTS.PATENTS.PUBLICATIONS AS p,
     LATERAL FLATTEN(INPUT => p."cpc") AS f
WHERE f."INDEX" = 0
  AND p."application_number" <> ''
  AND p."filing_date" IS NOT NULL
LIMIT 20;
Results:
publication_number,first_cpc_code
US-1042918-A,F16B45/049
US-926194-A,Y10S236/06
US-452073-A,B62K25/04
US-2769089-A,H03G3/22
IN-2014MN02166-A,F21S41/336
US-2180615-A,H04R9/025
US-2454443-A,F16B39/32
US-2975132-A,C10M2207/027
US-3062063-A,Y10T74/18528
US-2093395-A,H04N5/123
US-2630039-A,B23B31/305
US-3049472-A,A01N29/02
US-1125417-A,H01R43/033
US-3059202-A,H01R39/00
US-410160-A,A47C21/022
US-1072828-A,B60R1/0602
US-2518931-A,H04B1/54

[Successfully corrected]
2025-05-07 01:35:48 - Thread-14 (execute) - INFO - [Try to execute]
--Description: 5) Examine the range of “level” values that exist in the CPC definition table
SELECT DISTINCT 
  "level"
FROM PATENTS.PATENTS.CPC_DEFINITION
ORDER BY "level"
LIMIT 20
[Try to execute]
2025-05-07 01:35:48 - Thread-14 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 5) Examine the range of “level” values that exist in the CPC definition table
SELECT DISTINCT 
  "level"
FROM PATENTS.PATENTS.CPC_DEFINITION
ORDER BY "level"
LIMIT 20
Results:
level
2.0
4.0
5.0
7.0
8.0
9.0
10.0
11.0
12.0
13.0
14.0
15.0
16.0
17.0
18.0
19.0

[Successfully executed]
2025-05-07 01:35:48 - Thread-14 (execute) - INFO - [Try to execute]
--Description: 6) Display some CPC groups that live at hierarchy level 5 together with their titles
SELECT 
  "symbol",
  "titleFull"
FROM PATENTS.PATENTS.CPC_DEFINITION
WHERE "level" = 5
LIMIT 20
[Try to execute]
2025-05-07 01:35:48 - Thread-14 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 6) Display some CPC groups that live at hierarchy level 5 together with their titles
SELECT 
  "symbol",
  "titleFull"
FROM PATENTS.PATENTS.CPC_DEFINITION
WHERE "level" = 5
LIMIT 20
Results:
symbol,titleFull
A01H,NEW PLANTS OR NON-TRANSGENIC PROCESSES FOR OBTAINING THEM; PLANT REPRODUCTION BY TISSUE CULTURE TECHNIQUES
A01F,PROCESSING OF HARVESTED PRODUCE; HAY OR STRAW PRESSES; DEVICES FOR STORING AGRICULTURAL OR HORTICULTURAL PRODUCE
A01C,PLANTING; SOWING; FERTILISING
A01G,"HORTICULTURE; CULTIVATION OF VEGETABLES, FLOWERS, RICE, FRUIT, VINES, HOPS OR SEAWEED; FORESTRY; WATERING"
A01N,"PRESERVATION OF BODIES OF HUMANS OR ANIMALS OR PLANTS OR PARTS THEREOF; BIOCIDES, e.g. AS DISI

[Successfully executed]
2025-05-07 01:35:48 - Thread-14 (execute) - INFO - [Try to execute]
--Description: 7) Join the first-CPC-code list to the CPC definition table to bring in the full title
SELECT 
  first_cpc."first_cpc_code",
  def."titleFull"
FROM (
      SELECT 
        p."publication_number",
        f.value:"code"::STRING AS "first_cpc_code"
      FROM PATENTS.PATENTS.PUBLICATIONS AS p,
           LATERAL FLATTEN(INPUT => p."cpc") AS f
      WHERE f."INDEX" = 0
        AND p."application_number" <> ''
        AND p."filing_date" IS NOT NULL
     ) AS first_cpc
JOIN PATENTS.PATENTS.CPC_DEFINITION AS def
  ON def."symbol" = first_cpc."first_cpc_code"
LIMIT 20
[Try to execute]
2025-05-07 01:37:27 - Thread-14 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 7) Join the first-CPC-code list to the CPC definition table to bring in the full title
SELECT 
  first_cpc."first_cpc_code",
  def."titleFull"
FROM (
      SELECT 
        p."publication_number",
        f.value:"code"::STRING AS "first_cpc_code"
      FROM PATENTS.PATENTS.PUBLICATIONS AS p,
           LATERAL FLATTEN(INPUT => p."cpc") AS f
      WHERE f."INDEX" = 0
        AND p."application_number" <> ''
        AND p."filing_date" IS NOT NULL
     ) AS first_cpc
JOIN PATENTS.PATENTS.CPC_DEFINITION AS def
  ON def."symbol" = first_cpc."first_cpc_code"
LIMIT 20
Results:
first_cpc_code,titleFull
G06N10/40,"Physical realisations or architectures of quantum processors or components for manipulating qubits, e.g. qubit coupling or qubit control"
B05B15/625,"Arrangements for supporting spraying apparatus, e.g. suction cups designed to be placed on the ground"
Y02E60/10,Energy storage using batteries
F01D5/20,Specially-shaped blade tips to seal space between tips and stator
H04L5/006,"Quality of the received signal, e.g. BER, SNR, water filling"
C07K2319/00,Fusi

[Successfully executed]
2025-05-07 01:37:27 - Thread-14 (execute) - INFO - [Try to execute]
--Description: 8) Count yearly filings for each CPC group at hierarchy level 5 (using the 4-digit year of the filing date)
SELECT 
  def."symbol"                                                   AS "cpc_group",
  YEAR(TO_DATE(p."filing_date"::STRING, 'YYYYMMDD'))             AS "filing_year",
  COUNT(*)                                                       AS "filings"
FROM PATENTS.PATENTS.PUBLICATIONS AS p
JOIN LATERAL (
        SELECT f.value:"code"::STRING AS "first_cpc_code"
        FROM LATERAL FLATTEN(INPUT => p."cpc") AS f
        WHERE f."INDEX" = 0
     ) AS c
  ON TRUE
JOIN PATENTS.PATENTS.CPC_DEFINITION AS def
  ON def."symbol" = c."first_cpc_code"
WHERE def."level" = 5
  AND p."application_number" <> ''
  AND p."filing_date" IS NOT NULL
GROUP BY def."symbol", YEAR(TO_DATE(p."filing_date"::STRING, 'YYYYMMDD'))
ORDER BY def."symbol", "filing_year"
LIMIT 20
[Try to execute]
2025-05-07 01:37:28 - Thread-14 (execute) - INFO - [Error occurred]
{'status': 'error', 'error_msg': '##ERROR##000603 (XX000): SQL execution internal error:\nProcessing aborted due to error 300002:834137686; incident 9120149.'}
[Error occurred]
2025-05-07 01:38:55 - Thread-14 (execute) - INFO - [Corrected SQL]
```sql
--Description: Count annual patent filings for each CPC group at hierarchy level 5, using only the
--             first CPC code per patent and safely parsing dates.
-- Steps
--   1.  In sub-query FIRST_CPC we:
--         • Parse "filing_date" with TRY_TO_DATE (bad values → NULL).
--         • Keep rows whose "application_number" is non-empty and parsed date is not NULL.
--         • FLATTEN the "cpc" JSON array and retain the element where FLATTEN pseudo-column INDEX = 0
--           (the primary CPC code).
--   2.  Join those first CPC codes to CPC_DEFINITION, restricting to level 5 groups.
--   3.  Aggregate by CPC group and calendar year, returning 20 sample rows.
SELECT
    def."symbol"                          AS "cpc_group",
    YEAR(fc."filing_dt")                  AS "filing_year",
    COUNT(*)                              AS "filings"
FROM (
        -- first CPC code per publication with a valid filing date
        SELECT
            TRY_TO_DATE(p."filing_date"::STRING, 'YYYYMMDD')            AS "filing_dt",
            f.value:"code"::STRING                                      AS "first_cpc_code"
        FROM PATENTS.PATENTS.PUBLICATIONS           AS p
        ,    LATERAL FLATTEN(INPUT => p."cpc")      AS f
        WHERE f."INDEX" = 0
          AND p."application_number" <> ''
          AND TRY_TO_DATE(p."filing_date"::STRING, 'YYYYMMDD') IS NOT NULL
     ) AS fc
JOIN PATENTS.PATENTS.CPC_DEFINITION          AS def
  ON def."symbol" = fc."first_cpc_code"
WHERE def."level" = 5
GROUP BY def."symbol", YEAR(fc."filing_dt")
ORDER BY def."symbol", "filing_year"
LIMIT 20;
```
[Corrected SQL]
2025-05-07 01:39:47 - Thread-14 (execute) - INFO - [Results for corrected sql]
No data found for the specified query.

[Results for corrected sql]
2025-05-07 01:42:06 - Thread-14 (execute) - INFO - [Corrected SQL]
```sql
--Description: Count yearly patent filings for CPC groups at hierarchy level 5, using the
--             first CPC code of each publication and safely handling bad “filing_date” values.
SELECT
    def."symbol"                      AS "cpc_group",
    YEAR(fc."filing_dt")              AS "filing_year",
    COUNT(*)                          AS "filings"
FROM (
        /* Extract a clean DATE and the publication’s primary (INDEX = 0) CPC code */
        SELECT
            TRY_TO_DATE(p."filing_date"::STRING, 'YYYYMMDD') AS "filing_dt",
            f.value:"code"::STRING                           AS "first_cpc_code"
        FROM PATENTS.PATENTS.PUBLICATIONS AS p
        ,    LATERAL FLATTEN(INPUT => p."cpc") AS f
        WHERE f."INDEX" = 0                              -- primary CPC code
     ) AS fc
JOIN PATENTS.PATENTS.CPC_DEFINITION AS def
  ON def."symbol" = fc."first_cpc_code"
WHERE def."level" = 5                                   -- hierarchy level 5 groups
  AND fc."filing_dt" IS NOT NULL                        -- keep rows with valid date
GROUP BY def."symbol", YEAR(fc."filing_dt")
ORDER BY def."symbol", "filing_year"
LIMIT 20;
```
[Corrected SQL]
2025-05-07 01:42:18 - Thread-14 (execute) - INFO - [Results for corrected sql]
No data found for the specified query.

[Results for corrected sql]
2025-05-07 01:44:08 - Thread-14 (execute) - INFO - [Corrected SQL]
```sql
--Description: Count yearly patent filings grouped by CPC technology areas at hierarchy level 5.
--             Because most primary CPC codes are deeper (e.g., “F16B45/049” → level 9),
--             we match a level-5 symbol to any primary code that begins with that symbol.
-- Steps
--   1.  Convert the numeric “filing_date” (YYYYMMDD) to DATE with TRY_TO_DATE; skip NULLs.
--   2.  FLATTEN the JSON “cpc” array, keep the element whose INDEX = 0 → primary CPC code.
--   3.  Join to CPC_DEFINITION where level = 5, using the prefix-match
--        primary_cpc LIKE def.symbol || '%'.
--   4.  Aggregate by level-5 CPC group and calendar year; show 20 sample rows.
SELECT
    def."symbol"                       AS "cpc_group",
    YEAR(pub."filing_dt")              AS "filing_year",
    COUNT(*)                           AS "filings"
FROM (
        SELECT
            TRY_TO_DATE(p."filing_date"::STRING, 'YYYYMMDD') AS "filing_dt",
            f.value:"code"::STRING                           AS "primary_cpc"
        FROM PATENTS.PATENTS.PUBLICATIONS AS p
        ,    LATERAL FLATTEN(INPUT => p."cpc") AS f
        WHERE f."INDEX" = 0                                   -- first CPC element
          AND TRY_TO_DATE(p."filing_date"::STRING, 'YYYYMMDD') IS NOT NULL
     ) AS pub
JOIN PATENTS.PATENTS.CPC_DEFINITION AS def
  ON pub."primary_cpc" LIKE def."symbol" || '%'                -- prefix match to level-5 group
WHERE def."level" = 5
GROUP BY def."symbol", YEAR(pub."filing_dt")
ORDER BY def."symbol", "filing_year"
LIMIT 20;
```
[Corrected SQL]
2025-05-07 01:44:11 - Thread-14 (execute) - INFO - [Results for corrected sql]
cpc_group,filing_year,filings
A01B,1901,2
A01B,1902,2
A01B,1904,1
A01B,1905,1
A01B,1906,1
A01B,1908,1
A01B,1911,2
A01B,1912,1
A01B,1913,3
A01B,1916,1
A01B,1917,1
A01B,1918,3
A01B,1919,1
A01B,1920,1
A01B,1922,1
A01B,1925,1
A01B,1926,3
A01B,1927,1
A01B,1931,1
A01B,1933,1

[Results for corrected sql]
2025-05-07 01:45:25 - Thread-14 (execute) - INFO - [Corrected other sqls]
```sql
--Description: 9) Compute the exponential moving average (α = 0.2) of yearly filings for each level-5 CPC group,
--               mapping a patent’s primary CPC code to its level-5 ancestor via prefix matching.
WITH yearly AS (   -- build yearly filing counts per level-5 CPC group
    SELECT
        def."symbol"                         AS cpc_group,
        YEAR(pub."filing_dt")                AS filing_year,
        COUNT(*)                             AS filings
    FROM (
            SELECT
                TRY_TO_DATE(p."filing_date"::STRING,'YYYYMMDD') AS filing_dt,
                f.value:"code"::STRING                          AS primary_cpc
            FROM PATENTS.PATENTS.PUBLICATIONS  AS p,
                 LATERAL FLATTEN(INPUT => p."cpc") AS f
            WHERE f."INDEX" = 0
              AND TRY_TO_DATE(p."filing_date"::STRING,'YYYYMMDD') IS NOT NULL
         ) AS pub
    JOIN PATENTS.PATENTS.CPC_DEFINITION AS def
      ON pub.primary_cpc LIKE def."symbol" || '%'
    WHERE def."level" = 5
    GROUP BY def."symbol", YEAR(pub."filing_dt")
)
SELECT
    cpc_group,
    filing_year,
    filings,
    EMA(filings,0.2) OVER (PARTITION BY cpc_group
                           ORDER BY filing_year
                           ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS "ema_0_2"
FROM yearly
LIMIT 20;
```

```sql
--Description: 10) For every level-5 CPC group, report the calendar year in which its exponential moving
--                average of filings (α = 0.2) reaches the maximum, together with the CPC title.
WITH yearly AS (   -- same yearly counts as in query 9
    SELECT
        def."symbol"                         AS cpc_group,
        YEAR(pub."filing_dt")                AS filing_year,
        COUNT(*)                             AS filings
    FROM (
            SELECT
                TRY_TO_DATE(p."filing_date"::STRING,'YYYYMMDD') AS filing_dt,
                f.value:"code"::STRING                          AS primary_cpc
            FROM PATENTS.PATENTS.PUBLICATIONS  AS p,
                 LATERAL FLATTEN(INPUT => p."cpc") AS f
            WHERE f."INDEX" = 0
              AND TRY_TO_DATE(p."filing_date"::STRING,'YYYYMMDD') IS NOT NULL
         ) AS pub
    JOIN PATENTS.PATENTS.CPC_DEFINITION AS def
      ON pub.primary_cpc LIKE def."symbol" || '%'
    WHERE def."level" = 5
    GROUP BY def."symbol", YEAR(pub."filing_dt")
),
ema_calc AS (      -- add EMA per group
    SELECT
        cpc_group,
        filing_year,
        filings,
        EMA(filings,0.2) OVER (PARTITION BY cpc_group
                               ORDER BY filing_year
                               ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS ema_0_2
    FROM yearly
),
ranked AS (        -- keep the year with the highest EMA per group
    SELECT
        cpc_group,
        filing_year,
        ema_0_2,
        ROW_NUMBER() OVER (PARTITION BY cpc_group ORDER BY ema_0_2 DESC) AS rn
    FROM ema_calc
)
SELECT
    r.cpc_group,
    d."titleFull",
    r.filing_year  AS best_year,
    r.ema_0_2      AS highest_ema
FROM ranked AS r
JOIN PATENTS.PATENTS.CPC_DEFINITION AS d
  ON d."symbol" = r.cpc_group
WHERE r.rn = 1
LIMIT 20;
```
[Corrected other sqls]
2025-05-07 01:45:25 - Thread-14 (execute) - INFO - [Successfully corrected]
Successfully corrected. SQL:
--Description: Count yearly patent filings grouped by CPC technology areas at hierarchy level 5.
--             Because most primary CPC codes are deeper (e.g., “F16B45/049” → level 9),
--             we match a level-5 symbol to any primary code that begins with that symbol.
-- Steps
--   1.  Convert the numeric “filing_date” (YYYYMMDD) to DATE with TRY_TO_DATE; skip NULLs.
--   2.  FLATTEN the JSON “cpc” array, keep the element whose INDEX = 0 → primary CPC code.
--   3.  Join to CPC_DEFINITION where level = 5, using the prefix-match
--        primary_cpc LIKE def.symbol || '%'.
--   4.  Aggregate by level-5 CPC group and calendar year; show 20 sample rows.
SELECT
    def."symbol"                       AS "cpc_group",
    YEAR(pub."filing_dt")              AS "filing_year",
    COUNT(*)                           AS "filings"
FROM (
        SELECT
            TRY_TO_DATE(p."filing_date"::STRING, 'YYYYMMDD') AS "filing_dt",
            f.value:"code"::STRING                           AS "primary_cpc"
        FROM PATENTS.PATENTS.PUBLICATIONS AS p
        ,    LATERAL FLATTEN(INPUT => p."cpc") AS f
        WHERE f."INDEX" = 0                                   -- first CPC element
          AND TRY_TO_DATE(p."filing_date"::STRING, 'YYYYMMDD') IS NOT NULL
     ) AS pub
JOIN PATENTS.PATENTS.CPC_DEFINITION AS def
  ON pub."primary_cpc" LIKE def."symbol" || '%'                -- prefix match to level-5 group
WHERE def."level" = 5
GROUP BY def."symbol", YEAR(pub."filing_dt")
ORDER BY def."symbol", "filing_year"
LIMIT 20;
Results:
cpc_group,filing_year,filings
A01B,1901,2
A01B,1902,2
A01B,1904,1
A01B,1905,1
A01B,1906,1
A01B,1908,1
A01B,1911,2
A01B,1912,1
A01B,1913,3
A01B,1916,1
A01B,1917,1
A01B,1918,3
A01B,1919,1
A01B,1920,1
A01B,1922,1
A01B,1925,1
A01B,1926,3
A01B,1927,1
A01B,1931,1
A01B,1933,1

[Successfully corrected]
2025-05-07 01:45:25 - Thread-14 (execute) - INFO - [Try to execute]
--Description: 9) Compute the exponential moving average (α = 0.2) of yearly filings for each level-5 CPC group,
--               mapping a patent’s primary CPC code to its level-5 ancestor via prefix matching.
WITH yearly AS (   -- build yearly filing counts per level-5 CPC group
    SELECT
        def."symbol"                         AS cpc_group,
        YEAR(pub."filing_dt")                AS filing_year,
        COUNT(*)                             AS filings
    FROM (
            SELECT
                TRY_TO_DATE(p."filing_date"::STRING,'YYYYMMDD') AS filing_dt,
                f.value:"code"::STRING                          AS primary_cpc
            FROM PATENTS.PATENTS.PUBLICATIONS  AS p,
                 LATERAL FLATTEN(INPUT => p."cpc") AS f
            WHERE f."INDEX" = 0
              AND TRY_TO_DATE(p."filing_date"::STRING,'YYYYMMDD') IS NOT NULL
         ) AS pub
    JOIN PATENTS.PATENTS.CPC_DEFINITION AS def
      ON pub.primary_cpc LIKE def."symbol" || '%'
    WHERE def."level" = 5
    GROUP BY def."symbol", YEAR(pub."filing_dt")
)
SELECT
    cpc_group,
    filing_year,
    filings,
    EMA(filings,0.2) OVER (PARTITION BY cpc_group
                           ORDER BY filing_year
                           ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS "ema_0_2"
FROM yearly
LIMIT 20
[Try to execute]
2025-05-07 01:45:25 - Thread-14 (execute) - INFO - [Error occurred]
{'status': 'error', 'error_msg': '##ERROR##002303 (0A000): SQL compilation error: error line 26 at position 27\nCumulative window frame unsupported for function EMA'}
[Error occurred]
2025-05-07 01:46:59 - Thread-14 (execute) - INFO - [Corrected SQL]
```sql
--Description:  Compute an exponential moving average (α = 0.2) of yearly patent-filing counts
--              for CPC technology areas at hierarchy level 5.
--              • TRY_TO_DATE safely converts “filing_date” (YYYYMMDD) to DATE and discards
--                rows that fail conversion.
--              • FLATTEN turns the JSON “cpc” array into rows; we keep the element where
--                INDEX = 0 (the publication’s primary CPC code).
--              • Because most primary codes are deeper than level 5, we map them to their
--                level-5 ancestor by prefix-matching (primary_cpc LIKE def.symbol || '%').
--              • We first build yearly filing counts (CTE yearly), then apply Snowflake’s
--                EXP_MOVING_AVG analytic function to get the EMA per group.
WITH yearly AS (
    SELECT
        def."symbol"                      AS cpc_group,
        YEAR(pub."filing_dt")             AS filing_year,
        COUNT(*)                          AS filings
    FROM (
            SELECT
                TRY_TO_DATE(p."filing_date"::STRING,'YYYYMMDD') AS filing_dt,
                f.value:"code"::STRING                          AS primary_cpc
            FROM PATENTS.PATENTS.PUBLICATIONS AS p,
                 LATERAL FLATTEN(INPUT => p."cpc") AS f
            WHERE f."INDEX" = 0
              AND TRY_TO_DATE(p."filing_date"::STRING,'YYYYMMDD') IS NOT NULL
         ) AS pub
    JOIN PATENTS.PATENTS.CPC_DEFINITION AS def
      ON pub.primary_cpc LIKE def."symbol" || '%'
    WHERE def."level" = 5
    GROUP BY def."symbol", YEAR(pub.filing_dt)
)
SELECT
    cpc_group,
    filing_year,
    filings,
    EXP_MOVING_AVG(filings, 0.2) OVER (
        PARTITION BY cpc_group
        ORDER BY filing_year
    ) AS ema_0_2
FROM yearly
LIMIT 20;
```
[Corrected SQL]
2025-05-07 01:46:59 - Thread-14 (execute) - INFO - [Results for corrected sql]
{'status': 'error', 'error_msg': '##ERROR##000904 (42000): SQL compilation error: error line 4 at position 13\ninvalid identifier \'PUB."filing_dt"\''}
[Results for corrected sql]
2025-05-07 01:49:19 - Thread-14 (execute) - INFO - [Corrected SQL]
```sql
--Description:  Build yearly patent-filing counts for each CPC technology area at hierarchy
--              level 5 and then compute the exponential moving average (α = 0.2).  
--              --------------------------------------------------------------------
--              • TRY_TO_DATE() safely converts the numeric YYYYMMDD “filing_date” to DATE;
--                rows that fail conversion are skipped.
--              • FLATTEN explodes the JSON array in column "cpc"; we keep the element whose
--                FLATTEN pseudo-column INDEX = 0, which is treated as the publication’s
--                primary CPC code.
--              • Primary CPC codes are usually deeper than level-5 (e.g., “F16B45/049” at
--                level 9).  We therefore map each primary code to its level-5 ancestor by
--                prefix matching:  primary_cpc LIKE def.symbol || '%'.
--              • The CTE `yearly` aggregates filings per calendar year and level-5 group.
--              • EXP_MOVING_AVG analytic function (alias for EMA) is applied—without an
--                explicit window frame clause—to derive the smoothed series for each group.
WITH yearly AS (
    SELECT
        def."symbol"                     AS cpc_group,
        YEAR(pub.filing_dt)              AS filing_year,
        COUNT(*)                         AS filings
    FROM (
            SELECT
                TRY_TO_DATE(p."filing_date"::STRING, 'YYYYMMDD') AS filing_dt,
                f.value:"code"::STRING                           AS primary_cpc
            FROM PATENTS.PATENTS.PUBLICATIONS AS p
                 ,LATERAL FLATTEN(INPUT => p."cpc") AS f
            WHERE f."INDEX" = 0
              AND TRY_TO_DATE(p."filing_date"::STRING, 'YYYYMMDD') IS NOT NULL
         ) AS pub
    JOIN PATENTS.PATENTS.CPC_DEFINITION AS def
      ON pub.primary_cpc LIKE def."symbol" || '%'
    WHERE def."level" = 5
    GROUP BY def."symbol", YEAR(pub.filing_dt)
)
SELECT
    cpc_group,
    filing_year,
    filings,
    EXP_MOVING_AVG(filings, 0.2) OVER (
        PARTITION BY cpc_group
        ORDER BY filing_year
    ) AS ema_0_2
FROM yearly
LIMIT 20;
```
[Corrected SQL]
2025-05-07 01:49:19 - Thread-14 (execute) - INFO - [Results for corrected sql]
{'status': 'error', 'error_msg': '##ERROR##002060 (42601): SQL compilation error:\nInvalid function type [EXP_MOVING_AVG] for window function.'}
[Results for corrected sql]
2025-05-07 01:56:32 - Thread-14 (execute) - INFO - [Corrected SQL]
```sql
--Description:  Compute yearly patent-filing counts for each CPC technology area at hierarchy
--              level-5 and then derive their exponential moving average with smoothing factor
--              α = 0.2.  Because built-in EMA / EXP_MOVING_AVG window functions are not
--              available, the EMA is calculated recursively.
--              ---------------------------------------------------------------------------
--              1.  TRY_TO_DATE turns the numeric YYYYMMDD “filing_date” into DATE; rows
--                  that fail conversion are skipped.
--              2.  FLATTEN explodes the JSON “cpc” array; we keep the element where
--                  INDEX = 0 (the publication’s primary CPC code).
--              3.  Map that primary code to its level-5 ancestor via prefix match
--                  (primary_cpc LIKE def.symbol || '%').
--              4.  CTE yearly aggregates filing counts per calendar year and CPC group.
--              5.  CTE ranked assigns a sequential row number per CPC group.
--              6.  A recursive CTE (ema_calc) applies the recurrence
--                     EMA₁ = filings₁
--                     EMAₖ = 0.2·filingsₖ + 0.8·EMAₖ₋₁   for k > 1
WITH yearly AS (                -- step 4: yearly filing counts
    SELECT
        def."symbol"                      AS cpc_group,
        YEAR(pub.filing_dt)               AS filing_year,
        COUNT(*)                          AS filings
    FROM (
            SELECT
                TRY_TO_DATE(p."filing_date"::STRING, 'YYYYMMDD') AS filing_dt,
                f.value:"code"::STRING                           AS primary_cpc
            FROM PATENTS.PATENTS.PUBLICATIONS AS p
                 ,LATERAL FLATTEN(INPUT => p."cpc") AS f
            WHERE f."INDEX" = 0
              AND TRY_TO_DATE(p."filing_date"::STRING, 'YYYYMMDD') IS NOT NULL
         ) AS pub
    JOIN PATENTS.PATENTS.CPC_DEFINITION AS def
      ON pub.primary_cpc LIKE def."symbol" || '%'
    WHERE def."level" = 5
    GROUP BY def."symbol", YEAR(pub.filing_dt)
),
ranked AS (                     -- step 5: order the years per group
    SELECT
        cpc_group,
        filing_year,
        filings,
        ROW_NUMBER() OVER (PARTITION BY cpc_group ORDER BY filing_year) AS rn
    FROM yearly
),
RECURSIVE ema_calc AS (         -- step 6: recursive EMA
    /* anchor row: first year of each CPC group */
    SELECT
        cpc_group,
        filing_year,
        filings,
        rn,
        CAST(filings AS DOUBLE) AS ema_0_2   -- EMA₁ = filings₁
    FROM ranked
    WHERE rn = 1
    UNION ALL
    /* recursive part: EMAₖ = 0.2·filingsₖ + 0.8·EMAₖ₋₁ */
    SELECT
        r.cpc_group,
        r.filing_year,
        r.filings,
        r.rn,
        r.filings * 0.2 + ec.ema_0_2 * 0.8 AS ema_0_2
    FROM ranked      r
    JOIN ema_calc    ec
      ON r.cpc_group = ec.cpc_group
     AND r.rn        = ec.rn + 1
)
SELECT
    cpc_group,
    filing_year,
    filings,
    ema_0_2
FROM ema_calc
ORDER BY cpc_group, filing_year
LIMIT 20;
```
[Corrected SQL]
2025-05-07 01:56:33 - Thread-14 (execute) - INFO - [Results for corrected sql]
{'status': 'error', 'error_msg': "##ERROR##001003 (42000): SQL compilation error:\nsyntax error line 28 at position 10 unexpected 'ema_calc'."}
[Results for corrected sql]
2025-05-07 01:56:33 - Thread-14 (execute) - INFO - itercount: 0
2025-05-07 01:56:33 - Thread-14 (execute) - INFO - [Self-refine]
Table full name: PATENTS.PATENTS.DISCLOSURES_13
Column name: serial_cleaned Type: TEXT
Column name: sso Type: TEXT
Column name: disclosure_event Type: TEXT
Column name: reciprocity Type: TEXT
Column name: patent_owner_harmonized Type: TEXT
Column name: record_id Type: TEXT
Column name: family_id Type: TEXT
Column name: blanket_scope Type: TEXT
Column name: copyright Type: TEXT
Column name: standard Type: TEXT
Column name: licensing_commitment Type: TEXT
Column name: committee_project Type: TEXT
Column name: sc_name Type: TEXT
Column name: blanket_type Type: TEXT
Column name: pub_cleaned Type: TEXT
Column name: third_party Type: TEXT
Column name: wg_name Type: TEXT
Column name: patent_owner_unharmonized Type: TEXT
Column name: tc_name Type: TEXT
Column name: date Type: NUMBER
Sample rows:
[{'family_id': '22549751', 'record_id': 'REC00002', 'disclosure_event': 'DE0001', 'sso': 'ANSI', 'patent_owner_harmonized': '3M', 'patent_owner_unharmonized': '3M', 'date': 19751124, 'standard': 'X3.55;X3.56', 'committee_project': '', 'tc_name': '', 'sc_name': '', 'wg_name': '', 'licensing_commitment': 'FRAND', 'copyright': '', 'blanket_type': '0', 'blanket_scope': '', 'third_party': '0', 'reciprocity': '0', 'serial_cleaned': '', 'pub_cleaned': 'US3692255'}, {'family_id': '23170520', 'record_id': 'REC00001', 'disclosure_event': 'DE0001', 'sso': 'ANSI', 'patent_owner_harmonized': '3M', 'patent_owner_unharmonized': '3M', 'date': 19751124, 'standard': 'X3.55;X3.56', 'committee_project': '', 'tc_name': '', 'sc_name': '', 'wg_name': '', 'licensing_commitment': 'FRAND', 'copyright': '', 'blanket_type': '0', 'blanket_scope': '', 'third_party': '0', 'reciprocity': '0', 'serial_cleaned': '', 'pub_cleaned': 'US3861619'}, {'family_id': '23170520', 'record_id': 'REC00006', 'disclosure_event': 'DE0003', 'sso': 'ANSI', 'patent_owner_harmonized': '3M', 'patent_owner_unharmonized': '3M', 'date': 19890711, 'standard': 'X3.55;X3.56;X3.72;X3.116;X3.127;X3.136', 'committee_project': '', 'tc_name': '', 'sc_name': '', 'wg_name': '', 'licensing_commitment': 'Specific Terms', 'copyright': '', 'blanket_type': '0', 'blanket_scope': '', 'third_party': '0', 'reciprocity': '0', 'serial_cleaned': '', 'pub_cleaned': 'US3861619'}, {'family_id': '22549751', 'record_id': 'REC00008', 'disclosure_event': 'DE0004', 'sso': 'ANSI', 'patent_owner_harmonized': '3M', 'patent_owner_unharmonized': '3M', 'date': 19890906, 'standard': '', 'committee_project': '', 'tc_name': '', 'sc_name': '', 'wg_name': '', 'licensing_commitment': 'FRAND', 'copyright': '', 'blanket_type': '2', 'blanket_scope': '', 'third_party': '0', 'reciprocity': '0', 'serial_cleaned': '', 'pub_cleaned': 'US3692255'}, {'family_id': '23418274', 'record_id': 'REC00024', 'disclosure_event': 'DE0013', 'sso': 'ANSI', 'patent_owner_harmonized': 'Agilent Technologies', 'patent_owner_unharmonized': 'Agilent Technologies', 'date': 20020606, 'standard': '1588', 'committee_project': 'IEEE', 'tc_name': '', 'sc_name': '', 'wg_name': '', 'licensing_commitment': 'FRAND', 'copyright': '', 'blanket_type': '0', 'blanket_scope': '', 'third_party': '0', 'reciprocity': '0', 'serial_cleaned': '', 'pub_cleaned': 'US5566180'}]

--------------------------------------------------
Table full name: PATENTS.PATENTS.PUBLICATIONS
Column name: examiner Type: VARIANT Description: Is this text truncated?
Column name: fterm Type: VARIANT Description: For US publications only, the description in HTML, limited to the first 9 megabytes
Column name: application_number_formatted Type: TEXT Description: Application number, formatted to the patent office format where possible.
Column name: application_number Type: TEXT Description: Patent application number (DOCDB compatible), eg: 'US-87124404-A'. This may not always be set.
Column name: grant_date Type: NUMBER Description: For US publications only, the claims in plain text
Column name: cpc Type: VARIANT Description: Two-letter language code for this text
Column name: locarno Type: VARIANT Description: Localized text
Column name: description_localized_html Type: VARIANT Description: Localized text
Column name: publication_date Type: NUMBER Description: Two-letter language code for this text
Column name: kind_code Type: TEXT Description: Kind code, indicating application, grant, search report, correction, etc. These are different for each country.
Column name: spif_publication_number Type: TEXT Description: SPIF standard (spif.group) publication number, after 2000
Column name: ipc Type: VARIANT Description: Localized text
Column name: pct_number Type: TEXT Description: PCT number for this application if it was part of a PCT filing, eg: 'PCT/EP2008/062623'.
Column name: entity_status Type: TEXT Description: The filing date.
Column name: filing_date Type: NUMBER Description: Is this text truncated?
Column name: abstract_localized Type: VARIANT Description: Localized text
Column name: description_localized Type: VARIANT Description: The publication abstracts in different languages
Column name: assignee Type: VARIANT Description: Localized text
Column name: citation Type: VARIANT Description: Two-letter language code for this text
Column name: fi Type: VARIANT Description: Is this text truncated?
Column name: claims_localized_html Type: VARIANT Description: Is this text truncated?
Column name: inventor_harmonized Type: VARIANT Description: For US publications only, the claims in HTML
Column name: inventor Type: VARIANT Description: Is this text truncated?
Column name: claims_localized Type: VARIANT Description: Two-letter language code for this text
Column name: priority_date Type: NUMBER Description: Localized text
Column name: application_kind Type: TEXT Description: High-level kind of the application: A=patent; U=utility; P=provision; W= PCT; F=design; T=translation.
Column name: priority_claim Type: VARIANT Description: Two-letter language code for this text
Column name: assignee_harmonized Type: VARIANT Description: Two-letter language code for this text
Column name: title_localized Type: VARIANT Description: The publication titles in different languages
Column name: art_unit Type: TEXT Description: The grant date, or 0 if not granted.
Column name: child Type: VARIANT Description: The publication date.
Column name: family_id Type: TEXT Description: Family ID (simple family). Grouping on family ID will return all publications associated with a simple patent family (all publications share the same priority claims).
Column name: spif_application_number Type: TEXT Description: SPIF standard (spif.group) application number, after 2000
Column name: uspc Type: VARIANT Description: For US publications only, the description in plain text, limited to the first 9 megabytes
Column name: publication_number Type: TEXT Description: Patent publication number (DOCDB compatible), eg: 'US-7650331-B1'
Column name: country_code Type: TEXT Description: Country code, eg: 'US', 'EP', etc
Column name: parent Type: VARIANT Description: Is this text truncated?
Sample rows:
[{'publication_number': 'DE-69611147-T2', 'application_number': 'DE-69611147-T', 'country_code': 'DE', 'kind_code': 'T2', 'application_kind': 'T', 'application_number_formatted': 'DE1996611147', 'pct_number': '', 'family_id': '9483724', 'spif_publication_number': '', 'spif_application_number': '', 'title_localized': '[\n  {\n    "language": "de",\n    "text": "Schloss vom Typ eines entkuppelbaren Rotors",\n    "truncated": false\n  }\n]', 'abstract_localized': '[]', 'claims_localized': '[]', 'claims_localized_html': '[]', 'description_localized': '[]', 'description_localized_html': '[]', 'publication_date': 20010621, 'filing_date': 19961015, 'grant_date': 20010621, 'priority_date': 19951018, 'priority_claim': '[\n  {\n    "application_number": "FR-9512326-A",\n    "category": "",\n    "filing_date": 19951018,\n    "npl_text": "",\n    "publication_number": "",\n    "type": ""\n  }\n]', 'inventor': '[\n  "MENAGER, CHRISTOPHE",\n  "CANARD, LOUIS",\n  "CADOUOT, PATRICK",\n  "GOURDIN, DOMINIQUE"\n]', 'inventor_harmonized': '[\n  {\n    "country_code": "FR",\n    "name": "MENAGER CHRISTOPHE"\n  },\n  {\n    "country_code": "FR",\n    "name": "CANARD LOUIS"\n  },\n  {\n    "country_code": "FR",\n    "name": "CADOUOT PATRICK"\n  },\n  {\n    "country_code": "FR",\n    "name": "GOURDIN DOMINIQUE"\n  }\n]', 'assignee': '[\n  "Valeo Securite Habitacle, Creteil Cedex"\n]', 'assignee_harmonized': '[\n  {\n    "country_code": "FR",\n    "name": "VALEO SECURITE HABITACLE"\n  }\n]', 'examiner': '[]', 'uspc': '[]', 'ipc': '[\n  {\n    "code": "E05B17/04",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "E05B17/00",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  }\n]', 'cpc': '[\n  {\n    "code": "E05B77/00",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "E05B17/0058",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  }\n]', 'fi': '[]', 'fterm': '[]', 'locarno': '[]', 'citation': '[]', 'parent': '[]', 'child': '[]', 'entity_status': '', 'art_unit': ''}, {'publication_number': 'DE-69630331-T2', 'application_number': 'DE-69630331-T', 'country_code': 'DE', 'kind_code': 'T2', 'application_kind': 'T', 'application_number_formatted': 'DE1996630331', 'pct_number': '', 'family_id': '23689246', 'spif_publication_number': '', 'spif_application_number': '', 'title_localized': '[\n  {\n    "language": "de",\n    "text": "Verfahren zur gesicherten Sitzungsschlüsselerzeugung und zur Authentifizierung",\n    "truncated": false\n  }\n]', 'abstract_localized': '[]', 'claims_localized': '[]', 'claims_localized_html': '[]', 'description_localized': '[]', 'description_localized_html': '[]', 'publication_date': 20040729, 'filing_date': 19960416, 'grant_date': 20040729, 'priority_date': 19950421, 'priority_claim': '[\n  {\n    "application_number": "US-42609095-A",\n    "category": "",\n    "filing_date": 19950421,\n    "npl_text": "",\n    "publication_number": "",\n    "type": ""\n  }\n]', 'inventor': '[\n  "VANSTONE SCOTT .A, WATERLOO",\n  "MENEZES ALFRED JOHN, AUBURN",\n  "MINGHUA QU,"\n]', 'inventor_harmonized': '[\n  {\n    "country_code": "CA",\n    "name": "VANSTONE SCOTT A WATERLOO"\n  },\n  {\n    "country_code": "US",\n    "name": "MENEZES ALFRED JOHN AUBURN"\n  },\n  {\n    "country_code": "CA",\n    "name": "MINGHUA QU"\n  }\n]', 'assignee': '[\n  "Certicom Corp., Mississauga"\n]', 'assignee_harmonized': '[\n  {\n    "country_code": "CA",\n    "name": "CERTICOM CORP"\n  }\n]', 'examiner': '[]', 'uspc': '[]', 'ipc': '[\n  {\n    "code": "H04L9/08",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "G06F7/72",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  }\n]', 'cpc': '[\n  {\n    "code": "G06F7/725",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "H04L9/0844",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "H04L9/0838",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "H04L9/0844",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "G06F7/725",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  }\n]', 'fi': '[]', 'fterm': '[]', 'locarno': '[]', 'citation': '[]', 'parent': '[]', 'child': '[]', 'entity_status': '', 'art_unit': ''}, {'publication_number': 'DE-69636755-T2', 'application_number': 'DE-69636755-T', 'country_code': 'DE', 'kind_code': 'T2', 'application_kind': 'T', 'application_number_formatted': 'DE1996636755', 'pct_number': '', 'family_id': '8224764', 'spif_publication_number': '', 'spif_application_number': '', 'title_localized': '[\n  {\n    "language": "de",\n    "text": "Immortalisierte menschliche Epithelzell-Linie",\n    "truncated": false\n  }\n]', 'abstract_localized': '[\n  {\n    "language": "en",\n    "text": "Immortalised human corneal epithelial cell line, comprises cells of the cell line which are capable of stratification and expressing metabolic markers specific for nonimmortalised human epithelial cells, differentiation markers specific for nonimmortalised human corneal epithelial cells and markers specific for an inflammatory reaction.",\n    "truncated": false\n  }\n]', 'claims_localized': '[]', 'claims_localized_html': '[]', 'description_localized': '[]', 'description_localized_html': '[]', 'publication_date': 20071011, 'filing_date': 19961224, 'grant_date': 20071011, 'priority_date': 19961224, 'priority_claim': '[\n  {\n    "application_number": "EP-96203707-A",\n    "category": "",\n    "filing_date": 19961224,\n    "npl_text": "",\n    "publication_number": "",\n    "type": ""\n  }\n]', 'inventor': '[\n  "OFFORD CAVIN, ELIZABETH",\n  "TROMVOUKIS, YVONNE",\n  "PFEIFER, ANDREA M.A.",\n  "SHARIF, NAJ"\n]', 'inventor_harmonized': '[\n  {\n    "country_code": "CH",\n    "name": "OFFORD CAVIN ELIZABETH"\n  },\n  {\n    "country_code": "CH",\n    "name": "TROMVOUKIS YVONNE"\n  },\n  {\n    "country_code": "CH",\n    "name": "PFEIFER ANDREA M A"\n  },\n  {\n    "country_code": "US",\n    "name": "SHARIF NAJ"\n  }\n]', 'assignee': '[\n  "Société des Produits Nestlé S.A."\n]', 'assignee_harmonized': '[\n  {\n    "country_code": "CH",\n    "name": "NESTLE SA"\n  }\n]', 'examiner': '[]', 'uspc': '[]', 'ipc': '[\n  {\n    "code": "C12N5/10",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "G01N33/50",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "C12R1/91",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "C12N15/09",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "C12N5/00",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "A61K35/44",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "G01N33/48",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "C12Q1/68",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "C12N5/071",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  }\n]', 'cpc': '[\n  {\n    "code": "C12N2503/02",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "C12N5/0621",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "C12N2503/02",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "C12N2510/04",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "C12N5/0621",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "C12N2510/04",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  }\n]', 'fi': '[]', 'fterm': '[]', 'locarno': '[]', 'citation': '[]', 'parent': '[]', 'child': '[]', 'entity_status': '', 'art_unit': ''}, {'publication_number': 'DE-69728658-T2', 'application_number': 'DE-69728658-T', 'country_code': 'DE', 'kind_code': 'T2', 'application_kind': 'T', 'application_number_formatted': 'DE1997628658', 'pct_number': '', 'family_id': '24437397', 'spif_publication_number': '', 'spif_application_number': '', 'title_localized': '[\n  {\n    "language": "de",\n    "text": "Lithographische dünne filmstruktur und diese enthaltende druckplatte",\n    "truncated": false\n  }\n]', 'abstract_localized': '[\n  {\n    "language": "en",\n    "text": "A lithographic laser imageable thin film structure comprising a substrate having first and second surfaces. A vacuum-deposited metal layer is carried by the first surface of the substrate. A layer of semiconductor material is adhered to and overlies the metal layer. The metal layer and the semiconductor material have thicknesses which are selected to maximize absorption of laser energy impinging on the same.",\n    "truncated": false\n  }\n]', 'claims_localized': '[]', 'claims_localized_html': '[]', 'description_localized': '[]', 'description_localized_html': '[]', 'publication_date': 20040812, 'filing_date': 19970115, 'grant_date': 20040812, 'priority_date': 19960229, 'priority_claim': '[\n  {\n    "application_number": "US-9700408-W",\n    "category": "",\n    "filing_date": 19970115,\n    "npl_text": "",\n    "publication_number": "",\n    "type": ""\n  },\n  {\n    "application_number": "US-60864696-A",\n    "category": "",\n    "filing_date": 19960229,\n    "npl_text": "",\n    "publication_number": "",\n    "type": ""\n  }\n]', 'inventor': '[\n  "FISHER, P.",\n  "PHILLIPS, W.",\n  "DAVIS, F.",\n  "LEGALLEE, CHARLOTTE"\n]', 'inventor_harmonized': '[\n  {\n    "country_code": "US",\n    "name": "FISHER P"\n  },\n  {\n    "country_code": "US",\n    "name": "PHILLIPS W"\n  },\n  {\n    "country_code": "US",\n    "name": "DAVIS F"\n  },\n  {\n    "country_code": "US",\n    "name": "LEGALLEE CHARLOTTE"\n  }\n]', 'assignee': '[\n  "Presstek, Inc."\n]', 'assignee_harmonized': '[\n  {\n    "country_code": "US",\n    "name": "PRESSTEK INC"\n  }\n]', 'examiner': '[]', 'uspc': '[]', 'ipc': '[\n  {\n    "code": "B32B15/04",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B41C1/10",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B41N1/00",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B41N1/14",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B32B27/20",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B32B7/02",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  }\n]', 'cpc': '[\n  {\n    "code": "B32B15/04",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/12674",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B32B27/20",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/31678",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/12458",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/31678",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/12458",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B32B15/20",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/31504",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B41N1/00",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B32B15/09",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B32B2367/00",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B32B27/20",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/12493",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B32B15/043",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B32B27/36",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B32B27/08",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "B32B15/04",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/12493",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/12674",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B41C1/1033",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B41N1/00",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/12528",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/31504",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B41C1/1033",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "B32B2311/24",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T428/12528",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  }\n]', 'fi': '[]', 'fterm': '[]', 'locarno': '[]', 'citation': '[]', 'parent': '[]', 'child': '[]', 'entity_status': '', 'art_unit': ''}, {'publication_number': 'DE-69807539-T2', 'application_number': 'DE-69807539-T', 'country_code': 'DE', 'kind_code': 'T2', 'application_kind': 'T', 'application_number_formatted': 'DE1998607539', 'pct_number': '', 'family_id': '11877005', 'spif_publication_number': '', 'spif_application_number': '', 'title_localized': '[\n  {\n    "language": "de",\n    "text": "Automatisches Analysegerät",\n    "truncated": false\n  }\n]', 'abstract_localized': '[]', 'claims_localized': '[]', 'claims_localized_html': '[]', 'description_localized': '[]', 'description_localized_html': '[]', 'publication_date': 20030116, 'filing_date': 19980120, 'grant_date': 20030116, 'priority_date': 19970129, 'priority_claim': '[\n  {\n    "application_number": "JP-1501397-A",\n    "category": "",\n    "filing_date": 19970129,\n    "npl_text": "",\n    "publication_number": "",\n    "type": ""\n  }\n]', 'inventor': '[\n  "HANAWA, MASAAKI",\n  "MITSUMAKI, HIROSHI",\n  "OHISHI, TADASHI",\n  "KAI, SUSUMU",\n  "WATANABE, HIROSHI"\n]', 'inventor_harmonized': '[\n  {\n    "country_code": "JP",\n    "name": "HANAWA MASAAKI"\n  },\n  {\n    "country_code": "JP",\n    "name": "MITSUMAKI HIROSHI"\n  },\n  {\n    "country_code": "JP",\n    "name": "OHISHI TADASHI"\n  },\n  {\n    "country_code": "JP",\n    "name": "KAI SUSUMU"\n  },\n  {\n    "country_code": "JP",\n    "name": "WATANABE HIROSHI"\n  }\n]', 'assignee': '[\n  "Hitachi, Ltd."\n]', 'assignee_harmonized': '[\n  {\n    "country_code": "JP",\n    "name": "HITACHI LTD"\n  }\n]', 'examiner': '[]', 'uspc': '[]', 'ipc': '[\n  {\n    "code": "G01N35/00",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "G01N35/02",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "G01N35/04",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  }\n]', 'cpc': '[\n  {\n    "code": "Y10T436/115831",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T436/114165",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "G01N2035/0465",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "G01N35/026",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "G01N2035/0467",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T436/113332",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T436/114165",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "G01N35/00603",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "Y10T436/11",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "G01N2035/00326",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "G01N2035/0467",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "G01N35/00603",\n    "first": false,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "G01N2035/00326",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "G01N2035/0465",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "G01N35/026",\n    "first": true,\n    "inventive": true,\n    "tree": []\n  },\n  {\n    "code": "Y10T436/11",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T436/113332",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  },\n  {\n    "code": "Y10T436/115831",\n    "first": false,\n    "inventive": false,\n    "tree": []\n  }\n]', 'fi': '[]', 'fterm': '[]', 'locarno': '[]', 'citation': '[]', 'parent': '[]', 'child': '[]', 'entity_status': '', 'art_unit': ''}]

--------------------------------------------------
Table full name: PATENTS.PATENTS.CPC_DEFINITION
Column name: status Type: TEXT
Column name: precedenceLimitingReferences Type: VARIANT
Column name: rules Type: VARIANT
Column name: childGroups Type: VARIANT
Column name: scopeLimitingReferences Type: VARIANT
Column name: level Type: FLOAT
Column name: titlePart Type: VARIANT
Column name: residualReferences Type: VARIANT
Column name: definition Type: VARIANT
Column name: breakdownCode Type: BOOLEAN
Column name: limitingReferences Type: VARIANT
Column name: glossary Type: VARIANT
Column name: applicationReferences Type: VARIANT
Column name: notAllocatable Type: BOOLEAN
Column name: titleFull Type: TEXT
Column name: dateRevised Type: FLOAT
Column name: informativeReferences Type: VARIANT
Column name: symbol Type: TEXT
Column name: synonyms Type: VARIANT
Column name: children Type: VARIANT
Column name: parents Type: VARIANT
Column name: ipcConcordant Type: TEXT
Sample rows:
[{'applicationReferences': '[]', 'breakdownCode': True, 'childGroups': '[]', 'children': '[]', 'dateRevised': 20130101.0, 'definition': '[]', 'glossary': '[]', 'informativeReferences': '[]', 'ipcConcordant': 'CPCONLY', 'level': 9.0, 'limitingReferences': '[]', 'notAllocatable': False, 'parents': '[\n  "A01K2227/10",\n  "A01K2227/00",\n  "A01K",\n  "A01",\n  "A"\n]', 'precedenceLimitingReferences': '[]', 'residualReferences': '[]', 'rules': '[]', 'scopeLimitingReferences': '[]', 'status': 'published', 'symbol': 'A01K2227/108', 'synonyms': '[]', 'titleFull': 'Swine', 'titlePart': '[\n  "Swine"\n]'}, {'applicationReferences': '[]', 'breakdownCode': True, 'childGroups': '[]', 'children': '[]', 'dateRevised': 20130101.0, 'definition': '[]', 'glossary': '[]', 'informativeReferences': '[]', 'ipcConcordant': 'CPCONLY', 'level': 9.0, 'limitingReferences': '[]', 'notAllocatable': False, 'parents': '[\n  "A01K2227/10",\n  "A01K2227/00",\n  "A01K",\n  "A01",\n  "A"\n]', 'precedenceLimitingReferences': '[]', 'residualReferences': '[]', 'rules': '[]', 'scopeLimitingReferences': '[]', 'status': 'published', 'symbol': 'A01K2227/105', 'synonyms': '[]', 'titleFull': 'Murine', 'titlePart': '[\n  "Murine"\n]'}, {'applicationReferences': '[]', 'breakdownCode': True, 'childGroups': '[]', 'children': '[]', 'dateRevised': 20130101.0, 'definition': '[]', 'glossary': '[]', 'informativeReferences': '[]', 'ipcConcordant': 'CPCONLY', 'level': 9.0, 'limitingReferences': '[]', 'notAllocatable': False, 'parents': '[\n  "A01K2227/10",\n  "A01K2227/00",\n  "A01K",\n  "A01",\n  "A"\n]', 'precedenceLimitingReferences': '[]', 'residualReferences': '[]', 'rules': '[]', 'scopeLimitingReferences': '[]', 'status': 'published', 'symbol': 'A01K2227/107', 'synonyms': '[]', 'titleFull': 'Rabbit', 'titlePart': '[\n  "Rabbit"\n]'}, {'applicationReferences': '[]', 'breakdownCode': True, 'childGroups': '[]', 'children': '[]', 'dateRevised': 20130101.0, 'definition': '[]', 'glossary': '[]', 'informativeReferences': '[]', 'ipcConcordant': 'CPCONLY', 'level': 9.0, 'limitingReferences': '[]', 'notAllocatable': False, 'parents': '[\n  "A01K2267/02",\n  "A01K2267/00",\n  "A01K",\n  "A01",\n  "A"\n]', 'precedenceLimitingReferences': '[]', 'residualReferences': '[]', 'rules': '[]', 'scopeLimitingReferences': '[]', 'status': 'published', 'symbol': 'A01K2267/025', 'synonyms': '[]', 'titleFull': 'Animal producing cells or organs for transplantation', 'titlePart': '[\n  "Animal producing cells or organs for transplantation"\n]'}, {'applicationReferences': '[]', 'breakdownCode': True, 'childGroups': '[]', 'children': '[\n  "A01K2267/0312",\n  "A01K2267/0318",\n  "A01K2267/0325"\n]', 'dateRevised': 20130101.0, 'definition': '[]', 'glossary': '[]', 'informativeReferences': '[]', 'ipcConcordant': 'CPCONLY', 'level': 9.0, 'limitingReferences': '[]', 'notAllocatable': False, 'parents': '[\n  "A01K2267/03",\n  "A01K2267/00",\n  "A01K",\n  "A01",\n  "A"\n]', 'precedenceLimitingReferences': '[]', 'residualReferences': '[]', 'rules': '[]', 'scopeLimitingReferences': '[]', 'status': 'published', 'symbol': 'A01K2267/0306', 'synonyms': '[]', 'titleFull': 'Animal model for genetic diseases', 'titlePart': '[\n  "Animal model for genetic diseases"\n]'}]

--------------------------------------------------
External knowledge that might be helpful: 
None
The table structure information is ({database name: {schema name: [table name]}}): 
{'PATENTS': {'PATENTS': ['DISCLOSURES_13', 'PUBLICATIONS', 'CPC_DEFINITION']}}

Some few-shot examples after column exploration may be helpful:
Query:
--Description: 1) Peek at a few publications that have a non-empty filing date and application number
SELECT 
  "publication_number",
  "application_number",
  "filing_date",
  "cpc"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "application_number" <> ''
  AND "filing_date" IS NOT NULL
LIMIT 20;
Answer:
publication_number,application_number,filing_date,cpc
CR-5634-A,CR-5634-A,19971015,[]
CR-5990-A,CR-5990-A,19990322,[]
FI-429-A,FI-429D-A,0,[]
HK-6083-A,HK-6083-A,19830217,"[
  {
    ""code"": ""H02M5/00"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  }
]"
HU-T52763-A,HU-7590-A,19900109,"[
  {
    ""code"": ""A01N47/36"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""C07D521/00"",
    ""first"": true,
    ""inventive"": true,
   
Query:
--Description: 2) Show distinct values that appear in the “application_kind” column
SELECT DISTINCT 
  "application_kind"
FROM PATENTS.PATENTS.PUBLICATIONS
LIMIT 20;
Answer:
application_kind
D
U
C
P
B
F
V
""
A
T
W
Q
K
L
Query:
--Description: 3) Inspect the structure of the JSON CPC array for some records
SELECT 
  p."publication_number",
  f.value AS "cpc_element"
FROM PATENTS.PATENTS.PUBLICATIONS p,
     LATERAL FLATTEN(input => p."cpc") f
WHERE p."application_number" <> ''
  AND p."filing_date" IS NOT NULL
LIMIT 20;
Answer:
publication_number,cpc_element
CN-2669058-Y,"{
  ""code"": ""F24F1/48"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
CN-2669058-Y,"{
  ""code"": ""F24F1/38"",
  ""first"": true,
  ""inventive"": true,
  ""tree"": []
}"
CN-2746550-Y,"{
  ""code"": ""Y02E60/12"",
  ""first"": false,
  ""inventive"": false,
  ""tree"": []
}"
CN-201124248-Y,"{
  ""code"": ""Y02P70/10"",
  ""first"": false,
  ""inventive"": false,
  ""tree"": []
}"
IT-BO20010459-A0,"{
  ""code"": ""B65D41/485"",
Query:
--Description: 5) Examine the range of “level” values that exist in the CPC definition table
SELECT DISTINCT 
  "level"
FROM PATENTS.PATENTS.CPC_DEFINITION
ORDER BY "level"
LIMIT 20
Answer:
level
2.0
4.0
5.0
7.0
8.0
9.0
10.0
11.0
12.0
13.0
14.0
15.0
16.0
17.0
18.0
19.0
Query:
--Description: 6) Display some CPC groups that live at hierarchy level 5 together with their titles
SELECT 
  "symbol",
  "titleFull"
FROM PATENTS.PATENTS.CPC_DEFINITION
WHERE "level" = 5
LIMIT 20
Answer:
symbol,titleFull
A01H,NEW PLANTS OR NON-TRANSGENIC PROCESSES FOR OBTAINING THEM; PLANT REPRODUCTION BY TISSUE CULTURE TECHNIQUES
A01F,PROCESSING OF HARVESTED PRODUCE; HAY OR STRAW PRESSES; DEVICES FOR STORING AGRICULTURAL OR HORTICULTURAL PRODUCE
A01C,PLANTING; SOWING; FERTILISING
A01G,"HORTICULTURE; CULTIVATION OF VEGETABLES, FLOWERS, RICE, FRUIT, VINES, HOPS OR SEAWEED; FORESTRY; WATERING"
A01N,"PRESERVATION OF BODIES OF HUMANS OR ANIMALS OR PLANTS OR PARTS THEREOF; BIOCIDES, e.g. AS DISI
Query:
--Description: 7) Join the first-CPC-code list to the CPC definition table to bring in the full title
SELECT 
  first_cpc."first_cpc_code",
  def."titleFull"
FROM (
      SELECT 
        p."publication_number",
        f.value:"code"::STRING AS "first_cpc_code"
      FROM PATENTS.PATENTS.PUBLICATIONS AS p,
           LATERAL FLATTEN(INPUT => p."cpc") AS f
      WHERE f."INDEX" = 0
        AND p."application_number" <> ''
        AND p."filing_date" IS NOT NULL
     ) AS first_cpc
JOIN PATENTS.PATENTS.CPC_DEFINITION AS def
  ON def."symbol" = first_cpc."first_cpc_code"
LIMIT 20
Answer:
first_cpc_code,titleFull
G06N10/40,"Physical realisations or architectures of quantum processors or components for manipulating qubits, e.g. qubit coupling or qubit control"
B05B15/625,"Arrangements for supporting spraying apparatus, e.g. suction cups designed to be placed on the ground"
Y02E60/10,Energy storage using batteries
F01D5/20,Specially-shaped blade tips to seal space between tips and stator
H04L5/006,"Quality of the received signal, e.g. BER, SNR, water filling"
C07K2319/00,Fusi
Task: Identify the CPC technology areas with the highest exponential moving average of patent filings each year (with a smoothing factor of 0.2), considering only the first CPC code for each patent that has a valid filing date and a non-empty application number, and report the full CPC title along with the best year associated with the highest exponential moving average for each CPC group at level 5.

Please think step by step and answer only one complete SQL in snowflake dialect in ```sql``` format.
SQL usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: The table structure information is ({database name: {schema name: [table name]}}): 
{'PATENTS': {'PATENTS': ['DISCLOSURES_13', 'PUBLICATIONS', 'CPC_DEFINITION']}}

When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
If the task description does not specify the number of decimal places, retain all decimals to four places.

[Self-refine]
2025-05-07 01:59:36 - Thread-14 (execute) - INFO - [Try to run SQL in self-refine]
```sql
/* -----------------------------------------------------------
   1)  Get the first CPC code of every publication that has
       (i) a non–empty application number and
       (ii) a valid filing_date
   2)  Collapse the CPC code to its level-5 “sub-class” 
       (first 4 characters, e.g. “H04L”)
   3)  Count filings per (sub-class , year)
   4)  For every sub-class, walk through the years in ascending
       order and compute an Exponential Moving Average (EMA)
       with smoothing factor α = 0.2
            EMAt = α·valuet + (1-α)·EMAt-1
       (EMA for the first year is the first-year count itself)
   5)  Keep, for each sub-class, the year in which its EMA is
       highest
   6)  Join to CPC_DEFINITION (level 5) to expose the full CPC
       title and show the result ordered by the maximum EMA
 ----------------------------------------------------------- */
WITH
/* Step-1 & 2 ------------------------------------------------*/
yearly_counts AS (
    SELECT
        SUBSTR( f.value : "code" :: STRING , 1 , 4 )      AS subclass,     -- level-5 CPC group
        FLOOR( p."filing_date" / 10000 )                  AS year ,        -- YYYY
        COUNT( DISTINCT p."publication_number" )          AS filings
    FROM PATENTS.PATENTS.PUBLICATIONS               AS p
    ,    LATERAL FLATTEN( INPUT => p."cpc" )        AS f
    WHERE f."index" = 0                               -- first CPC code
      AND p."application_number" <> ''
      AND p."filing_date"       IS NOT NULL
      AND p."filing_date"       <> 0
    GROUP BY subclass , year
),

/* Step-3 ----------------------------------------------------*/
ordered_counts AS (
    SELECT
        subclass ,
        year ,
        filings ,
        ROW_NUMBER() OVER ( PARTITION BY subclass ORDER BY year ) AS rn
    FROM yearly_counts
),

/* Step-4 ----------------------------------------------------*/
RECURSIVE ema_calc AS (
    /* anchor – first year for every subclass */
    SELECT
        subclass ,
        year ,
        filings ,
        filings :: FLOAT                                      AS ema ,   -- EMA0 = value0
        rn
    FROM ordered_counts
    WHERE rn = 1
    
    UNION ALL
    
    /* recursive part – next year for the same subclass */
    SELECT
        o.subclass ,
        o.year ,
        o.filings ,
        0.2 * o.filings  + 0.8 * e.ema                        AS ema ,
        o.rn
    FROM ordered_counts AS o
    JOIN ema_calc     AS e
      ON  o.subclass = e.subclass
      AND o.rn       = e.rn + 1          -- next year in sequence
),

/* Step-5 ----------------------------------------------------*/
best_years AS (
    SELECT
        subclass ,
        year          AS best_year ,
        ema           AS max_ema ,
        ROW_NUMBER()  OVER ( PARTITION BY subclass ORDER BY ema DESC ) AS rk
    FROM ema_calc
)

/* Step-6 ----------------------------------------------------*/
SELECT
    b.subclass                                   AS "cpc_group" ,
    d."titleFull"                                AS "cpc_title" ,
    b.best_year                                  AS "best_year" ,
    b.max_ema                                    AS "highest_ema"
FROM best_years          AS b
LEFT JOIN PATENTS.PATENTS.CPC_DEFINITION AS d
       ON d."symbol" = b.subclass
      AND d."level"  = 5
WHERE b.rk = 1                      -- keep row with max EMA per group
ORDER BY b.max_ema DESC NULLS LAST;
```
[Try to run SQL in self-refine]
2025-05-07 01:59:37 - Thread-14 (execute) - INFO - itercount: 1
2025-05-07 01:59:37 - Thread-14 (execute) - INFO - [Self-refine]
Input sql:
/* -----------------------------------------------------------
   1)  Get the first CPC code of every publication that has
       (i) a non–empty application number and
       (ii) a valid filing_date
   2)  Collapse the CPC code to its level-5 “sub-class” 
       (first 4 characters, e.g. “H04L”)
   3)  Count filings per (sub-class , year)
   4)  For every sub-class, walk through the years in ascending
       order and compute an Exponential Moving Average (EMA)
       with smoothing factor α = 0.2
            EMAt = α·valuet + (1-α)·EMAt-1
       (EMA for the first year is the first-year count itself)
   5)  Keep, for each sub-class, the year in which its EMA is
       highest
   6)  Join to CPC_DEFINITION (level 5) to expose the full CPC
       title and show the result ordered by the maximum EMA
 ----------------------------------------------------------- */
WITH
/* Step-1 & 2 ------------------------------------------------*/
yearly_counts AS (
    SELECT
        SUBSTR( f.value : "code" :: STRING , 1 , 4 )      AS subclass,     -- level-5 CPC group
        FLOOR( p."filing_date" / 10000 )                  AS year ,        -- YYYY
        COUNT( DISTINCT p."publication_number" )          AS filings
    FROM PATENTS.PATENTS.PUBLICATIONS               AS p
    ,    LATERAL FLATTEN( INPUT => p."cpc" )        AS f
    WHERE f."index" = 0                               -- first CPC code
      AND p."application_number" <> ''
      AND p."filing_date"       IS NOT NULL
      AND p."filing_date"       <> 0
    GROUP BY subclass , year
),

/* Step-3 ----------------------------------------------------*/
ordered_counts AS (
    SELECT
        subclass ,
        year ,
        filings ,
        ROW_NUMBER() OVER ( PARTITION BY subclass ORDER BY year ) AS rn
    FROM yearly_counts
),

/* Step-4 ----------------------------------------------------*/
RECURSIVE ema_calc AS (
    /* anchor – first year for every subclass */
    SELECT
        subclass ,
        year ,
        filings ,
        filings :: FLOAT                                      AS ema ,   -- EMA0 = value0
        rn
    FROM ordered_counts
    WHERE rn = 1
    
    UNION ALL
    
    /* recursive part – next year for the same subclass */
    SELECT
        o.subclass ,
        o.year ,
        o.filings ,
        0.2 * o.filings  + 0.8 * e.ema                        AS ema ,
        o.rn
    FROM ordered_counts AS o
    JOIN ema_calc     AS e
      ON  o.subclass = e.subclass
      AND o.rn       = e.rn + 1          -- next year in sequence
),

/* Step-5 ----------------------------------------------------*/
best_years AS (
    SELECT
        subclass ,
        year          AS best_year ,
        ema           AS max_ema ,
        ROW_NUMBER()  OVER ( PARTITION BY subclass ORDER BY ema DESC ) AS rk
    FROM ema_calc
)

/* Step-6 ----------------------------------------------------*/
SELECT
    b.subclass                                   AS "cpc_group" ,
    d."titleFull"                                AS "cpc_title" ,
    b.best_year                                  AS "best_year" ,
    b.max_ema                                    AS "highest_ema"
FROM best_years          AS b
LEFT JOIN PATENTS.PATENTS.CPC_DEFINITION AS d
       ON d."symbol" = b.subclass
      AND d."level"  = 5
WHERE b.rk = 1                      -- keep row with max EMA per group
ORDER BY b.max_ema DESC NULLS LAST;
The error information is:
{'status': 'error', 'error_msg': "##ERROR##001003 (42000): SQL compilation error:\nsyntax error line 28 at position 10 unexpected 'ema_calc'."}
Please correct it and output only 1 complete SQL query.
[Self-refine]
2025-05-07 02:01:34 - Thread-14 (execute) - INFO - [Try to run SQL in self-refine]
```sql
/* -----------------------------------------------------------
   Identify CPC level-5 technology areas with the highest
   exponential moving average (α = 0.2) of yearly filings.
------------------------------------------------------------*/
WITH RECURSIVE
/* Step-1 & 2 : yearly filing counts per CPC level-5 group */
yearly_counts AS (
    SELECT
        SUBSTR( f.value:"code"::STRING , 1 , 4 )  AS subclass ,               -- CPC level-5 (e.g. H04L)
        FLOOR( p."filing_date" / 10000 )          AS year ,                   -- YYYY from YYYYMMDD
        COUNT( DISTINCT p."publication_number" )  AS filings
    FROM PATENTS.PATENTS.PUBLICATIONS  AS p
         , LATERAL FLATTEN( INPUT => p."cpc" ) AS f
    WHERE f."INDEX" = 0                    -- use only the first CPC code
      AND p."application_number" <> ''
      AND p."filing_date" IS NOT NULL
      AND p."filing_date" <> 0
    GROUP BY subclass , year
),

/* Step-3 : add row numbers per subclass to order years */
ordered_counts AS (
    SELECT
        subclass ,
        year ,
        filings ,
        ROW_NUMBER() OVER ( PARTITION BY subclass ORDER BY year ) AS rn
    FROM yearly_counts
),

/* Step-4 : recursive EMA computation (α = 0.2)                */
ema_calc AS (
    /* anchor rows – first year per subclass */
    SELECT
        subclass ,
        year ,
        filings ,
        CAST(filings AS FLOAT)                AS ema ,   -- EMA₀ = value₀
        rn
    FROM ordered_counts
    WHERE rn = 1

    UNION ALL

    /* recursive rows – follow-up years */
    SELECT
        o.subclass ,
        o.year ,
        o.filings ,
        0.2 * o.filings + 0.8 * e.ema         AS ema ,
        o.rn
    FROM ordered_counts AS o
    JOIN ema_calc     AS e
      ON  o.subclass = e.subclass
     AND  o.rn       = e.rn + 1               -- next chronological year
),

/* Step-5 : pick the year with maximum EMA per subclass        */
best_years AS (
    SELECT
        subclass ,
        year        AS best_year ,
        ema         AS max_ema ,
        ROW_NUMBER() OVER ( PARTITION BY subclass ORDER BY ema DESC ) AS rk
    FROM ema_calc
)

/* Step-6 : attach CPC titles and return results               */
SELECT
    b.subclass                                AS "cpc_group",
    d."titleFull"                             AS "cpc_title",
    b.best_year                               AS "best_year",
    b.max_ema                                 AS "highest_ema"
FROM best_years AS b
LEFT JOIN PATENTS.PATENTS.CPC_DEFINITION AS d
       ON d."symbol" = b.subclass
      AND d."level"  = 5
WHERE b.rk = 1                                -- keep row with highest EMA
ORDER BY b.max_ema DESC NULLS LAST;
```
[Try to run SQL in self-refine]
2025-05-07 02:01:56 - Thread-14 (execute) - INFO - Total iteration counts: 1
