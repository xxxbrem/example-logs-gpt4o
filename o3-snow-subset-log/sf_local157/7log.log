2025-05-07 07:06:18 - Thread-648 (execute) - INFO - [Exploration]
```sql
--Description: Inspect raw data (ticker, market_date, volume) for August 1 – 10 2021  
SELECT "ticker",
       "market_date",
       "volume"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
ORDER BY "ticker", "market_date"
LIMIT 20;
```

```sql
--Description: List all distinct tickers that traded between Aug 1 and Aug 10 2021  
SELECT DISTINCT "ticker"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
LIMIT 20;
```

```sql
--Description: Review the different text patterns that appear in the volume column  
SELECT DISTINCT "volume"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
ORDER BY "volume"
LIMIT 20;
```

```sql
--Description: Convert the volume strings to pure numeric amounts (K → *1,000, M → *1,000,000, ‘-’→0)  
SELECT "ticker",
       "market_date",
       "volume",
       CASE
            WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K',''))*1000
            WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M',''))*1000000
            WHEN "volume" = '-'                    THEN 0
            ELSE TRY_TO_NUMBER("volume")
       END AS "vol_numeric"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
ORDER BY "ticker", "market_date"
LIMIT 20;
```

```sql
--Description: Show rows where converted volume equals zero (helps verify the ‘-’ handling)  
SELECT *
FROM (
      SELECT "ticker",
             "market_date",
             CASE
                  WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K',''))*1000
                  WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M',''))*1000000
                  WHEN "volume" = '-'                    THEN 0
                  ELSE TRY_TO_NUMBER("volume")
             END AS "vol_numeric"
      FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
      WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
) v
WHERE "vol_numeric" = 0
LIMIT 20;
```

```sql
--Description: Add a row number per ticker and date to aid in locating prior non-zero volume days  
SELECT "ticker",
       "market_date",
       CASE
            WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K',''))*1000
            WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M',''))*1000000
            WHEN "volume" = '-'                    THEN 0
            ELSE TRY_TO_NUMBER("volume")
       END AS "vol_numeric",
       ROW_NUMBER() OVER (PARTITION BY "ticker" ORDER BY TO_DATE("market_date",'DD-MM-YYYY')) AS "rn"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
ORDER BY "ticker", "market_date"
LIMIT 20;
```

```sql
--Description: Calculate previous non-zero volume for each ticker using the IGNORE NULLS option  
SELECT "ticker",
       "market_date",
       "vol_numeric",
       LAG(NULLIF("vol_numeric",0)) IGNORE NULLS
           OVER (PARTITION BY "ticker"
                 ORDER BY TO_DATE("market_date",'DD-MM-YYYY')) AS "prev_non_zero_vol"
FROM (
      SELECT "ticker",
             "market_date",
             CASE
                  WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K',''))*1000
                  WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M',''))*1000000
                  WHEN "volume" = '-'                    THEN 0
                  ELSE TRY_TO_NUMBER("volume")
             END AS "vol_numeric"
      FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
      WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
) v
ORDER BY "ticker", "market_date"
LIMIT 20;
```

```sql
--Description: Compute the % change in daily trading volume relative to the previous non-zero day  
SELECT "ticker",
       "market_date",
       "vol_numeric",
       "prev_non_zero_vol",
       CASE 
            WHEN "prev_non_zero_vol" IS NOT NULL AND "prev_non_zero_vol" <> 0
                 THEN 100 * ("vol_numeric" - "prev_non_zero_vol") / "prev_non_zero_vol"
       END AS "pct_change_vol"
FROM (
      SELECT "ticker",
             "market_date",
             "vol_numeric",
             LAG(NULLIF("vol_numeric",0)) IGNORE NULLS
                 OVER (PARTITION BY "ticker"
                       ORDER BY TO_DATE("market_date",'DD-MM-YYYY')) AS "prev_non_zero_vol"
      FROM (
            SELECT "ticker",
                   "market_date",
                   CASE
                        WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K',''))*1000
                        WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M',''))*1000000
                        WHEN "volume" = '-'                    THEN 0
                        ELSE TRY_TO_NUMBER("volume")
                   END AS "vol_numeric"
            FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
            WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
      )
) t
ORDER BY "ticker", "market_date"
LIMIT 20;
```

```sql
--Description: Display only those records where a % change was computed (i.e., we have a prior non-zero volume)  
SELECT "ticker",
       "market_date",
       "vol_numeric",
       "prev_non_zero_vol",
       "pct_change_vol"
FROM (
      SELECT "ticker",
             "market_date",
             "vol_numeric",
             LAG(NULLIF("vol_numeric",0)) IGNORE NULLS
                 OVER (PARTITION BY "ticker"
                       ORDER BY TO_DATE("market_date",'DD-MM-YYYY')) AS "prev_non_zero_vol"
      FROM (
            SELECT "ticker",
                   "market_date",
                   CASE
                        WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K',''))*1000
                        WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M',''))*1000000
                        WHEN "volume" = '-'                    THEN 0
                        ELSE TRY_TO_NUMBER("volume")
                   END AS "vol_numeric"
            FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
            WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
      )
) s
WHERE "prev_non_zero_vol" IS NOT NULL
ORDER BY "ticker", "market_date"
LIMIT 20;
```

```sql
--Description: Produce the final ordered list (all rows Aug 1 – 10 2021 with % change where calculable)  
SELECT "ticker",
       "market_date",
       "vol_numeric"                        AS "volume_numeric",
       ROUND("pct_change_vol",2)            AS "pct_change_vol"
FROM (
      SELECT "ticker",
             "market_date",
             "vol_numeric",
             LAG(NULLIF("vol_numeric",0)) IGNORE NULLS
                 OVER (PARTITION BY "ticker"
                       ORDER BY TO_DATE("market_date",'DD-MM-YYYY')) AS "prev_non_zero_vol",
             CASE 
                  WHEN LAG(NULLIF("vol_numeric",0)) IGNORE NULLS OVER
                         (PARTITION BY "ticker" ORDER BY TO_DATE("market_date",'DD-MM-YYYY')) IS NOT NULL
                       AND LAG(NULLIF("vol_numeric",0)) IGNORE NULLS OVER
                         (PARTITION BY "ticker" ORDER BY TO_DATE("market_date",'DD-MM-YYYY')) <> 0
                       THEN 100 * ("vol_numeric" - LAG(NULLIF("vol_numeric",0)) IGNORE NULLS OVER
                         (PARTITION BY "ticker" ORDER BY TO_DATE("market_date",'DD-MM-YYYY')))
                         / LAG(NULLIF("vol_numeric",0)) IGNORE NULLS OVER
                         (PARTITION BY "ticker" ORDER BY TO_DATE("market_date",'DD-MM-YYYY'))
             END AS "pct_change_vol"
      FROM (
            SELECT "ticker",
                   "market_date",
                   CASE
                        WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K',''))*1000
                        WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M',''))*1000000
                        WHEN "volume" = '-'                    THEN 0
                        ELSE TRY_TO_NUMBER("volume")
                   END AS "vol_numeric"
            FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
            WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
      )
) final
ORDER BY "ticker", TO_DATE("market_date",'DD-MM-YYYY')
LIMIT 20;
```
[Exploration]
2025-05-07 07:06:18 - Thread-648 (execute) - INFO - [Try to execute]
--Description: Inspect raw data (ticker, market_date, volume) for August 1 – 10 2021  
SELECT "ticker",
       "market_date",
       "volume"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
ORDER BY "ticker", "market_date"
LIMIT 20;
[Try to execute]
2025-05-07 07:06:20 - Thread-648 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Inspect raw data (ticker, market_date, volume) for August 1 – 10 2021  
SELECT "ticker",
       "market_date",
       "volume"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
ORDER BY "ticker", "market_date"
LIMIT 20;
Results:
ticker,market_date,volume
BTC,01-08-2021,80.33K
BTC,01-09-2017,102.01K
BTC,01-09-2018,3.52M
BTC,01-09-2019,322.66K
BTC,01-09-2020,580.69K
BTC,01-10-2017,60.58K
BTC,01-10-2018,9.19M
BTC,01-10-2019,533.95K
BTC,01-10-2020,95.33K
BTC,01-11-2017,133.19K
BTC,01-11-2018,124.16K
BTC,01-11-2019,689.65K
BTC,01-11-2020,51.71K
BTC,01-12-2017,131.92K
BTC,01-12-2018,316.30K
BTC,01-12-2019,777.00K

[Successfully executed]
2025-05-07 07:06:20 - Thread-648 (execute) - INFO - [Try to execute]
--Description: List all distinct tickers that traded between Aug 1 and Aug 10 2021  
SELECT DISTINCT "ticker"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
LIMIT 20;
[Try to execute]
2025-05-07 07:06:21 - Thread-648 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: List all distinct tickers that traded between Aug 1 and Aug 10 2021  
SELECT DISTINCT "ticker"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
LIMIT 20;
Results:
ticker
ETH
BTC

[Successfully executed]
2025-05-07 07:06:21 - Thread-648 (execute) - INFO - [Try to execute]
--Description: Review the different text patterns that appear in the volume column  
SELECT DISTINCT "volume"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
ORDER BY "volume"
LIMIT 20;
[Try to execute]
2025-05-07 07:06:21 - Thread-648 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Review the different text patterns that appear in the volume column  
SELECT DISTINCT "volume"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
ORDER BY "volume"
LIMIT 20;
Results:
volume
0.26K
1.00M
1.01M
1.02M
1.04M
1.05M
1.06M
1.07M
1.08M
1.09M
1.11M
1.12M
1.13M
1.14M
1.15M
1.16M
1.17M
1.19M
1.20M
1.22M

[Successfully executed]
2025-05-07 07:06:21 - Thread-648 (execute) - INFO - [Try to execute]
--Description: Convert the volume strings to pure numeric amounts (K → *1,000, M → *1,000,000, ‘-’→0)  
SELECT "ticker",
       "market_date",
       "volume",
       CASE
            WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K',''))*1000
            WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M',''))*1000000
            WHEN "volume" = '-'                    THEN 0
            ELSE TRY_TO_NUMBER("volume")
       END AS "vol_numeric"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
ORDER BY "ticker", "market_date"
LIMIT 20;
[Try to execute]
2025-05-07 07:06:21 - Thread-648 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Convert the volume strings to pure numeric amounts (K → *1,000, M → *1,000,000, ‘-’→0)  
SELECT "ticker",
       "market_date",
       "volume",
       CASE
            WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K',''))*1000
            WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M',''))*1000000
            WHEN "volume" = '-'                    THEN 0
            ELSE TRY_TO_NUMBER("volume")
       END AS "vol_numeric"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
ORDER BY "ticker", "market_date"
LIMIT 20;
Results:
ticker,market_date,volume,vol_numeric
BTC,01-08-2021,80.33K,80000
BTC,01-09-2017,102.01K,102000
BTC,01-09-2018,3.52M,4000000
BTC,01-09-2019,322.66K,323000
BTC,01-09-2020,580.69K,581000
BTC,01-10-2017,60.58K,61000
BTC,01-10-2018,9.19M,9000000
BTC,01-10-2019,533.95K,534000
BTC,01-10-2020,95.33K,95000
BTC,01-11-2017,133.19K,133000
BTC,01-11-2018,124.16K,124000
BTC,01-11-2019,689.65K,690000
BTC,01-11-2020,51.71K,52000

[Successfully executed]
2025-05-07 07:06:21 - Thread-648 (execute) - INFO - [Try to execute]
--Description: Show rows where converted volume equals zero (helps verify the ‘-’ handling)  
SELECT *
FROM (
      SELECT "ticker",
             "market_date",
             CASE
                  WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K',''))*1000
                  WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M',''))*1000000
                  WHEN "volume" = '-'                    THEN 0
                  ELSE TRY_TO_NUMBER("volume")
             END AS "vol_numeric"
      FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
      WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
) v
WHERE "vol_numeric" = 0
LIMIT 20;
[Try to execute]
2025-05-07 07:06:21 - Thread-648 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Show rows where converted volume equals zero (helps verify the ‘-’ handling)  
SELECT *
FROM (
      SELECT "ticker",
             "market_date",
             CASE
                  WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K',''))*1000
                  WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M',''))*1000000
                  WHEN "volume" = '-'                    THEN 0
                  ELSE TRY_TO_NUMBER("volume")
             END AS "vol_numeric"
      FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
      WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
) v
WHERE "vol_numeric" = 0
LIMIT 20;
Results:
ticker,market_date,vol_numeric
BTC,03-08-2021,0

[Successfully executed]
2025-05-07 07:06:21 - Thread-648 (execute) - INFO - [Try to execute]
--Description: Add a row number per ticker and date to aid in locating prior non-zero volume days  
SELECT "ticker",
       "market_date",
       CASE
            WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K',''))*1000
            WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M',''))*1000000
            WHEN "volume" = '-'                    THEN 0
            ELSE TRY_TO_NUMBER("volume")
       END AS "vol_numeric",
       ROW_NUMBER() OVER (PARTITION BY "ticker" ORDER BY TO_DATE("market_date",'DD-MM-YYYY')) AS "rn"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
ORDER BY "ticker", "market_date"
LIMIT 20;
[Try to execute]
2025-05-07 07:06:22 - Thread-648 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Add a row number per ticker and date to aid in locating prior non-zero volume days  
SELECT "ticker",
       "market_date",
       CASE
            WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K',''))*1000
            WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M',''))*1000000
            WHEN "volume" = '-'                    THEN 0
            ELSE TRY_TO_NUMBER("volume")
       END AS "vol_numeric",
       ROW_NUMBER() OVER (PARTITION BY "ticker" ORDER BY TO_DATE("market_date",'DD-MM-YYYY')) AS "rn"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
ORDER BY "ticker", "market_date"
LIMIT 20;
Results:
ticker,market_date,vol_numeric,rn
BTC,01-08-2021,80000,496
BTC,01-09-2017,102000,73
BTC,01-09-2018,4000000,181
BTC,01-09-2019,323000,289
BTC,01-09-2020,581000,397
BTC,01-10-2017,61000,82
BTC,01-10-2018,9000000,190
BTC,01-10-2019,534000,298
BTC,01-10-2020,95000,406
BTC,01-11-2017,133000,91
BTC,01-11-2018,124000,199
BTC,01-11-2019,690000,307
BTC,01-11-2020,52000,415
BTC,01-12-2017,132000,100
BTC,01-12-2018,316000,208

[Successfully executed]
2025-05-07 07:06:22 - Thread-648 (execute) - INFO - [Try to execute]
--Description: Calculate previous non-zero volume for each ticker using the IGNORE NULLS option  
SELECT "ticker",
       "market_date",
       "vol_numeric",
       LAG(NULLIF("vol_numeric",0)) IGNORE NULLS
           OVER (PARTITION BY "ticker"
                 ORDER BY TO_DATE("market_date",'DD-MM-YYYY')) AS "prev_non_zero_vol"
FROM (
      SELECT "ticker",
             "market_date",
             CASE
                  WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K',''))*1000
                  WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M',''))*1000000
                  WHEN "volume" = '-'                    THEN 0
                  ELSE TRY_TO_NUMBER("volume")
             END AS "vol_numeric"
      FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
      WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
) v
ORDER BY "ticker", "market_date"
LIMIT 20;
[Try to execute]
2025-05-07 07:06:22 - Thread-648 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Calculate previous non-zero volume for each ticker using the IGNORE NULLS option  
SELECT "ticker",
       "market_date",
       "vol_numeric",
       LAG(NULLIF("vol_numeric",0)) IGNORE NULLS
           OVER (PARTITION BY "ticker"
                 ORDER BY TO_DATE("market_date",'DD-MM-YYYY')) AS "prev_non_zero_vol"
FROM (
      SELECT "ticker",
             "market_date",
             CASE
                  WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K',''))*1000
                  WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M',''))*1000000
                  WHEN "volume" = '-'                    THEN 0
                  ELSE TRY_TO_NUMBER("volume")
             END AS "vol_numeric"
      FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
      WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
) v
ORDER BY "ticker", "market_date"
LIMIT 20;
Results:
ticker,market_date,vol_numeric,prev_non_zero_vol
BTC,01-08-2021,80000,51000
BTC,01-09-2017,102000,71000
BTC,01-09-2018,4000000,299000
BTC,01-09-2019,323000,571000
BTC,01-09-2020,581000,564000
BTC,01-10-2017,61000,77000
BTC,01-10-2018,9000000,3000000
BTC,01-10-2019,534000,474000
BTC,01-10-2020,95000,71000
BTC,01-11-2017,133000,110000
BTC,01-11-2018,124000,81000
BTC,01-11-2019,690000,636000
BTC,01-11-2020,52000,71000
BTC,01-12-2017,132000,127000

[Successfully executed]
2025-05-07 07:06:22 - Thread-648 (execute) - INFO - [Try to execute]
--Description: Compute the % change in daily trading volume relative to the previous non-zero day  
SELECT "ticker",
       "market_date",
       "vol_numeric",
       "prev_non_zero_vol",
       CASE 
            WHEN "prev_non_zero_vol" IS NOT NULL AND "prev_non_zero_vol" <> 0
                 THEN 100 * ("vol_numeric" - "prev_non_zero_vol") / "prev_non_zero_vol"
       END AS "pct_change_vol"
FROM (
      SELECT "ticker",
             "market_date",
             "vol_numeric",
             LAG(NULLIF("vol_numeric",0)) IGNORE NULLS
                 OVER (PARTITION BY "ticker"
                       ORDER BY TO_DATE("market_date",'DD-MM-YYYY')) AS "prev_non_zero_vol"
      FROM (
            SELECT "ticker",
                   "market_date",
                   CASE
                        WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K',''))*1000
                        WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M',''))*1000000
                        WHEN "volume" = '-'                    THEN 0
                        ELSE TRY_TO_NUMBER("volume")
                   END AS "vol_numeric"
            FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
            WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
      )
) t
ORDER BY "ticker", "market_date"
LIMIT 20;
[Try to execute]
2025-05-07 07:06:22 - Thread-648 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Compute the % change in daily trading volume relative to the previous non-zero day  
SELECT "ticker",
       "market_date",
       "vol_numeric",
       "prev_non_zero_vol",
       CASE 
            WHEN "prev_non_zero_vol" IS NOT NULL AND "prev_non_zero_vol" <> 0
                 THEN 100 * ("vol_numeric" - "prev_non_zero_vol") / "prev_non_zero_vol"
       END AS "pct_change_vol"
FROM (
      SELECT "ticker",
             "market_date",
             "vol_numeric",
             LAG(NULLIF("vol_numeric",0)) IGNORE NULLS
                 OVER (PARTITION BY "ticker"
                       ORDER BY TO_DATE("market_date",'DD-MM-YYYY')) AS "prev_non_zero_vol"
      FROM (
            SELECT "ticker",
                   "market_date",
                   CASE
                        WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K',''))*1000
                        WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M',''))*1000000
                        WHEN "volume" = '-'                    THEN 0
                        ELSE TRY_TO_NUMBER("volume")
                   END AS "vol_numeric"
            FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
            WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
      )
) t
ORDER BY "ticker", "market_date"
LIMIT 20;
Results:
ticker,market_date,vol_numeric,prev_non_zero_vol,pct_change_vol
BTC,01-08-2021,80000,51000,56.862745
BTC,01-09-2017,102000,71000,43.661972
BTC,01-09-2018,4000000,299000,1237.792642
BTC,01-09-2019,323000,571000,-43.432574
BTC,01-09-2020,581000,564000,3.014184
BTC,01-10-2017,61000,77000,-20.779221
BTC,01-10-2018,9000000,3000000,200.000000
BTC,01-10-2019,534000,474000,12.658228
BTC,01-10-2020,95000,71000,33.802817

[Successfully executed]
2025-05-07 07:06:22 - Thread-648 (execute) - INFO - [Try to execute]
--Description: Display only those records where a % change was computed (i.e., we have a prior non-zero volume)  
SELECT "ticker",
       "market_date",
       "vol_numeric",
       "prev_non_zero_vol",
       "pct_change_vol"
FROM (
      SELECT "ticker",
             "market_date",
             "vol_numeric",
             LAG(NULLIF("vol_numeric",0)) IGNORE NULLS
                 OVER (PARTITION BY "ticker"
                       ORDER BY TO_DATE("market_date",'DD-MM-YYYY')) AS "prev_non_zero_vol"
      FROM (
            SELECT "ticker",
                   "market_date",
                   CASE
                        WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K',''))*1000
                        WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M',''))*1000000
                        WHEN "volume" = '-'                    THEN 0
                        ELSE TRY_TO_NUMBER("volume")
                   END AS "vol_numeric"
            FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
            WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
      )
) s
WHERE "prev_non_zero_vol" IS NOT NULL
ORDER BY "ticker", "market_date"
LIMIT 20;
[Try to execute]
2025-05-07 07:06:23 - Thread-648 (execute) - INFO - [Error occurred]
{'status': 'error', 'error_msg': '##ERROR##000904 (42000): SQL compilation error: error line 5 at position 7\ninvalid identifier \'"pct_change_vol"\''}
[Error occurred]
2025-05-07 07:08:44 - Thread-648 (execute) - INFO - [Corrected SQL]
```sql
--Description: Daily % change in trading volume for each ticker (Aug-01–Aug-10 2021)
--             
-- 1️⃣  Convert text “volume” to a numeric value:
--        • ‘12.3K’ → 12 300             (×1 000)
--        • ‘4.5M’  → 4 500 000          (×1 000 000)
--        • ‘-’     → 0
-- 
-- 2️⃣  For every ticker, order by true calendar date (TO_DATE on DD-MM-YYYY text).
-- 
-- 3️⃣  Use LAG … IGNORE NULLS on the numeric volume, after turning zeros into NULL
--      via NULLIF(vol,0), so we fetch the most-recent non-zero volume.
-- 
-- 4️⃣  % change = 100 × (today − prev_non_zero) / prev_non_zero,
--      calculated only when a previous non-zero value exists.
-- 
-- 5️⃣  Output rows where the comparison is possible, ordered by ticker & date.
SELECT
       "ticker",
       "market_date",
       vol_numeric                                               AS "volume_numeric",
       prev_non_zero_vol,
       ROUND( 100 * (vol_numeric - prev_non_zero_vol) 
                    / prev_non_zero_vol , 2)                    AS pct_change_vol
FROM (
        SELECT
               "ticker",
               "market_date",
               /* step-1: numeric volume */
               CASE
                   WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
                   WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
                   WHEN "volume" = '-'      THEN 0
                   ELSE TRY_TO_NUMBER("volume")
               END                                              AS vol_numeric,
               /* step-3: previous non-zero volume */
               LAG( NULLIF(
                       CASE
                           WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
                           WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
                           WHEN "volume" = '-'      THEN 0
                           ELSE TRY_TO_NUMBER("volume")
                       END , 0) ) IGNORE NULLS
                   OVER (PARTITION BY "ticker"
                         ORDER BY TO_DATE("market_date",'DD-MM-YYYY'))  AS prev_non_zero_vol
        FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
        WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
) s
WHERE prev_non_zero_vol IS NOT NULL
ORDER BY "ticker", TO_DATE("market_date",'DD-MM-YYYY');
```
[Corrected SQL]
2025-05-07 07:08:44 - Thread-648 (execute) - INFO - [Results for corrected sql]
ticker,market_date,volume_numeric,PREV_NON_ZERO_VOL,PCT_CHANGE_VOL
BTC,03-01-2017,55000,65000,-15.38
BTC,04-01-2017,156000,55000,183.64
BTC,05-01-2017,240000,156000,53.85
BTC,06-01-2017,194000,240000,-19.17
BTC,07-01-2017,131000,194000,-32.47
BTC,08-01-2017,77000,131000,-41.22
BTC,09-01-2017,63000,77000,-18.18
BTC,10-01-2017,54000,63000,-14.29
BTC,02-02-2017,51000,54000,-5.56
BTC,03-02-2017,62000,51000,21.57

[Results for corrected sql]
2025-05-07 07:09:58 - Thread-648 (execute) - INFO - [Corrected other sqls]
```sql
--Description: Corrected “final ordered list” query – embeds pct_change_vol in the
--             same sub-query that the outer SELECT reads from, avoiding undefined
--             identifier errors.  Returns daily % change in trading volume for
--             Aug-01–Aug-10 2021, only where a previous non-zero volume exists.
SELECT
       "ticker",
       "market_date",
       vol_numeric                                    AS "volume_numeric",
       ROUND(pct_change_vol, 2)                      AS "pct_change_vol"
FROM (
        SELECT
               "ticker",
               "market_date",
               /* numeric volume conversion */
               CASE
                   WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
                   WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
                   WHEN "volume" = '-'      THEN 0
                   ELSE TRY_TO_NUMBER("volume")
               END                                   AS vol_numeric,
               /* previous non-zero volume */
               LAG( NULLIF(
                       CASE
                           WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
                           WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
                           WHEN "volume" = '-'      THEN 0
                           ELSE TRY_TO_NUMBER("volume")
                       END , 0) ) IGNORE NULLS
                   OVER (PARTITION BY "ticker"
                         ORDER BY TO_DATE("market_date",'DD-MM-YYYY'))  AS prev_non_zero_vol,
               /* % change calculation */
               CASE
                   WHEN LAG(NULLIF(
                              CASE
                                  WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
                                  WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
                                  WHEN "volume" = '-'      THEN 0
                                  ELSE TRY_TO_NUMBER("volume")
                              END , 0) ) IGNORE NULLS
                        OVER (PARTITION BY "ticker"
                              ORDER BY TO_DATE("market_date",'DD-MM-YYYY')) IS NOT NULL
                   THEN 100 * (
                               CASE
                                   WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
                                   WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
                                   WHEN "volume" = '-'      THEN 0
                                   ELSE TRY_TO_NUMBER("volume")
                               END
                               -
                               LAG(NULLIF(
                                       CASE
                                           WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
                                           WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
                                           WHEN "volume" = '-'      THEN 0
                                           ELSE TRY_TO_NUMBER("volume")
                                       END , 0) ) IGNORE NULLS
                                   OVER (PARTITION BY "ticker"
                                         ORDER BY TO_DATE("market_date",'DD-MM-YYYY'))
                             )
                       / LAG(NULLIF(
                               CASE
                                   WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
                                   WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
                                   WHEN "volume" = '-'      THEN 0
                                   ELSE TRY_TO_NUMBER("volume")
                               END , 0) ) IGNORE NULLS
                           OVER (PARTITION BY "ticker"
                                 ORDER BY TO_DATE("market_date",'DD-MM-YYYY'))
               END                                   AS pct_change_vol
        FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
        WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
) final
WHERE prev_non_zero_vol IS NOT NULL
ORDER BY "ticker", TO_DATE("market_date",'DD-MM-YYYY')
LIMIT 20;
```
[Corrected other sqls]
2025-05-07 07:09:58 - Thread-648 (execute) - INFO - [Successfully corrected]
Successfully corrected. SQL:
--Description: Daily % change in trading volume for each ticker (Aug-01–Aug-10 2021)
--             
-- 1️⃣  Convert text “volume” to a numeric value:
--        • ‘12.3K’ → 12 300             (×1 000)
--        • ‘4.5M’  → 4 500 000          (×1 000 000)
--        • ‘-’     → 0
-- 
-- 2️⃣  For every ticker, order by true calendar date (TO_DATE on DD-MM-YYYY text).
-- 
-- 3️⃣  Use LAG … IGNORE NULLS on the numeric volume, after turning zeros into NULL
--      via NULLIF(vol,0), so we fetch the most-recent non-zero volume.
-- 
-- 4️⃣  % change = 100 × (today − prev_non_zero) / prev_non_zero,
--      calculated only when a previous non-zero value exists.
-- 
-- 5️⃣  Output rows where the comparison is possible, ordered by ticker & date.
SELECT
       "ticker",
       "market_date",
       vol_numeric                                               AS "volume_numeric",
       prev_non_zero_vol,
       ROUND( 100 * (vol_numeric - prev_non_zero_vol) 
                    / prev_non_zero_vol , 2)                    AS pct_change_vol
FROM (
        SELECT
               "ticker",
               "market_date",
               /* step-1: numeric volume */
               CASE
                   WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
                   WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
                   WHEN "volume" = '-'      THEN 0
                   ELSE TRY_TO_NUMBER("volume")
               END                                              AS vol_numeric,
               /* step-3: previous non-zero volume */
               LAG( NULLIF(
                       CASE
                           WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
                           WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
                           WHEN "volume" = '-'      THEN 0
                           ELSE TRY_TO_NUMBER("volume")
                       END , 0) ) IGNORE NULLS
                   OVER (PARTITION BY "ticker"
                         ORDER BY TO_DATE("market_date",'DD-MM-YYYY'))  AS prev_non_zero_vol
        FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
        WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
) s
WHERE prev_non_zero_vol IS NOT NULL
ORDER BY "ticker", TO_DATE("market_date",'DD-MM-YYYY');
Results:
ticker,market_date,volume_numeric,PREV_NON_ZERO_VOL,PCT_CHANGE_VOL
BTC,03-01-2017,55000,65000,-15.38
BTC,04-01-2017,156000,55000,183.64
BTC,05-01-2017,240000,156000,53.85
BTC,06-01-2017,194000,240000,-19.17
BTC,07-01-2017,131000,194000,-32.47
BTC,08-01-2017,77000,131000,-41.22
BTC,09-01-2017,63000,77000,-18.18
BTC,10-01-2017,54000,63000,-14.29
BTC,02-02-2017,51000,54000,-5.56
BTC,03-02-2017,62000,51000,21.57

[Successfully corrected]
2025-05-07 07:09:58 - Thread-648 (execute) - INFO - [Try to execute]
--Description: Corrected “final ordered list” query – embeds pct_change_vol in the
--             same sub-query that the outer SELECT reads from, avoiding undefined
--             identifier errors.  Returns daily % change in trading volume for
--             Aug-01–Aug-10 2021, only where a previous non-zero volume exists.
SELECT
       "ticker",
       "market_date",
       vol_numeric                                    AS "volume_numeric",
       ROUND(pct_change_vol, 2)                      AS "pct_change_vol"
FROM (
        SELECT
               "ticker",
               "market_date",
               /* numeric volume conversion */
               CASE
                   WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
                   WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
                   WHEN "volume" = '-'      THEN 0
                   ELSE TRY_TO_NUMBER("volume")
               END                                   AS vol_numeric,
               /* previous non-zero volume */
               LAG( NULLIF(
                       CASE
                           WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
                           WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
                           WHEN "volume" = '-'      THEN 0
                           ELSE TRY_TO_NUMBER("volume")
                       END , 0) ) IGNORE NULLS
                   OVER (PARTITION BY "ticker"
                         ORDER BY TO_DATE("market_date",'DD-MM-YYYY'))  AS prev_non_zero_vol,
               /* % change calculation */
               CASE
                   WHEN LAG(NULLIF(
                              CASE
                                  WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
                                  WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
                                  WHEN "volume" = '-'      THEN 0
                                  ELSE TRY_TO_NUMBER("volume")
                              END , 0) ) IGNORE NULLS
                        OVER (PARTITION BY "ticker"
                              ORDER BY TO_DATE("market_date",'DD-MM-YYYY')) IS NOT NULL
                   THEN 100 * (
                               CASE
                                   WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
                                   WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
                                   WHEN "volume" = '-'      THEN 0
                                   ELSE TRY_TO_NUMBER("volume")
                               END
                               -
                               LAG(NULLIF(
                                       CASE
                                           WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
                                           WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
                                           WHEN "volume" = '-'      THEN 0
                                           ELSE TRY_TO_NUMBER("volume")
                                       END , 0) ) IGNORE NULLS
                                   OVER (PARTITION BY "ticker"
                                         ORDER BY TO_DATE("market_date",'DD-MM-YYYY'))
                             )
                       / LAG(NULLIF(
                               CASE
                                   WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
                                   WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
                                   WHEN "volume" = '-'      THEN 0
                                   ELSE TRY_TO_NUMBER("volume")
                               END , 0) ) IGNORE NULLS
                           OVER (PARTITION BY "ticker"
                                 ORDER BY TO_DATE("market_date",'DD-MM-YYYY'))
               END                                   AS pct_change_vol
        FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
        WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
) final
WHERE prev_non_zero_vol IS NOT NULL
ORDER BY "ticker", TO_DATE("market_date",'DD-MM-YYYY')
LIMIT 20
[Try to execute]
2025-05-07 07:09:59 - Thread-648 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Corrected “final ordered list” query – embeds pct_change_vol in the
--             same sub-query that the outer SELECT reads from, avoiding undefined
--             identifier errors.  Returns daily % change in trading volume for
--             Aug-01–Aug-10 2021, only where a previous non-zero volume exists.
SELECT
       "ticker",
       "market_date",
       vol_numeric                                    AS "volume_numeric",
       ROUND(pct_change_vol, 2)                      AS "pct_change_vol"
FROM (
        SELECT
               "ticker",
               "market_date",
               /* numeric volume conversion */
               CASE
                   WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
                   WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
                   WHEN "volume" = '-'      THEN 0
                   ELSE TRY_TO_NUMBER("volume")
               END                                   AS vol_numeric,
               /* previous non-zero volume */
               LAG( NULLIF(
                       CASE
                           WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
                           WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
                           WHEN "volume" = '-'      THEN 0
                           ELSE TRY_TO_NUMBER("volume")
                       END , 0) ) IGNORE NULLS
                   OVER (PARTITION BY "ticker"
                         ORDER BY TO_DATE("market_date",'DD-MM-YYYY'))  AS prev_non_zero_vol,
               /* % change calculation */
               CASE
                   WHEN LAG(NULLIF(
                              CASE
                                  WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
                                  WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
                                  WHEN "volume" = '-'      THEN 0
                                  ELSE TRY_TO_NUMBER("volume")
                              END , 0) ) IGNORE NULLS
                        OVER (PARTITION BY "ticker"
                              ORDER BY TO_DATE("market_date",'DD-MM-YYYY')) IS NOT NULL
                   THEN 100 * (
                               CASE
                                   WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
                                   WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
                                   WHEN "volume" = '-'      THEN 0
                                   ELSE TRY_TO_NUMBER("volume")
                               END
                               -
                               LAG(NULLIF(
                                       CASE
                                           WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
                                           WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
                                           WHEN "volume" = '-'      THEN 0
                                           ELSE TRY_TO_NUMBER("volume")
                                       END , 0) ) IGNORE NULLS
                                   OVER (PARTITION BY "ticker"
                                         ORDER BY TO_DATE("market_date",'DD-MM-YYYY'))
                             )
                       / LAG(NULLIF(
                               CASE
                                   WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
                                   WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
                                   WHEN "volume" = '-'      THEN 0
                                   ELSE TRY_TO_NUMBER("volume")
                               END , 0) ) IGNORE NULLS
                           OVER (PARTITION BY "ticker"
                                 ORDER BY TO_DATE("market_date",'DD-MM-YYYY'))
               END                                   AS pct_change_vol
        FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
        WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
) final
WHERE prev_non_zero_vol IS NOT NULL
ORDER BY "ticker", TO_DATE("market_date",'DD-MM-YYYY')
LIMIT 20
Results:
ticker,market_date,volume_numeric,pct_change_vol
BTC,03-01-2017,55000,-15.38
BTC,04-01-2017,156000,183.64
BTC,05-01-2017,240000,53.85
BTC,06-01-2017,194000,-19.17
BTC,07-01-2017,131000,-32.47
BTC,08-01-2017,77000,-41.22
BTC,09-01-2017,63000,-18.18
BTC,10-01-2017,54000,-14.29
BTC,02-02-2017,51000,-5.56
BTC,03-02-2017,62000,21.57
BTC,04-02-2017,39000,-37.10

[Successfully executed]
2025-05-07 07:09:59 - Thread-648 (execute) - INFO - itercount: 0
2025-05-07 07:09:59 - Thread-648 (execute) - INFO - [Self-refine]
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.INTEREST_MAP
Column name: interest_summary Type: TEXT
Column name: id Type: NUMBER
Column name: interest_name Type: TEXT
Column name: last_modified Type: TEXT
Column name: created_at Type: TEXT
Sample rows:
[{'id': 4, 'interest_name': 'Luxury Retail Researchers', 'interest_summary': 'Consumers researching luxury product reviews and gift ideas.', 'created_at': '2016-05-26 14:57:59', 'last_modified': '2018-05-23 11:30:12'}, {'id': 6, 'interest_name': 'Vacation Planners', 'interest_summary': 'Consumers reading reviews of vacation destinations and accommodations.', 'created_at': '2016-05-26 14:57:59', 'last_modified': '2018-05-23 11:30:13'}, {'id': 7, 'interest_name': 'Motorcycle Enthusiasts', 'interest_summary': 'Readers of motorcycle news and reviews.', 'created_at': '2016-05-26 14:57:59', 'last_modified': '2018-05-23 11:30:13'}, {'id': 8, 'interest_name': 'Business News Readers', 'interest_summary': 'Readers of online business news content.', 'created_at': '2016-05-26 14:57:59', 'last_modified': '2018-05-23 11:30:12'}, {'id': 13, 'interest_name': 'Advertising Professionals', 'interest_summary': 'People who read advertising industry news.', 'created_at': '2016-05-26 14:57:59', 'last_modified': '2018-05-23 11:30:12'}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.INTEREST_METRICS
Column name: ranking Type: NUMBER
Column name: percentile_ranking Type: FLOAT
Column name: month_year Type: TEXT
Column name: interest_id Type: FLOAT
Column name: composition Type: FLOAT
Column name: _month Type: FLOAT
Column name: index_value Type: FLOAT
Column name: _year Type: FLOAT
Sample rows:
[{'_month': 7.0, '_year': 2018.0, 'month_year': '07-2018', 'interest_id': 6106.0, 'composition': 9.93, 'index_value': 5.31, 'ranking': 2, 'percentile_ranking': 99.73}, {'_month': 7.0, '_year': 2018.0, 'month_year': '07-2018', 'interest_id': 18923.0, 'composition': 10.85, 'index_value': 5.29, 'ranking': 3, 'percentile_ranking': 99.59}, {'_month': 7.0, '_year': 2018.0, 'month_year': '07-2018', 'interest_id': 6344.0, 'composition': 10.32, 'index_value': 5.1, 'ranking': 4, 'percentile_ranking': 99.45}, {'_month': 7.0, '_year': 2018.0, 'month_year': '07-2018', 'interest_id': 100.0, 'composition': 10.77, 'index_value': 5.04, 'ranking': 5, 'percentile_ranking': 99.31}, {'_month': 7.0, '_year': 2018.0, 'month_year': '07-2018', 'interest_id': 79.0, 'composition': 11.21, 'index_value': 4.97, 'ranking': 7, 'percentile_ranking': 99.04}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
Column name: low Type: FLOAT
Column name: change Type: TEXT
Column name: price Type: FLOAT
Column name: open Type: FLOAT
Column name: volume Type: TEXT
Column name: high Type: FLOAT
Column name: market_date Type: TEXT
Column name: ticker Type: TEXT
Sample rows:
[{'ticker': 'ETH', 'market_date': '29-08-2021', 'price': 3177.84, 'open': 3243.96, 'high': 3282.21, 'low': 3162.79, 'volume': '582.04K', 'change': '-2.04%'}, {'ticker': 'ETH', 'market_date': '27-08-2021', 'price': 3273.58, 'open': 3093.78, 'high': 3279.93, 'low': 3063.37, 'volume': '839.54K', 'change': '5.82%'}, {'ticker': 'ETH', 'market_date': '26-08-2021', 'price': 3093.54, 'open': 3228.03, 'high': 3249.62, 'low': 3057.48, 'volume': '118.44K', 'change': '-4.17%'}, {'ticker': 'ETH', 'market_date': '24-08-2021', 'price': 3173.26, 'open': 3322.6, 'high': 3357.99, 'low': 3150.75, 'volume': '988.82K', 'change': '-4.41%'}, {'ticker': 'ETH', 'market_date': '23-08-2021', 'price': 3319.49, 'open': 3238.41, 'high': 3375.42, 'low': 3231.96, 'volume': '1.09M', 'change': '2.49%'}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.SHOPPING_CART_CAMPAIGN_IDENTIFIER
Column name: start_date Type: TEXT
Column name: campaign_id Type: NUMBER
Column name: campaign_name Type: TEXT
Column name: end_date Type: TEXT
Column name: products Type: TEXT
Sample rows:
[]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.SHOPPING_CART_EVENT_IDENTIFIER
Column name: event_name Type: TEXT
Column name: event_type Type: NUMBER
Sample rows:
[{'event_type': 2, 'event_name': 'Add to Cart'}, {'event_type': 3, 'event_name': 'Purchase'}, {'event_type': 4, 'event_name': 'Ad Impression'}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.VEG_CAT
Column name: category_code Type: NUMBER
Column name: item_code Type: NUMBER
Column name: category_name Type: TEXT
Column name: item_name Type: TEXT
Column name: index Type: NUMBER
Sample rows:
[{'index': 0, 'item_code': 102900005115168, 'item_name': 'Niushou Shengcai', 'category_code': 1011010101, 'category_name': 'Flower/Leaf\xa0Vegetables'}, {'index': 2, 'item_code': 102900005115625, 'item_name': 'Local Xiaomao Cabbage', 'category_code': 1011010101, 'category_name': 'Flower/Leaf\xa0Vegetables'}, {'index': 3, 'item_code': 102900005115748, 'item_name': 'White Caitai', 'category_code': 1011010101, 'category_name': 'Flower/Leaf\xa0Vegetables'}, {'index': 4, 'item_code': 102900005115762, 'item_name': 'Amaranth', 'category_code': 1011010101, 'category_name': 'Flower/Leaf\xa0Vegetables'}, {'index': 5, 'item_code': 102900005115779, 'item_name': 'Yunnan Shengcai', 'category_code': 1011010101, 'category_name': 'Flower/Leaf\xa0Vegetables'}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.VEG_WHSLE_DF
Column name: index Type: NUMBER
Column name: whsle_px_rmb-kg Type: FLOAT
Column name: whsle_date Type: TEXT
Column name: item_code Type: NUMBER
Sample rows:
[{'index': 0, 'whsle_date': '2020-07-01 00:00:00', 'item_code': 102900005115762, 'whsle_px_rmb-kg': 3.88}, {'index': 5, 'whsle_date': '2020-07-01 00:00:00', 'item_code': 102900005115908, 'whsle_px_rmb-kg': 4.6}, {'index': 8, 'whsle_date': '2020-07-01 00:00:00', 'item_code': 102900005115984, 'whsle_px_rmb-kg': 3.44}, {'index': 9, 'whsle_date': '2020-07-01 00:00:00', 'item_code': 102900005116226, 'whsle_px_rmb-kg': 4.64}, {'index': 10, 'whsle_date': '2020-07-01 00:00:00', 'item_code': 102900005116233, 'whsle_px_rmb-kg': 5.76}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_TRANSACTIONS
Column name: quantity Type: FLOAT
Column name: member_id Type: TEXT
Column name: txn_id Type: NUMBER
Column name: ticker Type: TEXT
Column name: txn_type Type: TEXT
Column name: percentage_fee Type: FLOAT
Column name: txn_time Type: TEXT
Column name: txn_date Type: TEXT
Sample rows:
[{'txn_id': 2, 'member_id': 'eccbc8', 'ticker': 'BTC', 'txn_date': '01-01-2017', 'txn_type': 'BUY', 'quantity': 50.0, 'percentage_fee': 0.3, 'txn_time': '2017-01-01T00:00:00.000Z'}, {'txn_id': 3, 'member_id': 'a87ff6', 'ticker': 'BTC', 'txn_date': '01-01-2017', 'txn_type': 'BUY', 'quantity': 50.0, 'percentage_fee': 0.0, 'txn_time': '2017-01-01T00:00:00.000Z'}, {'txn_id': 7, 'member_id': '8f14e4', 'ticker': 'BTC', 'txn_date': '01-01-2017', 'txn_type': 'BUY', 'quantity': 50.0, 'percentage_fee': 0.21, 'txn_time': '2017-01-01T00:00:00.000Z'}, {'txn_id': 8, 'member_id': 'c9f0f8', 'ticker': 'BTC', 'txn_date': '01-01-2017', 'txn_type': 'BUY', 'quantity': 50.0, 'percentage_fee': 0.3, 'txn_time': '2017-01-01T00:00:00.000Z'}, {'txn_id': 10, 'member_id': 'd3d944', 'ticker': 'BTC', 'txn_date': '01-01-2017', 'txn_type': 'BUY', 'quantity': 50.0, 'percentage_fee': 0.3, 'txn_time': '2017-01-01T00:00:00.000Z'}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.SHOPPING_CART_EVENTS
Column name: page_id Type: NUMBER
Column name: event_type Type: NUMBER
Column name: cookie_id Type: TEXT
Column name: event_time Type: TEXT
Column name: visit_id Type: TEXT
Column name: sequence_number Type: NUMBER
Sample rows:
[{'visit_id': 'ccf365', 'cookie_id': 'c4ca42', 'page_id': 9, 'event_type': 1, 'sequence_number': 4, 'event_time': '2020-02-04 19:16:58.609142'}, {'visit_id': 'ccf365', 'cookie_id': 'c4ca42', 'page_id': 9, 'event_type': 2, 'sequence_number': 5, 'event_time': '2020-02-04 19:17:51.72942'}, {'visit_id': 'ccf365', 'cookie_id': 'c4ca42', 'page_id': 10, 'event_type': 2, 'sequence_number': 7, 'event_time': '2020-02-04 19:19:10.570786'}, {'visit_id': 'ccf365', 'cookie_id': 'c4ca42', 'page_id': 12, 'event_type': 1, 'sequence_number': 10, 'event_time': '2020-02-04 19:20:52.307244'}, {'visit_id': 'd58cbd', 'cookie_id': 'c81e72', 'page_id': 1, 'event_type': 1, 'sequence_number': 1, 'event_time': '2020-01-18 23:40:54.761906'}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.VEG_LOSS_RATE_DF
Column name: item_name Type: TEXT
Column name: item_code Type: NUMBER
Column name: index Type: NUMBER
Column name: loss_rate_% Type: FLOAT
Sample rows:
[{'index': 0, 'item_code': 102900005115168, 'item_name': 'Niushou Shengcai', 'loss_rate_%': 4.39}, {'index': 1, 'item_code': 102900005115199, 'item_name': 'Sichuan Red Cedar', 'loss_rate_%': 10.46}, {'index': 7, 'item_code': 102900005115786, 'item_name': 'Zhuyecai', 'loss_rate_%': 13.62}, {'index': 8, 'item_code': 102900005115793, 'item_name': 'Chinese Cabbage', 'loss_rate_%': 7.59}, {'index': 10, 'item_code': 102900005115823, 'item_name': 'Shanghaiqing', 'loss_rate_%': 14.43}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.CUSTOMER_NODES
Column name: region_id Type: NUMBER
Column name: start_date Type: TEXT
Column name: end_date Type: TEXT
Column name: customer_id Type: NUMBER
Column name: node_id Type: NUMBER
Sample rows:
[{'customer_id': 1, 'region_id': 3, 'node_id': 4, 'start_date': '2020-01-02', 'end_date': '2020-01-03'}, {'customer_id': 2, 'region_id': 3, 'node_id': 5, 'start_date': '2020-01-03', 'end_date': '2020-01-17'}, {'customer_id': 3, 'region_id': 5, 'node_id': 4, 'start_date': '2020-01-27', 'end_date': '2020-02-18'}, {'customer_id': 4, 'region_id': 5, 'node_id': 4, 'start_date': '2020-01-07', 'end_date': '2020-01-19'}, {'customer_id': 7, 'region_id': 2, 'node_id': 5, 'start_date': '2020-01-20', 'end_date': '2020-02-04'}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.WEEKLY_SALES
Column name: region Type: TEXT
Column name: week_date Type: TEXT
Column name: segment Type: TEXT
Column name: customer_type Type: TEXT
Column name: sales Type: NUMBER
Column name: platform Type: TEXT
Column name: transactions Type: NUMBER
Sample rows:
[{'week_date': '31/8/20', 'region': 'ASIA', 'platform': 'Retail', 'segment': 'F1', 'customer_type': 'New', 'transactions': 31574, 'sales': 996575}, {'week_date': '31/8/20', 'region': 'OCEANIA', 'platform': 'Shopify', 'segment': 'C2', 'customer_type': 'Existing', 'transactions': 4661, 'sales': 882690}, {'week_date': '31/8/20', 'region': 'AFRICA', 'platform': 'Retail', 'segment': 'F1', 'customer_type': 'Existing', 'transactions': 97604, 'sales': 5185233}, {'week_date': '31/8/20', 'region': 'OCEANIA', 'platform': 'Retail', 'segment': 'C2', 'customer_type': 'New', 'transactions': 111219, 'sales': 2980673}, {'week_date': '31/8/20', 'region': 'AFRICA', 'platform': 'Retail', 'segment': 'C3', 'customer_type': 'Existing', 'transactions': 284971, 'sales': 14430196}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_MEMBERS
Column name: first_name Type: TEXT
Column name: member_id Type: TEXT
Column name: region Type: TEXT
Sample rows:
[{'member_id': 'c4ca42', 'first_name': 'Danny', 'region': 'Australia'}, {'member_id': 'c81e72', 'first_name': 'Vipul', 'region': 'United States'}, {'member_id': 'a87ff6', 'first_name': 'Nandita', 'region': 'United States'}, {'member_id': 'e4da3b', 'first_name': 'Rowan', 'region': 'United States'}, {'member_id': '167909', 'first_name': 'Ayush', 'region': 'United States'}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
Column name: platform Type: TEXT
Column name: month_number Type: NUMBER
Column name: age_band Type: TEXT
Column name: calendar_year Type: NUMBER
Column name: customer_type Type: TEXT
Column name: region Type: TEXT
Column name: demographic Type: TEXT
Column name: week_number Type: NUMBER
Column name: transactions Type: NUMBER
Column name: avg_transaction Type: FLOAT
Column name: segment Type: TEXT
Column name: week_date Type: TEXT
Column name: sales Type: NUMBER
Column name: week_date_formatted Type: TEXT
Sample rows:
[{'week_date_formatted': '2020-8-31', 'week_date': '2020-08-31', 'region': 'USA', 'platform': 'Retail', 'segment': 'unknown', 'customer_type': 'Guest', 'transactions': 529151, 'sales': 16509610, 'week_number': 36, 'month_number': 8, 'calendar_year': 2020, 'age_band': 'unknown', 'demographic': 'unknown', 'avg_transaction': 31.2}, {'week_date_formatted': '2020-8-31', 'week_date': '2020-08-31', 'region': 'EUROPE', 'platform': 'Retail', 'segment': 'C1', 'customer_type': 'New', 'transactions': 4517, 'sales': 141942, 'week_number': 36, 'month_number': 8, 'calendar_year': 2020, 'age_band': 'Young Adults', 'demographic': 'Couples', 'avg_transaction': 31.42}, {'week_date_formatted': '2020-8-31', 'week_date': '2020-08-31', 'region': 'AFRICA', 'platform': 'Retail', 'segment': 'C2', 'customer_type': 'New', 'transactions': 58046, 'sales': 1758388, 'week_number': 36, 'month_number': 8, 'calendar_year': 2020, 'age_band': 'Middle Aged', 'demographic': 'Couples', 'avg_transaction': 30.29}, {'week_date_formatted': '2020-8-31', 'week_date': '2020-08-31', 'region': 'AFRICA', 'platform': 'Shopify', 'segment': 'F3', 'customer_type': 'Existing', 'transactions': 2514, 'sales': 519502, 'week_number': 36, 'month_number': 8, 'calendar_year': 2020, 'age_band': 'Retirees', 'demographic': 'Families', 'avg_transaction': 206.64}, {'week_date_formatted': '2020-8-31', 'week_date': '2020-08-31', 'region': 'ASIA', 'platform': 'Shopify', 'segment': 'F1', 'customer_type': 'Existing', 'transactions': 2158, 'sales': 371417, 'week_number': 36, 'month_number': 8, 'calendar_year': 2020, 'age_band': 'Young Adults', 'demographic': 'Families', 'avg_transaction': 172.11}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.CUSTOMER_REGIONS
Column name: region_id Type: NUMBER
Column name: region_name Type: TEXT
Sample rows:
[{'region_id': 3, 'region_name': 'Africa'}, {'region_id': 4, 'region_name': 'Asia'}, {'region_id': 5, 'region_name': 'Europe'}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.CUSTOMER_TRANSACTIONS
Column name: customer_id Type: NUMBER
Column name: txn_date Type: TEXT
Column name: txn_amount Type: NUMBER
Column name: txn_type Type: TEXT
Sample rows:
[{'customer_id': 429, 'txn_date': '2020-01-21', 'txn_type': 'deposit', 'txn_amount': 82}, {'customer_id': 155, 'txn_date': '2020-01-10', 'txn_type': 'deposit', 'txn_amount': 712}, {'customer_id': 398, 'txn_date': '2020-01-01', 'txn_type': 'deposit', 'txn_amount': 196}, {'customer_id': 255, 'txn_date': '2020-01-14', 'txn_type': 'deposit', 'txn_amount': 563}, {'customer_id': 373, 'txn_date': '2020-01-18', 'txn_type': 'deposit', 'txn_amount': 596}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.SHOPPING_CART_USERS
Column name: user_id Type: NUMBER
Column name: cookie_id Type: TEXT
Column name: start_date Type: TEXT
Sample rows:
[{'user_id': 1, 'cookie_id': 'c4ca42', 'start_date': '2020-02-04'}, {'user_id': 2, 'cookie_id': 'c81e72', 'start_date': '2020-01-18'}, {'user_id': 4, 'cookie_id': 'a87ff6', 'start_date': '2020-02-22'}, {'user_id': 5, 'cookie_id': 'e4da3b', 'start_date': '2020-02-01'}, {'user_id': 7, 'cookie_id': '8f14e4', 'start_date': '2020-02-09'}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.VEG_TXN_DF
Column name: txn_date Type: TEXT
Column name: qty_sold(kg) Type: FLOAT
Column name: sale/return Type: TEXT
Column name: txn_time Type: TEXT
Column name: unit_selling_px_rmb/kg Type: FLOAT
Column name: index Type: NUMBER
Column name: discount(%) Type: NUMBER
Column name: item_code Type: NUMBER
Column name: day_of_week Type: TEXT
Sample rows:
[{'index': 1, 'txn_date': '2020-07-01 00:00:00', 'txn_time': '09:17:27', 'item_code': 102900005115960, 'qty_sold(kg)': 0.849, 'unit_selling_px_rmb/kg': 3.2, 'sale/return': 'sale', 'discount(%)': 1, 'day_of_week': 'Wednesday'}, {'index': 6, 'txn_date': '2020-07-01 00:00:00', 'txn_time': '09:21:56', 'item_code': 102900005115779, 'qty_sold(kg)': 0.338, 'unit_selling_px_rmb/kg': 8.0, 'sale/return': 'sale', 'discount(%)': 1, 'day_of_week': 'Wednesday'}, {'index': 7, 'txn_date': '2020-07-01 00:00:00', 'txn_time': '09:22:01', 'item_code': 102900005117056, 'qty_sold(kg)': 0.132, 'unit_selling_px_rmb/kg': 7.6, 'sale/return': 'sale', 'discount(%)': 1, 'day_of_week': 'Wednesday'}, {'index': 8, 'txn_date': '2020-07-01 00:00:00', 'txn_time': '09:22:01', 'item_code': 102900005115779, 'qty_sold(kg)': 0.213, 'unit_selling_px_rmb/kg': 8.0, 'sale/return': 'sale', 'discount(%)': 1, 'day_of_week': 'Wednesday'}, {'index': 9, 'txn_date': '2020-07-01 00:00:00', 'txn_time': '09:22:15', 'item_code': 102900011008522, 'qty_sold(kg)': 0.514, 'unit_selling_px_rmb/kg': 8.0, 'sale/return': 'sale', 'discount(%)': 1, 'day_of_week': 'Wednesday'}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.SHOPPING_CART_PAGE_HIERARCHY
Column name: page_id Type: NUMBER
Column name: product_id Type: FLOAT
Column name: page_name Type: TEXT
Column name: product_category Type: TEXT
Sample rows:
[{'page_id': 2, 'page_name': 'All Products', 'product_category': '', 'product_id': nan}, {'page_id': 3, 'page_name': 'Salmon', 'product_category': 'Fish', 'product_id': 1.0}, {'page_id': 4, 'page_name': 'Kingfish', 'product_category': 'Fish', 'product_id': 2.0}, {'page_id': 6, 'page_name': 'Russian Caviar', 'product_category': 'Luxury', 'product_id': 4.0}, {'page_id': 7, 'page_name': 'Black Truffle', 'product_category': 'Luxury', 'product_id': 5.0}]

--------------------------------------------------
External knowledge that might be helpful: 
None
The table structure information is ({database name: {schema name: [table name]}}): 
{'BANK_SALES_TRADING': {'BANK_SALES_TRADING': ['INTEREST_MAP', 'INTEREST_METRICS', 'BITCOIN_PRICES', 'SHOPPING_CART_CAMPAIGN_IDENTIFIER', 'SHOPPING_CART_EVENT_IDENTIFIER', 'VEG_CAT', 'VEG_WHSLE_DF', 'BITCOIN_TRANSACTIONS', 'SHOPPING_CART_EVENTS', 'VEG_LOSS_RATE_DF', 'CUSTOMER_NODES', 'WEEKLY_SALES', 'BITCOIN_MEMBERS', 'CLEANED_WEEKLY_SALES', 'CUSTOMER_REGIONS', 'CUSTOMER_TRANSACTIONS', 'SHOPPING_CART_USERS', 'VEG_TXN_DF', 'SHOPPING_CART_PAGE_HIERARCHY']}}

Some few-shot examples after column exploration may be helpful:
Query:
--Description: Inspect raw data (ticker, market_date, volume) for August 1 – 10 2021  
SELECT "ticker",
       "market_date",
       "volume"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
ORDER BY "ticker", "market_date"
LIMIT 20;
Answer:
ticker,market_date,volume
BTC,01-08-2021,80.33K
BTC,01-09-2017,102.01K
BTC,01-09-2018,3.52M
BTC,01-09-2019,322.66K
BTC,01-09-2020,580.69K
BTC,01-10-2017,60.58K
BTC,01-10-2018,9.19M
BTC,01-10-2019,533.95K
BTC,01-10-2020,95.33K
BTC,01-11-2017,133.19K
BTC,01-11-2018,124.16K
BTC,01-11-2019,689.65K
BTC,01-11-2020,51.71K
BTC,01-12-2017,131.92K
BTC,01-12-2018,316.30K
BTC,01-12-2019,777.00K
Query:
--Description: List all distinct tickers that traded between Aug 1 and Aug 10 2021  
SELECT DISTINCT "ticker"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
LIMIT 20;
Answer:
ticker
ETH
BTC
Query:
--Description: Review the different text patterns that appear in the volume column  
SELECT DISTINCT "volume"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
ORDER BY "volume"
LIMIT 20;
Answer:
volume
0.26K
1.00M
1.01M
1.02M
1.04M
1.05M
1.06M
1.07M
1.08M
1.09M
1.11M
1.12M
1.13M
1.14M
1.15M
1.16M
1.17M
1.19M
1.20M
1.22M
Query:
--Description: Convert the volume strings to pure numeric amounts (K → *1,000, M → *1,000,000, ‘-’→0)  
SELECT "ticker",
       "market_date",
       "volume",
       CASE
            WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K',''))*1000
            WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M',''))*1000000
            WHEN "volume" = '-'                    THEN 0
            ELSE TRY_TO_NUMBER("volume")
       END AS "vol_numeric"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
ORDER BY "ticker", "market_date"
LIMIT 20;
Answer:
ticker,market_date,volume,vol_numeric
BTC,01-08-2021,80.33K,80000
BTC,01-09-2017,102.01K,102000
BTC,01-09-2018,3.52M,4000000
BTC,01-09-2019,322.66K,323000
BTC,01-09-2020,580.69K,581000
BTC,01-10-2017,60.58K,61000
BTC,01-10-2018,9.19M,9000000
BTC,01-10-2019,533.95K,534000
BTC,01-10-2020,95.33K,95000
BTC,01-11-2017,133.19K,133000
BTC,01-11-2018,124.16K,124000
BTC,01-11-2019,689.65K,690000
BTC,01-11-2020,51.71K,52000
Query:
--Description: Show rows where converted volume equals zero (helps verify the ‘-’ handling)  
SELECT *
FROM (
      SELECT "ticker",
             "market_date",
             CASE
                  WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K',''))*1000
                  WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M',''))*1000000
                  WHEN "volume" = '-'                    THEN 0
                  ELSE TRY_TO_NUMBER("volume")
             END AS "vol_numeric"
      FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
      WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
) v
WHERE "vol_numeric" = 0
LIMIT 20;
Answer:
ticker,market_date,vol_numeric
BTC,03-08-2021,0
Query:
--Description: Add a row number per ticker and date to aid in locating prior non-zero volume days  
SELECT "ticker",
       "market_date",
       CASE
            WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K',''))*1000
            WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M',''))*1000000
            WHEN "volume" = '-'                    THEN 0
            ELSE TRY_TO_NUMBER("volume")
       END AS "vol_numeric",
       ROW_NUMBER() OVER (PARTITION BY "ticker" ORDER BY TO_DATE("market_date",'DD-MM-YYYY')) AS "rn"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
ORDER BY "ticker", "market_date"
LIMIT 20;
Answer:
ticker,market_date,vol_numeric,rn
BTC,01-08-2021,80000,496
BTC,01-09-2017,102000,73
BTC,01-09-2018,4000000,181
BTC,01-09-2019,323000,289
BTC,01-09-2020,581000,397
BTC,01-10-2017,61000,82
BTC,01-10-2018,9000000,190
BTC,01-10-2019,534000,298
BTC,01-10-2020,95000,406
BTC,01-11-2017,133000,91
BTC,01-11-2018,124000,199
BTC,01-11-2019,690000,307
BTC,01-11-2020,52000,415
BTC,01-12-2017,132000,100
BTC,01-12-2018,316000,208
Query:
--Description: Calculate previous non-zero volume for each ticker using the IGNORE NULLS option  
SELECT "ticker",
       "market_date",
       "vol_numeric",
       LAG(NULLIF("vol_numeric",0)) IGNORE NULLS
           OVER (PARTITION BY "ticker"
                 ORDER BY TO_DATE("market_date",'DD-MM-YYYY')) AS "prev_non_zero_vol"
FROM (
      SELECT "ticker",
             "market_date",
             CASE
                  WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K',''))*1000
                  WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M',''))*1000000
                  WHEN "volume" = '-'                    THEN 0
                  ELSE TRY_TO_NUMBER("volume")
             END AS "vol_numeric"
      FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
      WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
) v
ORDER BY "ticker", "market_date"
LIMIT 20;
Answer:
ticker,market_date,vol_numeric,prev_non_zero_vol
BTC,01-08-2021,80000,51000
BTC,01-09-2017,102000,71000
BTC,01-09-2018,4000000,299000
BTC,01-09-2019,323000,571000
BTC,01-09-2020,581000,564000
BTC,01-10-2017,61000,77000
BTC,01-10-2018,9000000,3000000
BTC,01-10-2019,534000,474000
BTC,01-10-2020,95000,71000
BTC,01-11-2017,133000,110000
BTC,01-11-2018,124000,81000
BTC,01-11-2019,690000,636000
BTC,01-11-2020,52000,71000
BTC,01-12-2017,132000,127000
Query:
--Description: Compute the % change in daily trading volume relative to the previous non-zero day  
SELECT "ticker",
       "market_date",
       "vol_numeric",
       "prev_non_zero_vol",
       CASE 
            WHEN "prev_non_zero_vol" IS NOT NULL AND "prev_non_zero_vol" <> 0
                 THEN 100 * ("vol_numeric" - "prev_non_zero_vol") / "prev_non_zero_vol"
       END AS "pct_change_vol"
FROM (
      SELECT "ticker",
             "market_date",
             "vol_numeric",
             LAG(NULLIF("vol_numeric",0)) IGNORE NULLS
                 OVER (PARTITION BY "ticker"
                       ORDER BY TO_DATE("market_date",'DD-MM-YYYY')) AS "prev_non_zero_vol"
      FROM (
            SELECT "ticker",
                   "market_date",
                   CASE
                        WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K',''))*1000
                        WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M',''))*1000000
                        WHEN "volume" = '-'                    THEN 0
                        ELSE TRY_TO_NUMBER("volume")
                   END AS "vol_numeric"
            FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
            WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
      )
) t
ORDER BY "ticker", "market_date"
LIMIT 20;
Answer:
ticker,market_date,vol_numeric,prev_non_zero_vol,pct_change_vol
BTC,01-08-2021,80000,51000,56.862745
BTC,01-09-2017,102000,71000,43.661972
BTC,01-09-2018,4000000,299000,1237.792642
BTC,01-09-2019,323000,571000,-43.432574
BTC,01-09-2020,581000,564000,3.014184
BTC,01-10-2017,61000,77000,-20.779221
BTC,01-10-2018,9000000,3000000,200.000000
BTC,01-10-2019,534000,474000,12.658228
BTC,01-10-2020,95000,71000,33.802817
Query:
--Description: Corrected “final ordered list” query – embeds pct_change_vol in the
--             same sub-query that the outer SELECT reads from, avoiding undefined
--             identifier errors.  Returns daily % change in trading volume for
--             Aug-01–Aug-10 2021, only where a previous non-zero volume exists.
SELECT
       "ticker",
       "market_date",
       vol_numeric                                    AS "volume_numeric",
       ROUND(pct_change_vol, 2)                      AS "pct_change_vol"
FROM (
        SELECT
               "ticker",
               "market_date",
               /* numeric volume conversion */
               CASE
                   WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
                   WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
                   WHEN "volume" = '-'      THEN 0
                   ELSE TRY_TO_NUMBER("volume")
               END                                   AS vol_numeric,
               /* previous non-zero volume */
               LAG( NULLIF(
                       CASE
                           WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
                           WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
                           WHEN "volume" = '-'      THEN 0
                           ELSE TRY_TO_NUMBER("volume")
                       END , 0) ) IGNORE NULLS
                   OVER (PARTITION BY "ticker"
                         ORDER BY TO_DATE("market_date",'DD-MM-YYYY'))  AS prev_non_zero_vol,
               /* % change calculation */
               CASE
                   WHEN LAG(NULLIF(
                              CASE
                                  WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
                                  WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
                                  WHEN "volume" = '-'      THEN 0
                                  ELSE TRY_TO_NUMBER("volume")
                              END , 0) ) IGNORE NULLS
                        OVER (PARTITION BY "ticker"
                              ORDER BY TO_DATE("market_date",'DD-MM-YYYY')) IS NOT NULL
                   THEN 100 * (
                               CASE
                                   WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
                                   WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
                                   WHEN "volume" = '-'      THEN 0
                                   ELSE TRY_TO_NUMBER("volume")
                               END
                               -
                               LAG(NULLIF(
                                       CASE
                                           WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
                                           WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
                                           WHEN "volume" = '-'      THEN 0
                                           ELSE TRY_TO_NUMBER("volume")
                                       END , 0) ) IGNORE NULLS
                                   OVER (PARTITION BY "ticker"
                                         ORDER BY TO_DATE("market_date",'DD-MM-YYYY'))
                             )
                       / LAG(NULLIF(
                               CASE
                                   WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
                                   WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
                                   WHEN "volume" = '-'      THEN 0
                                   ELSE TRY_TO_NUMBER("volume")
                               END , 0) ) IGNORE NULLS
                           OVER (PARTITION BY "ticker"
                                 ORDER BY TO_DATE("market_date",'DD-MM-YYYY'))
               END                                   AS pct_change_vol
        FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
        WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
) final
WHERE prev_non_zero_vol IS NOT NULL
ORDER BY "ticker", TO_DATE("market_date",'DD-MM-YYYY')
LIMIT 20
Answer:
ticker,market_date,volume_numeric,pct_change_vol
BTC,03-01-2017,55000,-15.38
BTC,04-01-2017,156000,183.64
BTC,05-01-2017,240000,53.85
BTC,06-01-2017,194000,-19.17
BTC,07-01-2017,131000,-32.47
BTC,08-01-2017,77000,-41.22
BTC,09-01-2017,63000,-18.18
BTC,10-01-2017,54000,-14.29
BTC,02-02-2017,51000,-5.56
BTC,03-02-2017,62000,21.57
BTC,04-02-2017,39000,-37.10
Task: Using the "bitcoin_prices" table, please calculate the daily percentage change in trading volume for each ticker from August 1 to August 10, 2021, ensuring that any volume ending in "K" or "M" is accurately converted to thousands or millions, any "-" volume is treated as zero, only non-zero volumes are used to determine the previous day's volume, and the results are ordered by ticker and date.

Please think step by step and answer only one complete SQL in snowflake dialect in ```sql``` format.
SQL usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: The table structure information is ({database name: {schema name: [table name]}}): 
{'BANK_SALES_TRADING': {'BANK_SALES_TRADING': ['INTEREST_MAP', 'INTEREST_METRICS', 'BITCOIN_PRICES', 'SHOPPING_CART_CAMPAIGN_IDENTIFIER', 'SHOPPING_CART_EVENT_IDENTIFIER', 'VEG_CAT', 'VEG_WHSLE_DF', 'BITCOIN_TRANSACTIONS', 'SHOPPING_CART_EVENTS', 'VEG_LOSS_RATE_DF', 'CUSTOMER_NODES', 'WEEKLY_SALES', 'BITCOIN_MEMBERS', 'CLEANED_WEEKLY_SALES', 'CUSTOMER_REGIONS', 'CUSTOMER_TRANSACTIONS', 'SHOPPING_CART_USERS', 'VEG_TXN_DF', 'SHOPPING_CART_PAGE_HIERARCHY']}}

When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
If the task description does not specify the number of decimal places, retain all decimals to four places.

[Self-refine]
2025-05-07 07:13:06 - Thread-648 (execute) - INFO - [Try to run SQL in self-refine]
```sql
/* Daily %-change in trading volume per ticker
   – Aug-01 → Aug-10 2021
   – “K” → ×1 000, “M” → ×1 000 000, “-” → 0
   – previous volume skips any zero values                        */

WITH volumes AS (   -- convert text volumes to pure numbers
    SELECT
        "ticker",
        "market_date",
        CASE
            WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
            WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
            WHEN "volume" = '-'       THEN 0
            ELSE TRY_TO_NUMBER("volume")
        END                              AS vol_numeric
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
),
lagged AS (        -- grab the previous non-zero volume per ticker
    SELECT
        "ticker",
        "market_date",
        vol_numeric,
        LAG(NULLIF(vol_numeric,0)) IGNORE NULLS
            OVER (PARTITION BY "ticker"
                  ORDER BY TO_DATE("market_date",'DD-MM-YYYY'))  AS prev_non_zero_vol
    FROM volumes
)
SELECT
    "ticker",
    "market_date",
    vol_numeric                                                     AS volume_numeric,
    ROUND(100 * (vol_numeric - prev_non_zero_vol) / prev_non_zero_vol, 4)
                                                                    AS pct_change_vol
FROM lagged
WHERE TO_DATE("market_date",'DD-MM-YYYY') BETWEEN DATE '2021-08-01' AND DATE '2021-08-10'
  AND prev_non_zero_vol IS NOT NULL
ORDER BY "ticker", TO_DATE("market_date",'DD-MM-YYYY');
```
[Try to run SQL in self-refine]
2025-05-07 07:13:07 - Thread-648 (execute) - INFO - Total iteration counts: 0
