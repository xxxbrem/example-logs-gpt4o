2025-05-07 07:06:17 - Thread-643 (execute) - INFO - [Exploration]
```sql
--Description: 1)  Check which tickers have prices recorded between 01-08-2021 and 10-08-2021
SELECT DISTINCT "ticker"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                        '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                        '09-08-2021','10-08-2021')
LIMIT 20;
```

```sql
--Description: 2)  Look at raw volume strings for BTC during the period
SELECT "ticker",
       "market_date",
       "volume"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
WHERE "ticker" = 'BTC'
  AND "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                        '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                        '09-08-2021','10-08-2021')
ORDER BY "market_date"
LIMIT 20;
```

```sql
--Description: 3)  Show how many records use the “K”, “M” or “-” notation in volume
SELECT 
  CASE 
    WHEN "volume" ILIKE '%K' THEN 'Ends with K'
    WHEN "volume" ILIKE '%M' THEN 'Ends with M'
    WHEN "volume" = '-'        THEN 'Dash'
    ELSE 'Plain Number'
  END AS "volume_type",
  COUNT(*) AS "rows"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                        '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                        '09-08-2021','10-08-2021')
GROUP BY 1
LIMIT 20;
```

```sql
--Description: 4)  Convert the “volume” column into a pure numeric figure (in units) for 01-10 Aug 2021
SELECT 
  "ticker",
  "market_date",
  "volume",
  CASE
      WHEN "volume" = '-'                  THEN 0
      WHEN "volume" ILIKE '%K'             THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
      WHEN "volume" ILIKE '%M'             THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
      ELSE TRY_TO_NUMBER("volume")
  END AS "volume_units"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                        '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                        '09-08-2021','10-08-2021')
ORDER BY "ticker","market_date"
LIMIT 20;
```

```sql
--Description: 5)  Verify that no NULL values remain after the conversion step
SELECT *
FROM (
    SELECT 
      "ticker",
      "market_date",
      CASE
          WHEN "volume" = '-'                  THEN 0
          WHEN "volume" ILIKE '%K'             THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
          WHEN "volume" ILIKE '%M'             THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
          ELSE TRY_TO_NUMBER("volume")
      END AS "volume_units"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
    WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                            '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                            '09-08-2021','10-08-2021')
) t
WHERE "volume_units" IS NULL
LIMIT 20;
```

```sql
--Description: 6)  Produce a running list of non-zero volumes plus the previous non-zero volume per ticker
SELECT
  "ticker",
  "market_date",
  "volume_units",
  LAG("volume_units") IGNORE NULLS OVER (PARTITION BY "ticker" ORDER BY TO_DATE("market_date",'DD-MM-YYYY')) AS "prev_non_zero_volume"
FROM (
    SELECT 
      "ticker",
      "market_date",
      CASE
          WHEN "volume" = '-'                  THEN 0
          WHEN "volume" ILIKE '%K'             THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
          WHEN "volume" ILIKE '%M'             THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
          ELSE TRY_TO_NUMBER("volume")
      END AS "volume_units"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
    WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                            '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                            '09-08-2021','10-08-2021')
) v
QUALIFY "volume_units" <> 0
ORDER BY "ticker","market_date"
LIMIT 20;
```

```sql
--Description: 7)  Calculate the daily % change in volume using the previous non-zero volume
SELECT
  "ticker",
  "market_date",
  "volume_units",
  "prev_non_zero_volume",
  CASE
      WHEN "prev_non_zero_volume" = 0 OR "prev_non_zero_volume" IS NULL THEN NULL
      ELSE ROUND(100 * ("volume_units" - "prev_non_zero_volume") / "prev_non_zero_volume", 2)
  END AS "pct_change_volume"
FROM (
    SELECT
        "ticker",
        "market_date",
        "volume_units",
        LAG("volume_units") IGNORE NULLS OVER (PARTITION BY "ticker" ORDER BY TO_DATE("market_date",'DD-MM-YYYY')) AS "prev_non_zero_volume"
    FROM (
        SELECT 
          "ticker",
          "market_date",
          CASE
              WHEN "volume" = '-'                  THEN 0
              WHEN "volume" ILIKE '%K'             THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
              WHEN "volume" ILIKE '%M'             THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
              ELSE TRY_TO_NUMBER("volume")
          END AS "volume_units"
        FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
        WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                                '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                                '09-08-2021','10-08-2021')
    ) base
    QUALIFY "volume_units" <> 0
) calc
ORDER BY "ticker", TO_DATE("market_date",'DD-MM-YYYY')
LIMIT 20;
```

```sql
--Description: 8)  Show percentage changes only where both current and previous non-zero volumes exist
SELECT *
FROM (
    SELECT
      "ticker",
      "market_date",
      "volume_units",
      "prev_non_zero_volume",
      ROUND(100 * ("volume_units" - "prev_non_zero_volume") / "prev_non_zero_volume", 2) AS "pct_change_volume"
    FROM (
        SELECT
            "ticker",
            "market_date",
            "volume_units",
            LAG("volume_units") IGNORE NULLS OVER (PARTITION BY "ticker" ORDER BY TO_DATE("market_date",'DD-MM-YYYY')) AS "prev_non_zero_volume"
        FROM (
            SELECT 
              "ticker",
              "market_date",
              CASE
                  WHEN "volume" = '-'                  THEN 0
                  WHEN "volume" ILIKE '%K'             THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
                  WHEN "volume" ILIKE '%M'             THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
                  ELSE TRY_TO_NUMBER("volume")
              END AS "volume_units"
            FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
            WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                                    '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                                    '09-08-2021','10-08-2021')
        ) b
        QUALIFY "volume_units" <> 0
    ) c
) d
WHERE "prev_non_zero_volume" IS NOT NULL
ORDER BY "ticker", TO_DATE("market_date",'DD-MM-YYYY')
LIMIT 20;
```

```sql
--Description: 9)  Final result for all tickers & dates 01-10 Aug 2021, ordered by ticker and date
SELECT
  "ticker",
  "market_date",
  "volume_units",
  ROUND(100 * ("volume_units" - "prev_non_zero_volume") / "prev_non_zero_volume", 2) AS "pct_change_volume"
FROM (
    SELECT
        "ticker",
        "market_date",
        "volume_units",
        LAG("volume_units") IGNORE NULLS OVER (PARTITION BY "ticker" ORDER BY TO_DATE("market_date",'DD-MM-YYYY')) AS "prev_non_zero_volume"
    FROM (
        SELECT 
          "ticker",
          "market_date",
          CASE
              WHEN "volume" = '-'                  THEN 0
              WHEN "volume" ILIKE '%K'             THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
              WHEN "volume" ILIKE '%M'             THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
              ELSE TRY_TO_NUMBER("volume")
          END AS "volume_units"
        FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
        WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                                '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                                '09-08-2021','10-08-2021')
    ) x
    QUALIFY "volume_units" <> 0
) y
WHERE "prev_non_zero_volume" IS NOT NULL
ORDER BY "ticker", TO_DATE("market_date",'DD-MM-YYYY')
LIMIT 20;
```

```sql
--Description: 10)  Quickly check for any remaining records with zero volume inside 01-10 Aug range
SELECT "ticker","market_date","volume"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
WHERE "volume" = '-'
  AND "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                        '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                        '09-08-2021','10-08-2021')
LIMIT 20;
```
[Exploration]
2025-05-07 07:06:17 - Thread-643 (execute) - INFO - [Try to execute]
--Description: 1)  Check which tickers have prices recorded between 01-08-2021 and 10-08-2021
SELECT DISTINCT "ticker"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                        '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                        '09-08-2021','10-08-2021')
LIMIT 20;
[Try to execute]
2025-05-07 07:06:18 - Thread-643 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 1)  Check which tickers have prices recorded between 01-08-2021 and 10-08-2021
SELECT DISTINCT "ticker"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                        '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                        '09-08-2021','10-08-2021')
LIMIT 20;
Results:
ticker
ETH
BTC

[Successfully executed]
2025-05-07 07:06:18 - Thread-643 (execute) - INFO - [Try to execute]
--Description: 2)  Look at raw volume strings for BTC during the period
SELECT "ticker",
       "market_date",
       "volume"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
WHERE "ticker" = 'BTC'
  AND "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                        '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                        '09-08-2021','10-08-2021')
ORDER BY "market_date"
LIMIT 20;
[Try to execute]
2025-05-07 07:06:19 - Thread-643 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 2)  Look at raw volume strings for BTC during the period
SELECT "ticker",
       "market_date",
       "volume"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
WHERE "ticker" = 'BTC'
  AND "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                        '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                        '09-08-2021','10-08-2021')
ORDER BY "market_date"
LIMIT 20;
Results:
ticker,market_date,volume
BTC,01-08-2021,80.33K
BTC,02-08-2021,74.81K
BTC,03-08-2021,0.26K
BTC,04-08-2021,79.22K
BTC,05-08-2021,130.60K
BTC,06-08-2021,111.93K
BTC,07-08-2021,112.84K
BTC,08-08-2021,105.25K
BTC,09-08-2021,117.08K
BTC,10-08-2021,80.55K

[Successfully executed]
2025-05-07 07:06:19 - Thread-643 (execute) - INFO - [Try to execute]
--Description: 3)  Show how many records use the “K”, “M” or “-” notation in volume
SELECT 
  CASE 
    WHEN "volume" ILIKE '%K' THEN 'Ends with K'
    WHEN "volume" ILIKE '%M' THEN 'Ends with M'
    WHEN "volume" = '-'        THEN 'Dash'
    ELSE 'Plain Number'
  END AS "volume_type",
  COUNT(*) AS "rows"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                        '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                        '09-08-2021','10-08-2021')
GROUP BY 1
LIMIT 20;
[Try to execute]
2025-05-07 07:06:19 - Thread-643 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 3)  Show how many records use the “K”, “M” or “-” notation in volume
SELECT 
  CASE 
    WHEN "volume" ILIKE '%K' THEN 'Ends with K'
    WHEN "volume" ILIKE '%M' THEN 'Ends with M'
    WHEN "volume" = '-'        THEN 'Dash'
    ELSE 'Plain Number'
  END AS "volume_type",
  COUNT(*) AS "rows"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                        '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                        '09-08-2021','10-08-2021')
GROUP BY 1
LIMIT 20;
Results:
volume_type,rows
Ends with M,7
Ends with K,13

[Successfully executed]
2025-05-07 07:06:19 - Thread-643 (execute) - INFO - [Try to execute]
--Description: 4)  Convert the “volume” column into a pure numeric figure (in units) for 01-10 Aug 2021
SELECT 
  "ticker",
  "market_date",
  "volume",
  CASE
      WHEN "volume" = '-'                  THEN 0
      WHEN "volume" ILIKE '%K'             THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
      WHEN "volume" ILIKE '%M'             THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
      ELSE TRY_TO_NUMBER("volume")
  END AS "volume_units"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                        '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                        '09-08-2021','10-08-2021')
ORDER BY "ticker","market_date"
LIMIT 20;
[Try to execute]
2025-05-07 07:06:19 - Thread-643 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 4)  Convert the “volume” column into a pure numeric figure (in units) for 01-10 Aug 2021
SELECT 
  "ticker",
  "market_date",
  "volume",
  CASE
      WHEN "volume" = '-'                  THEN 0
      WHEN "volume" ILIKE '%K'             THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
      WHEN "volume" ILIKE '%M'             THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
      ELSE TRY_TO_NUMBER("volume")
  END AS "volume_units"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                        '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                        '09-08-2021','10-08-2021')
ORDER BY "ticker","market_date"
LIMIT 20;
Results:
ticker,market_date,volume,volume_units
BTC,01-08-2021,80.33K,80000
BTC,02-08-2021,74.81K,75000
BTC,03-08-2021,0.26K,0
BTC,04-08-2021,79.22K,79000
BTC,05-08-2021,130.60K,131000
BTC,06-08-2021,111.93K,112000
BTC,07-08-2021,112.84K,113000
BTC,08-08-2021,105.25K,105000
BTC,09-08-2021,117.08K,117000
BTC,10-08-2021,80.55K,81000
ETH,01-08-2021,1.20M,1000000
ETH,02-08-2021,970.67K,971000
ETH,03-08-2021,158.45K,158000

[Successfully executed]
2025-05-07 07:06:19 - Thread-643 (execute) - INFO - [Try to execute]
--Description: 5)  Verify that no NULL values remain after the conversion step
SELECT *
FROM (
    SELECT 
      "ticker",
      "market_date",
      CASE
          WHEN "volume" = '-'                  THEN 0
          WHEN "volume" ILIKE '%K'             THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
          WHEN "volume" ILIKE '%M'             THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
          ELSE TRY_TO_NUMBER("volume")
      END AS "volume_units"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
    WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                            '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                            '09-08-2021','10-08-2021')
) t
WHERE "volume_units" IS NULL
LIMIT 20;
[Try to execute]
2025-05-07 07:06:20 - Thread-643 (execute) - INFO - [Error occurred]
No data found for the specified query.

[Error occurred]
2025-05-07 07:08:08 - Thread-643 (execute) - INFO - [Corrected SQL]
```sql
--Description:  To validate the conversion logic, convert every “volume” value in BITCOIN_PRICES to a numeric figure               (handling “K”, “M”, and “-”) and count how many rows yield NULL.  
--Reasoning:  Removing the previous 01-10 Aug filter guarantees we inspect the full data set; a zero count confirms               the expression never returns NULL anywhere in the table, so the earlier empty result was expected.
SELECT COUNT(*) AS "rows_with_null_volume_units"
FROM (
    SELECT 
        CASE
            WHEN "volume" = '-'      THEN 0
            WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
            WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
            ELSE TRY_TO_NUMBER("volume")
        END AS "volume_units"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
) conv
WHERE "volume_units" IS NULL;
```
[Corrected SQL]
2025-05-07 07:08:08 - Thread-643 (execute) - INFO - [Results for corrected sql]
rows_with_null_volume_units
0

[Results for corrected sql]
2025-05-07 07:09:59 - Thread-643 (execute) - INFO - [Corrected other sqls]
```sql
--Description: 6) Produce a running list of non-zero volumes (after conversion) together with the previous non-zero volume for each ticker between 01-10 Aug 2021
SELECT
    "ticker",
    "market_date",
    "volume_units",
    LAG("volume_units") IGNORE NULLS 
        OVER (PARTITION BY "ticker" ORDER BY TO_DATE("market_date", 'DD-MM-YYYY')) AS "prev_non_zero_volume"
FROM (
    SELECT
        "ticker",
        "market_date",
        CASE
            WHEN "volume" = '-'       THEN 0
            WHEN "volume" ILIKE '%K'  THEN TRY_TO_NUMBER(REPLACE("volume", 'K', '')) * 1000
            WHEN "volume" ILIKE '%M'  THEN TRY_TO_NUMBER(REPLACE("volume", 'M', '')) * 1000000
            ELSE TRY_TO_NUMBER("volume")
        END AS "volume_units"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
    WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                            '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                            '09-08-2021','10-08-2021')
) v
QUALIFY "volume_units" <> 0
ORDER BY "ticker", TO_DATE("market_date", 'DD-MM-YYYY')
LIMIT 20;
```

```sql
--Description: 7) Calculate the daily percentage change in trading volume (current vs previous non-zero) for each ticker, 01-10 Aug 2021
SELECT
    "ticker",
    "market_date",
    "volume_units",
    "prev_non_zero_volume",
    ROUND(100 * ("volume_units" - "prev_non_zero_volume") / "prev_non_zero_volume", 2) AS "pct_change_volume"
FROM (
    SELECT
        "ticker",
        "market_date",
        "volume_units",
        LAG("volume_units") IGNORE NULLS 
            OVER (PARTITION BY "ticker" ORDER BY TO_DATE("market_date", 'DD-MM-YYYY')) AS "prev_non_zero_volume"
    FROM (
        SELECT
            "ticker",
            "market_date",
            CASE
                WHEN "volume" = '-'       THEN 0
                WHEN "volume" ILIKE '%K'  THEN TRY_TO_NUMBER(REPLACE("volume", 'K', '')) * 1000
                WHEN "volume" ILIKE '%M'  THEN TRY_TO_NUMBER(REPLACE("volume", 'M', '')) * 1000000
                ELSE TRY_TO_NUMBER("volume")
            END AS "volume_units"
        FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
        WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                                '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                                '09-08-2021','10-08-2021')
    ) base
    QUALIFY "volume_units" <> 0
) calc
WHERE "prev_non_zero_volume" IS NOT NULL          -- remove first day where no prior volume
ORDER BY "ticker", TO_DATE("market_date", 'DD-MM-YYYY')
LIMIT 20;
```

```sql
--Description: 8) Display only rows where both current and previous non-zero volumes exist (same logic as #7, shown for verification)
SELECT
    "ticker",
    "market_date",
    "volume_units",
    "prev_non_zero_volume",
    ROUND(100 * ("volume_units" - "prev_non_zero_volume") / "prev_non_zero_volume", 2) AS "pct_change_volume"
FROM (
    SELECT
        "ticker",
        "market_date",
        "volume_units",
        LAG("volume_units") IGNORE NULLS 
            OVER (PARTITION BY "ticker" ORDER BY TO_DATE("market_date", 'DD-MM-YYYY')) AS "prev_non_zero_volume"
    FROM (
        SELECT
            "ticker",
            "market_date",
            CASE
                WHEN "volume" = '-'       THEN 0
                WHEN "volume" ILIKE '%K'  THEN TRY_TO_NUMBER(REPLACE("volume", 'K', '')) * 1000
                WHEN "volume" ILIKE '%M'  THEN TRY_TO_NUMBER(REPLACE("volume", 'M', '')) * 1000000
                ELSE TRY_TO_NUMBER("volume")
            END AS "volume_units"
        FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
        WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                                '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                                '09-08-2021','10-08-2021')
    ) b
    QUALIFY "volume_units" <> 0
) c
WHERE "prev_non_zero_volume" IS NOT NULL
ORDER BY "ticker", TO_DATE("market_date", 'DD-MM-YYYY')
LIMIT 20;
```

```sql
--Description: 9) Final answer – daily % change in trading volume for each ticker from 01-10 Aug 2021, ordered by ticker and date
SELECT
    "ticker",
    "market_date",
    "volume_units",
    ROUND(100 * ("volume_units" - "prev_non_zero_volume") / "prev_non_zero_volume", 2) AS "pct_change_volume"
FROM (
    SELECT
        "ticker",
        "market_date",
        "volume_units",
        LAG("volume_units") IGNORE NULLS 
            OVER (PARTITION BY "ticker" ORDER BY TO_DATE("market_date", 'DD-MM-YYYY')) AS "prev_non_zero_volume"
    FROM (
        SELECT
            "ticker",
            "market_date",
            CASE
                WHEN "volume" = '-'       THEN 0
                WHEN "volume" ILIKE '%K'  THEN TRY_TO_NUMBER(REPLACE("volume", 'K', '')) * 1000
                WHEN "volume" ILIKE '%M'  THEN TRY_TO_NUMBER(REPLACE("volume", 'M', '')) * 1000000
                ELSE TRY_TO_NUMBER("volume")
            END AS "volume_units"
        FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
        WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                                '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                                '09-08-2021','10-08-2021')
    ) x
    QUALIFY "volume_units" <> 0
) y
WHERE "prev_non_zero_volume" IS NOT NULL
ORDER BY "ticker", TO_DATE("market_date", 'DD-MM-YYYY');
```

```sql
--Description: 10) Quick check – list any records whose volume is stored as “-” during 01-10 Aug 2021 (should be none for BTC / ETH)
SELECT
    "ticker",
    "market_date",
    "volume"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
WHERE "volume" = '-'
  AND "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                        '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                        '09-08-2021','10-08-2021')
ORDER BY "ticker","market_date"
LIMIT 20;
```
[Corrected other sqls]
2025-05-07 07:09:59 - Thread-643 (execute) - INFO - [Successfully corrected]
Successfully corrected. SQL:
--Description:  To validate the conversion logic, convert every “volume” value in BITCOIN_PRICES to a numeric figure               (handling “K”, “M”, and “-”) and count how many rows yield NULL.  
--Reasoning:  Removing the previous 01-10 Aug filter guarantees we inspect the full data set; a zero count confirms               the expression never returns NULL anywhere in the table, so the earlier empty result was expected.
SELECT COUNT(*) AS "rows_with_null_volume_units"
FROM (
    SELECT 
        CASE
            WHEN "volume" = '-'      THEN 0
            WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
            WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
            ELSE TRY_TO_NUMBER("volume")
        END AS "volume_units"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
) conv
WHERE "volume_units" IS NULL;
Results:
rows_with_null_volume_units
0

[Successfully corrected]
2025-05-07 07:09:59 - Thread-643 (execute) - INFO - [Try to execute]
--Description: 6) Produce a running list of non-zero volumes (after conversion) together with the previous non-zero volume for each ticker between 01-10 Aug 2021
SELECT
    "ticker",
    "market_date",
    "volume_units",
    LAG("volume_units") IGNORE NULLS 
        OVER (PARTITION BY "ticker" ORDER BY TO_DATE("market_date", 'DD-MM-YYYY')) AS "prev_non_zero_volume"
FROM (
    SELECT
        "ticker",
        "market_date",
        CASE
            WHEN "volume" = '-'       THEN 0
            WHEN "volume" ILIKE '%K'  THEN TRY_TO_NUMBER(REPLACE("volume", 'K', '')) * 1000
            WHEN "volume" ILIKE '%M'  THEN TRY_TO_NUMBER(REPLACE("volume", 'M', '')) * 1000000
            ELSE TRY_TO_NUMBER("volume")
        END AS "volume_units"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
    WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                            '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                            '09-08-2021','10-08-2021')
) v
QUALIFY "volume_units" <> 0
ORDER BY "ticker", TO_DATE("market_date", 'DD-MM-YYYY')
LIMIT 20
[Try to execute]
2025-05-07 07:09:59 - Thread-643 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 6) Produce a running list of non-zero volumes (after conversion) together with the previous non-zero volume for each ticker between 01-10 Aug 2021
SELECT
    "ticker",
    "market_date",
    "volume_units",
    LAG("volume_units") IGNORE NULLS 
        OVER (PARTITION BY "ticker" ORDER BY TO_DATE("market_date", 'DD-MM-YYYY')) AS "prev_non_zero_volume"
FROM (
    SELECT
        "ticker",
        "market_date",
        CASE
            WHEN "volume" = '-'       THEN 0
            WHEN "volume" ILIKE '%K'  THEN TRY_TO_NUMBER(REPLACE("volume", 'K', '')) * 1000
            WHEN "volume" ILIKE '%M'  THEN TRY_TO_NUMBER(REPLACE("volume", 'M', '')) * 1000000
            ELSE TRY_TO_NUMBER("volume")
        END AS "volume_units"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
    WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                            '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                            '09-08-2021','10-08-2021')
) v
QUALIFY "volume_units" <> 0
ORDER BY "ticker", TO_DATE("market_date", 'DD-MM-YYYY')
LIMIT 20
Results:
ticker,market_date,volume_units,prev_non_zero_volume
BTC,01-08-2021,80000,
BTC,02-08-2021,75000,80000
BTC,04-08-2021,79000,0
BTC,05-08-2021,131000,79000
BTC,06-08-2021,112000,131000
BTC,07-08-2021,113000,112000
BTC,08-08-2021,105000,113000
BTC,09-08-2021,117000,105000
BTC,10-08-2021,81000,117000
ETH,01-08-2021,1000000,
ETH,02-08-2021,971000,1000000
ETH,03-08-2021,158000,971000
ETH,04-08-2021,1000000,158000
ETH,05-08-2021,2000000,1000000

[Successfully executed]
2025-05-07 07:09:59 - Thread-643 (execute) - INFO - [Try to execute]
--Description: 7) Calculate the daily percentage change in trading volume (current vs previous non-zero) for each ticker, 01-10 Aug 2021
SELECT
    "ticker",
    "market_date",
    "volume_units",
    "prev_non_zero_volume",
    ROUND(100 * ("volume_units" - "prev_non_zero_volume") / "prev_non_zero_volume", 2) AS "pct_change_volume"
FROM (
    SELECT
        "ticker",
        "market_date",
        "volume_units",
        LAG("volume_units") IGNORE NULLS 
            OVER (PARTITION BY "ticker" ORDER BY TO_DATE("market_date", 'DD-MM-YYYY')) AS "prev_non_zero_volume"
    FROM (
        SELECT
            "ticker",
            "market_date",
            CASE
                WHEN "volume" = '-'       THEN 0
                WHEN "volume" ILIKE '%K'  THEN TRY_TO_NUMBER(REPLACE("volume", 'K', '')) * 1000
                WHEN "volume" ILIKE '%M'  THEN TRY_TO_NUMBER(REPLACE("volume", 'M', '')) * 1000000
                ELSE TRY_TO_NUMBER("volume")
            END AS "volume_units"
        FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
        WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                                '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                                '09-08-2021','10-08-2021')
    ) base
    QUALIFY "volume_units" <> 0
) calc
WHERE "prev_non_zero_volume" IS NOT NULL          -- remove first day where no prior volume
ORDER BY "ticker", TO_DATE("market_date", 'DD-MM-YYYY')
LIMIT 20
[Try to execute]
2025-05-07 07:10:00 - Thread-643 (execute) - INFO - [Error occurred]
{'status': 'error', 'error_msg': '##ERROR##100051 (22012): Division by zero'}
[Error occurred]
2025-05-07 07:13:38 - Thread-643 (execute) - INFO - [Corrected SQL]
```sql
--Description: Final calculation of daily %-change in trading volume for every ticker from 01-10 Aug 2021.  
--THINKING:  
-- 1) Convert “volume” strings to pure numbers: “K”→*1 000, “M”→*1 000 000, “-”→0.  
-- 2) Discard rows whose converted volume = 0, so the LAG() window function will reference the most recent                 non-zero day only.  
-- 3) Use LAG() to fetch the previous non-zero volume per ticker.  
-- 4) Exclude rows where that previous volume is NULL or 0 to avoid divide-by-zero.  
-- 5) Compute % change and order results by ticker and date.
WITH vol AS (
    SELECT
        "ticker",
        "market_date",
        CASE
            WHEN "volume" = '-'      THEN 0
            WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
            WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
            ELSE TRY_TO_NUMBER("volume")
        END AS "volume_units"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
    WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                            '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                            '09-08-2021','10-08-2021')
), non_zero AS (
    SELECT
        "ticker",
        "market_date",
        "volume_units",
        LAG("volume_units") OVER (
            PARTITION BY "ticker"
            ORDER BY TO_DATE("market_date",'DD-MM-YYYY')
        ) AS "prev_non_zero_volume"
    FROM vol
    WHERE "volume_units" <> 0            -- keep only days with volume
)
SELECT
    "ticker",
    "market_date",
    "volume_units",
    "prev_non_zero_volume",
    ROUND(
        100 * ("volume_units" - "prev_non_zero_volume") / "prev_non_zero_volume",
        2
    ) AS "pct_change_volume"
FROM non_zero
WHERE "prev_non_zero_volume" IS NOT NULL      -- need a prior value
  AND "prev_non_zero_volume" <> 0             -- protect against /0
ORDER BY "ticker", TO_DATE("market_date",'DD-MM-YYYY');
```
[Corrected SQL]
2025-05-07 07:13:39 - Thread-643 (execute) - INFO - [Results for corrected sql]
ticker,market_date,volume_units,prev_non_zero_volume,pct_change_volume
BTC,02-08-2021,75000,80000,-6.25
BTC,04-08-2021,79000,75000,5.33
BTC,05-08-2021,131000,79000,65.82
BTC,06-08-2021,112000,131000,-14.50
BTC,07-08-2021,113000,112000,0.89
BTC,08-08-2021,105000,113000,-7.08
BTC,09-08-2021,117000,105000,11.43
BTC,10-08-2021,81000,117000,-30.77
ETH,02-08-2021,971000,1000000,-2.90
ETH,03-08-2021,158000,971000,-83.73

[Results for corrected sql]
2025-05-07 07:14:31 - Thread-643 (execute) - INFO - [Corrected other sqls]
```sql
--Description: 8) Display rows (01-10 Aug 2021) where both current and previous non-zero volumes exist ‑ uses same safe logic as #7, includes LIMIT 20 for sampling
WITH vols AS (
    SELECT
        "ticker",
        "market_date",
        CASE
            WHEN "volume" = '-'      THEN 0
            WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
            WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
            ELSE TRY_TO_NUMBER("volume")
        END AS "volume_units"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
    WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                            '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                            '09-08-2021','10-08-2021')
), non_zero AS (
    SELECT
        "ticker",
        "market_date",
        "volume_units",
        LAG("volume_units") OVER (
            PARTITION BY "ticker"
            ORDER BY TO_DATE("market_date",'DD-MM-YYYY')
        ) AS "prev_non_zero_volume"
    FROM vols
    WHERE "volume_units" <> 0
)
SELECT
    "ticker",
    "market_date",
    "volume_units",
    "prev_non_zero_volume",
    ROUND(100 * ("volume_units" - "prev_non_zero_volume") / "prev_non_zero_volume", 2) AS "pct_change_volume"
FROM non_zero
WHERE "prev_non_zero_volume" IS NOT NULL          -- ensure prior value exists
ORDER BY "ticker", TO_DATE("market_date",'DD-MM-YYYY')
LIMIT 20;
```

```sql
--Description: 9) Final answer – daily % change in trading volume for each ticker from 01-10 Aug 2021, ordered by ticker and date (safe against divide-by-zero)
WITH vols AS (
    SELECT
        "ticker",
        "market_date",
        CASE
            WHEN "volume" = '-'      THEN 0
            WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
            WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
            ELSE TRY_TO_NUMBER("volume")
        END AS "volume_units"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
    WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                            '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                            '09-08-2021','10-08-2021')
), non_zero AS (
    SELECT
        "ticker",
        "market_date",
        "volume_units",
        LAG("volume_units") OVER (
            PARTITION BY "ticker"
            ORDER BY TO_DATE("market_date",'DD-MM-YYYY')
        ) AS "prev_non_zero_volume"
    FROM vols
    WHERE "volume_units" <> 0
)
SELECT
    "ticker",
    "market_date",
    "volume_units",
    ROUND(100 * ("volume_units" - "prev_non_zero_volume") / "prev_non_zero_volume", 2) AS "pct_change_volume"
FROM non_zero
WHERE "prev_non_zero_volume" IS NOT NULL
ORDER BY "ticker", TO_DATE("market_date",'DD-MM-YYYY');
```

```sql
--Description: 10) Quick check – list any records whose volume is stored as “-” during 01-10 Aug 2021 (should return none)
SELECT
    "ticker",
    "market_date",
    "volume"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
WHERE "volume" = '-'
  AND "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                        '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                        '09-08-2021','10-08-2021')
ORDER BY "ticker","market_date"
LIMIT 20;
```
[Corrected other sqls]
2025-05-07 07:14:31 - Thread-643 (execute) - INFO - [Successfully corrected]
Successfully corrected. SQL:
--Description: Final calculation of daily %-change in trading volume for every ticker from 01-10 Aug 2021.  
--THINKING:  
-- 1) Convert “volume” strings to pure numbers: “K”→*1 000, “M”→*1 000 000, “-”→0.  
-- 2) Discard rows whose converted volume = 0, so the LAG() window function will reference the most recent                 non-zero day only.  
-- 3) Use LAG() to fetch the previous non-zero volume per ticker.  
-- 4) Exclude rows where that previous volume is NULL or 0 to avoid divide-by-zero.  
-- 5) Compute % change and order results by ticker and date.
WITH vol AS (
    SELECT
        "ticker",
        "market_date",
        CASE
            WHEN "volume" = '-'      THEN 0
            WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
            WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
            ELSE TRY_TO_NUMBER("volume")
        END AS "volume_units"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
    WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                            '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                            '09-08-2021','10-08-2021')
), non_zero AS (
    SELECT
        "ticker",
        "market_date",
        "volume_units",
        LAG("volume_units") OVER (
            PARTITION BY "ticker"
            ORDER BY TO_DATE("market_date",'DD-MM-YYYY')
        ) AS "prev_non_zero_volume"
    FROM vol
    WHERE "volume_units" <> 0            -- keep only days with volume
)
SELECT
    "ticker",
    "market_date",
    "volume_units",
    "prev_non_zero_volume",
    ROUND(
        100 * ("volume_units" - "prev_non_zero_volume") / "prev_non_zero_volume",
        2
    ) AS "pct_change_volume"
FROM non_zero
WHERE "prev_non_zero_volume" IS NOT NULL      -- need a prior value
  AND "prev_non_zero_volume" <> 0             -- protect against /0
ORDER BY "ticker", TO_DATE("market_date",'DD-MM-YYYY');
Results:
ticker,market_date,volume_units,prev_non_zero_volume,pct_change_volume
BTC,02-08-2021,75000,80000,-6.25
BTC,04-08-2021,79000,75000,5.33
BTC,05-08-2021,131000,79000,65.82
BTC,06-08-2021,112000,131000,-14.50
BTC,07-08-2021,113000,112000,0.89
BTC,08-08-2021,105000,113000,-7.08
BTC,09-08-2021,117000,105000,11.43
BTC,10-08-2021,81000,117000,-30.77
ETH,02-08-2021,971000,1000000,-2.90
ETH,03-08-2021,158000,971000,-83.73

[Successfully corrected]
2025-05-07 07:14:31 - Thread-643 (execute) - INFO - [Try to execute]
--Description: 8) Display rows (01-10 Aug 2021) where both current and previous non-zero volumes exist ‑ uses same safe logic as #7, includes LIMIT 20 for sampling
WITH vols AS (
    SELECT
        "ticker",
        "market_date",
        CASE
            WHEN "volume" = '-'      THEN 0
            WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
            WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
            ELSE TRY_TO_NUMBER("volume")
        END AS "volume_units"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
    WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                            '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                            '09-08-2021','10-08-2021')
), non_zero AS (
    SELECT
        "ticker",
        "market_date",
        "volume_units",
        LAG("volume_units") OVER (
            PARTITION BY "ticker"
            ORDER BY TO_DATE("market_date",'DD-MM-YYYY')
        ) AS "prev_non_zero_volume"
    FROM vols
    WHERE "volume_units" <> 0
)
SELECT
    "ticker",
    "market_date",
    "volume_units",
    "prev_non_zero_volume",
    ROUND(100 * ("volume_units" - "prev_non_zero_volume") / "prev_non_zero_volume", 2) AS "pct_change_volume"
FROM non_zero
WHERE "prev_non_zero_volume" IS NOT NULL          -- ensure prior value exists
ORDER BY "ticker", TO_DATE("market_date",'DD-MM-YYYY')
LIMIT 20
[Try to execute]
2025-05-07 07:14:32 - Thread-643 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 8) Display rows (01-10 Aug 2021) where both current and previous non-zero volumes exist ‑ uses same safe logic as #7, includes LIMIT 20 for sampling
WITH vols AS (
    SELECT
        "ticker",
        "market_date",
        CASE
            WHEN "volume" = '-'      THEN 0
            WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
            WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
            ELSE TRY_TO_NUMBER("volume")
        END AS "volume_units"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
    WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                            '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                            '09-08-2021','10-08-2021')
), non_zero AS (
    SELECT
        "ticker",
        "market_date",
        "volume_units",
        LAG("volume_units") OVER (
            PARTITION BY "ticker"
            ORDER BY TO_DATE("market_date",'DD-MM-YYYY')
        ) AS "prev_non_zero_volume"
    FROM vols
    WHERE "volume_units" <> 0
)
SELECT
    "ticker",
    "market_date",
    "volume_units",
    "prev_non_zero_volume",
    ROUND(100 * ("volume_units" - "prev_non_zero_volume") / "prev_non_zero_volume", 2) AS "pct_change_volume"
FROM non_zero
WHERE "prev_non_zero_volume" IS NOT NULL          -- ensure prior value exists
ORDER BY "ticker", TO_DATE("market_date",'DD-MM-YYYY')
LIMIT 20
Results:
ticker,market_date,volume_units,prev_non_zero_volume,pct_change_volume
BTC,02-08-2021,75000,80000,-6.25
BTC,04-08-2021,79000,75000,5.33
BTC,05-08-2021,131000,79000,65.82
BTC,06-08-2021,112000,131000,-14.50
BTC,07-08-2021,113000,112000,0.89
BTC,08-08-2021,105000,113000,-7.08
BTC,09-08-2021,117000,105000,11.43
BTC,10-08-2021,81000,117000,-30.77
ETH,02-08-2021,971000,1000000,-2.90
ETH,03-08-2021,158000,971000,-83.73

[Successfully executed]
2025-05-07 07:14:32 - Thread-643 (execute) - INFO - [Try to execute]
--Description: 9) Final answer – daily % change in trading volume for each ticker from 01-10 Aug 2021, ordered by ticker and date (safe against divide-by-zero)
WITH vols AS (
    SELECT
        "ticker",
        "market_date",
        CASE
            WHEN "volume" = '-'      THEN 0
            WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
            WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
            ELSE TRY_TO_NUMBER("volume")
        END AS "volume_units"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
    WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                            '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                            '09-08-2021','10-08-2021')
), non_zero AS (
    SELECT
        "ticker",
        "market_date",
        "volume_units",
        LAG("volume_units") OVER (
            PARTITION BY "ticker"
            ORDER BY TO_DATE("market_date",'DD-MM-YYYY')
        ) AS "prev_non_zero_volume"
    FROM vols
    WHERE "volume_units" <> 0
)
SELECT
    "ticker",
    "market_date",
    "volume_units",
    ROUND(100 * ("volume_units" - "prev_non_zero_volume") / "prev_non_zero_volume", 2) AS "pct_change_volume"
FROM non_zero
WHERE "prev_non_zero_volume" IS NOT NULL
ORDER BY "ticker", TO_DATE("market_date",'DD-MM-YYYY')
[Try to execute]
2025-05-07 07:14:32 - Thread-643 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 9) Final answer – daily % change in trading volume for each ticker from 01-10 Aug 2021, ordered by ticker and date (safe against divide-by-zero)
WITH vols AS (
    SELECT
        "ticker",
        "market_date",
        CASE
            WHEN "volume" = '-'      THEN 0
            WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
            WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
            ELSE TRY_TO_NUMBER("volume")
        END AS "volume_units"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
    WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                            '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                            '09-08-2021','10-08-2021')
), non_zero AS (
    SELECT
        "ticker",
        "market_date",
        "volume_units",
        LAG("volume_units") OVER (
            PARTITION BY "ticker"
            ORDER BY TO_DATE("market_date",'DD-MM-YYYY')
        ) AS "prev_non_zero_volume"
    FROM vols
    WHERE "volume_units" <> 0
)
SELECT
    "ticker",
    "market_date",
    "volume_units",
    ROUND(100 * ("volume_units" - "prev_non_zero_volume") / "prev_non_zero_volume", 2) AS "pct_change_volume"
FROM non_zero
WHERE "prev_non_zero_volume" IS NOT NULL
ORDER BY "ticker", TO_DATE("market_date",'DD-MM-YYYY')
Results:
ticker,market_date,volume_units,pct_change_volume
BTC,02-08-2021,75000,-6.25
BTC,04-08-2021,79000,5.33
BTC,05-08-2021,131000,65.82
BTC,06-08-2021,112000,-14.50
BTC,07-08-2021,113000,0.89
BTC,08-08-2021,105000,-7.08
BTC,09-08-2021,117000,11.43
BTC,10-08-2021,81000,-30.77
ETH,02-08-2021,971000,-2.90
ETH,03-08-2021,158000,-83.73
ETH,04-08-2021,1000000,532.91

[Successfully executed]
2025-05-07 07:14:32 - Thread-643 (execute) - INFO - [Try to execute]
--Description: 10) Quick check – list any records whose volume is stored as “-” during 01-10 Aug 2021 (should return none)
SELECT
    "ticker",
    "market_date",
    "volume"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
WHERE "volume" = '-'
  AND "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                        '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                        '09-08-2021','10-08-2021')
ORDER BY "ticker","market_date"
LIMIT 20
[Try to execute]
2025-05-07 07:14:33 - Thread-643 (execute) - INFO - [Error occurred]
No data found for the specified query.

[Error occurred]
2025-05-07 07:15:13 - Thread-643 (execute) - INFO - [Corrected SQL]
```sql
--Description:  Count how many rows in the entire BITCOIN_PRICES table have a “volume” value of ‘-’.  
--Rationale:  This simplified query tells us instantly whether any dash entries exist (0 = none); no date filter required.
SELECT COUNT(*) AS "dash_volume_rows"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
WHERE "volume" = '-';
```
[Corrected SQL]
2025-05-07 07:15:13 - Thread-643 (execute) - INFO - [Results for corrected sql]
dash_volume_rows
1

[Results for corrected sql]
2025-05-07 07:15:13 - Thread-643 (execute) - INFO - [Successfully corrected]
Successfully corrected. SQL:
--Description:  Count how many rows in the entire BITCOIN_PRICES table have a “volume” value of ‘-’.  
--Rationale:  This simplified query tells us instantly whether any dash entries exist (0 = none); no date filter required.
SELECT COUNT(*) AS "dash_volume_rows"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
WHERE "volume" = '-';
Results:
dash_volume_rows
1

[Successfully corrected]
2025-05-07 07:15:13 - Thread-643 (execute) - INFO - itercount: 0
2025-05-07 07:15:13 - Thread-643 (execute) - INFO - [Self-refine]
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.INTEREST_MAP
Column name: interest_summary Type: TEXT
Column name: id Type: NUMBER
Column name: interest_name Type: TEXT
Column name: last_modified Type: TEXT
Column name: created_at Type: TEXT
Sample rows:
[{'id': 4, 'interest_name': 'Luxury Retail Researchers', 'interest_summary': 'Consumers researching luxury product reviews and gift ideas.', 'created_at': '2016-05-26 14:57:59', 'last_modified': '2018-05-23 11:30:12'}, {'id': 6, 'interest_name': 'Vacation Planners', 'interest_summary': 'Consumers reading reviews of vacation destinations and accommodations.', 'created_at': '2016-05-26 14:57:59', 'last_modified': '2018-05-23 11:30:13'}, {'id': 7, 'interest_name': 'Motorcycle Enthusiasts', 'interest_summary': 'Readers of motorcycle news and reviews.', 'created_at': '2016-05-26 14:57:59', 'last_modified': '2018-05-23 11:30:13'}, {'id': 8, 'interest_name': 'Business News Readers', 'interest_summary': 'Readers of online business news content.', 'created_at': '2016-05-26 14:57:59', 'last_modified': '2018-05-23 11:30:12'}, {'id': 13, 'interest_name': 'Advertising Professionals', 'interest_summary': 'People who read advertising industry news.', 'created_at': '2016-05-26 14:57:59', 'last_modified': '2018-05-23 11:30:12'}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.INTEREST_METRICS
Column name: ranking Type: NUMBER
Column name: percentile_ranking Type: FLOAT
Column name: month_year Type: TEXT
Column name: interest_id Type: FLOAT
Column name: composition Type: FLOAT
Column name: _month Type: FLOAT
Column name: index_value Type: FLOAT
Column name: _year Type: FLOAT
Sample rows:
[{'_month': 7.0, '_year': 2018.0, 'month_year': '07-2018', 'interest_id': 6106.0, 'composition': 9.93, 'index_value': 5.31, 'ranking': 2, 'percentile_ranking': 99.73}, {'_month': 7.0, '_year': 2018.0, 'month_year': '07-2018', 'interest_id': 18923.0, 'composition': 10.85, 'index_value': 5.29, 'ranking': 3, 'percentile_ranking': 99.59}, {'_month': 7.0, '_year': 2018.0, 'month_year': '07-2018', 'interest_id': 6344.0, 'composition': 10.32, 'index_value': 5.1, 'ranking': 4, 'percentile_ranking': 99.45}, {'_month': 7.0, '_year': 2018.0, 'month_year': '07-2018', 'interest_id': 100.0, 'composition': 10.77, 'index_value': 5.04, 'ranking': 5, 'percentile_ranking': 99.31}, {'_month': 7.0, '_year': 2018.0, 'month_year': '07-2018', 'interest_id': 79.0, 'composition': 11.21, 'index_value': 4.97, 'ranking': 7, 'percentile_ranking': 99.04}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
Column name: low Type: FLOAT
Column name: change Type: TEXT
Column name: price Type: FLOAT
Column name: open Type: FLOAT
Column name: volume Type: TEXT
Column name: high Type: FLOAT
Column name: market_date Type: TEXT
Column name: ticker Type: TEXT
Sample rows:
[{'ticker': 'ETH', 'market_date': '29-08-2021', 'price': 3177.84, 'open': 3243.96, 'high': 3282.21, 'low': 3162.79, 'volume': '582.04K', 'change': '-2.04%'}, {'ticker': 'ETH', 'market_date': '27-08-2021', 'price': 3273.58, 'open': 3093.78, 'high': 3279.93, 'low': 3063.37, 'volume': '839.54K', 'change': '5.82%'}, {'ticker': 'ETH', 'market_date': '26-08-2021', 'price': 3093.54, 'open': 3228.03, 'high': 3249.62, 'low': 3057.48, 'volume': '118.44K', 'change': '-4.17%'}, {'ticker': 'ETH', 'market_date': '24-08-2021', 'price': 3173.26, 'open': 3322.6, 'high': 3357.99, 'low': 3150.75, 'volume': '988.82K', 'change': '-4.41%'}, {'ticker': 'ETH', 'market_date': '23-08-2021', 'price': 3319.49, 'open': 3238.41, 'high': 3375.42, 'low': 3231.96, 'volume': '1.09M', 'change': '2.49%'}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.SHOPPING_CART_CAMPAIGN_IDENTIFIER
Column name: start_date Type: TEXT
Column name: campaign_id Type: NUMBER
Column name: campaign_name Type: TEXT
Column name: end_date Type: TEXT
Column name: products Type: TEXT
Sample rows:
[]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.SHOPPING_CART_EVENT_IDENTIFIER
Column name: event_name Type: TEXT
Column name: event_type Type: NUMBER
Sample rows:
[{'event_type': 2, 'event_name': 'Add to Cart'}, {'event_type': 3, 'event_name': 'Purchase'}, {'event_type': 4, 'event_name': 'Ad Impression'}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.VEG_CAT
Column name: category_code Type: NUMBER
Column name: item_code Type: NUMBER
Column name: category_name Type: TEXT
Column name: item_name Type: TEXT
Column name: index Type: NUMBER
Sample rows:
[{'index': 0, 'item_code': 102900005115168, 'item_name': 'Niushou Shengcai', 'category_code': 1011010101, 'category_name': 'Flower/Leaf\xa0Vegetables'}, {'index': 2, 'item_code': 102900005115625, 'item_name': 'Local Xiaomao Cabbage', 'category_code': 1011010101, 'category_name': 'Flower/Leaf\xa0Vegetables'}, {'index': 3, 'item_code': 102900005115748, 'item_name': 'White Caitai', 'category_code': 1011010101, 'category_name': 'Flower/Leaf\xa0Vegetables'}, {'index': 4, 'item_code': 102900005115762, 'item_name': 'Amaranth', 'category_code': 1011010101, 'category_name': 'Flower/Leaf\xa0Vegetables'}, {'index': 5, 'item_code': 102900005115779, 'item_name': 'Yunnan Shengcai', 'category_code': 1011010101, 'category_name': 'Flower/Leaf\xa0Vegetables'}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.VEG_WHSLE_DF
Column name: index Type: NUMBER
Column name: whsle_px_rmb-kg Type: FLOAT
Column name: whsle_date Type: TEXT
Column name: item_code Type: NUMBER
Sample rows:
[{'index': 0, 'whsle_date': '2020-07-01 00:00:00', 'item_code': 102900005115762, 'whsle_px_rmb-kg': 3.88}, {'index': 5, 'whsle_date': '2020-07-01 00:00:00', 'item_code': 102900005115908, 'whsle_px_rmb-kg': 4.6}, {'index': 8, 'whsle_date': '2020-07-01 00:00:00', 'item_code': 102900005115984, 'whsle_px_rmb-kg': 3.44}, {'index': 9, 'whsle_date': '2020-07-01 00:00:00', 'item_code': 102900005116226, 'whsle_px_rmb-kg': 4.64}, {'index': 10, 'whsle_date': '2020-07-01 00:00:00', 'item_code': 102900005116233, 'whsle_px_rmb-kg': 5.76}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_TRANSACTIONS
Column name: quantity Type: FLOAT
Column name: member_id Type: TEXT
Column name: txn_id Type: NUMBER
Column name: ticker Type: TEXT
Column name: txn_type Type: TEXT
Column name: percentage_fee Type: FLOAT
Column name: txn_time Type: TEXT
Column name: txn_date Type: TEXT
Sample rows:
[{'txn_id': 2, 'member_id': 'eccbc8', 'ticker': 'BTC', 'txn_date': '01-01-2017', 'txn_type': 'BUY', 'quantity': 50.0, 'percentage_fee': 0.3, 'txn_time': '2017-01-01T00:00:00.000Z'}, {'txn_id': 3, 'member_id': 'a87ff6', 'ticker': 'BTC', 'txn_date': '01-01-2017', 'txn_type': 'BUY', 'quantity': 50.0, 'percentage_fee': 0.0, 'txn_time': '2017-01-01T00:00:00.000Z'}, {'txn_id': 7, 'member_id': '8f14e4', 'ticker': 'BTC', 'txn_date': '01-01-2017', 'txn_type': 'BUY', 'quantity': 50.0, 'percentage_fee': 0.21, 'txn_time': '2017-01-01T00:00:00.000Z'}, {'txn_id': 8, 'member_id': 'c9f0f8', 'ticker': 'BTC', 'txn_date': '01-01-2017', 'txn_type': 'BUY', 'quantity': 50.0, 'percentage_fee': 0.3, 'txn_time': '2017-01-01T00:00:00.000Z'}, {'txn_id': 10, 'member_id': 'd3d944', 'ticker': 'BTC', 'txn_date': '01-01-2017', 'txn_type': 'BUY', 'quantity': 50.0, 'percentage_fee': 0.3, 'txn_time': '2017-01-01T00:00:00.000Z'}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.SHOPPING_CART_EVENTS
Column name: page_id Type: NUMBER
Column name: event_type Type: NUMBER
Column name: cookie_id Type: TEXT
Column name: event_time Type: TEXT
Column name: visit_id Type: TEXT
Column name: sequence_number Type: NUMBER
Sample rows:
[{'visit_id': 'ccf365', 'cookie_id': 'c4ca42', 'page_id': 9, 'event_type': 1, 'sequence_number': 4, 'event_time': '2020-02-04 19:16:58.609142'}, {'visit_id': 'ccf365', 'cookie_id': 'c4ca42', 'page_id': 9, 'event_type': 2, 'sequence_number': 5, 'event_time': '2020-02-04 19:17:51.72942'}, {'visit_id': 'ccf365', 'cookie_id': 'c4ca42', 'page_id': 10, 'event_type': 2, 'sequence_number': 7, 'event_time': '2020-02-04 19:19:10.570786'}, {'visit_id': 'ccf365', 'cookie_id': 'c4ca42', 'page_id': 12, 'event_type': 1, 'sequence_number': 10, 'event_time': '2020-02-04 19:20:52.307244'}, {'visit_id': 'd58cbd', 'cookie_id': 'c81e72', 'page_id': 1, 'event_type': 1, 'sequence_number': 1, 'event_time': '2020-01-18 23:40:54.761906'}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.VEG_LOSS_RATE_DF
Column name: item_name Type: TEXT
Column name: item_code Type: NUMBER
Column name: index Type: NUMBER
Column name: loss_rate_% Type: FLOAT
Sample rows:
[{'index': 0, 'item_code': 102900005115168, 'item_name': 'Niushou Shengcai', 'loss_rate_%': 4.39}, {'index': 1, 'item_code': 102900005115199, 'item_name': 'Sichuan Red Cedar', 'loss_rate_%': 10.46}, {'index': 7, 'item_code': 102900005115786, 'item_name': 'Zhuyecai', 'loss_rate_%': 13.62}, {'index': 8, 'item_code': 102900005115793, 'item_name': 'Chinese Cabbage', 'loss_rate_%': 7.59}, {'index': 10, 'item_code': 102900005115823, 'item_name': 'Shanghaiqing', 'loss_rate_%': 14.43}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.CUSTOMER_NODES
Column name: region_id Type: NUMBER
Column name: start_date Type: TEXT
Column name: end_date Type: TEXT
Column name: customer_id Type: NUMBER
Column name: node_id Type: NUMBER
Sample rows:
[{'customer_id': 1, 'region_id': 3, 'node_id': 4, 'start_date': '2020-01-02', 'end_date': '2020-01-03'}, {'customer_id': 2, 'region_id': 3, 'node_id': 5, 'start_date': '2020-01-03', 'end_date': '2020-01-17'}, {'customer_id': 3, 'region_id': 5, 'node_id': 4, 'start_date': '2020-01-27', 'end_date': '2020-02-18'}, {'customer_id': 4, 'region_id': 5, 'node_id': 4, 'start_date': '2020-01-07', 'end_date': '2020-01-19'}, {'customer_id': 7, 'region_id': 2, 'node_id': 5, 'start_date': '2020-01-20', 'end_date': '2020-02-04'}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.WEEKLY_SALES
Column name: region Type: TEXT
Column name: week_date Type: TEXT
Column name: segment Type: TEXT
Column name: customer_type Type: TEXT
Column name: sales Type: NUMBER
Column name: platform Type: TEXT
Column name: transactions Type: NUMBER
Sample rows:
[{'week_date': '31/8/20', 'region': 'ASIA', 'platform': 'Retail', 'segment': 'F1', 'customer_type': 'New', 'transactions': 31574, 'sales': 996575}, {'week_date': '31/8/20', 'region': 'OCEANIA', 'platform': 'Shopify', 'segment': 'C2', 'customer_type': 'Existing', 'transactions': 4661, 'sales': 882690}, {'week_date': '31/8/20', 'region': 'AFRICA', 'platform': 'Retail', 'segment': 'F1', 'customer_type': 'Existing', 'transactions': 97604, 'sales': 5185233}, {'week_date': '31/8/20', 'region': 'OCEANIA', 'platform': 'Retail', 'segment': 'C2', 'customer_type': 'New', 'transactions': 111219, 'sales': 2980673}, {'week_date': '31/8/20', 'region': 'AFRICA', 'platform': 'Retail', 'segment': 'C3', 'customer_type': 'Existing', 'transactions': 284971, 'sales': 14430196}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_MEMBERS
Column name: first_name Type: TEXT
Column name: member_id Type: TEXT
Column name: region Type: TEXT
Sample rows:
[{'member_id': 'c4ca42', 'first_name': 'Danny', 'region': 'Australia'}, {'member_id': 'c81e72', 'first_name': 'Vipul', 'region': 'United States'}, {'member_id': 'a87ff6', 'first_name': 'Nandita', 'region': 'United States'}, {'member_id': 'e4da3b', 'first_name': 'Rowan', 'region': 'United States'}, {'member_id': '167909', 'first_name': 'Ayush', 'region': 'United States'}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
Column name: platform Type: TEXT
Column name: month_number Type: NUMBER
Column name: age_band Type: TEXT
Column name: calendar_year Type: NUMBER
Column name: customer_type Type: TEXT
Column name: region Type: TEXT
Column name: demographic Type: TEXT
Column name: week_number Type: NUMBER
Column name: transactions Type: NUMBER
Column name: avg_transaction Type: FLOAT
Column name: segment Type: TEXT
Column name: week_date Type: TEXT
Column name: sales Type: NUMBER
Column name: week_date_formatted Type: TEXT
Sample rows:
[{'week_date_formatted': '2020-8-31', 'week_date': '2020-08-31', 'region': 'USA', 'platform': 'Retail', 'segment': 'unknown', 'customer_type': 'Guest', 'transactions': 529151, 'sales': 16509610, 'week_number': 36, 'month_number': 8, 'calendar_year': 2020, 'age_band': 'unknown', 'demographic': 'unknown', 'avg_transaction': 31.2}, {'week_date_formatted': '2020-8-31', 'week_date': '2020-08-31', 'region': 'EUROPE', 'platform': 'Retail', 'segment': 'C1', 'customer_type': 'New', 'transactions': 4517, 'sales': 141942, 'week_number': 36, 'month_number': 8, 'calendar_year': 2020, 'age_band': 'Young Adults', 'demographic': 'Couples', 'avg_transaction': 31.42}, {'week_date_formatted': '2020-8-31', 'week_date': '2020-08-31', 'region': 'AFRICA', 'platform': 'Retail', 'segment': 'C2', 'customer_type': 'New', 'transactions': 58046, 'sales': 1758388, 'week_number': 36, 'month_number': 8, 'calendar_year': 2020, 'age_band': 'Middle Aged', 'demographic': 'Couples', 'avg_transaction': 30.29}, {'week_date_formatted': '2020-8-31', 'week_date': '2020-08-31', 'region': 'AFRICA', 'platform': 'Shopify', 'segment': 'F3', 'customer_type': 'Existing', 'transactions': 2514, 'sales': 519502, 'week_number': 36, 'month_number': 8, 'calendar_year': 2020, 'age_band': 'Retirees', 'demographic': 'Families', 'avg_transaction': 206.64}, {'week_date_formatted': '2020-8-31', 'week_date': '2020-08-31', 'region': 'ASIA', 'platform': 'Shopify', 'segment': 'F1', 'customer_type': 'Existing', 'transactions': 2158, 'sales': 371417, 'week_number': 36, 'month_number': 8, 'calendar_year': 2020, 'age_band': 'Young Adults', 'demographic': 'Families', 'avg_transaction': 172.11}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.CUSTOMER_REGIONS
Column name: region_id Type: NUMBER
Column name: region_name Type: TEXT
Sample rows:
[{'region_id': 3, 'region_name': 'Africa'}, {'region_id': 4, 'region_name': 'Asia'}, {'region_id': 5, 'region_name': 'Europe'}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.CUSTOMER_TRANSACTIONS
Column name: customer_id Type: NUMBER
Column name: txn_date Type: TEXT
Column name: txn_amount Type: NUMBER
Column name: txn_type Type: TEXT
Sample rows:
[{'customer_id': 429, 'txn_date': '2020-01-21', 'txn_type': 'deposit', 'txn_amount': 82}, {'customer_id': 155, 'txn_date': '2020-01-10', 'txn_type': 'deposit', 'txn_amount': 712}, {'customer_id': 398, 'txn_date': '2020-01-01', 'txn_type': 'deposit', 'txn_amount': 196}, {'customer_id': 255, 'txn_date': '2020-01-14', 'txn_type': 'deposit', 'txn_amount': 563}, {'customer_id': 373, 'txn_date': '2020-01-18', 'txn_type': 'deposit', 'txn_amount': 596}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.SHOPPING_CART_USERS
Column name: user_id Type: NUMBER
Column name: cookie_id Type: TEXT
Column name: start_date Type: TEXT
Sample rows:
[{'user_id': 1, 'cookie_id': 'c4ca42', 'start_date': '2020-02-04'}, {'user_id': 2, 'cookie_id': 'c81e72', 'start_date': '2020-01-18'}, {'user_id': 4, 'cookie_id': 'a87ff6', 'start_date': '2020-02-22'}, {'user_id': 5, 'cookie_id': 'e4da3b', 'start_date': '2020-02-01'}, {'user_id': 7, 'cookie_id': '8f14e4', 'start_date': '2020-02-09'}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.VEG_TXN_DF
Column name: txn_date Type: TEXT
Column name: qty_sold(kg) Type: FLOAT
Column name: sale/return Type: TEXT
Column name: txn_time Type: TEXT
Column name: unit_selling_px_rmb/kg Type: FLOAT
Column name: index Type: NUMBER
Column name: discount(%) Type: NUMBER
Column name: item_code Type: NUMBER
Column name: day_of_week Type: TEXT
Sample rows:
[{'index': 1, 'txn_date': '2020-07-01 00:00:00', 'txn_time': '09:17:27', 'item_code': 102900005115960, 'qty_sold(kg)': 0.849, 'unit_selling_px_rmb/kg': 3.2, 'sale/return': 'sale', 'discount(%)': 1, 'day_of_week': 'Wednesday'}, {'index': 6, 'txn_date': '2020-07-01 00:00:00', 'txn_time': '09:21:56', 'item_code': 102900005115779, 'qty_sold(kg)': 0.338, 'unit_selling_px_rmb/kg': 8.0, 'sale/return': 'sale', 'discount(%)': 1, 'day_of_week': 'Wednesday'}, {'index': 7, 'txn_date': '2020-07-01 00:00:00', 'txn_time': '09:22:01', 'item_code': 102900005117056, 'qty_sold(kg)': 0.132, 'unit_selling_px_rmb/kg': 7.6, 'sale/return': 'sale', 'discount(%)': 1, 'day_of_week': 'Wednesday'}, {'index': 8, 'txn_date': '2020-07-01 00:00:00', 'txn_time': '09:22:01', 'item_code': 102900005115779, 'qty_sold(kg)': 0.213, 'unit_selling_px_rmb/kg': 8.0, 'sale/return': 'sale', 'discount(%)': 1, 'day_of_week': 'Wednesday'}, {'index': 9, 'txn_date': '2020-07-01 00:00:00', 'txn_time': '09:22:15', 'item_code': 102900011008522, 'qty_sold(kg)': 0.514, 'unit_selling_px_rmb/kg': 8.0, 'sale/return': 'sale', 'discount(%)': 1, 'day_of_week': 'Wednesday'}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.SHOPPING_CART_PAGE_HIERARCHY
Column name: page_id Type: NUMBER
Column name: product_id Type: FLOAT
Column name: page_name Type: TEXT
Column name: product_category Type: TEXT
Sample rows:
[{'page_id': 2, 'page_name': 'All Products', 'product_category': '', 'product_id': nan}, {'page_id': 3, 'page_name': 'Salmon', 'product_category': 'Fish', 'product_id': 1.0}, {'page_id': 4, 'page_name': 'Kingfish', 'product_category': 'Fish', 'product_id': 2.0}, {'page_id': 6, 'page_name': 'Russian Caviar', 'product_category': 'Luxury', 'product_id': 4.0}, {'page_id': 7, 'page_name': 'Black Truffle', 'product_category': 'Luxury', 'product_id': 5.0}]

--------------------------------------------------
External knowledge that might be helpful: 
None
The table structure information is ({database name: {schema name: [table name]}}): 
{'BANK_SALES_TRADING': {'BANK_SALES_TRADING': ['INTEREST_MAP', 'INTEREST_METRICS', 'BITCOIN_PRICES', 'SHOPPING_CART_CAMPAIGN_IDENTIFIER', 'SHOPPING_CART_EVENT_IDENTIFIER', 'VEG_CAT', 'VEG_WHSLE_DF', 'BITCOIN_TRANSACTIONS', 'SHOPPING_CART_EVENTS', 'VEG_LOSS_RATE_DF', 'CUSTOMER_NODES', 'WEEKLY_SALES', 'BITCOIN_MEMBERS', 'CLEANED_WEEKLY_SALES', 'CUSTOMER_REGIONS', 'CUSTOMER_TRANSACTIONS', 'SHOPPING_CART_USERS', 'VEG_TXN_DF', 'SHOPPING_CART_PAGE_HIERARCHY']}}

Some few-shot examples after column exploration may be helpful:
Query:
--Description: 1)  Check which tickers have prices recorded between 01-08-2021 and 10-08-2021
SELECT DISTINCT "ticker"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                        '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                        '09-08-2021','10-08-2021')
LIMIT 20;
Answer:
ticker
ETH
BTC
Query:
--Description: 2)  Look at raw volume strings for BTC during the period
SELECT "ticker",
       "market_date",
       "volume"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
WHERE "ticker" = 'BTC'
  AND "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                        '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                        '09-08-2021','10-08-2021')
ORDER BY "market_date"
LIMIT 20;
Answer:
ticker,market_date,volume
BTC,01-08-2021,80.33K
BTC,02-08-2021,74.81K
BTC,03-08-2021,0.26K
BTC,04-08-2021,79.22K
BTC,05-08-2021,130.60K
BTC,06-08-2021,111.93K
BTC,07-08-2021,112.84K
BTC,08-08-2021,105.25K
BTC,09-08-2021,117.08K
BTC,10-08-2021,80.55K
Query:
--Description: 3)  Show how many records use the “K”, “M” or “-” notation in volume
SELECT 
  CASE 
    WHEN "volume" ILIKE '%K' THEN 'Ends with K'
    WHEN "volume" ILIKE '%M' THEN 'Ends with M'
    WHEN "volume" = '-'        THEN 'Dash'
    ELSE 'Plain Number'
  END AS "volume_type",
  COUNT(*) AS "rows"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                        '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                        '09-08-2021','10-08-2021')
GROUP BY 1
LIMIT 20;
Answer:
volume_type,rows
Ends with M,7
Ends with K,13
Query:
--Description: 4)  Convert the “volume” column into a pure numeric figure (in units) for 01-10 Aug 2021
SELECT 
  "ticker",
  "market_date",
  "volume",
  CASE
      WHEN "volume" = '-'                  THEN 0
      WHEN "volume" ILIKE '%K'             THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
      WHEN "volume" ILIKE '%M'             THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
      ELSE TRY_TO_NUMBER("volume")
  END AS "volume_units"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                        '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                        '09-08-2021','10-08-2021')
ORDER BY "ticker","market_date"
LIMIT 20;
Answer:
ticker,market_date,volume,volume_units
BTC,01-08-2021,80.33K,80000
BTC,02-08-2021,74.81K,75000
BTC,03-08-2021,0.26K,0
BTC,04-08-2021,79.22K,79000
BTC,05-08-2021,130.60K,131000
BTC,06-08-2021,111.93K,112000
BTC,07-08-2021,112.84K,113000
BTC,08-08-2021,105.25K,105000
BTC,09-08-2021,117.08K,117000
BTC,10-08-2021,80.55K,81000
ETH,01-08-2021,1.20M,1000000
ETH,02-08-2021,970.67K,971000
ETH,03-08-2021,158.45K,158000
Query:
--Description: 6) Produce a running list of non-zero volumes (after conversion) together with the previous non-zero volume for each ticker between 01-10 Aug 2021
SELECT
    "ticker",
    "market_date",
    "volume_units",
    LAG("volume_units") IGNORE NULLS 
        OVER (PARTITION BY "ticker" ORDER BY TO_DATE("market_date", 'DD-MM-YYYY')) AS "prev_non_zero_volume"
FROM (
    SELECT
        "ticker",
        "market_date",
        CASE
            WHEN "volume" = '-'       THEN 0
            WHEN "volume" ILIKE '%K'  THEN TRY_TO_NUMBER(REPLACE("volume", 'K', '')) * 1000
            WHEN "volume" ILIKE '%M'  THEN TRY_TO_NUMBER(REPLACE("volume", 'M', '')) * 1000000
            ELSE TRY_TO_NUMBER("volume")
        END AS "volume_units"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
    WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                            '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                            '09-08-2021','10-08-2021')
) v
QUALIFY "volume_units" <> 0
ORDER BY "ticker", TO_DATE("market_date", 'DD-MM-YYYY')
LIMIT 20
Answer:
ticker,market_date,volume_units,prev_non_zero_volume
BTC,01-08-2021,80000,
BTC,02-08-2021,75000,80000
BTC,04-08-2021,79000,0
BTC,05-08-2021,131000,79000
BTC,06-08-2021,112000,131000
BTC,07-08-2021,113000,112000
BTC,08-08-2021,105000,113000
BTC,09-08-2021,117000,105000
BTC,10-08-2021,81000,117000
ETH,01-08-2021,1000000,
ETH,02-08-2021,971000,1000000
ETH,03-08-2021,158000,971000
ETH,04-08-2021,1000000,158000
ETH,05-08-2021,2000000,1000000
Query:
--Description: 8) Display rows (01-10 Aug 2021) where both current and previous non-zero volumes exist ‑ uses same safe logic as #7, includes LIMIT 20 for sampling
WITH vols AS (
    SELECT
        "ticker",
        "market_date",
        CASE
            WHEN "volume" = '-'      THEN 0
            WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
            WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
            ELSE TRY_TO_NUMBER("volume")
        END AS "volume_units"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
    WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                            '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                            '09-08-2021','10-08-2021')
), non_zero AS (
    SELECT
        "ticker",
        "market_date",
        "volume_units",
        LAG("volume_units") OVER (
            PARTITION BY "ticker"
            ORDER BY TO_DATE("market_date",'DD-MM-YYYY')
        ) AS "prev_non_zero_volume"
    FROM vols
    WHERE "volume_units" <> 0
)
SELECT
    "ticker",
    "market_date",
    "volume_units",
    "prev_non_zero_volume",
    ROUND(100 * ("volume_units" - "prev_non_zero_volume") / "prev_non_zero_volume", 2) AS "pct_change_volume"
FROM non_zero
WHERE "prev_non_zero_volume" IS NOT NULL          -- ensure prior value exists
ORDER BY "ticker", TO_DATE("market_date",'DD-MM-YYYY')
LIMIT 20
Answer:
ticker,market_date,volume_units,prev_non_zero_volume,pct_change_volume
BTC,02-08-2021,75000,80000,-6.25
BTC,04-08-2021,79000,75000,5.33
BTC,05-08-2021,131000,79000,65.82
BTC,06-08-2021,112000,131000,-14.50
BTC,07-08-2021,113000,112000,0.89
BTC,08-08-2021,105000,113000,-7.08
BTC,09-08-2021,117000,105000,11.43
BTC,10-08-2021,81000,117000,-30.77
ETH,02-08-2021,971000,1000000,-2.90
ETH,03-08-2021,158000,971000,-83.73
Query:
--Description: 9) Final answer – daily % change in trading volume for each ticker from 01-10 Aug 2021, ordered by ticker and date (safe against divide-by-zero)
WITH vols AS (
    SELECT
        "ticker",
        "market_date",
        CASE
            WHEN "volume" = '-'      THEN 0
            WHEN "volume" ILIKE '%K' THEN TRY_TO_NUMBER(REPLACE("volume",'K','')) * 1000
            WHEN "volume" ILIKE '%M' THEN TRY_TO_NUMBER(REPLACE("volume",'M','')) * 1000000
            ELSE TRY_TO_NUMBER("volume")
        END AS "volume_units"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
    WHERE "market_date" IN ('01-08-2021','02-08-2021','03-08-2021','04-08-2021',
                            '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
                            '09-08-2021','10-08-2021')
), non_zero AS (
    SELECT
        "ticker",
        "market_date",
        "volume_units",
        LAG("volume_units") OVER (
            PARTITION BY "ticker"
            ORDER BY TO_DATE("market_date",'DD-MM-YYYY')
        ) AS "prev_non_zero_volume"
    FROM vols
    WHERE "volume_units" <> 0
)
SELECT
    "ticker",
    "market_date",
    "volume_units",
    ROUND(100 * ("volume_units" - "prev_non_zero_volume") / "prev_non_zero_volume", 2) AS "pct_change_volume"
FROM non_zero
WHERE "prev_non_zero_volume" IS NOT NULL
ORDER BY "ticker", TO_DATE("market_date",'DD-MM-YYYY')
Answer:
ticker,market_date,volume_units,pct_change_volume
BTC,02-08-2021,75000,-6.25
BTC,04-08-2021,79000,5.33
BTC,05-08-2021,131000,65.82
BTC,06-08-2021,112000,-14.50
BTC,07-08-2021,113000,0.89
BTC,08-08-2021,105000,-7.08
BTC,09-08-2021,117000,11.43
BTC,10-08-2021,81000,-30.77
ETH,02-08-2021,971000,-2.90
ETH,03-08-2021,158000,-83.73
ETH,04-08-2021,1000000,532.91
Task: Using the "bitcoin_prices" table, please calculate the daily percentage change in trading volume for each ticker from August 1 to August 10, 2021, ensuring that any volume ending in "K" or "M" is accurately converted to thousands or millions, any "-" volume is treated as zero, only non-zero volumes are used to determine the previous day's volume, and the results are ordered by ticker and date.

Please think step by step and answer only one complete SQL in snowflake dialect in ```sql``` format.
SQL usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: The table structure information is ({database name: {schema name: [table name]}}): 
{'BANK_SALES_TRADING': {'BANK_SALES_TRADING': ['INTEREST_MAP', 'INTEREST_METRICS', 'BITCOIN_PRICES', 'SHOPPING_CART_CAMPAIGN_IDENTIFIER', 'SHOPPING_CART_EVENT_IDENTIFIER', 'VEG_CAT', 'VEG_WHSLE_DF', 'BITCOIN_TRANSACTIONS', 'SHOPPING_CART_EVENTS', 'VEG_LOSS_RATE_DF', 'CUSTOMER_NODES', 'WEEKLY_SALES', 'BITCOIN_MEMBERS', 'CLEANED_WEEKLY_SALES', 'CUSTOMER_REGIONS', 'CUSTOMER_TRANSACTIONS', 'SHOPPING_CART_USERS', 'VEG_TXN_DF', 'SHOPPING_CART_PAGE_HIERARCHY']}}

When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
If the task description does not specify the number of decimal places, retain all decimals to four places.

[Self-refine]
2025-05-07 07:16:41 - Thread-643 (execute) - INFO - [Try to run SQL in self-refine]
```sql
WITH vols AS (   -- convert the raw volume string into pure units
    SELECT
        "ticker",
        "market_date",
        CASE
            WHEN "volume" = '-'                    THEN 0
            WHEN RIGHT("volume",1) = 'K'           THEN ROUND(TRY_TO_NUMBER(REPLACE("volume",'K','')),0) * 1000
            WHEN RIGHT("volume",1) = 'M'           THEN ROUND(TRY_TO_NUMBER(REPLACE("volume",'M','')),0) * 1000000
            ELSE TRY_TO_NUMBER("volume")
        END AS "volume_units"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
    WHERE "market_date" IN (
        '01-08-2021','02-08-2021','03-08-2021','04-08-2021',
        '05-08-2021','06-08-2021','07-08-2021','08-08-2021',
        '09-08-2021','10-08-2021'
    )
),
non_zero AS (    -- keep only non-zero volumes and pull previous non-zero volume
    SELECT
        "ticker",
        "market_date",
        "volume_units",
        LAG("volume_units") OVER (
            PARTITION BY "ticker"
            ORDER BY TO_DATE("market_date",'DD-MM-YYYY')
        ) AS "prev_non_zero_volume"
    FROM vols
    WHERE "volume_units" <> 0
)
SELECT
    "ticker",
    "market_date",
    "volume_units",
    ROUND(
        100 * ("volume_units" - "prev_non_zero_volume") / "prev_non_zero_volume",
        2
    ) AS "pct_change_volume"
FROM non_zero
WHERE "prev_non_zero_volume" IS NOT NULL     -- ensure a prior non-zero value exists
ORDER BY
    "ticker",
    TO_DATE("market_date",'DD-MM-YYYY');
```
[Try to run SQL in self-refine]
2025-05-07 07:16:42 - Thread-643 (execute) - INFO - Total iteration counts: 0
