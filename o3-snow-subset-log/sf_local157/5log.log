2025-05-07 07:06:30 - Thread-646 (execute) - INFO - [Exploration]
```sql
--Description: 1) View the list of unique tickers in the BITCOIN_PRICES table
SELECT DISTINCT "ticker"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
LIMIT 20;
```

```sql
--Description: 2) Check which dates in August-2021 are stored in the table
SELECT DISTINCT "market_date"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "market_date" ILIKE '%-08-2021'
ORDER BY "market_date"
LIMIT 20;
```

```sql
--Description: 3) Preview BTC price rows between 01-Aug-2021 and 10-Aug-2021
SELECT *
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "ticker" = 'BTC'
  AND "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
ORDER BY "market_date"
LIMIT 20;
```

```sql
--Description: 4) Inspect the raw “volume” strings for every ticker in the same date range
SELECT "ticker",
       "market_date",
       "volume"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
ORDER BY "ticker", "market_date"
LIMIT 20;
```

```sql
--Description: 5) Convert the “volume” text into a pure numeric value (in units)
SELECT "ticker",
       "market_date",
       "volume",
       CASE
           WHEN "volume" ILIKE '%K' THEN TO_NUMBER(REPLACE("volume", 'K', '')) * 1000
           WHEN "volume" ILIKE '%M' THEN TO_NUMBER(REPLACE("volume", 'M', '')) * 1000000
           WHEN "volume" = '-'            THEN 0
           ELSE TO_NUMBER("volume")
       END AS "volume_num"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
ORDER BY "ticker", "market_date"
LIMIT 20;
```

```sql
--Description: 6) Show only those rows where the converted volume is non-zero
WITH v AS (
    SELECT "ticker",
           "market_date",
           CASE
               WHEN "volume" ILIKE '%K' THEN TO_NUMBER(REPLACE("volume", 'K', '')) * 1000
               WHEN "volume" ILIKE '%M' THEN TO_NUMBER(REPLACE("volume", 'M', '')) * 1000000
               WHEN "volume" = '-'            THEN 0
               ELSE TO_NUMBER("volume")
           END AS "volume_num"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
    WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
)
SELECT *
FROM v
WHERE "volume_num" <> 0
ORDER BY "ticker", "market_date"
LIMIT 20;
```

```sql
--Description: 7) Add a lagged (previous non-zero) volume using IGNORE NULLS
WITH v AS (
    SELECT "ticker",
           "market_date",
           CASE
               WHEN "volume" ILIKE '%K' THEN TO_NUMBER(REPLACE("volume", 'K', '')) * 1000
               WHEN "volume" ILIKE '%M' THEN TO_NUMBER(REPLACE("volume", 'M', '')) * 1000000
               WHEN "volume" = '-'            THEN 0
               ELSE TO_NUMBER("volume")
           END AS "volume_num"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
    WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
), lagged AS (
    SELECT *,
           LAG( NULLIF("volume_num",0) ) IGNORE NULLS
           OVER (PARTITION BY "ticker" ORDER BY "market_date") AS "prev_volume"
    FROM v
)
SELECT *
FROM lagged
ORDER BY "ticker", "market_date"
LIMIT 20;
```

```sql
--Description: 8) Compute the daily percentage change in volume
WITH v AS (
    SELECT "ticker",
           "market_date",
           CASE
               WHEN "volume" ILIKE '%K' THEN TO_NUMBER(REPLACE("volume", 'K', '')) * 1000
               WHEN "volume" ILIKE '%M' THEN TO_NUMBER(REPLACE("volume", 'M', '')) * 1000000
               WHEN "volume" = '-'            THEN 0
               ELSE TO_NUMBER("volume")
           END AS "volume_num"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
    WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
), lagged AS (
    SELECT *,
           LAG( NULLIF("volume_num",0) ) IGNORE NULLS
           OVER (PARTITION BY "ticker" ORDER BY "market_date") AS "prev_volume"
    FROM v
)
SELECT "ticker",
       "market_date",
       "volume_num",
       "prev_volume",
       ROUND( ( ("volume_num" - "prev_volume") / "prev_volume" ) * 100 , 2 ) AS "pct_change_vol"
FROM lagged
WHERE "prev_volume" IS NOT NULL     -- ensures a prior non-zero value exists
ORDER BY "ticker", "market_date"
LIMIT 20;
```

```sql
--Description: 9) Same calculation for all tickers, returning every required row (no LIMIT)
WITH v AS (
    SELECT "ticker",
           "market_date",
           CASE
               WHEN "volume" ILIKE '%K' THEN TO_NUMBER(REPLACE("volume", 'K', '')) * 1000
               WHEN "volume" ILIKE '%M' THEN TO_NUMBER(REPLACE("volume", 'M', '')) * 1000000
               WHEN "volume" = '-'            THEN 0
               ELSE TO_NUMBER("volume")
           END AS "volume_num"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
    WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
), lagged AS (
    SELECT *,
           LAG( NULLIF("volume_num",0) ) IGNORE NULLS
           OVER (PARTITION BY "ticker" ORDER BY "market_date") AS "prev_volume"
    FROM v
)
SELECT "ticker",
       "market_date",
       "volume_num"      AS "current_volume",
       "prev_volume",
       ROUND( ( ("volume_num" - "prev_volume") / "prev_volume" ) * 100 , 2 ) AS "pct_change_volume"
FROM lagged
WHERE "prev_volume" IS NOT NULL
ORDER BY "ticker", "market_date";
```

```sql
--Description: 10) Final answer query—returns only ticker, date, and % change (ordered)
WITH v AS (
    SELECT "ticker",
           "market_date",
           CASE
               WHEN "volume" ILIKE '%K' THEN TO_NUMBER(REPLACE("volume", 'K', '')) * 1000
               WHEN "volume" ILIKE '%M' THEN TO_NUMBER(REPLACE("volume", 'M', '')) * 1000000
               WHEN "volume" = '-'            THEN 0
               ELSE TO_NUMBER("volume")
           END AS "volume_num"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
    WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
), lagged AS (
    SELECT *,
           LAG( NULLIF("volume_num",0) ) IGNORE NULLS
           OVER (PARTITION BY "ticker" ORDER BY "market_date") AS "prev_volume"
    FROM v
)
SELECT "ticker",
       "market_date",
       ROUND( ( ("volume_num" - "prev_volume") / "prev_volume" ) * 100 , 2 ) AS "pct_change_volume"
FROM lagged
WHERE "prev_volume" IS NOT NULL
ORDER BY "ticker", "market_date";
```
[Exploration]
2025-05-07 07:06:30 - Thread-646 (execute) - INFO - [Try to execute]
--Description: 1) View the list of unique tickers in the BITCOIN_PRICES table
SELECT DISTINCT "ticker"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
LIMIT 20;
[Try to execute]
2025-05-07 07:06:31 - Thread-646 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 1) View the list of unique tickers in the BITCOIN_PRICES table
SELECT DISTINCT "ticker"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
LIMIT 20;
Results:
ticker
ETH
BTC

[Successfully executed]
2025-05-07 07:06:31 - Thread-646 (execute) - INFO - [Try to execute]
--Description: 2) Check which dates in August-2021 are stored in the table
SELECT DISTINCT "market_date"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "market_date" ILIKE '%-08-2021'
ORDER BY "market_date"
LIMIT 20;
[Try to execute]
2025-05-07 07:06:31 - Thread-646 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 2) Check which dates in August-2021 are stored in the table
SELECT DISTINCT "market_date"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "market_date" ILIKE '%-08-2021'
ORDER BY "market_date"
LIMIT 20;
Results:
market_date
01-08-2021
02-08-2021
03-08-2021
04-08-2021
05-08-2021
06-08-2021
07-08-2021
08-08-2021
09-08-2021
10-08-2021
11-08-2021
12-08-2021
13-08-2021
14-08-2021
15-08-2021
16-08-2021
17-08-2021
18-08-2021
19-08-2021
20-08-2021

[Successfully executed]
2025-05-07 07:06:31 - Thread-646 (execute) - INFO - [Try to execute]
--Description: 3) Preview BTC price rows between 01-Aug-2021 and 10-Aug-2021
SELECT *
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "ticker" = 'BTC'
  AND "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
ORDER BY "market_date"
LIMIT 20;
[Try to execute]
2025-05-07 07:06:32 - Thread-646 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 3) Preview BTC price rows between 01-Aug-2021 and 10-Aug-2021
SELECT *
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "ticker" = 'BTC'
  AND "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
ORDER BY "market_date"
LIMIT 20;
Results:
ticker,market_date,price,open,high,low,volume,change
BTC,01-08-2021,39878.3,41510.0,42565.0,39556.5,80.33K,-4.03%
BTC,01-09-2017,4921.9,4735.1,4925.2,4690.2,102.01K,3.94%
BTC,01-09-2018,7189.6,7032.4,7264.3,7020.4,3.52M,2.21%
BTC,01-09-2019,9729.3,9594.7,9799.5,9533.6,322.66K,1.41%
BTC,01-09-2020,11914.9,11644.2,12045.9,11544.6,580.69K,2.32%
BTC,01-10-2017,4403.1,4360.6,4412.6,4258.3,60.58K,0.97%
BTC,01-10-2018,6608.2,6635.2,6674.7,6072.7,9.19M,-0.41%

[Successfully executed]
2025-05-07 07:06:32 - Thread-646 (execute) - INFO - [Try to execute]
--Description: 4) Inspect the raw “volume” strings for every ticker in the same date range
SELECT "ticker",
       "market_date",
       "volume"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
ORDER BY "ticker", "market_date"
LIMIT 20;
[Try to execute]
2025-05-07 07:06:32 - Thread-646 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 4) Inspect the raw “volume” strings for every ticker in the same date range
SELECT "ticker",
       "market_date",
       "volume"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
ORDER BY "ticker", "market_date"
LIMIT 20;
Results:
ticker,market_date,volume
BTC,01-08-2021,80.33K
BTC,01-09-2017,102.01K
BTC,01-09-2018,3.52M
BTC,01-09-2019,322.66K
BTC,01-09-2020,580.69K
BTC,01-10-2017,60.58K
BTC,01-10-2018,9.19M
BTC,01-10-2019,533.95K
BTC,01-10-2020,95.33K
BTC,01-11-2017,133.19K
BTC,01-11-2018,124.16K
BTC,01-11-2019,689.65K
BTC,01-11-2020,51.71K
BTC,01-12-2017,131.92K
BTC,01-12-2018,316.30K
BTC,01-12-2019,777.00K

[Successfully executed]
2025-05-07 07:06:32 - Thread-646 (execute) - INFO - [Try to execute]
--Description: 5) Convert the “volume” text into a pure numeric value (in units)
SELECT "ticker",
       "market_date",
       "volume",
       CASE
           WHEN "volume" ILIKE '%K' THEN TO_NUMBER(REPLACE("volume", 'K', '')) * 1000
           WHEN "volume" ILIKE '%M' THEN TO_NUMBER(REPLACE("volume", 'M', '')) * 1000000
           WHEN "volume" = '-'            THEN 0
           ELSE TO_NUMBER("volume")
       END AS "volume_num"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
ORDER BY "ticker", "market_date"
LIMIT 20;
[Try to execute]
2025-05-07 07:06:32 - Thread-646 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 5) Convert the “volume” text into a pure numeric value (in units)
SELECT "ticker",
       "market_date",
       "volume",
       CASE
           WHEN "volume" ILIKE '%K' THEN TO_NUMBER(REPLACE("volume", 'K', '')) * 1000
           WHEN "volume" ILIKE '%M' THEN TO_NUMBER(REPLACE("volume", 'M', '')) * 1000000
           WHEN "volume" = '-'            THEN 0
           ELSE TO_NUMBER("volume")
       END AS "volume_num"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
ORDER BY "ticker", "market_date"
LIMIT 20;
Results:
ticker,market_date,volume,volume_num
BTC,01-08-2021,80.33K,80000
BTC,01-09-2017,102.01K,102000
BTC,01-09-2018,3.52M,4000000
BTC,01-09-2019,322.66K,323000
BTC,01-09-2020,580.69K,581000
BTC,01-10-2017,60.58K,61000
BTC,01-10-2018,9.19M,9000000
BTC,01-10-2019,533.95K,534000
BTC,01-10-2020,95.33K,95000
BTC,01-11-2017,133.19K,133000
BTC,01-11-2018,124.16K,124000
BTC,01-11-2019,689.65K,690000
BTC,01-11-2020,51.71K,52000

[Successfully executed]
2025-05-07 07:06:32 - Thread-646 (execute) - INFO - [Try to execute]
--Description: 6) Show only those rows where the converted volume is non-zero
WITH v AS (
    SELECT "ticker",
           "market_date",
           CASE
               WHEN "volume" ILIKE '%K' THEN TO_NUMBER(REPLACE("volume", 'K', '')) * 1000
               WHEN "volume" ILIKE '%M' THEN TO_NUMBER(REPLACE("volume", 'M', '')) * 1000000
               WHEN "volume" = '-'            THEN 0
               ELSE TO_NUMBER("volume")
           END AS "volume_num"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
    WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
)
SELECT *
FROM v
WHERE "volume_num" <> 0
ORDER BY "ticker", "market_date"
LIMIT 20;
[Try to execute]
2025-05-07 07:06:33 - Thread-646 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 6) Show only those rows where the converted volume is non-zero
WITH v AS (
    SELECT "ticker",
           "market_date",
           CASE
               WHEN "volume" ILIKE '%K' THEN TO_NUMBER(REPLACE("volume", 'K', '')) * 1000
               WHEN "volume" ILIKE '%M' THEN TO_NUMBER(REPLACE("volume", 'M', '')) * 1000000
               WHEN "volume" = '-'            THEN 0
               ELSE TO_NUMBER("volume")
           END AS "volume_num"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
    WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
)
SELECT *
FROM v
WHERE "volume_num" <> 0
ORDER BY "ticker", "market_date"
LIMIT 20;
Results:
ticker,market_date,volume_num
BTC,01-08-2021,80000
BTC,01-09-2017,102000
BTC,01-09-2018,4000000
BTC,01-09-2019,323000
BTC,01-09-2020,581000
BTC,01-10-2017,61000
BTC,01-10-2018,9000000
BTC,01-10-2019,534000
BTC,01-10-2020,95000
BTC,01-11-2017,133000
BTC,01-11-2018,124000
BTC,01-11-2019,690000
BTC,01-11-2020,52000
BTC,01-12-2017,132000
BTC,01-12-2018,316000
BTC,01-12-2019,777000
BTC,01-12-2020,209000
BTC,02-01-2017,65000

[Successfully executed]
2025-05-07 07:06:33 - Thread-646 (execute) - INFO - [Try to execute]
--Description: 7) Add a lagged (previous non-zero) volume using IGNORE NULLS
WITH v AS (
    SELECT "ticker",
           "market_date",
           CASE
               WHEN "volume" ILIKE '%K' THEN TO_NUMBER(REPLACE("volume", 'K', '')) * 1000
               WHEN "volume" ILIKE '%M' THEN TO_NUMBER(REPLACE("volume", 'M', '')) * 1000000
               WHEN "volume" = '-'            THEN 0
               ELSE TO_NUMBER("volume")
           END AS "volume_num"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
    WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
), lagged AS (
    SELECT *,
           LAG( NULLIF("volume_num",0) ) IGNORE NULLS
           OVER (PARTITION BY "ticker" ORDER BY "market_date") AS "prev_volume"
    FROM v
)
SELECT *
FROM lagged
ORDER BY "ticker", "market_date"
LIMIT 20;
[Try to execute]
2025-05-07 07:06:33 - Thread-646 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 7) Add a lagged (previous non-zero) volume using IGNORE NULLS
WITH v AS (
    SELECT "ticker",
           "market_date",
           CASE
               WHEN "volume" ILIKE '%K' THEN TO_NUMBER(REPLACE("volume", 'K', '')) * 1000
               WHEN "volume" ILIKE '%M' THEN TO_NUMBER(REPLACE("volume", 'M', '')) * 1000000
               WHEN "volume" = '-'            THEN 0
               ELSE TO_NUMBER("volume")
           END AS "volume_num"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
    WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
), lagged AS (
    SELECT *,
           LAG( NULLIF("volume_num",0) ) IGNORE NULLS
           OVER (PARTITION BY "ticker" ORDER BY "market_date") AS "prev_volume"
    FROM v
)
SELECT *
FROM lagged
ORDER BY "ticker", "market_date"
LIMIT 20;
Results:
ticker,market_date,volume_num,prev_volume
BTC,01-08-2021,80000,
BTC,01-09-2017,102000,80000
BTC,01-09-2018,4000000,102000
BTC,01-09-2019,323000,4000000
BTC,01-09-2020,581000,323000
BTC,01-10-2017,61000,581000
BTC,01-10-2018,9000000,61000
BTC,01-10-2019,534000,9000000
BTC,01-10-2020,95000,534000
BTC,01-11-2017,133000,95000
BTC,01-11-2018,124000,133000
BTC,01-11-2019,690000,124000
BTC,01-11-2020,52000,690000
BTC,01-12-2017,132000,52000

[Successfully executed]
2025-05-07 07:06:33 - Thread-646 (execute) - INFO - [Try to execute]
--Description: 8) Compute the daily percentage change in volume
WITH v AS (
    SELECT "ticker",
           "market_date",
           CASE
               WHEN "volume" ILIKE '%K' THEN TO_NUMBER(REPLACE("volume", 'K', '')) * 1000
               WHEN "volume" ILIKE '%M' THEN TO_NUMBER(REPLACE("volume", 'M', '')) * 1000000
               WHEN "volume" = '-'            THEN 0
               ELSE TO_NUMBER("volume")
           END AS "volume_num"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
    WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
), lagged AS (
    SELECT *,
           LAG( NULLIF("volume_num",0) ) IGNORE NULLS
           OVER (PARTITION BY "ticker" ORDER BY "market_date") AS "prev_volume"
    FROM v
)
SELECT "ticker",
       "market_date",
       "volume_num",
       "prev_volume",
       ROUND( ( ("volume_num" - "prev_volume") / "prev_volume" ) * 100 , 2 ) AS "pct_change_vol"
FROM lagged
WHERE "prev_volume" IS NOT NULL     -- ensures a prior non-zero value exists
ORDER BY "ticker", "market_date"
LIMIT 20;
[Try to execute]
2025-05-07 07:06:33 - Thread-646 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 8) Compute the daily percentage change in volume
WITH v AS (
    SELECT "ticker",
           "market_date",
           CASE
               WHEN "volume" ILIKE '%K' THEN TO_NUMBER(REPLACE("volume", 'K', '')) * 1000
               WHEN "volume" ILIKE '%M' THEN TO_NUMBER(REPLACE("volume", 'M', '')) * 1000000
               WHEN "volume" = '-'            THEN 0
               ELSE TO_NUMBER("volume")
           END AS "volume_num"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
    WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
), lagged AS (
    SELECT *,
           LAG( NULLIF("volume_num",0) ) IGNORE NULLS
           OVER (PARTITION BY "ticker" ORDER BY "market_date") AS "prev_volume"
    FROM v
)
SELECT "ticker",
       "market_date",
       "volume_num",
       "prev_volume",
       ROUND( ( ("volume_num" - "prev_volume") / "prev_volume" ) * 100 , 2 ) AS "pct_change_vol"
FROM lagged
WHERE "prev_volume" IS NOT NULL     -- ensures a prior non-zero value exists
ORDER BY "ticker", "market_date"
LIMIT 20;
Results:
ticker,market_date,volume_num,prev_volume,pct_change_vol
BTC,01-09-2017,102000,80000,27.50
BTC,01-09-2018,4000000,102000,3821.57
BTC,01-09-2019,323000,4000000,-91.93
BTC,01-09-2020,581000,323000,79.88
BTC,01-10-2017,61000,581000,-89.50
BTC,01-10-2018,9000000,61000,14654.10
BTC,01-10-2019,534000,9000000,-94.07
BTC,01-10-2020,95000,534000,-82.21
BTC,01-11-2017,133000,95000,40.00

[Successfully executed]
2025-05-07 07:06:33 - Thread-646 (execute) - INFO - [Try to execute]
--Description: 9) Same calculation for all tickers, returning every required row (no LIMIT)
WITH v AS (
    SELECT "ticker",
           "market_date",
           CASE
               WHEN "volume" ILIKE '%K' THEN TO_NUMBER(REPLACE("volume", 'K', '')) * 1000
               WHEN "volume" ILIKE '%M' THEN TO_NUMBER(REPLACE("volume", 'M', '')) * 1000000
               WHEN "volume" = '-'            THEN 0
               ELSE TO_NUMBER("volume")
           END AS "volume_num"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
    WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
), lagged AS (
    SELECT *,
           LAG( NULLIF("volume_num",0) ) IGNORE NULLS
           OVER (PARTITION BY "ticker" ORDER BY "market_date") AS "prev_volume"
    FROM v
)
SELECT "ticker",
       "market_date",
       "volume_num"      AS "current_volume",
       "prev_volume",
       ROUND( ( ("volume_num" - "prev_volume") / "prev_volume" ) * 100 , 2 ) AS "pct_change_volume"
FROM lagged
WHERE "prev_volume" IS NOT NULL
ORDER BY "ticker", "market_date";
[Try to execute]
2025-05-07 07:06:34 - Thread-646 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 9) Same calculation for all tickers, returning every required row (no LIMIT)
WITH v AS (
    SELECT "ticker",
           "market_date",
           CASE
               WHEN "volume" ILIKE '%K' THEN TO_NUMBER(REPLACE("volume", 'K', '')) * 1000
               WHEN "volume" ILIKE '%M' THEN TO_NUMBER(REPLACE("volume", 'M', '')) * 1000000
               WHEN "volume" = '-'            THEN 0
               ELSE TO_NUMBER("volume")
           END AS "volume_num"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
    WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
), lagged AS (
    SELECT *,
           LAG( NULLIF("volume_num",0) ) IGNORE NULLS
           OVER (PARTITION BY "ticker" ORDER BY "market_date") AS "prev_volume"
    FROM v
)
SELECT "ticker",
       "market_date",
       "volume_num"      AS "current_volume",
       "prev_volume",
       ROUND( ( ("volume_num" - "prev_volume") / "prev_volume" ) * 100 , 2 ) AS "pct_change_volume"
FROM lagged
WHERE "prev_volume" IS NOT NULL
ORDER BY "ticker", "market_date";
Results:
ticker,market_date,current_volume,prev_volume,pct_change_volume
BTC,01-09-2017,102000,80000,27.50
BTC,01-09-2018,4000000,102000,3821.57
BTC,01-09-2019,323000,4000000,-91.93
BTC,01-09-2020,581000,323000,79.88
BTC,01-10-2017,61000,581000,-89.50
BTC,01-10-2018,9000000,61000,14654.10
BTC,01-10-2019,534000,9000000,-94.07
BTC,01-10-2020,95000,534000,-82.21
BTC,01-11-2017,133000,95000,40.00

[Successfully executed]
2025-05-07 07:06:34 - Thread-646 (execute) - INFO - [Try to execute]
--Description: 10) Final answer query—returns only ticker, date, and % change (ordered)
WITH v AS (
    SELECT "ticker",
           "market_date",
           CASE
               WHEN "volume" ILIKE '%K' THEN TO_NUMBER(REPLACE("volume", 'K', '')) * 1000
               WHEN "volume" ILIKE '%M' THEN TO_NUMBER(REPLACE("volume", 'M', '')) * 1000000
               WHEN "volume" = '-'            THEN 0
               ELSE TO_NUMBER("volume")
           END AS "volume_num"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
    WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
), lagged AS (
    SELECT *,
           LAG( NULLIF("volume_num",0) ) IGNORE NULLS
           OVER (PARTITION BY "ticker" ORDER BY "market_date") AS "prev_volume"
    FROM v
)
SELECT "ticker",
       "market_date",
       ROUND( ( ("volume_num" - "prev_volume") / "prev_volume" ) * 100 , 2 ) AS "pct_change_volume"
FROM lagged
WHERE "prev_volume" IS NOT NULL
ORDER BY "ticker", "market_date";
[Try to execute]
2025-05-07 07:06:34 - Thread-646 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: 10) Final answer query—returns only ticker, date, and % change (ordered)
WITH v AS (
    SELECT "ticker",
           "market_date",
           CASE
               WHEN "volume" ILIKE '%K' THEN TO_NUMBER(REPLACE("volume", 'K', '')) * 1000
               WHEN "volume" ILIKE '%M' THEN TO_NUMBER(REPLACE("volume", 'M', '')) * 1000000
               WHEN "volume" = '-'            THEN 0
               ELSE TO_NUMBER("volume")
           END AS "volume_num"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
    WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
), lagged AS (
    SELECT *,
           LAG( NULLIF("volume_num",0) ) IGNORE NULLS
           OVER (PARTITION BY "ticker" ORDER BY "market_date") AS "prev_volume"
    FROM v
)
SELECT "ticker",
       "market_date",
       ROUND( ( ("volume_num" - "prev_volume") / "prev_volume" ) * 100 , 2 ) AS "pct_change_volume"
FROM lagged
WHERE "prev_volume" IS NOT NULL
ORDER BY "ticker", "market_date";
Results:
ticker,market_date,pct_change_volume
BTC,01-09-2017,27.50
BTC,01-09-2018,3821.57
BTC,01-09-2019,-91.93
BTC,01-09-2020,79.88
BTC,01-10-2017,-89.50
BTC,01-10-2018,14654.10
BTC,01-10-2019,-94.07
BTC,01-10-2020,-82.21
BTC,01-11-2017,40.00
BTC,01-11-2018,-6.77
BTC,01-11-2019,456.45
BTC,01-11-2020,-92.46
BTC,01-12-2017,153.85

[Successfully executed]
2025-05-07 07:06:34 - Thread-646 (execute) - INFO - itercount: 0
2025-05-07 07:06:34 - Thread-646 (execute) - INFO - [Self-refine]
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.INTEREST_MAP
Column name: interest_summary Type: TEXT
Column name: id Type: NUMBER
Column name: interest_name Type: TEXT
Column name: last_modified Type: TEXT
Column name: created_at Type: TEXT
Sample rows:
[{'id': 4, 'interest_name': 'Luxury Retail Researchers', 'interest_summary': 'Consumers researching luxury product reviews and gift ideas.', 'created_at': '2016-05-26 14:57:59', 'last_modified': '2018-05-23 11:30:12'}, {'id': 6, 'interest_name': 'Vacation Planners', 'interest_summary': 'Consumers reading reviews of vacation destinations and accommodations.', 'created_at': '2016-05-26 14:57:59', 'last_modified': '2018-05-23 11:30:13'}, {'id': 7, 'interest_name': 'Motorcycle Enthusiasts', 'interest_summary': 'Readers of motorcycle news and reviews.', 'created_at': '2016-05-26 14:57:59', 'last_modified': '2018-05-23 11:30:13'}, {'id': 8, 'interest_name': 'Business News Readers', 'interest_summary': 'Readers of online business news content.', 'created_at': '2016-05-26 14:57:59', 'last_modified': '2018-05-23 11:30:12'}, {'id': 13, 'interest_name': 'Advertising Professionals', 'interest_summary': 'People who read advertising industry news.', 'created_at': '2016-05-26 14:57:59', 'last_modified': '2018-05-23 11:30:12'}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.INTEREST_METRICS
Column name: ranking Type: NUMBER
Column name: percentile_ranking Type: FLOAT
Column name: month_year Type: TEXT
Column name: interest_id Type: FLOAT
Column name: composition Type: FLOAT
Column name: _month Type: FLOAT
Column name: index_value Type: FLOAT
Column name: _year Type: FLOAT
Sample rows:
[{'_month': 7.0, '_year': 2018.0, 'month_year': '07-2018', 'interest_id': 6106.0, 'composition': 9.93, 'index_value': 5.31, 'ranking': 2, 'percentile_ranking': 99.73}, {'_month': 7.0, '_year': 2018.0, 'month_year': '07-2018', 'interest_id': 18923.0, 'composition': 10.85, 'index_value': 5.29, 'ranking': 3, 'percentile_ranking': 99.59}, {'_month': 7.0, '_year': 2018.0, 'month_year': '07-2018', 'interest_id': 6344.0, 'composition': 10.32, 'index_value': 5.1, 'ranking': 4, 'percentile_ranking': 99.45}, {'_month': 7.0, '_year': 2018.0, 'month_year': '07-2018', 'interest_id': 100.0, 'composition': 10.77, 'index_value': 5.04, 'ranking': 5, 'percentile_ranking': 99.31}, {'_month': 7.0, '_year': 2018.0, 'month_year': '07-2018', 'interest_id': 79.0, 'composition': 11.21, 'index_value': 4.97, 'ranking': 7, 'percentile_ranking': 99.04}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_PRICES
Column name: low Type: FLOAT
Column name: change Type: TEXT
Column name: price Type: FLOAT
Column name: open Type: FLOAT
Column name: volume Type: TEXT
Column name: high Type: FLOAT
Column name: market_date Type: TEXT
Column name: ticker Type: TEXT
Sample rows:
[{'ticker': 'ETH', 'market_date': '29-08-2021', 'price': 3177.84, 'open': 3243.96, 'high': 3282.21, 'low': 3162.79, 'volume': '582.04K', 'change': '-2.04%'}, {'ticker': 'ETH', 'market_date': '27-08-2021', 'price': 3273.58, 'open': 3093.78, 'high': 3279.93, 'low': 3063.37, 'volume': '839.54K', 'change': '5.82%'}, {'ticker': 'ETH', 'market_date': '26-08-2021', 'price': 3093.54, 'open': 3228.03, 'high': 3249.62, 'low': 3057.48, 'volume': '118.44K', 'change': '-4.17%'}, {'ticker': 'ETH', 'market_date': '24-08-2021', 'price': 3173.26, 'open': 3322.6, 'high': 3357.99, 'low': 3150.75, 'volume': '988.82K', 'change': '-4.41%'}, {'ticker': 'ETH', 'market_date': '23-08-2021', 'price': 3319.49, 'open': 3238.41, 'high': 3375.42, 'low': 3231.96, 'volume': '1.09M', 'change': '2.49%'}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.SHOPPING_CART_CAMPAIGN_IDENTIFIER
Column name: start_date Type: TEXT
Column name: campaign_id Type: NUMBER
Column name: campaign_name Type: TEXT
Column name: end_date Type: TEXT
Column name: products Type: TEXT
Sample rows:
[]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.SHOPPING_CART_EVENT_IDENTIFIER
Column name: event_name Type: TEXT
Column name: event_type Type: NUMBER
Sample rows:
[{'event_type': 2, 'event_name': 'Add to Cart'}, {'event_type': 3, 'event_name': 'Purchase'}, {'event_type': 4, 'event_name': 'Ad Impression'}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.VEG_CAT
Column name: category_code Type: NUMBER
Column name: item_code Type: NUMBER
Column name: category_name Type: TEXT
Column name: item_name Type: TEXT
Column name: index Type: NUMBER
Sample rows:
[{'index': 0, 'item_code': 102900005115168, 'item_name': 'Niushou Shengcai', 'category_code': 1011010101, 'category_name': 'Flower/Leaf\xa0Vegetables'}, {'index': 2, 'item_code': 102900005115625, 'item_name': 'Local Xiaomao Cabbage', 'category_code': 1011010101, 'category_name': 'Flower/Leaf\xa0Vegetables'}, {'index': 3, 'item_code': 102900005115748, 'item_name': 'White Caitai', 'category_code': 1011010101, 'category_name': 'Flower/Leaf\xa0Vegetables'}, {'index': 4, 'item_code': 102900005115762, 'item_name': 'Amaranth', 'category_code': 1011010101, 'category_name': 'Flower/Leaf\xa0Vegetables'}, {'index': 5, 'item_code': 102900005115779, 'item_name': 'Yunnan Shengcai', 'category_code': 1011010101, 'category_name': 'Flower/Leaf\xa0Vegetables'}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.VEG_WHSLE_DF
Column name: index Type: NUMBER
Column name: whsle_px_rmb-kg Type: FLOAT
Column name: whsle_date Type: TEXT
Column name: item_code Type: NUMBER
Sample rows:
[{'index': 0, 'whsle_date': '2020-07-01 00:00:00', 'item_code': 102900005115762, 'whsle_px_rmb-kg': 3.88}, {'index': 5, 'whsle_date': '2020-07-01 00:00:00', 'item_code': 102900005115908, 'whsle_px_rmb-kg': 4.6}, {'index': 8, 'whsle_date': '2020-07-01 00:00:00', 'item_code': 102900005115984, 'whsle_px_rmb-kg': 3.44}, {'index': 9, 'whsle_date': '2020-07-01 00:00:00', 'item_code': 102900005116226, 'whsle_px_rmb-kg': 4.64}, {'index': 10, 'whsle_date': '2020-07-01 00:00:00', 'item_code': 102900005116233, 'whsle_px_rmb-kg': 5.76}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_TRANSACTIONS
Column name: quantity Type: FLOAT
Column name: member_id Type: TEXT
Column name: txn_id Type: NUMBER
Column name: ticker Type: TEXT
Column name: txn_type Type: TEXT
Column name: percentage_fee Type: FLOAT
Column name: txn_time Type: TEXT
Column name: txn_date Type: TEXT
Sample rows:
[{'txn_id': 2, 'member_id': 'eccbc8', 'ticker': 'BTC', 'txn_date': '01-01-2017', 'txn_type': 'BUY', 'quantity': 50.0, 'percentage_fee': 0.3, 'txn_time': '2017-01-01T00:00:00.000Z'}, {'txn_id': 3, 'member_id': 'a87ff6', 'ticker': 'BTC', 'txn_date': '01-01-2017', 'txn_type': 'BUY', 'quantity': 50.0, 'percentage_fee': 0.0, 'txn_time': '2017-01-01T00:00:00.000Z'}, {'txn_id': 7, 'member_id': '8f14e4', 'ticker': 'BTC', 'txn_date': '01-01-2017', 'txn_type': 'BUY', 'quantity': 50.0, 'percentage_fee': 0.21, 'txn_time': '2017-01-01T00:00:00.000Z'}, {'txn_id': 8, 'member_id': 'c9f0f8', 'ticker': 'BTC', 'txn_date': '01-01-2017', 'txn_type': 'BUY', 'quantity': 50.0, 'percentage_fee': 0.3, 'txn_time': '2017-01-01T00:00:00.000Z'}, {'txn_id': 10, 'member_id': 'd3d944', 'ticker': 'BTC', 'txn_date': '01-01-2017', 'txn_type': 'BUY', 'quantity': 50.0, 'percentage_fee': 0.3, 'txn_time': '2017-01-01T00:00:00.000Z'}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.SHOPPING_CART_EVENTS
Column name: page_id Type: NUMBER
Column name: event_type Type: NUMBER
Column name: cookie_id Type: TEXT
Column name: event_time Type: TEXT
Column name: visit_id Type: TEXT
Column name: sequence_number Type: NUMBER
Sample rows:
[{'visit_id': 'ccf365', 'cookie_id': 'c4ca42', 'page_id': 9, 'event_type': 1, 'sequence_number': 4, 'event_time': '2020-02-04 19:16:58.609142'}, {'visit_id': 'ccf365', 'cookie_id': 'c4ca42', 'page_id': 9, 'event_type': 2, 'sequence_number': 5, 'event_time': '2020-02-04 19:17:51.72942'}, {'visit_id': 'ccf365', 'cookie_id': 'c4ca42', 'page_id': 10, 'event_type': 2, 'sequence_number': 7, 'event_time': '2020-02-04 19:19:10.570786'}, {'visit_id': 'ccf365', 'cookie_id': 'c4ca42', 'page_id': 12, 'event_type': 1, 'sequence_number': 10, 'event_time': '2020-02-04 19:20:52.307244'}, {'visit_id': 'd58cbd', 'cookie_id': 'c81e72', 'page_id': 1, 'event_type': 1, 'sequence_number': 1, 'event_time': '2020-01-18 23:40:54.761906'}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.VEG_LOSS_RATE_DF
Column name: item_name Type: TEXT
Column name: item_code Type: NUMBER
Column name: index Type: NUMBER
Column name: loss_rate_% Type: FLOAT
Sample rows:
[{'index': 0, 'item_code': 102900005115168, 'item_name': 'Niushou Shengcai', 'loss_rate_%': 4.39}, {'index': 1, 'item_code': 102900005115199, 'item_name': 'Sichuan Red Cedar', 'loss_rate_%': 10.46}, {'index': 7, 'item_code': 102900005115786, 'item_name': 'Zhuyecai', 'loss_rate_%': 13.62}, {'index': 8, 'item_code': 102900005115793, 'item_name': 'Chinese Cabbage', 'loss_rate_%': 7.59}, {'index': 10, 'item_code': 102900005115823, 'item_name': 'Shanghaiqing', 'loss_rate_%': 14.43}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.CUSTOMER_NODES
Column name: region_id Type: NUMBER
Column name: start_date Type: TEXT
Column name: end_date Type: TEXT
Column name: customer_id Type: NUMBER
Column name: node_id Type: NUMBER
Sample rows:
[{'customer_id': 1, 'region_id': 3, 'node_id': 4, 'start_date': '2020-01-02', 'end_date': '2020-01-03'}, {'customer_id': 2, 'region_id': 3, 'node_id': 5, 'start_date': '2020-01-03', 'end_date': '2020-01-17'}, {'customer_id': 3, 'region_id': 5, 'node_id': 4, 'start_date': '2020-01-27', 'end_date': '2020-02-18'}, {'customer_id': 4, 'region_id': 5, 'node_id': 4, 'start_date': '2020-01-07', 'end_date': '2020-01-19'}, {'customer_id': 7, 'region_id': 2, 'node_id': 5, 'start_date': '2020-01-20', 'end_date': '2020-02-04'}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.WEEKLY_SALES
Column name: region Type: TEXT
Column name: week_date Type: TEXT
Column name: segment Type: TEXT
Column name: customer_type Type: TEXT
Column name: sales Type: NUMBER
Column name: platform Type: TEXT
Column name: transactions Type: NUMBER
Sample rows:
[{'week_date': '31/8/20', 'region': 'ASIA', 'platform': 'Retail', 'segment': 'F1', 'customer_type': 'New', 'transactions': 31574, 'sales': 996575}, {'week_date': '31/8/20', 'region': 'OCEANIA', 'platform': 'Shopify', 'segment': 'C2', 'customer_type': 'Existing', 'transactions': 4661, 'sales': 882690}, {'week_date': '31/8/20', 'region': 'AFRICA', 'platform': 'Retail', 'segment': 'F1', 'customer_type': 'Existing', 'transactions': 97604, 'sales': 5185233}, {'week_date': '31/8/20', 'region': 'OCEANIA', 'platform': 'Retail', 'segment': 'C2', 'customer_type': 'New', 'transactions': 111219, 'sales': 2980673}, {'week_date': '31/8/20', 'region': 'AFRICA', 'platform': 'Retail', 'segment': 'C3', 'customer_type': 'Existing', 'transactions': 284971, 'sales': 14430196}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.BITCOIN_MEMBERS
Column name: first_name Type: TEXT
Column name: member_id Type: TEXT
Column name: region Type: TEXT
Sample rows:
[{'member_id': 'c4ca42', 'first_name': 'Danny', 'region': 'Australia'}, {'member_id': 'c81e72', 'first_name': 'Vipul', 'region': 'United States'}, {'member_id': 'a87ff6', 'first_name': 'Nandita', 'region': 'United States'}, {'member_id': 'e4da3b', 'first_name': 'Rowan', 'region': 'United States'}, {'member_id': '167909', 'first_name': 'Ayush', 'region': 'United States'}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
Column name: platform Type: TEXT
Column name: month_number Type: NUMBER
Column name: age_band Type: TEXT
Column name: calendar_year Type: NUMBER
Column name: customer_type Type: TEXT
Column name: region Type: TEXT
Column name: demographic Type: TEXT
Column name: week_number Type: NUMBER
Column name: transactions Type: NUMBER
Column name: avg_transaction Type: FLOAT
Column name: segment Type: TEXT
Column name: week_date Type: TEXT
Column name: sales Type: NUMBER
Column name: week_date_formatted Type: TEXT
Sample rows:
[{'week_date_formatted': '2020-8-31', 'week_date': '2020-08-31', 'region': 'USA', 'platform': 'Retail', 'segment': 'unknown', 'customer_type': 'Guest', 'transactions': 529151, 'sales': 16509610, 'week_number': 36, 'month_number': 8, 'calendar_year': 2020, 'age_band': 'unknown', 'demographic': 'unknown', 'avg_transaction': 31.2}, {'week_date_formatted': '2020-8-31', 'week_date': '2020-08-31', 'region': 'EUROPE', 'platform': 'Retail', 'segment': 'C1', 'customer_type': 'New', 'transactions': 4517, 'sales': 141942, 'week_number': 36, 'month_number': 8, 'calendar_year': 2020, 'age_band': 'Young Adults', 'demographic': 'Couples', 'avg_transaction': 31.42}, {'week_date_formatted': '2020-8-31', 'week_date': '2020-08-31', 'region': 'AFRICA', 'platform': 'Retail', 'segment': 'C2', 'customer_type': 'New', 'transactions': 58046, 'sales': 1758388, 'week_number': 36, 'month_number': 8, 'calendar_year': 2020, 'age_band': 'Middle Aged', 'demographic': 'Couples', 'avg_transaction': 30.29}, {'week_date_formatted': '2020-8-31', 'week_date': '2020-08-31', 'region': 'AFRICA', 'platform': 'Shopify', 'segment': 'F3', 'customer_type': 'Existing', 'transactions': 2514, 'sales': 519502, 'week_number': 36, 'month_number': 8, 'calendar_year': 2020, 'age_band': 'Retirees', 'demographic': 'Families', 'avg_transaction': 206.64}, {'week_date_formatted': '2020-8-31', 'week_date': '2020-08-31', 'region': 'ASIA', 'platform': 'Shopify', 'segment': 'F1', 'customer_type': 'Existing', 'transactions': 2158, 'sales': 371417, 'week_number': 36, 'month_number': 8, 'calendar_year': 2020, 'age_band': 'Young Adults', 'demographic': 'Families', 'avg_transaction': 172.11}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.CUSTOMER_REGIONS
Column name: region_id Type: NUMBER
Column name: region_name Type: TEXT
Sample rows:
[{'region_id': 3, 'region_name': 'Africa'}, {'region_id': 4, 'region_name': 'Asia'}, {'region_id': 5, 'region_name': 'Europe'}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.CUSTOMER_TRANSACTIONS
Column name: customer_id Type: NUMBER
Column name: txn_date Type: TEXT
Column name: txn_amount Type: NUMBER
Column name: txn_type Type: TEXT
Sample rows:
[{'customer_id': 429, 'txn_date': '2020-01-21', 'txn_type': 'deposit', 'txn_amount': 82}, {'customer_id': 155, 'txn_date': '2020-01-10', 'txn_type': 'deposit', 'txn_amount': 712}, {'customer_id': 398, 'txn_date': '2020-01-01', 'txn_type': 'deposit', 'txn_amount': 196}, {'customer_id': 255, 'txn_date': '2020-01-14', 'txn_type': 'deposit', 'txn_amount': 563}, {'customer_id': 373, 'txn_date': '2020-01-18', 'txn_type': 'deposit', 'txn_amount': 596}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.SHOPPING_CART_USERS
Column name: user_id Type: NUMBER
Column name: cookie_id Type: TEXT
Column name: start_date Type: TEXT
Sample rows:
[{'user_id': 1, 'cookie_id': 'c4ca42', 'start_date': '2020-02-04'}, {'user_id': 2, 'cookie_id': 'c81e72', 'start_date': '2020-01-18'}, {'user_id': 4, 'cookie_id': 'a87ff6', 'start_date': '2020-02-22'}, {'user_id': 5, 'cookie_id': 'e4da3b', 'start_date': '2020-02-01'}, {'user_id': 7, 'cookie_id': '8f14e4', 'start_date': '2020-02-09'}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.VEG_TXN_DF
Column name: txn_date Type: TEXT
Column name: qty_sold(kg) Type: FLOAT
Column name: sale/return Type: TEXT
Column name: txn_time Type: TEXT
Column name: unit_selling_px_rmb/kg Type: FLOAT
Column name: index Type: NUMBER
Column name: discount(%) Type: NUMBER
Column name: item_code Type: NUMBER
Column name: day_of_week Type: TEXT
Sample rows:
[{'index': 1, 'txn_date': '2020-07-01 00:00:00', 'txn_time': '09:17:27', 'item_code': 102900005115960, 'qty_sold(kg)': 0.849, 'unit_selling_px_rmb/kg': 3.2, 'sale/return': 'sale', 'discount(%)': 1, 'day_of_week': 'Wednesday'}, {'index': 6, 'txn_date': '2020-07-01 00:00:00', 'txn_time': '09:21:56', 'item_code': 102900005115779, 'qty_sold(kg)': 0.338, 'unit_selling_px_rmb/kg': 8.0, 'sale/return': 'sale', 'discount(%)': 1, 'day_of_week': 'Wednesday'}, {'index': 7, 'txn_date': '2020-07-01 00:00:00', 'txn_time': '09:22:01', 'item_code': 102900005117056, 'qty_sold(kg)': 0.132, 'unit_selling_px_rmb/kg': 7.6, 'sale/return': 'sale', 'discount(%)': 1, 'day_of_week': 'Wednesday'}, {'index': 8, 'txn_date': '2020-07-01 00:00:00', 'txn_time': '09:22:01', 'item_code': 102900005115779, 'qty_sold(kg)': 0.213, 'unit_selling_px_rmb/kg': 8.0, 'sale/return': 'sale', 'discount(%)': 1, 'day_of_week': 'Wednesday'}, {'index': 9, 'txn_date': '2020-07-01 00:00:00', 'txn_time': '09:22:15', 'item_code': 102900011008522, 'qty_sold(kg)': 0.514, 'unit_selling_px_rmb/kg': 8.0, 'sale/return': 'sale', 'discount(%)': 1, 'day_of_week': 'Wednesday'}]

--------------------------------------------------
Table full name: BANK_SALES_TRADING.BANK_SALES_TRADING.SHOPPING_CART_PAGE_HIERARCHY
Column name: page_id Type: NUMBER
Column name: product_id Type: FLOAT
Column name: page_name Type: TEXT
Column name: product_category Type: TEXT
Sample rows:
[{'page_id': 2, 'page_name': 'All Products', 'product_category': '', 'product_id': nan}, {'page_id': 3, 'page_name': 'Salmon', 'product_category': 'Fish', 'product_id': 1.0}, {'page_id': 4, 'page_name': 'Kingfish', 'product_category': 'Fish', 'product_id': 2.0}, {'page_id': 6, 'page_name': 'Russian Caviar', 'product_category': 'Luxury', 'product_id': 4.0}, {'page_id': 7, 'page_name': 'Black Truffle', 'product_category': 'Luxury', 'product_id': 5.0}]

--------------------------------------------------
External knowledge that might be helpful: 
None
The table structure information is ({database name: {schema name: [table name]}}): 
{'BANK_SALES_TRADING': {'BANK_SALES_TRADING': ['INTEREST_MAP', 'INTEREST_METRICS', 'BITCOIN_PRICES', 'SHOPPING_CART_CAMPAIGN_IDENTIFIER', 'SHOPPING_CART_EVENT_IDENTIFIER', 'VEG_CAT', 'VEG_WHSLE_DF', 'BITCOIN_TRANSACTIONS', 'SHOPPING_CART_EVENTS', 'VEG_LOSS_RATE_DF', 'CUSTOMER_NODES', 'WEEKLY_SALES', 'BITCOIN_MEMBERS', 'CLEANED_WEEKLY_SALES', 'CUSTOMER_REGIONS', 'CUSTOMER_TRANSACTIONS', 'SHOPPING_CART_USERS', 'VEG_TXN_DF', 'SHOPPING_CART_PAGE_HIERARCHY']}}

Some few-shot examples after column exploration may be helpful:
Query:
--Description: 1) View the list of unique tickers in the BITCOIN_PRICES table
SELECT DISTINCT "ticker"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
LIMIT 20;
Answer:
ticker
ETH
BTC
Query:
--Description: 2) Check which dates in August-2021 are stored in the table
SELECT DISTINCT "market_date"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "market_date" ILIKE '%-08-2021'
ORDER BY "market_date"
LIMIT 20;
Answer:
market_date
01-08-2021
02-08-2021
03-08-2021
04-08-2021
05-08-2021
06-08-2021
07-08-2021
08-08-2021
09-08-2021
10-08-2021
11-08-2021
12-08-2021
13-08-2021
14-08-2021
15-08-2021
16-08-2021
17-08-2021
18-08-2021
19-08-2021
20-08-2021
Query:
--Description: 3) Preview BTC price rows between 01-Aug-2021 and 10-Aug-2021
SELECT *
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "ticker" = 'BTC'
  AND "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
ORDER BY "market_date"
LIMIT 20;
Answer:
ticker,market_date,price,open,high,low,volume,change
BTC,01-08-2021,39878.3,41510.0,42565.0,39556.5,80.33K,-4.03%
BTC,01-09-2017,4921.9,4735.1,4925.2,4690.2,102.01K,3.94%
BTC,01-09-2018,7189.6,7032.4,7264.3,7020.4,3.52M,2.21%
BTC,01-09-2019,9729.3,9594.7,9799.5,9533.6,322.66K,1.41%
BTC,01-09-2020,11914.9,11644.2,12045.9,11544.6,580.69K,2.32%
BTC,01-10-2017,4403.1,4360.6,4412.6,4258.3,60.58K,0.97%
BTC,01-10-2018,6608.2,6635.2,6674.7,6072.7,9.19M,-0.41%
Query:
--Description: 4) Inspect the raw “volume” strings for every ticker in the same date range
SELECT "ticker",
       "market_date",
       "volume"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
ORDER BY "ticker", "market_date"
LIMIT 20;
Answer:
ticker,market_date,volume
BTC,01-08-2021,80.33K
BTC,01-09-2017,102.01K
BTC,01-09-2018,3.52M
BTC,01-09-2019,322.66K
BTC,01-09-2020,580.69K
BTC,01-10-2017,60.58K
BTC,01-10-2018,9.19M
BTC,01-10-2019,533.95K
BTC,01-10-2020,95.33K
BTC,01-11-2017,133.19K
BTC,01-11-2018,124.16K
BTC,01-11-2019,689.65K
BTC,01-11-2020,51.71K
BTC,01-12-2017,131.92K
BTC,01-12-2018,316.30K
BTC,01-12-2019,777.00K
Query:
--Description: 5) Convert the “volume” text into a pure numeric value (in units)
SELECT "ticker",
       "market_date",
       "volume",
       CASE
           WHEN "volume" ILIKE '%K' THEN TO_NUMBER(REPLACE("volume", 'K', '')) * 1000
           WHEN "volume" ILIKE '%M' THEN TO_NUMBER(REPLACE("volume", 'M', '')) * 1000000
           WHEN "volume" = '-'            THEN 0
           ELSE TO_NUMBER("volume")
       END AS "volume_num"
FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
ORDER BY "ticker", "market_date"
LIMIT 20;
Answer:
ticker,market_date,volume,volume_num
BTC,01-08-2021,80.33K,80000
BTC,01-09-2017,102.01K,102000
BTC,01-09-2018,3.52M,4000000
BTC,01-09-2019,322.66K,323000
BTC,01-09-2020,580.69K,581000
BTC,01-10-2017,60.58K,61000
BTC,01-10-2018,9.19M,9000000
BTC,01-10-2019,533.95K,534000
BTC,01-10-2020,95.33K,95000
BTC,01-11-2017,133.19K,133000
BTC,01-11-2018,124.16K,124000
BTC,01-11-2019,689.65K,690000
BTC,01-11-2020,51.71K,52000
Query:
--Description: 6) Show only those rows where the converted volume is non-zero
WITH v AS (
    SELECT "ticker",
           "market_date",
           CASE
               WHEN "volume" ILIKE '%K' THEN TO_NUMBER(REPLACE("volume", 'K', '')) * 1000
               WHEN "volume" ILIKE '%M' THEN TO_NUMBER(REPLACE("volume", 'M', '')) * 1000000
               WHEN "volume" = '-'            THEN 0
               ELSE TO_NUMBER("volume")
           END AS "volume_num"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
    WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
)
SELECT *
FROM v
WHERE "volume_num" <> 0
ORDER BY "ticker", "market_date"
LIMIT 20;
Answer:
ticker,market_date,volume_num
BTC,01-08-2021,80000
BTC,01-09-2017,102000
BTC,01-09-2018,4000000
BTC,01-09-2019,323000
BTC,01-09-2020,581000
BTC,01-10-2017,61000
BTC,01-10-2018,9000000
BTC,01-10-2019,534000
BTC,01-10-2020,95000
BTC,01-11-2017,133000
BTC,01-11-2018,124000
BTC,01-11-2019,690000
BTC,01-11-2020,52000
BTC,01-12-2017,132000
BTC,01-12-2018,316000
BTC,01-12-2019,777000
BTC,01-12-2020,209000
BTC,02-01-2017,65000
Query:
--Description: 7) Add a lagged (previous non-zero) volume using IGNORE NULLS
WITH v AS (
    SELECT "ticker",
           "market_date",
           CASE
               WHEN "volume" ILIKE '%K' THEN TO_NUMBER(REPLACE("volume", 'K', '')) * 1000
               WHEN "volume" ILIKE '%M' THEN TO_NUMBER(REPLACE("volume", 'M', '')) * 1000000
               WHEN "volume" = '-'            THEN 0
               ELSE TO_NUMBER("volume")
           END AS "volume_num"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
    WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
), lagged AS (
    SELECT *,
           LAG( NULLIF("volume_num",0) ) IGNORE NULLS
           OVER (PARTITION BY "ticker" ORDER BY "market_date") AS "prev_volume"
    FROM v
)
SELECT *
FROM lagged
ORDER BY "ticker", "market_date"
LIMIT 20;
Answer:
ticker,market_date,volume_num,prev_volume
BTC,01-08-2021,80000,
BTC,01-09-2017,102000,80000
BTC,01-09-2018,4000000,102000
BTC,01-09-2019,323000,4000000
BTC,01-09-2020,581000,323000
BTC,01-10-2017,61000,581000
BTC,01-10-2018,9000000,61000
BTC,01-10-2019,534000,9000000
BTC,01-10-2020,95000,534000
BTC,01-11-2017,133000,95000
BTC,01-11-2018,124000,133000
BTC,01-11-2019,690000,124000
BTC,01-11-2020,52000,690000
BTC,01-12-2017,132000,52000
Query:
--Description: 8) Compute the daily percentage change in volume
WITH v AS (
    SELECT "ticker",
           "market_date",
           CASE
               WHEN "volume" ILIKE '%K' THEN TO_NUMBER(REPLACE("volume", 'K', '')) * 1000
               WHEN "volume" ILIKE '%M' THEN TO_NUMBER(REPLACE("volume", 'M', '')) * 1000000
               WHEN "volume" = '-'            THEN 0
               ELSE TO_NUMBER("volume")
           END AS "volume_num"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
    WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
), lagged AS (
    SELECT *,
           LAG( NULLIF("volume_num",0) ) IGNORE NULLS
           OVER (PARTITION BY "ticker" ORDER BY "market_date") AS "prev_volume"
    FROM v
)
SELECT "ticker",
       "market_date",
       "volume_num",
       "prev_volume",
       ROUND( ( ("volume_num" - "prev_volume") / "prev_volume" ) * 100 , 2 ) AS "pct_change_vol"
FROM lagged
WHERE "prev_volume" IS NOT NULL     -- ensures a prior non-zero value exists
ORDER BY "ticker", "market_date"
LIMIT 20;
Answer:
ticker,market_date,volume_num,prev_volume,pct_change_vol
BTC,01-09-2017,102000,80000,27.50
BTC,01-09-2018,4000000,102000,3821.57
BTC,01-09-2019,323000,4000000,-91.93
BTC,01-09-2020,581000,323000,79.88
BTC,01-10-2017,61000,581000,-89.50
BTC,01-10-2018,9000000,61000,14654.10
BTC,01-10-2019,534000,9000000,-94.07
BTC,01-10-2020,95000,534000,-82.21
BTC,01-11-2017,133000,95000,40.00
Query:
--Description: 9) Same calculation for all tickers, returning every required row (no LIMIT)
WITH v AS (
    SELECT "ticker",
           "market_date",
           CASE
               WHEN "volume" ILIKE '%K' THEN TO_NUMBER(REPLACE("volume", 'K', '')) * 1000
               WHEN "volume" ILIKE '%M' THEN TO_NUMBER(REPLACE("volume", 'M', '')) * 1000000
               WHEN "volume" = '-'            THEN 0
               ELSE TO_NUMBER("volume")
           END AS "volume_num"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
    WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
), lagged AS (
    SELECT *,
           LAG( NULLIF("volume_num",0) ) IGNORE NULLS
           OVER (PARTITION BY "ticker" ORDER BY "market_date") AS "prev_volume"
    FROM v
)
SELECT "ticker",
       "market_date",
       "volume_num"      AS "current_volume",
       "prev_volume",
       ROUND( ( ("volume_num" - "prev_volume") / "prev_volume" ) * 100 , 2 ) AS "pct_change_volume"
FROM lagged
WHERE "prev_volume" IS NOT NULL
ORDER BY "ticker", "market_date";
Answer:
ticker,market_date,current_volume,prev_volume,pct_change_volume
BTC,01-09-2017,102000,80000,27.50
BTC,01-09-2018,4000000,102000,3821.57
BTC,01-09-2019,323000,4000000,-91.93
BTC,01-09-2020,581000,323000,79.88
BTC,01-10-2017,61000,581000,-89.50
BTC,01-10-2018,9000000,61000,14654.10
BTC,01-10-2019,534000,9000000,-94.07
BTC,01-10-2020,95000,534000,-82.21
BTC,01-11-2017,133000,95000,40.00
Query:
--Description: 10) Final answer query—returns only ticker, date, and % change (ordered)
WITH v AS (
    SELECT "ticker",
           "market_date",
           CASE
               WHEN "volume" ILIKE '%K' THEN TO_NUMBER(REPLACE("volume", 'K', '')) * 1000
               WHEN "volume" ILIKE '%M' THEN TO_NUMBER(REPLACE("volume", 'M', '')) * 1000000
               WHEN "volume" = '-'            THEN 0
               ELSE TO_NUMBER("volume")
           END AS "volume_num"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
    WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
), lagged AS (
    SELECT *,
           LAG( NULLIF("volume_num",0) ) IGNORE NULLS
           OVER (PARTITION BY "ticker" ORDER BY "market_date") AS "prev_volume"
    FROM v
)
SELECT "ticker",
       "market_date",
       ROUND( ( ("volume_num" - "prev_volume") / "prev_volume" ) * 100 , 2 ) AS "pct_change_volume"
FROM lagged
WHERE "prev_volume" IS NOT NULL
ORDER BY "ticker", "market_date";
Answer:
ticker,market_date,pct_change_volume
BTC,01-09-2017,27.50
BTC,01-09-2018,3821.57
BTC,01-09-2019,-91.93
BTC,01-09-2020,79.88
BTC,01-10-2017,-89.50
BTC,01-10-2018,14654.10
BTC,01-10-2019,-94.07
BTC,01-10-2020,-82.21
BTC,01-11-2017,40.00
BTC,01-11-2018,-6.77
BTC,01-11-2019,456.45
BTC,01-11-2020,-92.46
BTC,01-12-2017,153.85
Task: Using the "bitcoin_prices" table, please calculate the daily percentage change in trading volume for each ticker from August 1 to August 10, 2021, ensuring that any volume ending in "K" or "M" is accurately converted to thousands or millions, any "-" volume is treated as zero, only non-zero volumes are used to determine the previous day's volume, and the results are ordered by ticker and date.

Please think step by step and answer only one complete SQL in snowflake dialect in ```sql``` format.
SQL usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: The table structure information is ({database name: {schema name: [table name]}}): 
{'BANK_SALES_TRADING': {'BANK_SALES_TRADING': ['INTEREST_MAP', 'INTEREST_METRICS', 'BITCOIN_PRICES', 'SHOPPING_CART_CAMPAIGN_IDENTIFIER', 'SHOPPING_CART_EVENT_IDENTIFIER', 'VEG_CAT', 'VEG_WHSLE_DF', 'BITCOIN_TRANSACTIONS', 'SHOPPING_CART_EVENTS', 'VEG_LOSS_RATE_DF', 'CUSTOMER_NODES', 'WEEKLY_SALES', 'BITCOIN_MEMBERS', 'CLEANED_WEEKLY_SALES', 'CUSTOMER_REGIONS', 'CUSTOMER_TRANSACTIONS', 'SHOPPING_CART_USERS', 'VEG_TXN_DF', 'SHOPPING_CART_PAGE_HIERARCHY']}}

When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
If the task description does not specify the number of decimal places, retain all decimals to four places.

[Self-refine]
2025-05-07 07:07:07 - Thread-646 (execute) - INFO - [Try to run SQL in self-refine]
```sql
WITH parsed AS (
    /* 1. Convert the raw “volume” text into a pure numeric value          */
    SELECT
        "ticker",
        "market_date",
        CASE
            WHEN "volume" ILIKE '%K'      THEN TO_NUMBER(REPLACE("volume", 'K', '')) * 1000      -- thousands
            WHEN "volume" ILIKE '%M'      THEN TO_NUMBER(REPLACE("volume", 'M', '')) * 1000000   -- millions
            WHEN "volume" = '-'           THEN 0                                                -- dash → zero
            ELSE TO_NUMBER("volume")                                                             -- already numeric
        END AS "volume_num"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING."BITCOIN_PRICES"
    WHERE "market_date" BETWEEN '01-08-2021' AND '10-08-2021'
), lagged AS (
    /* 2. Fetch the previous non-zero volume per ticker (IGNORE NULLS)     */
    SELECT
        *,
        LAG( NULLIF("volume_num", 0) ) 
            IGNORE NULLS
            OVER (PARTITION BY "ticker"
                  ORDER BY TO_DATE("market_date", 'DD-MM-YYYY')) AS "prev_volume"
    FROM parsed
)
SELECT
    "ticker",
    "market_date",
    ROUND( ( ("volume_num" - "prev_volume") / "prev_volume" ) * 100 , 2 )  AS "pct_change_volume"
FROM lagged
WHERE "prev_volume" IS NOT NULL                 -- ensures a valid prior non-zero volume
ORDER BY
    "ticker",
    TO_DATE("market_date", 'DD-MM-YYYY');
```
[Try to run SQL in self-refine]
2025-05-07 07:07:07 - Thread-646 (execute) - INFO - Total iteration counts: 0
