2025-05-07 01:33:12 - Thread-95 (execute) - INFO - [Exploration]
```sql
--Description: Sample 20 python-source files that exist in the repo snapshot  
SELECT  f."repo_name",
        f."path",
        f."id"
FROM    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"  f
WHERE   f."path" ILIKE '%.py'
LIMIT 20;
```

```sql
--Description: Sample 20 R-source files that exist in the repo snapshot  
SELECT  f."repo_name",
        f."path",
        f."id"
FROM    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"  f
WHERE   f."path" ILIKE '%.r'
LIMIT 20;
```

```sql
--Description: Show 20 raw lines that contain Python import-statements  
SELECT  f."path",
        l.value::STRING  AS "line"
FROM    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"      f
JOIN    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"   c
          ON f."id" = c."id"
,       LATERAL FLATTEN(input => SPLIT(c."content", '\n')) l
WHERE   f."path" ILIKE '%.py'
  AND   l.value::STRING ILIKE '%import %'
LIMIT 20;
```

```sql
--Description: Extract the first module name that follows “import …” or “from … import” in Python lines  
SELECT  DISTINCT
        REGEXP_SUBSTR(l.value::STRING,
                      '^\\s*(?:from|import)\\s+([A-Za-z0-9_\\.]+)',
                      1, 1, 'e', 1)          AS "python_module"
FROM    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"      f
JOIN    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"   c
          ON f."id" = c."id"
,       LATERAL FLATTEN(input => SPLIT(c."content", '\n')) l
WHERE   f."path" ILIKE '%.py'
  AND   l.value::STRING ILIKE '%import %'
LIMIT 20;
```

```sql
--Description: Count occurrences of every Python module mentioned in import lines (top 20)  
SELECT  REGEXP_SUBSTR(l.value::STRING,
                      '^\\s*(?:from|import)\\s+([A-Za-z0-9_\\.]+)',
                      1, 1, 'e', 1)          AS "python_module",
        COUNT(*)                            AS "occurrences"
FROM    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"      f
JOIN    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"   c
          ON f."id" = c."id"
,       LATERAL FLATTEN(input => SPLIT(c."content", '\n')) l
WHERE   f."path" ILIKE '%.py'
  AND   l.value::STRING ILIKE '%import %'
GROUP BY 1
ORDER BY 2 DESC
LIMIT 20;
```

```sql
--Description: Show 20 raw lines that contain R “library(…)” or “require(…)” statements  
SELECT  f."path",
        l.value::STRING  AS "line"
FROM    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"      f
JOIN    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"   c
          ON f."id" = c."id"
,       LATERAL FLATTEN(input => SPLIT(c."content", '\n')) l
WHERE   f."path" ILIKE '%.r'
  AND   (l.value::STRING ILIKE '%library(%' OR l.value::STRING ILIKE '%require(%')
LIMIT 20;
```

```sql
--Description: Extract R package names appearing in library()/require() calls  
SELECT  DISTINCT
        REGEXP_SUBSTR(l.value::STRING,
                      '\\b(?:library|require)\\s*\\(\\s*([A-Za-z0-9_.]+)',
                      1, 1, 'e', 1)          AS "r_package"
FROM    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"      f
JOIN    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"   c
          ON f."id" = c."id"
,       LATERAL FLATTEN(input => SPLIT(c."content", '\n')) l
WHERE   f."path" ILIKE '%.r'
  AND   (l.value::STRING ILIKE '%library(%' OR l.value::STRING ILIKE '%require(%')
LIMIT 20;
```

```sql
--Description: Count occurrences of every R package referenced in library()/require() (top 20)  
SELECT  REGEXP_SUBSTR(l.value::STRING,
                      '\\b(?:library|require)\\s*\\(\\s*([A-Za-z0-9_.]+)',
                      1, 1, 'e', 1)          AS "r_package",
        COUNT(*)                            AS "occurrences"
FROM    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"      f
JOIN    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"   c
          ON f."id" = c."id"
,       LATERAL FLATTEN(input => SPLIT(c."content", '\n')) l
WHERE   f."path" ILIKE '%.r'
  AND   (l.value::STRING ILIKE '%library(%' OR l.value::STRING ILIKE '%require(%')
GROUP BY 1
ORDER BY 2 DESC
LIMIT 20;
```

```sql
--Description: Combine Python modules and R packages counts, mark their language, and list top 20 overall  
WITH py AS (
    SELECT  REGEXP_SUBSTR(l.value::STRING,
                          '^\\s*(?:from|import)\\s+([A-Za-z0-9_\\.]+)',
                          1, 1, 'e', 1)      AS "name",
            COUNT(*)                        AS "occurrences",
            'Python'                        AS "language"
    FROM    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"    f
    JOIN    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS" c
              ON f."id" = c."id",
            LATERAL FLATTEN(input => SPLIT(c."content", '\n')) l
    WHERE   f."path" ILIKE '%.py'
      AND   l.value::STRING ILIKE '%import %'
    GROUP BY 1
), r AS (
    SELECT  REGEXP_SUBSTR(l.value::STRING,
                          '\\b(?:library|require)\\s*\\(\\s*([A-Za-z0-9_.]+)',
                          1, 1, 'e', 1)      AS "name",
            COUNT(*)                        AS "occurrences",
            'R'                             AS "language"
    FROM    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"    f
    JOIN    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS" c
              ON f."id" = c."id",
            LATERAL FLATTEN(input => SPLIT(c."content", '\n')) l
    WHERE   f."path" ILIKE '%.r'
      AND   (l.value::STRING ILIKE '%library(%' OR l.value::STRING ILIKE '%require(%')
    GROUP BY 1
)
SELECT  "language",
        "name",
        "occurrences"
FROM    (
        SELECT * FROM py
        UNION ALL
        SELECT * FROM r
        ) t
ORDER BY "language", "occurrences" DESC
LIMIT 20;
```

```sql
--Description: Verify the final aggregated list sorted first by language then descending occurrences  
SELECT  t."language",
        t."name",
        t."occurrences"
FROM   (
        -- same CTE blocks as above
        WITH py AS (
            SELECT  REGEXP_SUBSTR(l.value::STRING,
                                  '^\\s*(?:from|import)\\s+([A-Za-z0-9_\\.]+)',
                                  1, 1, 'e', 1)    AS "name",
                    COUNT(*)                      AS "occurrences",
                    'Python'                      AS "language"
            FROM    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"  f
            JOIN    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS" c
              ON f."id" = c."id",
                    LATERAL FLATTEN(input => SPLIT(c."content", '\n')) l
            WHERE   f."path" ILIKE '%.py'
              AND   l.value::STRING ILIKE '%import %'
            GROUP BY 1
        ),
        r AS (
            SELECT  REGEXP_SUBSTR(l.value::STRING,
                                  '\\b(?:library|require)\\s*\\(\\s*([A-Za-z0-9_.]+)',
                                  1, 1, 'e', 1)    AS "name",
                    COUNT(*)                      AS "occurrences",
                    'R'                           AS "language"
            FROM    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"  f
            JOIN    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS" c
              ON f."id" = c."id",
                    LATERAL FLATTEN(input => SPLIT(c."content", '\n')) l
            WHERE   f."path" ILIKE '%.r'
              AND   (l.value::STRING ILIKE '%library(%' OR l.value::STRING ILIKE '%require(%')
            GROUP BY 1
        )
        SELECT * FROM py
        UNION ALL
        SELECT * FROM r
      ) t
ORDER BY t."language", t."occurrences" DESC
LIMIT 20;
```
[Exploration]
2025-05-07 01:33:12 - Thread-95 (execute) - INFO - [Try to execute]
--Description: Sample 20 python-source files that exist in the repo snapshot  
SELECT  f."repo_name",
        f."path",
        f."id"
FROM    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"  f
WHERE   f."path" ILIKE '%.py'
LIMIT 20;
[Try to execute]
2025-05-07 01:33:14 - Thread-95 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Sample 20 python-source files that exist in the repo snapshot  
SELECT  f."repo_name",
        f."path",
        f."id"
FROM    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"  f
WHERE   f."path" ILIKE '%.py'
LIMIT 20;
Results:
repo_name,path,id
jleclanche/django-push-notifications,push_notifications/migrations/0002_auto_20160106_0850.py,d7b9d759d537697e9fd55279b5026aed022d23d3
kennyledet/Algorithm-Implementations,Maximum_Subarray/Python/shivam5992/kadane.py,9716963c79b32a474c1df22dfd68bb67ba51d334
kennyledet/Algorithm-Implementations,Caesar_Cipher/Python/kennyledet/caesar_cipher.py,13188c551074329980a22d255b09fb6ff14241bd
orcasgit/django-pgcrypto-expressions,setup.py,1db8490c8f06c13a1b0b5090f1646e229937c68f

[Successfully executed]
2025-05-07 01:33:14 - Thread-95 (execute) - INFO - [Try to execute]
--Description: Sample 20 R-source files that exist in the repo snapshot  
SELECT  f."repo_name",
        f."path",
        f."id"
FROM    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"  f
WHERE   f."path" ILIKE '%.r'
LIMIT 20;
[Try to execute]
2025-05-07 01:33:15 - Thread-95 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Sample 20 R-source files that exist in the repo snapshot  
SELECT  f."repo_name",
        f."path",
        f."id"
FROM    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"  f
WHERE   f."path" ILIKE '%.r'
LIMIT 20;
Results:
repo_name,path,id
mercicle/Deep-Learning-with-h2o-in-R,data-prep/split-train-test.r,ca95c2cef7356097cdd5fddefd85b68b2e22a5a9
SchlossLab/Schloss_Cluster_PeerJ_2015,code/summarize_mcc.R,4abf1ec7e785029c6e4eba44692acd063f16ad35
richarddmorey/ConfidenceIntervalsFallacy,Rmd_files/figureCode/figure6_invertTest.R,f53e14ea7d92635592461b669a3f1623a3d830ee
soarlab/maline,data_analysis/crossvalidation/randomForest.R,a0cfbf6f0ddc9a79eb0281729108d8977ceb2c51
jasdumas/shinyGEO,series/process-series.R,392

[Successfully executed]
2025-05-07 01:33:15 - Thread-95 (execute) - INFO - [Try to execute]
--Description: Show 20 raw lines that contain Python import-statements  
SELECT  f."path",
        l.value::STRING  AS "line"
FROM    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"      f
JOIN    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"   c
          ON f."id" = c."id"
,       LATERAL FLATTEN(input => SPLIT(c."content", '\n')) l
WHERE   f."path" ILIKE '%.py'
  AND   l.value::STRING ILIKE '%import %'
LIMIT 20;
[Try to execute]
2025-05-07 01:33:18 - Thread-95 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Show 20 raw lines that contain Python import-statements  
SELECT  f."path",
        l.value::STRING  AS "line"
FROM    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"      f
JOIN    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"   c
          ON f."id" = c."id"
,       LATERAL FLATTEN(input => SPLIT(c."content", '\n')) l
WHERE   f."path" ILIKE '%.py'
  AND   l.value::STRING ILIKE '%import %'
LIMIT 20;
Results:
path,line
maec/utils/merge.py,from copy import deepcopy
maec/utils/merge.py,import itertools
maec/utils/merge.py,from mixbox import idgen
maec/utils/merge.py,from mixbox.namespaces import Namespace
maec/utils/merge.py,from cybox.core import Object
maec/utils/merge.py,from cybox.common import HashList
maec/utils/merge.py,import maec
maec/utils/merge.py,"from maec.package import (Package, MalwareSubject, MalwareConfigurationDetails,"
rekall-core/rekall/plugins/linux/iomem.py,from rekall.p

[Successfully executed]
2025-05-07 01:33:18 - Thread-95 (execute) - INFO - [Try to execute]
--Description: Extract the first module name that follows “import …” or “from … import” in Python lines  
SELECT  DISTINCT
        REGEXP_SUBSTR(l.value::STRING,
                      '^\\s*(?:from|import)\\s+([A-Za-z0-9_\\.]+)',
                      1, 1, 'e', 1)          AS "python_module"
FROM    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"      f
JOIN    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"   c
          ON f."id" = c."id"
,       LATERAL FLATTEN(input => SPLIT(c."content", '\n')) l
WHERE   f."path" ILIKE '%.py'
  AND   l.value::STRING ILIKE '%import %'
LIMIT 20;
[Try to execute]
2025-05-07 01:33:25 - Thread-95 (execute) - INFO - [Error occurred]
{'status': 'error', 'error_msg': "##ERROR##100048 (2201B): Invalid regular expression: '^\\s*(?:from|import)\\s+([A-Za-z0-9_\\.]+)', no argument for repetition operator: ?"}
[Error occurred]
2025-05-07 01:35:21 - Thread-95 (execute) - INFO - [Corrected SQL]
```sql
--Description: Identify unique module names imported in Python files.
-- Reasoning / thinking process:
--   • Join SAMPLE_FILES (metadata) with SAMPLE_CONTENTS (actual code) on the blob “id”.
--   • Keep only records whose path ends in “.py”.
--   • Split the file content into individual lines via LATERAL FLATTEN so we can
--     examine each line independently.
--   • Retain lines that contain the word “import” (simple filter with ILIKE).
--   • Apply REGEXP_SUBSTR to extract the first token after either “import” or
--     “from … import”.  Pattern: ^\s*(from|import)\s+([A-Za-z0-9_\.]+)
--       - Capture-group 1 = the keyword (unused here)
--       - Capture-group 2 = the module name we need
--     The 'e' flag enables capture-group return, 'i' ignores case.
--   • Discard any rows where the regex found nothing (IS NOT NULL).
--   • DISTINCT eliminates duplicates; LIMIT 20 shows a small sample.
SELECT DISTINCT
       REGEXP_SUBSTR(
           l.value::STRING,
           '^\\s*(from|import)\\s+([A-Za-z0-9_\\.]+)',
           1, 1, 'ie', 2          -- return capture-group 2 (module name)
       ) AS "python_module"
FROM   "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"    f
JOIN   "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS" c
       ON f."id" = c."id",
       LATERAL FLATTEN(input => SPLIT(c."content", '\n')) l
WHERE  f."path" ILIKE '%.py'
  AND  l.value::STRING ILIKE '%import %'
  AND  REGEXP_SUBSTR(
           l.value::STRING,
           '^\\s*(from|import)\\s+([A-Za-z0-9_\\.]+)',
           1, 1, 'ie', 2
       ) IS NOT NULL
LIMIT 20;
```
[Corrected SQL]
2025-05-07 01:37:08 - Thread-95 (execute) - INFO - [Results for corrected sql]
python_module
maec
diesel.protocols.zeromq
django.conf
cybox.core
corehq.sql_db.operations
cybox.common
diesel
itertools
django.db
copy
__future__
mixbox
maec.package
rekall.plugins.linux
mixbox.namespaces
time

[Results for corrected sql]
2025-05-07 01:38:22 - Thread-95 (execute) - INFO - [Corrected other sqls]
```sql
--Description: Count occurrences of every Python module mentioned in import lines (top 20)  
SELECT  REGEXP_SUBSTR(
            l.value::STRING,
            '^\\s*(from|import)\\s+([A-Za-z0-9_\\.]+)',
            1, 1, 'ie', 2)        AS "python_module",
        COUNT(*)                  AS "occurrences"
FROM    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"     f
JOIN    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"  c
          ON f."id" = c."id",
        LATERAL FLATTEN(input => SPLIT(c."content", '\n')) l
WHERE   f."path" ILIKE '%.py'
  AND   l.value::STRING ILIKE '%import %'
  AND   REGEXP_SUBSTR(
            l.value::STRING,
            '^\\s*(from|import)\\s+([A-Za-z0-9_\\.]+)',
            1, 1, 'ie', 2) IS NOT NULL
GROUP BY 1
ORDER BY 2 DESC
LIMIT 20;
```

```sql
--Description: Show 20 raw lines that contain R “library(…)” or “require(…)” statements  
SELECT  f."path",
        l.value::STRING AS "line"
FROM    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"     f
JOIN    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"  c
          ON f."id" = c."id",
        LATERAL FLATTEN(input => SPLIT(c."content", '\n')) l
WHERE   f."path" ILIKE '%.r'
  AND   (l.value::STRING ILIKE '%library(%' OR l.value::STRING ILIKE '%require(%')
LIMIT 20;
```

```sql
--Description: Extract R package names appearing in library()/require() calls  
SELECT DISTINCT
       REGEXP_SUBSTR(
           l.value::STRING,
           '\\b(library|require)\\s*\\(\\s*([A-Za-z0-9_.]+)',
           1, 1, 'ie', 2)         AS "r_package"
FROM   "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"     f
JOIN   "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"  c
         ON f."id" = c."id",
       LATERAL FLATTEN(input => SPLIT(c."content", '\n')) l
WHERE  f."path" ILIKE '%.r'
  AND  (l.value::STRING ILIKE '%library(%' OR l.value::STRING ILIKE '%require(%')
  AND  REGEXP_SUBSTR(
           l.value::STRING,
           '\\b(library|require)\\s*\\(\\s*([A-Za-z0-9_.]+)',
           1, 1, 'ie', 2) IS NOT NULL
LIMIT 20;
```

```sql
--Description: Count occurrences of every R package referenced in library()/require() (top 20)  
SELECT  REGEXP_SUBSTR(
            l.value::STRING,
            '\\b(library|require)\\s*\\(\\s*([A-Za-z0-9_.]+)',
            1, 1, 'ie', 2)        AS "r_package",
        COUNT(*)                  AS "occurrences"
FROM    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"     f
JOIN    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"  c
          ON f."id" = c."id",
        LATERAL FLATTEN(input => SPLIT(c."content", '\n')) l
WHERE   f."path" ILIKE '%.r'
  AND   (l.value::STRING ILIKE '%library(%' OR l.value::STRING ILIKE '%require(%')
  AND   REGEXP_SUBSTR(
            l.value::STRING,
            '\\b(library|require)\\s*\\(\\s*([A-Za-z0-9_.]+)',
            1, 1, 'ie', 2) IS NOT NULL
GROUP BY 1
ORDER BY 2 DESC
LIMIT 20;
```

```sql
--Description: Combine Python modules and R packages counts, mark their language, and list top 20 overall  
WITH py AS (
    SELECT  REGEXP_SUBSTR(
                l.value::STRING,
                '^\\s*(from|import)\\s+([A-Za-z0-9_\\.]+)',
                1, 1, 'ie', 2)     AS "name",
            COUNT(*)               AS "occurrences",
            'Python'               AS "language"
    FROM    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"    f
    JOIN    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS" c
              ON f."id" = c."id",
            LATERAL FLATTEN(input => SPLIT(c."content", '\n')) l
    WHERE   f."path" ILIKE '%.py'
      AND   l.value::STRING ILIKE '%import %'
      AND   REGEXP_SUBSTR(
                l.value::STRING,
                '^\\s*(from|import)\\s+([A-Za-z0-9_\\.]+)',
                1, 1, 'ie', 2) IS NOT NULL
    GROUP BY 1
), r AS (
    SELECT  REGEXP_SUBSTR(
                l.value::STRING,
                '\\b(library|require)\\s*\\(\\s*([A-Za-z0-9_.]+)',
                1, 1, 'ie', 2)     AS "name",
            COUNT(*)               AS "occurrences",
            'R'                    AS "language"
    FROM    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"    f
    JOIN    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS" c
              ON f."id" = c."id",
            LATERAL FLATTEN(input => SPLIT(c."content", '\n')) l
    WHERE   f."path" ILIKE '%.r'
      AND   (l.value::STRING ILIKE '%library(%' OR l.value::STRING ILIKE '%require(%')
      AND   REGEXP_SUBSTR(
                l.value::STRING,
                '\\b(library|require)\\s*\\(\\s*([A-Za-z0-9_.]+)',
                1, 1, 'ie', 2) IS NOT NULL
    GROUP BY 1
)
SELECT  "language",
        "name",
        "occurrences"
FROM   (SELECT * FROM py UNION ALL SELECT * FROM r) t
ORDER BY "language", "occurrences" DESC
LIMIT 20;
```
[Corrected other sqls]
2025-05-07 01:38:22 - Thread-95 (execute) - INFO - [Successfully corrected]
Successfully corrected. SQL:
--Description: Identify unique module names imported in Python files.
-- Reasoning / thinking process:
--   • Join SAMPLE_FILES (metadata) with SAMPLE_CONTENTS (actual code) on the blob “id”.
--   • Keep only records whose path ends in “.py”.
--   • Split the file content into individual lines via LATERAL FLATTEN so we can
--     examine each line independently.
--   • Retain lines that contain the word “import” (simple filter with ILIKE).
--   • Apply REGEXP_SUBSTR to extract the first token after either “import” or
--     “from … import”.  Pattern: ^\s*(from|import)\s+([A-Za-z0-9_\.]+)
--       - Capture-group 1 = the keyword (unused here)
--       - Capture-group 2 = the module name we need
--     The 'e' flag enables capture-group return, 'i' ignores case.
--   • Discard any rows where the regex found nothing (IS NOT NULL).
--   • DISTINCT eliminates duplicates; LIMIT 20 shows a small sample.
SELECT DISTINCT
       REGEXP_SUBSTR(
           l.value::STRING,
           '^\\s*(from|import)\\s+([A-Za-z0-9_\\.]+)',
           1, 1, 'ie', 2          -- return capture-group 2 (module name)
       ) AS "python_module"
FROM   "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"    f
JOIN   "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS" c
       ON f."id" = c."id",
       LATERAL FLATTEN(input => SPLIT(c."content", '\n')) l
WHERE  f."path" ILIKE '%.py'
  AND  l.value::STRING ILIKE '%import %'
  AND  REGEXP_SUBSTR(
           l.value::STRING,
           '^\\s*(from|import)\\s+([A-Za-z0-9_\\.]+)',
           1, 1, 'ie', 2
       ) IS NOT NULL
LIMIT 20;
Results:
python_module
maec
diesel.protocols.zeromq
django.conf
cybox.core
corehq.sql_db.operations
cybox.common
diesel
itertools
django.db
copy
__future__
mixbox
maec.package
rekall.plugins.linux
mixbox.namespaces
time

[Successfully corrected]
2025-05-07 01:38:22 - Thread-95 (execute) - INFO - [Try to execute]
--Description: Count occurrences of every Python module mentioned in import lines (top 20)  
SELECT  REGEXP_SUBSTR(
            l.value::STRING,
            '^\\s*(from|import)\\s+([A-Za-z0-9_\\.]+)',
            1, 1, 'ie', 2)        AS "python_module",
        COUNT(*)                  AS "occurrences"
FROM    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"     f
JOIN    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"  c
          ON f."id" = c."id",
        LATERAL FLATTEN(input => SPLIT(c."content", '\n')) l
WHERE   f."path" ILIKE '%.py'
  AND   l.value::STRING ILIKE '%import %'
  AND   REGEXP_SUBSTR(
            l.value::STRING,
            '^\\s*(from|import)\\s+([A-Za-z0-9_\\.]+)',
            1, 1, 'ie', 2) IS NOT NULL
GROUP BY 1
ORDER BY 2 DESC
LIMIT 20
[Try to execute]
2025-05-07 01:39:33 - Thread-95 (execute) - INFO - [Successfully executed]
Successfully executed. SQL:
--Description: Count occurrences of every Python module mentioned in import lines (top 20)  
SELECT  REGEXP_SUBSTR(
            l.value::STRING,
            '^\\s*(from|import)\\s+([A-Za-z0-9_\\.]+)',
            1, 1, 'ie', 2)        AS "python_module",
        COUNT(*)                  AS "occurrences"
FROM    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"     f
JOIN    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"  c
          ON f."id" = c."id",
        LATERAL FLATTEN(input => SPLIT(c."content", '\n')) l
WHERE   f."path" ILIKE '%.py'
  AND   l.value::STRING ILIKE '%import %'
  AND   REGEXP_SUBSTR(
            l.value::STRING,
            '^\\s*(from|import)\\s+([A-Za-z0-9_\\.]+)',
            1, 1, 'ie', 2) IS NOT NULL
GROUP BY 1
ORDER BY 2 DESC
LIMIT 20
Results:
python_module,occurrences
corehq.sql_db.operations,1
maec,1
django.db,1
mixbox,1
django.conf,1
maec.package,1
__future__,1
itertools,1
diesel,1
copy,1
rekall.plugins.linux,1
cybox.common,1
time,1
mixbox.namespaces,1
diesel.protocols.zeromq,1
cybox.core,1

[Successfully executed]
2025-05-07 01:39:33 - Thread-95 (execute) - INFO - [Try to execute]
--Description: Show 20 raw lines that contain R “library(…)” or “require(…)” statements  
SELECT  f."path",
        l.value::STRING AS "line"
FROM    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"     f
JOIN    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"  c
          ON f."id" = c."id",
        LATERAL FLATTEN(input => SPLIT(c."content", '\n')) l
WHERE   f."path" ILIKE '%.r'
  AND   (l.value::STRING ILIKE '%library(%' OR l.value::STRING ILIKE '%require(%')
LIMIT 20
[Try to execute]
2025-05-07 01:40:02 - Thread-95 (execute) - INFO - [Error occurred]
No data found for the specified query.

[Error occurred]
2025-05-07 01:40:57 - Thread-95 (execute) - INFO - [Corrected SQL]
```sql
--Description: Quickly search R source files for any line containing “library” or “require”.
-- Reasoning:
--   • Join file list with its content via SHA-1 id.
--   • Choose files whose path ends in “.r” (case-insensitive).
--   • Split the whole file text into separate lines with LATERAL FLATTEN.
--   • Keep lines that include either keyword, regardless of parentheses,
--     to broaden the match and avoid missing packages.
--   • Return the file path plus the matched line; limit to 20 rows.
SELECT  f."path",
        l.value::STRING AS "line"
FROM    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"    f
JOIN    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS" c
          ON f."id" = c."id",
        LATERAL FLATTEN(input => SPLIT(c."content", '\n')) l
WHERE   f."path" ILIKE '%.r'
  AND  (l.value::STRING ILIKE '%library%' OR l.value::STRING ILIKE '%require%')
LIMIT 20;
```
[Corrected SQL]
2025-05-07 01:41:55 - Thread-95 (execute) - INFO - [Results for corrected sql]
No data found for the specified query.

[Results for corrected sql]
2025-05-07 01:43:47 - Thread-95 (execute) - INFO - [Corrected SQL]
```sql
--Description: Search whole R files (extension .r/.R) for the substring “library(”
--             or “require(” without splitting into lines, to confirm whether any
--             such package-loading calls exist in the SAMPLE_CONTENTS table.
SELECT  f."path",
        LEFT(c."content", 200) AS "snippet"           -- preview first 200 characters
FROM    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"    f
JOIN    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS" c
          ON f."id" = c."id"
WHERE   f."path" ILIKE '%.r'
  AND  (c."content" ILIKE '%library(%' OR c."content" ILIKE '%require(%')
LIMIT 20;
```
[Corrected SQL]
2025-05-07 01:43:49 - Thread-95 (execute) - INFO - [Results for corrected sql]
No data found for the specified query.

[Results for corrected sql]
2025-05-07 01:45:58 - Thread-95 (execute) - INFO - [Corrected SQL]
```sql
--Description: List up to 20 R-source files together with the first 200 characters
--             of their stored text so we can confirm that SAMPLE_CONTENTS actually
--             holds data for .r files before attempting to extract library/require
--             statements.
SELECT  f."path",
        c."size",
        LEFT(c."content", 200) AS "snippet"
FROM    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"    f
JOIN    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS" c
          ON f."id" = c."id"
WHERE   f."path" ILIKE '%.r'
LIMIT 20;
```
[Corrected SQL]
2025-05-07 01:48:47 - Thread-95 (execute) - INFO - [Results for corrected sql]
No data found for the specified query.

[Results for corrected sql]
2025-05-07 01:48:47 - Thread-95 (execute) - INFO - itercount: 0
2025-05-07 01:48:47 - Thread-95 (execute) - INFO - [Self-refine]
Table full name: GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES
Column name: symlink_target Type: TEXT
Column name: id Type: TEXT
Column name: mode Type: NUMBER
Column name: path Type: TEXT
Column name: repo_name Type: TEXT
Column name: ref Type: TEXT
Sample rows:
[{'repo_name': 'dorimanx/DORIMANX_LG_STOCK_LP_KERNEL', 'ref': 'refs/heads/master', 'path': 'drivers/isdn/hisax/elsa.c', 'mode': 33188, 'id': '64ba26a4afe649818a23565fc4ae6631eaf9d9b1', 'symlink_target': None}, {'repo_name': 'dorimanx/DORIMANX_LG_STOCK_LP_KERNEL', 'ref': 'refs/heads/master', 'path': 'arch/arm/mach-pxa/include/mach/smemc.h', 'mode': 33188, 'id': 'b802f285fe00e6dd3b39af77e3b351d3a4343316', 'symlink_target': None}, {'repo_name': 'dorimanx/DORIMANX_LG_STOCK_LP_KERNEL', 'ref': 'refs/heads/master', 'path': 'drivers/i2c/busses/i2c-eg20t.c', 'mode': 33188, 'id': 'c811289b61e21628f28d79b71f27651c39e3e024', 'symlink_target': None}, {'repo_name': 'dorimanx/DORIMANX_LG_STOCK_LP_KERNEL', 'ref': 'refs/heads/master', 'path': 'arch/arm/mm/proc-arm920.S', 'mode': 33188, 'id': 'b06224a692b9bc255c860f959b7fe5913e957852', 'symlink_target': None}, {'repo_name': 'dorimanx/DORIMANX_LG_STOCK_LP_KERNEL', 'ref': 'refs/heads/master', 'path': 'drivers/video/msm/lcdc_external.c', 'mode': 33188, 'id': 'b699610f51077fda4568a25d8506c69d7a345658', 'symlink_target': None}]

--------------------------------------------------
Table full name: GITHUB_REPOS.GITHUB_REPOS.LANGUAGES
Column name: repo_name Type: TEXT
Column name: language Type: VARIANT
Sample rows:
[{'repo_name': 'debjyoti385/awesome-data-mining-datasets', 'language': '[]'}, {'repo_name': 'graidl/test', 'language': '[]'}, {'repo_name': 'iBeacons/grape', 'language': '[]'}, {'repo_name': 'swapnil-pimpale/geep-kernel-training', 'language': '[]'}, {'repo_name': 'TheEvilDev/atom-yeoman', 'language': '[]'}]

--------------------------------------------------
Table full name: GITHUB_REPOS.GITHUB_REPOS.LICENSES
Column name: repo_name Type: TEXT
Column name: license Type: TEXT
Sample rows:
[{'repo_name': 'npm/npmconf', 'license': 'isc'}, {'repo_name': 'live627/shiny-bear', 'license': 'isc'}, {'repo_name': 'k7hoven/spexcript', 'license': 'isc'}, {'repo_name': 'photofroggy/Reflex', 'license': 'isc'}, {'repo_name': 'sr-cafe/topisto', 'license': 'isc'}]

--------------------------------------------------
Table full name: GITHUB_REPOS.GITHUB_REPOS.SAMPLE_COMMITS
Column name: parent Type: VARIANT
Column name: committer Type: VARIANT
Column name: difference Type: VARIANT
Column name: message Type: TEXT
Column name: author Type: VARIANT
Column name: difference_truncated Type: BOOLEAN
Column name: subject Type: TEXT
Column name: trailer Type: VARIANT
Column name: encoding Type: TEXT
Column name: commit Type: TEXT
Column name: repo_name Type: TEXT
Column name: tree Type: TEXT
Sample rows:
[{'commit': '76cdd58e558669366adfaded436fda01b30cce3e', 'tree': 'deaccb499752c928919693edea65f9ea4c1fe756', 'parent': '[\n  "1c12c4cf9411eb130b245fa8d0fbbaf989477c7b"\n]', 'author': '{\n  "date": 1210806352000000,\n  "email": "8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com",\n  "name": "Heiko Carstens",\n  "time_sec": 1210806352,\n  "tz_offset": -420\n}', 'committer': '{\n  "date": 1210817475000000,\n  "email": "69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org",\n  "name": "Linus Torvalds",\n  "time_sec": 1210817475,\n  "tz_offset": -420\n}', 'subject': 'memory_hotplug: always initialize pageblock bitmap', 'message': 'memory_hotplug: always initialize pageblock bitmap\n\nTrying to online a new memory section that was added via memory hotplug\nsometimes results in crashes when the new pages are added via __free_page.\n Reason for that is that the pageblock bitmap isn\'t initialized and hence\ncontains random stuff.  That means that get_pageblock_migratetype()\nreturns also random stuff and therefore\n\n\tlist_add(&page->lru,\n\t\t&zone->free_area[order].free_list[migratetype]);\n\nin __free_one_page() tries to do a list_add to something that isn\'t even\nnecessarily a list.\n\nThis happens since 86051ca5eaf5e560113ec7673462804c54284456 ("mm: fix\nusemap initialization") which makes sure that the pageblock bitmap gets\nonly initialized for pages present in a zone.  Unfortunately for hot-added\nmemory the zones "grow" after the memmap and the pageblock memmap have\nbeen initialized.  Which means that the new pages have an unitialized\nbitmap.  To solve this the calls to grow_zone_span() and grow_pgdat_span()\nare moved to __add_zone() just before the initialization happens.\n\nThe patch also moves the two functions since __add_zone() is the only\ncaller and I didn\'t want to add a forward declaration.\n\nSigned-off-by: Heiko Carstens <8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com>\nCc: Andy Whitcroft <b4658fdd7fbd645c2859b0e39d71018f32058d12@shadowen.org>\nCc: Dave Hansen <e169c2064f54e292652f83bb35eed10e1aa33f38@us.ibm.com>\nCc: Gerald Schaefer <7a67bf9a8691f9f1ca8ce9577e14c37413ea5f58@de.ibm.com>\nCc: KAMEZAWA Hiroyuki <634f508bd7c47cf0ee4126243675c3e598920fbc@jp.fujitsu.com>\nCc: Yasunori Goto <5e8c143c1cccd8ccee45b5a7b90115158373a5d7@jp.fujitsu.com>\nCc: <4fbacc2fa0ffdbb11bf1ad6925b886ebd08dd15f@kernel.org>\nSigned-off-by: Andrew Morton <5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org>\nSigned-off-by: Linus Torvalds <69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org>\n', 'trailer': '[\n  {\n    "email": "8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com",\n    "key": "Signed-off-by",\n    "value": "Heiko Carstens <8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com>"\n  },\n  {\n    "email": "b4658fdd7fbd645c2859b0e39d71018f32058d12@shadowen.org",\n    "key": "Cc",\n    "value": "Andy Whitcroft <b4658fdd7fbd645c2859b0e39d71018f32058d12@shadowen.org>"\n  },\n  {\n    "email": "e169c2064f54e292652f83bb35eed10e1aa33f38@us.ibm.com",\n    "key": "Cc",\n    "value": "Dave Hansen <e169c2064f54e292652f83bb35eed10e1aa33f38@us.ibm.com>"\n  },\n  {\n    "email": "7a67bf9a8691f9f1ca8ce9577e14c37413ea5f58@de.ibm.com",\n    "key": "Cc",\n    "value": "Gerald Schaefer <7a67bf9a8691f9f1ca8ce9577e14c37413ea5f58@de.ibm.com>"\n  },\n  {\n    "email": "634f508bd7c47cf0ee4126243675c3e598920fbc@jp.fujitsu.com",\n    "key": "Cc",\n    "value": "KAMEZAWA Hiroyuki <634f508bd7c47cf0ee4126243675c3e598920fbc@jp.fujitsu.com>"\n  },\n  {\n    "email": "5e8c143c1cccd8ccee45b5a7b90115158373a5d7@jp.fujitsu.com",\n    "key": "Cc",\n    "value": "Yasunori Goto <5e8c143c1cccd8ccee45b5a7b90115158373a5d7@jp.fujitsu.com>"\n  },\n  {\n    "email": "4fbacc2fa0ffdbb11bf1ad6925b886ebd08dd15f@kernel.org",\n    "key": "Cc",\n    "value": "<4fbacc2fa0ffdbb11bf1ad6925b886ebd08dd15f@kernel.org>"\n  },\n  {\n    "email": "5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org",\n    "key": "Signed-off-by",\n    "value": "Andrew Morton <5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org>"\n  },\n  {\n    "email": "69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org",\n    "key": "Signed-off-by",\n    "value": "Linus Torvalds <69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org>"\n  }\n]', 'difference': '[\n  {\n    "new_mode": 33188,\n    "new_path": "mm/memory_hotplug.c",\n    "new_sha1": "833f854eabe50ad226696667db7e49d332840bb6",\n    "old_mode": 33188,\n    "old_path": "mm/memory_hotplug.c",\n    "old_sha1": "656ad1c65422f0440a56b422b8431891e5304827"\n  },\n  {\n    "new_mode": 33188,\n    "new_path": "mm/page_alloc.c",\n    "new_sha1": "63835579323a7ca70722154f5b3e6560872da409",\n    "old_mode": 33188,\n    "old_path": "mm/page_alloc.c",\n    "old_sha1": "bdd5c432c426fdf6714ff90e1eebdfccfdccee8c"\n  }\n]', 'difference_truncated': None, 'repo_name': 'torvalds/linux', 'encoding': None}, {'commit': '2565409fc0303f3ab8d66b8326702a687962a29b', 'tree': 'b57f238d77ee87a991371a7021462b8c71351659', 'parent': '[\n  "4156153c4daddf12dd386016f96a947a01e93bf4"\n]', 'author': '{\n  "date": 1326417453000000,\n  "email": "8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com",\n  "name": "Heiko Carstens",\n  "time_sec": 1326417453,\n  "tz_offset": -480\n}', 'committer': '{\n  "date": 1326427983000000,\n  "email": "69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org",\n  "name": "Linus Torvalds",\n  "time_sec": 1326427983,\n  "tz_offset": -480\n}', 'subject': 'mm,x86,um: move CMPXCHG_DOUBLE config option', 'message': 'mm,x86,um: move CMPXCHG_DOUBLE config option\n\nMove CMPXCHG_DOUBLE and rename it to HAVE_CMPXCHG_DOUBLE so architectures\ncan simply select the option if it is supported.\n\nSigned-off-by: Heiko Carstens <8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com>\nAcked-by: Christoph Lameter <ef3ecccf258fa062c5c6521a4887d40541963af7@linux.com>\nCc: Pekka Enberg <add4fcd06328a394f0ad91feda7ee057316dc5ed@kernel.org>\nCc: Ingo Molnar <9dbbbf0688fedc85ad4da37637f1a64b8c718ee2@elte.hu>\nCc: Thomas Gleixner <00e4cf8f46a57000a44449bf9dd8cbbcc209fd2a@linutronix.de>\nCc: "H. Peter Anvin" <8a453bad9912ffe59bc0f0b8abe03df9be19379e@zytor.com>\nSigned-off-by: Andrew Morton <5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org>\nSigned-off-by: Linus Torvalds <69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org>\n', 'trailer': '[\n  {\n    "email": "8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com",\n    "key": "Signed-off-by",\n    "value": "Heiko Carstens <8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com>"\n  },\n  {\n    "email": "ef3ecccf258fa062c5c6521a4887d40541963af7@linux.com",\n    "key": "Acked-by",\n    "value": "Christoph Lameter <ef3ecccf258fa062c5c6521a4887d40541963af7@linux.com>"\n  },\n  {\n    "email": "add4fcd06328a394f0ad91feda7ee057316dc5ed@kernel.org",\n    "key": "Cc",\n    "value": "Pekka Enberg <add4fcd06328a394f0ad91feda7ee057316dc5ed@kernel.org>"\n  },\n  {\n    "email": "9dbbbf0688fedc85ad4da37637f1a64b8c718ee2@elte.hu",\n    "key": "Cc",\n    "value": "Ingo Molnar <9dbbbf0688fedc85ad4da37637f1a64b8c718ee2@elte.hu>"\n  },\n  {\n    "email": "00e4cf8f46a57000a44449bf9dd8cbbcc209fd2a@linutronix.de",\n    "key": "Cc",\n    "value": "Thomas Gleixner <00e4cf8f46a57000a44449bf9dd8cbbcc209fd2a@linutronix.de>"\n  },\n  {\n    "email": "8a453bad9912ffe59bc0f0b8abe03df9be19379e@zytor.com",\n    "key": "Cc",\n    "value": "\\"H. Peter Anvin\\" <8a453bad9912ffe59bc0f0b8abe03df9be19379e@zytor.com>"\n  },\n  {\n    "email": "5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org",\n    "key": "Signed-off-by",\n    "value": "Andrew Morton <5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org>"\n  },\n  {\n    "email": "69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org",\n    "key": "Signed-off-by",\n    "value": "Linus Torvalds <69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org>"\n  }\n]', 'difference': '[\n  {\n    "new_mode": 33188,\n    "new_path": "arch/Kconfig",\n    "new_sha1": "4f55c736be11ea3aa3ac6762b0ec3d1371b872ce",\n    "old_mode": 33188,\n    "old_path": "arch/Kconfig",\n    "old_sha1": "22182a8cc62c9610edaaf5aefaef83b8de07af71"\n  },\n  {\n    "new_mode": 33188,\n    "new_path": "arch/x86/Kconfig",\n    "new_sha1": "6c14ecd851d0b3ae9d32cbd73ce97419b1cb4a48",\n    "old_mode": 33188,\n    "old_path": "arch/x86/Kconfig",\n    "old_sha1": "59717fd17bc738720860e0b3f9d67ad3af211441"\n  },\n  {\n    "new_mode": 33188,\n    "new_path": "arch/x86/Kconfig.cpu",\n    "new_sha1": "3c57033e22118f2ce7771d10fa8305193c94af20",\n    "old_mode": 33188,\n    "old_path": "arch/x86/Kconfig.cpu",\n    "old_sha1": "99d2ab8b77953bde375e44328604aee7473fdd59"\n  },\n  {\n    "new_mode": 33188,\n    "new_path": "arch/x86/um/Kconfig",\n    "new_sha1": "b2b54d2edf53979fb7daf770c0d4bf0215a73fe0",\n    "old_mode": 33188,\n    "old_path": "arch/x86/um/Kconfig",\n    "old_sha1": "a62bfc66239ec5bd7aac0d7b423e817c7ace85ce"\n  },\n  {\n    "new_mode": 33188,\n    "new_path": "mm/slub.c",\n    "new_sha1": "4907563ef7ff7e199577f5d2ffedda6fa358271e",\n    "old_mode": 33188,\n    "old_path": "mm/slub.c",\n    "old_sha1": "72aa8413460932bf0826cf3d40bf52798a0e9ab9"\n  }\n]', 'difference_truncated': None, 'repo_name': 'torvalds/linux', 'encoding': None}, {'commit': '7779d7bed950a7fb1af4f540c2f82a6b81b65901', 'tree': 'ca8e8d16a3f50d670f95b3b51c1aaad81a0e05f8', 'parent': '[\n  "29f12ca32122db98481150be09d35bd72b68045e"\n]', 'author': '{\n  "date": 1257978394000000,\n  "email": "8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com",\n  "name": "Heiko Carstens",\n  "time_sec": 1257978394,\n  "tz_offset": -480\n}', 'committer': '{\n  "date": 1258039557000000,\n  "email": "69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org",\n  "name": "Linus Torvalds",\n  "time_sec": 1258039557,\n  "tz_offset": -480\n}', 'subject': 'fs: add missing compat_ptr handling for FS_IOC_RESVSP ioctl', 'message': 'fs: add missing compat_ptr handling for FS_IOC_RESVSP ioctl\n\nFor FS_IOC_RESVSP and FS_IOC_RESVSP64 compat_sys_ioctl() uses its\narg argument as a pointer to userspace. However it is missing a\na call to compat_ptr() which will do a proper pointer conversion.\n\nThis was introduced with 3e63cbb1 "fs: Add new pre-allocation ioctls\nto vfs for compatibility with legacy xfs ioctls".\n\nSigned-off-by: Heiko Carstens <8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com>\nCc: Ankit Jain <b1c1d8736f20db3fb6c1c66bb1455ed43909f0d8@ankitjain.org>\nAcked-by: Christoph Hellwig <923f7720577207a44b32e59bbfbea59d27f1ae8e@lst.de>\nCc: Al Viro <de609eb4d5d70b1d38ec6642adbfc33a2781f63c@zeniv.linux.org.uk>\nAcked-by: Arnd Bergmann <e4472cc19f359953704d0123967dc8ec6d534e3c@googlemail.com>\nAcked-by: David S. Miller <fe08d3c717adf2ae63592e4c9aec6e3e404d8e3e@davemloft.net>\nCc: <4fbacc2fa0ffdbb11bf1ad6925b886ebd08dd15f@kernel.org>\t\t[2.6.31.x]\nSigned-off-by: Andrew Morton <5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org>\nSigned-off-by: Linus Torvalds <69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org>\n', 'trailer': '[\n  {\n    "email": "8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com",\n    "key": "Signed-off-by",\n    "value": "Heiko Carstens <8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com>"\n  },\n  {\n    "email": "b1c1d8736f20db3fb6c1c66bb1455ed43909f0d8@ankitjain.org",\n    "key": "Cc",\n    "value": "Ankit Jain <b1c1d8736f20db3fb6c1c66bb1455ed43909f0d8@ankitjain.org>"\n  },\n  {\n    "email": "923f7720577207a44b32e59bbfbea59d27f1ae8e@lst.de",\n    "key": "Acked-by",\n    "value": "Christoph Hellwig <923f7720577207a44b32e59bbfbea59d27f1ae8e@lst.de>"\n  },\n  {\n    "email": "de609eb4d5d70b1d38ec6642adbfc33a2781f63c@zeniv.linux.org.uk",\n    "key": "Cc",\n    "value": "Al Viro <de609eb4d5d70b1d38ec6642adbfc33a2781f63c@zeniv.linux.org.uk>"\n  },\n  {\n    "email": "e4472cc19f359953704d0123967dc8ec6d534e3c@googlemail.com",\n    "key": "Acked-by",\n    "value": "Arnd Bergmann <e4472cc19f359953704d0123967dc8ec6d534e3c@googlemail.com>"\n  },\n  {\n    "email": "fe08d3c717adf2ae63592e4c9aec6e3e404d8e3e@davemloft.net",\n    "key": "Acked-by",\n    "value": "David S. Miller <fe08d3c717adf2ae63592e4c9aec6e3e404d8e3e@davemloft.net>"\n  },\n  {\n    "email": "4fbacc2fa0ffdbb11bf1ad6925b886ebd08dd15f@kernel.org",\n    "key": "Cc",\n    "value": "<4fbacc2fa0ffdbb11bf1ad6925b886ebd08dd15f@kernel.org>\\t\\t[2.6.31.x]"\n  },\n  {\n    "email": "5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org",\n    "key": "Signed-off-by",\n    "value": "Andrew Morton <5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org>"\n  },\n  {\n    "email": "69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org",\n    "key": "Signed-off-by",\n    "value": "Linus Torvalds <69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org>"\n  }\n]', 'difference': '[\n  {\n    "new_mode": 33188,\n    "new_path": "fs/compat_ioctl.c",\n    "new_sha1": "d84e7058c298a56dd9b22c6c6fa6fb286fb730c9",\n    "old_mode": 33188,\n    "old_path": "fs/compat_ioctl.c",\n    "old_sha1": "f91fd51b32e321efc97a61b0d79274ecd81533ca"\n  }\n]', 'difference_truncated': None, 'repo_name': 'torvalds/linux', 'encoding': None}, {'commit': '42e41c54d61e32e8a349943607daa53205324d7f', 'tree': 'a38050a0b2e716100372601262273cdbd195baf8', 'parent': '[\n  "0487683096decad0720dfaf80b9d28173d5f6662"\n]', 'author': '{\n  "date": 1253577880000000,\n  "email": "8f3f75c74bd5184edcfa6534cab3c13a00a2f794@gentoo.org",\n  "name": "Mike Frysinger",\n  "time_sec": 1253577880,\n  "tz_offset": -420\n}', 'committer': '{\n  "date": 1253629068000000,\n  "email": "69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org",\n  "name": "Linus Torvalds",\n  "time_sec": 1253629068,\n  "tz_offset": -420\n}', 'subject': 'checkpatch: add some common Blackfin checks', 'message': 'checkpatch: add some common Blackfin checks\n\nAdd checks for Blackfin-specific issues that seem to crop up from time to\ntime.  In particular, we have helper macros to break a 32bit address into\nthe hi/lo parts, and we want to make sure people use the csync/ssync\nvariant that includes fun anomaly workarounds.\n\nSigned-off-by: Mike Frysinger <8f3f75c74bd5184edcfa6534cab3c13a00a2f794@gentoo.org>\nSigned-off-by: Bryan Wu <956b36c0f472d2edb239225c10f7e4411d1efbb9@kernel.org>\nCc: Andy Whitcroft <b4658fdd7fbd645c2859b0e39d71018f32058d12@shadowen.org>\nSigned-off-by: Andrew Morton <5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org>\nSigned-off-by: Linus Torvalds <69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org>\n', 'trailer': '[\n  {\n    "email": "8f3f75c74bd5184edcfa6534cab3c13a00a2f794@gentoo.org",\n    "key": "Signed-off-by",\n    "value": "Mike Frysinger <8f3f75c74bd5184edcfa6534cab3c13a00a2f794@gentoo.org>"\n  },\n  {\n    "email": "956b36c0f472d2edb239225c10f7e4411d1efbb9@kernel.org",\n    "key": "Signed-off-by",\n    "value": "Bryan Wu <956b36c0f472d2edb239225c10f7e4411d1efbb9@kernel.org>"\n  },\n  {\n    "email": "b4658fdd7fbd645c2859b0e39d71018f32058d12@shadowen.org",\n    "key": "Cc",\n    "value": "Andy Whitcroft <b4658fdd7fbd645c2859b0e39d71018f32058d12@shadowen.org>"\n  },\n  {\n    "email": "5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org",\n    "key": "Signed-off-by",\n    "value": "Andrew Morton <5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org>"\n  },\n  {\n    "email": "69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org",\n    "key": "Signed-off-by",\n    "value": "Linus Torvalds <69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org>"\n  }\n]', 'difference': '[\n  {\n    "new_mode": 33261,\n    "new_path": "scripts/checkpatch.pl",\n    "new_sha1": "87bbb8bce9bfe3702a3e6b896dce4338bf4f6d2d",\n    "old_mode": 33261,\n    "old_path": "scripts/checkpatch.pl",\n    "old_sha1": "8b1dfd544c6430595873c3f659189074ea090e78"\n  }\n]', 'difference_truncated': None, 'repo_name': 'torvalds/linux', 'encoding': None}, {'commit': '46c529cf79f6c7b239f83b4997d676dd5b51908c', 'tree': '2d04be82f11d82a48ab3b72fa0e71862bed24ffa', 'parent': '[\n  "c68d2b1594548cda7f6dbac6a4d9d30a9b01558c"\n]', 'author': '{\n  "date": 1256601006000000,\n  "email": "8f3f75c74bd5184edcfa6534cab3c13a00a2f794@gentoo.org",\n  "name": "Mike Frysinger",\n  "time_sec": 1256601006,\n  "tz_offset": -420\n}', 'committer': '{\n  "date": 1256827170000000,\n  "email": "69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org",\n  "name": "Linus Torvalds",\n  "time_sec": 1256827170,\n  "tz_offset": -420\n}', 'subject': 'twl4030-gpio: remove __devexit markings from remove func', 'message': 'twl4030-gpio: remove __devexit markings from remove func\n\nThe gpio_twl4030_probe() function calls gpio_twl4030_remove(), and the\nformer has __devinit, so the latter cannot use __devexit.  Otherwise we\nhit the section mismatch warning:\n\nWARNING: drivers/gpio/built-in.o(.devinit.text+0x71a): Section mismatch\n\tin reference from the function _gpio_twl4030_probe() to the function\n\t.devexit.text:_gpio_twl4030_remove()\nThe function __devinit _gpio_twl4030_probe() references a function\n\t__devexit _gpio_twl4030_remove().\nThis is often seen when error handling in the init function uses\n\tfunctionality in the exit path.\nThe fix is often to remove the __devexit annotation of\n\t_gpio_twl4030_remove() so it may be used outside an exit section.\n\nSigned-off-by: Mike Frysinger <8f3f75c74bd5184edcfa6534cab3c13a00a2f794@gentoo.org>\nCc: David Brownell <e543181633fc0fc2787945ef377537d9112d0c96@pacbell.net>\nSigned-off-by: Andrew Morton <5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org>\nSigned-off-by: Linus Torvalds <69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org>\n', 'trailer': '[\n  {\n    "email": "8f3f75c74bd5184edcfa6534cab3c13a00a2f794@gentoo.org",\n    "key": "Signed-off-by",\n    "value": "Mike Frysinger <8f3f75c74bd5184edcfa6534cab3c13a00a2f794@gentoo.org>"\n  },\n  {\n    "email": "e543181633fc0fc2787945ef377537d9112d0c96@pacbell.net",\n    "key": "Cc",\n    "value": "David Brownell <e543181633fc0fc2787945ef377537d9112d0c96@pacbell.net>"\n  },\n  {\n    "email": "5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org",\n    "key": "Signed-off-by",\n    "value": "Andrew Morton <5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org>"\n  },\n  {\n    "email": "69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org",\n    "key": "Signed-off-by",\n    "value": "Linus Torvalds <69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org>"\n  }\n]', 'difference': '[\n  {\n    "new_mode": 33188,\n    "new_path": "drivers/gpio/twl4030-gpio.c",\n    "new_sha1": "49384a7c54920399e2d629d3e87b6986b3a964eb",\n    "old_mode": 33188,\n    "old_path": "drivers/gpio/twl4030-gpio.c",\n    "old_sha1": "afad14792141116898c6291288616b23e9308a36"\n  }\n]', 'difference_truncated': None, 'repo_name': 'torvalds/linux', 'encoding': None}]

--------------------------------------------------
Table full name: GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
Column name: size Type: NUMBER
Column name: binary Type: BOOLEAN
Column name: sample_symlink_target Type: TEXT
Column name: copies Type: NUMBER
Column name: sample_mode Type: NUMBER
Column name: sample_path Type: TEXT
Column name: content Type: TEXT
Column name: sample_ref Type: TEXT
Column name: id Type: TEXT
Column name: sample_repo_name Type: TEXT
Sample rows:
[{'id': '2dd586a19b594a73e9c6f7485d1e5da9203a4467', 'size': 21447, 'content': '/*\n * rtc-ds1305.c -- driver for DS1305 and DS1306 SPI RTC chips\n *\n * Copyright (C) 2008 David Brownell\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation.\n *\n */\n#include <linux/kernel.h>\n#include <linux/init.h>\n#include <linux/bcd.h>\n#include <linux/slab.h>\n#include <linux/rtc.h>\n#include <linux/workqueue.h>\n\n#include <linux/spi/spi.h>\n#include <linux/spi/ds1305.h>\n#include <linux/module.h>\n\n\n/*\n * Registers ... mask DS1305_WRITE into register address to write,\n * otherwise you\'re reading it.  All non-bitmask values are BCD.\n */\n#define DS1305_WRITE\t\t0x80\n\n\n/* RTC date/time ... the main special cases are that we:\n *  - Need fancy "hours" encoding in 12hour mode\n *  - Don\'t rely on the "day-of-week" field (or tm_wday)\n *  - Are a 21st-century clock (2000 <= year < 2100)\n */\n#define DS1305_RTC_LEN\t\t7\t\t/* bytes for RTC regs */\n\n#define DS1305_SEC\t\t0x00\t\t/* register addresses */\n#define DS1305_MIN\t\t0x01\n#define DS1305_HOUR\t\t0x02\n#\tdefine DS1305_HR_12\t\t0x40\t/* set == 12 hr mode */\n#\tdefine DS1305_HR_PM\t\t0x20\t/* set == PM (12hr mode) */\n#define DS1305_WDAY\t\t0x03\n#define DS1305_MDAY\t\t0x04\n#define DS1305_MON\t\t0x05\n#define DS1305_YEAR\t\t0x06\n\n\n/* The two alarms have only sec/min/hour/wday fields (ALM_LEN).\n * DS1305_ALM_DISABLE disables a match field (some combos are bad).\n *\n * NOTE that since we don\'t use WDAY, we limit ourselves to alarms\n * only one day into the future (vs potentially up to a week).\n *\n * NOTE ALSO that while we could generate once-a-second IRQs (UIE), we\n * don\'t currently support them.  We\'d either need to do it only when\n * no alarm is pending (not the standard model), or to use the second\n * alarm (implying that this is a DS1305 not DS1306, *and* that either\n * it\'s wired up a second IRQ we know, or that INTCN is set)\n */\n#define DS1305_ALM_LEN\t\t4\t\t/* bytes for ALM regs */\n#define DS1305_ALM_DISABLE\t0x80\n\n#define DS1305_ALM0(r)\t\t(0x07 + (r))\t/* register addresses */\n#define DS1305_ALM1(r)\t\t(0x0b + (r))\n\n\n/* three control registers */\n#define DS1305_CONTROL_LEN\t3\t\t/* bytes of control regs */\n\n#define DS1305_CONTROL\t\t0x0f\t\t/* register addresses */\n#\tdefine DS1305_nEOSC\t\t0x80\t/* low enables oscillator */\n#\tdefine DS1305_WP\t\t0x40\t/* write protect */\n#\tdefine DS1305_INTCN\t\t0x04\t/* clear == only int0 used */\n#\tdefine DS1306_1HZ\t\t0x04\t/* enable 1Hz output */\n#\tdefine DS1305_AEI1\t\t0x02\t/* enable ALM1 IRQ */\n#\tdefine DS1305_AEI0\t\t0x01\t/* enable ALM0 IRQ */\n#define DS1305_STATUS\t\t0x10\n/* status has just AEIx bits, mirrored as IRQFx */\n#define DS1305_TRICKLE\t\t0x11\n/* trickle bits are defined in <linux/spi/ds1305.h> */\n\n/* a bunch of NVRAM */\n#define DS1305_NVRAM_LEN\t96\t\t/* bytes of NVRAM */\n\n#define DS1305_NVRAM\t\t0x20\t\t/* register addresses */\n\n\nstruct ds1305 {\n\tstruct spi_device\t*spi;\n\tstruct rtc_device\t*rtc;\n\n\tstruct work_struct\twork;\n\n\tunsigned long\t\tflags;\n#define FLAG_EXITING\t0\n\n\tbool\t\t\thr12;\n\tu8\t\t\tctrl[DS1305_CONTROL_LEN];\n};\n\n\n/*----------------------------------------------------------------------*/\n\n/*\n * Utilities ...  tolerate 12-hour AM/PM notation in case of non-Linux\n * software (like a bootloader) which may require it.\n */\n\nstatic unsigned bcd2hour(u8 bcd)\n{\n\tif (bcd & DS1305_HR_12) {\n\t\tunsigned\thour = 0;\n\n\t\tbcd &= ~DS1305_HR_12;\n\t\tif (bcd & DS1305_HR_PM) {\n\t\t\thour = 12;\n\t\t\tbcd &= ~DS1305_HR_PM;\n\t\t}\n\t\thour += bcd2bin(bcd);\n\t\treturn hour - 1;\n\t}\n\treturn bcd2bin(bcd);\n}\n\nstatic u8 hour2bcd(bool hr12, int hour)\n{\n\tif (hr12) {\n\t\thour++;\n\t\tif (hour <= 12)\n\t\t\treturn DS1305_HR_12 | bin2bcd(hour);\n\t\thour -= 12;\n\t\treturn DS1305_HR_12 | DS1305_HR_PM | bin2bcd(hour);\n\t}\n\treturn bin2bcd(hour);\n}\n\n/*----------------------------------------------------------------------*/\n\n/*\n * Interface to RTC framework\n */\n\nstatic int ds1305_alarm_irq_enable(struct device *dev, unsigned int enabled)\n{\n\tstruct ds1305\t*ds1305 = dev_get_drvdata(dev);\n\tu8\t\tbuf[2];\n\tlong\t\terr = -EINVAL;\n\n\tbuf[0] = DS1305_WRITE | DS1305_CONTROL;\n\tbuf[1] = ds1305->ctrl[0];\n\n\tif (enabled) {\n\t\tif (ds1305->ctrl[0] & DS1305_AEI0)\n\t\t\tgoto done;\n\t\tbuf[1] |= DS1305_AEI0;\n\t} else {\n\t\tif (!(buf[1] & DS1305_AEI0))\n\t\t\tgoto done;\n\t\tbuf[1] &= ~DS1305_AEI0;\n\t}\n\terr = spi_write_then_read(ds1305->spi, buf, sizeof(buf), NULL, 0);\n\tif (err >= 0)\n\t\tds1305->ctrl[0] = buf[1];\ndone:\n\treturn err;\n\n}\n\n\n/*\n * Get/set of date and time is pretty normal.\n */\n\nstatic int ds1305_get_time(struct device *dev, struct rtc_time *time)\n{\n\tstruct ds1305\t*ds1305 = dev_get_drvdata(dev);\n\tu8\t\taddr = DS1305_SEC;\n\tu8\t\tbuf[DS1305_RTC_LEN];\n\tint\t\tstatus;\n\n\t/* Use write-then-read to get all the date/time registers\n\t * since dma from stack is nonportable\n\t */\n\tstatus = spi_write_then_read(ds1305->spi, &addr, sizeof(addr),\n\t\t\tbuf, sizeof(buf));\n\tif (status < 0)\n\t\treturn status;\n\n\tdev_vdbg(dev, "%s: %02x %02x %02x, %02x %02x %02x %02x\\n",\n\t\t"read", buf[0], buf[1], buf[2], buf[3],\n\t\tbuf[4], buf[5], buf[6]);\n\n\t/* Decode the registers */\n\ttime->tm_sec = bcd2bin(buf[DS1305_SEC]);\n\ttime->tm_min = bcd2bin(buf[DS1305_MIN]);\n\ttime->tm_hour = bcd2hour(buf[DS1305_HOUR]);\n\ttime->tm_wday = buf[DS1305_WDAY] - 1;\n\ttime->tm_mday = bcd2bin(buf[DS1305_MDAY]);\n\ttime->tm_mon = bcd2bin(buf[DS1305_MON]) - 1;\n\ttime->tm_year = bcd2bin(buf[DS1305_YEAR]) + 100;\n\n\tdev_vdbg(dev, "%s secs=%d, mins=%d, "\n\t\t"hours=%d, mday=%d, mon=%d, year=%d, wday=%d\\n",\n\t\t"read", time->tm_sec, time->tm_min,\n\t\ttime->tm_hour, time->tm_mday,\n\t\ttime->tm_mon, time->tm_year, time->tm_wday);\n\n\t/* Time may not be set */\n\treturn rtc_valid_tm(time);\n}\n\nstatic int ds1305_set_time(struct device *dev, struct rtc_time *time)\n{\n\tstruct ds1305\t*ds1305 = dev_get_drvdata(dev);\n\tu8\t\tbuf[1 + DS1305_RTC_LEN];\n\tu8\t\t*bp = buf;\n\n\tdev_vdbg(dev, "%s secs=%d, mins=%d, "\n\t\t"hours=%d, mday=%d, mon=%d, year=%d, wday=%d\\n",\n\t\t"write", time->tm_sec, time->tm_min,\n\t\ttime->tm_hour, time->tm_mday,\n\t\ttime->tm_mon, time->tm_year, time->tm_wday);\n\n\t/* Write registers starting at the first time/date address. */\n\t*bp++ = DS1305_WRITE | DS1305_SEC;\n\n\t*bp++ = bin2bcd(time->tm_sec);\n\t*bp++ = bin2bcd(time->tm_min);\n\t*bp++ = hour2bcd(ds1305->hr12, time->tm_hour);\n\t*bp++ = (time->tm_wday < 7) ? (time->tm_wday + 1) : 1;\n\t*bp++ = bin2bcd(time->tm_mday);\n\t*bp++ = bin2bcd(time->tm_mon + 1);\n\t*bp++ = bin2bcd(time->tm_year - 100);\n\n\tdev_dbg(dev, "%s: %02x %02x %02x, %02x %02x %02x %02x\\n",\n\t\t"write", buf[1], buf[2], buf[3],\n\t\tbuf[4], buf[5], buf[6], buf[7]);\n\n\t/* use write-then-read since dma from stack is nonportable */\n\treturn spi_write_then_read(ds1305->spi, buf, sizeof(buf),\n\t\t\tNULL, 0);\n}\n\n/*\n * Get/set of alarm is a bit funky:\n *\n * - First there\'s the inherent raciness of getting the (partitioned)\n *   status of an alarm that could trigger while we\'re reading parts\n *   of that status.\n *\n * - Second there\'s its limited range (we could increase it a bit by\n *   relying on WDAY), which means it will easily roll over.\n *\n * - Third there\'s the choice of two alarms and alarm signals.\n *   Here we use ALM0 and expect that nINT0 (open drain) is used;\n *   that\'s the only real option for DS1306 runtime alarms, and is\n *   natural on DS1305.\n *\n * - Fourth, there\'s also ALM1, and a second interrupt signal:\n *     + On DS1305 ALM1 uses nINT1 (when INTCN=1) else nINT0;\n *     + On DS1306 ALM1 only uses INT1 (an active high pulse)\n *       and it won\'t work when VCC1 is active.\n *\n *   So to be most general, we should probably set both alarms to the\n *   same value, letting ALM1 be the wakeup event source on DS1306\n *   and handling several wiring options on DS1305.\n *\n * - Fifth, we support the polled mode (as well as possible; why not?)\n *   even when no interrupt line is wired to an IRQ.\n */\n\n/*\n * Context: caller holds rtc->ops_lock (to protect ds1305->ctrl)\n */\nstatic int ds1305_get_alarm(struct device *dev, struct rtc_wkalrm *alm)\n{\n\tstruct ds1305\t*ds1305 = dev_get_drvdata(dev);\n\tstruct spi_device *spi = ds1305->spi;\n\tu8\t\taddr;\n\tint\t\tstatus;\n\tu8\t\tbuf[DS1305_ALM_LEN];\n\n\t/* Refresh control register cache BEFORE reading ALM0 registers,\n\t * since reading alarm registers acks any pending IRQ.  That\n\t * makes returning "pending" status a bit of a lie, but that bit\n\t * of EFI status is at best fragile anyway (given IRQ handlers).\n\t */\n\taddr = DS1305_CONTROL;\n\tstatus = spi_write_then_read(spi, &addr, sizeof(addr),\n\t\t\tds1305->ctrl, sizeof(ds1305->ctrl));\n\tif (status < 0)\n\t\treturn status;\n\n\talm->enabled = !!(ds1305->ctrl[0] & DS1305_AEI0);\n\talm->pending = !!(ds1305->ctrl[1] & DS1305_AEI0);\n\n\t/* get and check ALM0 registers */\n\taddr = DS1305_ALM0(DS1305_SEC);\n\tstatus = spi_write_then_read(spi, &addr, sizeof(addr),\n\t\t\tbuf, sizeof(buf));\n\tif (status < 0)\n\t\treturn status;\n\n\tdev_vdbg(dev, "%s: %02x %02x %02x %02x\\n",\n\t\t"alm0 read", buf[DS1305_SEC], buf[DS1305_MIN],\n\t\tbuf[DS1305_HOUR], buf[DS1305_WDAY]);\n\n\tif ((DS1305_ALM_DISABLE & buf[DS1305_SEC])\n\t\t\t|| (DS1305_ALM_DISABLE & buf[DS1305_MIN])\n\t\t\t|| (DS1305_ALM_DISABLE & buf[DS1305_HOUR]))\n\t\treturn -EIO;\n\n\t/* Stuff these values into alm->time and let RTC framework code\n\t * fill in the rest ... and also handle rollover to tomorrow when\n\t * that\'s needed.\n\t */\n\talm->time.tm_sec = bcd2bin(buf[DS1305_SEC]);\n\talm->time.tm_min = bcd2bin(buf[DS1305_MIN]);\n\talm->time.tm_hour = bcd2hour(buf[DS1305_HOUR]);\n\talm->time.tm_mday = -1;\n\talm->time.tm_mon = -1;\n\talm->time.tm_year = -1;\n\t/* next three fields are unused by Linux */\n\talm->time.tm_wday = -1;\n\talm->time.tm_mday = -1;\n\talm->time.tm_isdst = -1;\n\n\treturn 0;\n}\n\n/*\n * Context: caller holds rtc->ops_lock (to protect ds1305->ctrl)\n */\nstatic int ds1305_set_alarm(struct device *dev, struct rtc_wkalrm *alm)\n{\n\tstruct ds1305\t*ds1305 = dev_get_drvdata(dev);\n\tstruct spi_device *spi = ds1305->spi;\n\tunsigned long\tnow, later;\n\tstruct rtc_time\ttm;\n\tint\t\tstatus;\n\tu8\t\tbuf[1 + DS1305_ALM_LEN];\n\n\t/* convert desired alarm to time_t */\n\tstatus = rtc_tm_to_time(&alm->time, &later);\n\tif (status < 0)\n\t\treturn status;\n\n\t/* Read current time as time_t */\n\tstatus = ds1305_get_time(dev, &tm);\n\tif (status < 0)\n\t\treturn status;\n\tstatus = rtc_tm_to_time(&tm, &now);\n\tif (status < 0)\n\t\treturn status;\n\n\t/* make sure alarm fires within the next 24 hours */\n\tif (later <= now)\n\t\treturn -EINVAL;\n\tif ((later - now) > 24 * 60 * 60)\n\t\treturn -EDOM;\n\n\t/* disable alarm if needed */\n\tif (ds1305->ctrl[0] & DS1305_AEI0) {\n\t\tds1305->ctrl[0] &= ~DS1305_AEI0;\n\n\t\tbuf[0] = DS1305_WRITE | DS1305_CONTROL;\n\t\tbuf[1] = ds1305->ctrl[0];\n\t\tstatus = spi_write_then_read(ds1305->spi, buf, 2, NULL, 0);\n\t\tif (status < 0)\n\t\t\treturn status;\n\t}\n\n\t/* write alarm */\n\tbuf[0] = DS1305_WRITE | DS1305_ALM0(DS1305_SEC);\n\tbuf[1 + DS1305_SEC] = bin2bcd(alm->time.tm_sec);\n\tbuf[1 + DS1305_MIN] = bin2bcd(alm->time.tm_min);\n\tbuf[1 + DS1305_HOUR] = hour2bcd(ds1305->hr12, alm->time.tm_hour);\n\tbuf[1 + DS1305_WDAY] = DS1305_ALM_DISABLE;\n\n\tdev_dbg(dev, "%s: %02x %02x %02x %02x\\n",\n\t\t"alm0 write", buf[1 + DS1305_SEC], buf[1 + DS1305_MIN],\n\t\tbuf[1 + DS1305_HOUR], buf[1 + DS1305_WDAY]);\n\n\tstatus = spi_write_then_read(spi, buf, sizeof(buf), NULL, 0);\n\tif (status < 0)\n\t\treturn status;\n\n\t/* enable alarm if requested */\n\tif (alm->enabled) {\n\t\tds1305->ctrl[0] |= DS1305_AEI0;\n\n\t\tbuf[0] = DS1305_WRITE | DS1305_CONTROL;\n\t\tbuf[1] = ds1305->ctrl[0];\n\t\tstatus = spi_write_then_read(ds1305->spi, buf, 2, NULL, 0);\n\t}\n\n\treturn status;\n}\n\n#ifdef CONFIG_PROC_FS\n\nstatic int ds1305_proc(struct device *dev, struct seq_file *seq)\n{\n\tstruct ds1305\t*ds1305 = dev_get_drvdata(dev);\n\tchar\t\t*diodes = "no";\n\tchar\t\t*resistors = "";\n\n\t/* ctrl[2] is treated as read-only; no locking needed */\n\tif ((ds1305->ctrl[2] & 0xf0) == DS1305_TRICKLE_MAGIC) {\n\t\tswitch (ds1305->ctrl[2] & 0x0c) {\n\t\tcase DS1305_TRICKLE_DS2:\n\t\t\tdiodes = "2 diodes, ";\n\t\t\tbreak;\n\t\tcase DS1305_TRICKLE_DS1:\n\t\t\tdiodes = "1 diode, ";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tgoto done;\n\t\t}\n\t\tswitch (ds1305->ctrl[2] & 0x03) {\n\t\tcase DS1305_TRICKLE_2K:\n\t\t\tresistors = "2k Ohm";\n\t\t\tbreak;\n\t\tcase DS1305_TRICKLE_4K:\n\t\t\tresistors = "4k Ohm";\n\t\t\tbreak;\n\t\tcase DS1305_TRICKLE_8K:\n\t\t\tresistors = "8k Ohm";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tdiodes = "no";\n\t\t\tbreak;\n\t\t}\n\t}\n\ndone:\n\treturn seq_printf(seq,\n\t\t\t"trickle_charge\\t: %s%s\\n",\n\t\t\tdiodes, resistors);\n}\n\n#else\n#define ds1305_proc\tNULL\n#endif\n\nstatic const struct rtc_class_ops ds1305_ops = {\n\t.read_time\t= ds1305_get_time,\n\t.set_time\t= ds1305_set_time,\n\t.read_alarm\t= ds1305_get_alarm,\n\t.set_alarm\t= ds1305_set_alarm,\n\t.proc\t\t= ds1305_proc,\n\t.alarm_irq_enable = ds1305_alarm_irq_enable,\n};\n\nstatic void ds1305_work(struct work_struct *work)\n{\n\tstruct ds1305\t*ds1305 = container_of(work, struct ds1305, work);\n\tstruct mutex\t*lock = &ds1305->rtc->ops_lock;\n\tstruct spi_device *spi = ds1305->spi;\n\tu8\t\tbuf[3];\n\tint\t\tstatus;\n\n\t/* lock to protect ds1305->ctrl */\n\tmutex_lock(lock);\n\n\t/* Disable the IRQ, and clear its status ... for now, we "know"\n\t * that if more than one alarm is active, they\'re in sync.\n\t * Note that reading ALM data registers also clears IRQ status.\n\t */\n\tds1305->ctrl[0] &= ~(DS1305_AEI1 | DS1305_AEI0);\n\tds1305->ctrl[1] = 0;\n\n\tbuf[0] = DS1305_WRITE | DS1305_CONTROL;\n\tbuf[1] = ds1305->ctrl[0];\n\tbuf[2] = 0;\n\n\tstatus = spi_write_then_read(spi, buf, sizeof(buf),\n\t\t\tNULL, 0);\n\tif (status < 0)\n\t\tdev_dbg(&spi->dev, "clear irq --> %d\\n", status);\n\n\tmutex_unlock(lock);\n\n\tif (!test_bit(FLAG_EXITING, &ds1305->flags))\n\t\tenable_irq(spi->irq);\n\n\trtc_update_irq(ds1305->rtc, 1, RTC_AF | RTC_IRQF);\n}\n\n/*\n * This "real" IRQ handler hands off to a workqueue mostly to allow\n * mutex locking for ds1305->ctrl ... unlike I2C, we could issue async\n * I/O requests in IRQ context (to clear the IRQ status).\n */\nstatic irqreturn_t ds1305_irq(int irq, void *p)\n{\n\tstruct ds1305\t\t*ds1305 = p;\n\n\tdisable_irq(irq);\n\tschedule_work(&ds1305->work);\n\treturn IRQ_HANDLED;\n}\n\n/*----------------------------------------------------------------------*/\n\n/*\n * Interface for NVRAM\n */\n\nstatic void msg_init(struct spi_message *m, struct spi_transfer *x,\n\t\tu8 *addr, size_t count, char *tx, char *rx)\n{\n\tspi_message_init(m);\n\tmemset(x, 0, 2 * sizeof(*x));\n\n\tx->tx_buf = addr;\n\tx->len = 1;\n\tspi_message_add_tail(x, m);\n\n\tx++;\n\n\tx->tx_buf = tx;\n\tx->rx_buf = rx;\n\tx->len = count;\n\tspi_message_add_tail(x, m);\n}\n\nstatic ssize_t\nds1305_nvram_read(struct file *filp, struct kobject *kobj,\n\t\tstruct bin_attribute *attr,\n\t\tchar *buf, loff_t off, size_t count)\n{\n\tstruct spi_device\t*spi;\n\tu8\t\t\taddr;\n\tstruct spi_message\tm;\n\tstruct spi_transfer\tx[2];\n\tint\t\t\tstatus;\n\n\tspi = container_of(kobj, struct spi_device, dev.kobj);\n\n\tif (unlikely(off >= DS1305_NVRAM_LEN))\n\t\treturn 0;\n\tif (count >= DS1305_NVRAM_LEN)\n\t\tcount = DS1305_NVRAM_LEN;\n\tif ((off + count) > DS1305_NVRAM_LEN)\n\t\tcount = DS1305_NVRAM_LEN - off;\n\tif (unlikely(!count))\n\t\treturn count;\n\n\taddr = DS1305_NVRAM + off;\n\tmsg_init(&m, x, &addr, count, NULL, buf);\n\n\tstatus = spi_sync(spi, &m);\n\tif (status < 0)\n\t\tdev_err(&spi->dev, "nvram %s error %d\\n", "read", status);\n\treturn (status < 0) ? status : count;\n}\n\nstatic ssize_t\nds1305_nvram_write(struct file *filp, struct kobject *kobj,\n\t\tstruct bin_attribute *attr,\n\t\tchar *buf, loff_t off, size_t count)\n{\n\tstruct spi_device\t*spi;\n\tu8\t\t\taddr;\n\tstruct spi_message\tm;\n\tstruct spi_transfer\tx[2];\n\tint\t\t\tstatus;\n\n\tspi = container_of(kobj, struct spi_device, dev.kobj);\n\n\tif (unlikely(off >= DS1305_NVRAM_LEN))\n\t\treturn -EFBIG;\n\tif (count >= DS1305_NVRAM_LEN)\n\t\tcount = DS1305_NVRAM_LEN;\n\tif ((off + count) > DS1305_NVRAM_LEN)\n\t\tcount = DS1305_NVRAM_LEN - off;\n\tif (unlikely(!count))\n\t\treturn count;\n\n\taddr = (DS1305_WRITE | DS1305_NVRAM) + off;\n\tmsg_init(&m, x, &addr, count, buf, NULL);\n\n\tstatus = spi_sync(spi, &m);\n\tif (status < 0)\n\t\tdev_err(&spi->dev, "nvram %s error %d\\n", "write", status);\n\treturn (status < 0) ? status : count;\n}\n\nstatic struct bin_attribute nvram = {\n\t.attr.name\t= "nvram",\n\t.attr.mode\t= S_IRUGO | S_IWUSR,\n\t.read\t\t= ds1305_nvram_read,\n\t.write\t\t= ds1305_nvram_write,\n\t.size\t\t= DS1305_NVRAM_LEN,\n};\n\n/*----------------------------------------------------------------------*/\n\n/*\n * Interface to SPI stack\n */\n\nstatic int ds1305_probe(struct spi_device *spi)\n{\n\tstruct ds1305\t\t\t*ds1305;\n\tint\t\t\t\tstatus;\n\tu8\t\t\t\taddr, value;\n\tstruct ds1305_platform_data\t*pdata = dev_get_platdata(&spi->dev);\n\tbool\t\t\t\twrite_ctrl = false;\n\n\t/* Sanity check board setup data.  This may be hooked up\n\t * in 3wire mode, but we don\'t care.  Note that unless\n\t * there\'s an inverter in place, this needs SPI_CS_HIGH!\n\t */\n\tif ((spi->bits_per_word && spi->bits_per_word != 8)\n\t\t\t|| (spi->max_speed_hz > 2000000)\n\t\t\t|| !(spi->mode & SPI_CPHA))\n\t\treturn -EINVAL;\n\n\t/* set up driver data */\n\tds1305 = devm_kzalloc(&spi->dev, sizeof(*ds1305), GFP_KERNEL);\n\tif (!ds1305)\n\t\treturn -ENOMEM;\n\tds1305->spi = spi;\n\tspi_set_drvdata(spi, ds1305);\n\n\t/* read and cache control registers */\n\taddr = DS1305_CONTROL;\n\tstatus = spi_write_then_read(spi, &addr, sizeof(addr),\n\t\t\tds1305->ctrl, sizeof(ds1305->ctrl));\n\tif (status < 0) {\n\t\tdev_dbg(&spi->dev, "can\'t %s, %d\\n",\n\t\t\t\t"read", status);\n\t\treturn status;\n\t}\n\n\tdev_dbg(&spi->dev, "ctrl %s: %3ph\\n", "read", ds1305->ctrl);\n\n\t/* Sanity check register values ... partially compensating for the\n\t * fact that SPI has no device handshake.  A pullup on MISO would\n\t * make these tests fail; but not all systems will have one.  If\n\t * some register is neither 0x00 nor 0xff, a chip is likely there.\n\t */\n\tif ((ds1305->ctrl[0] & 0x38) != 0 || (ds1305->ctrl[1] & 0xfc) != 0) {\n\t\tdev_dbg(&spi->dev, "RTC chip is not present\\n");\n\t\treturn -ENODEV;\n\t}\n\tif (ds1305->ctrl[2] == 0)\n\t\tdev_dbg(&spi->dev, "chip may not be present\\n");\n\n\t/* enable writes if needed ... if we were paranoid it would\n\t * make sense to enable them only when absolutely necessary.\n\t */\n\tif (ds1305->ctrl[0] & DS1305_WP) {\n\t\tu8\t\tbuf[2];\n\n\t\tds1305->ctrl[0] &= ~DS1305_WP;\n\n\t\tbuf[0] = DS1305_WRITE | DS1305_CONTROL;\n\t\tbuf[1] = ds1305->ctrl[0];\n\t\tstatus = spi_write_then_read(spi, buf, sizeof(buf), NULL, 0);\n\n\t\tdev_dbg(&spi->dev, "clear WP --> %d\\n", status);\n\t\tif (status < 0)\n\t\t\treturn status;\n\t}\n\n\t/* on DS1305, maybe start oscillator; like most low power\n\t * oscillators, it may take a second to stabilize\n\t */\n\tif (ds1305->ctrl[0] & DS1305_nEOSC) {\n\t\tds1305->ctrl[0] &= ~DS1305_nEOSC;\n\t\twrite_ctrl = true;\n\t\tdev_warn(&spi->dev, "SET TIME!\\n");\n\t}\n\n\t/* ack any pending IRQs */\n\tif (ds1305->ctrl[1]) {\n\t\tds1305->ctrl[1] = 0;\n\t\twrite_ctrl = true;\n\t}\n\n\t/* this may need one-time (re)init */\n\tif (pdata) {\n\t\t/* maybe enable trickle charge */\n\t\tif (((ds1305->ctrl[2] & 0xf0) != DS1305_TRICKLE_MAGIC)) {\n\t\t\tds1305->ctrl[2] = DS1305_TRICKLE_MAGIC\n\t\t\t\t\t\t| pdata->trickle;\n\t\t\twrite_ctrl = true;\n\t\t}\n\n\t\t/* on DS1306, configure 1 Hz signal */\n\t\tif (pdata->is_ds1306) {\n\t\t\tif (pdata->en_1hz) {\n\t\t\t\tif (!(ds1305->ctrl[0] & DS1306_1HZ)) {\n\t\t\t\t\tds1305->ctrl[0] |= DS1306_1HZ;\n\t\t\t\t\twrite_ctrl = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (ds1305->ctrl[0] & DS1306_1HZ) {\n\t\t\t\t\tds1305->ctrl[0] &= ~DS1306_1HZ;\n\t\t\t\t\twrite_ctrl = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (write_ctrl) {\n\t\tu8\t\tbuf[4];\n\n\t\tbuf[0] = DS1305_WRITE | DS1305_CONTROL;\n\t\tbuf[1] = ds1305->ctrl[0];\n\t\tbuf[2] = ds1305->ctrl[1];\n\t\tbuf[3] = ds1305->ctrl[2];\n\t\tstatus = spi_write_then_read(spi, buf, sizeof(buf), NULL, 0);\n\t\tif (status < 0) {\n\t\t\tdev_dbg(&spi->dev, "can\'t %s, %d\\n",\n\t\t\t\t\t"write", status);\n\t\t\treturn status;\n\t\t}\n\n\t\tdev_dbg(&spi->dev, "ctrl %s: %3ph\\n", "write", ds1305->ctrl);\n\t}\n\n\t/* see if non-Linux software set up AM/PM mode */\n\taddr = DS1305_HOUR;\n\tstatus = spi_write_then_read(spi, &addr, sizeof(addr),\n\t\t\t\t&value, sizeof(value));\n\tif (status < 0) {\n\t\tdev_dbg(&spi->dev, "read HOUR --> %d\\n", status);\n\t\treturn status;\n\t}\n\n\tds1305->hr12 = (DS1305_HR_12 & value) != 0;\n\tif (ds1305->hr12)\n\t\tdev_dbg(&spi->dev, "AM/PM\\n");\n\n\t/* register RTC ... from here on, ds1305->ctrl needs locking */\n\tds1305->rtc = devm_rtc_device_register(&spi->dev, "ds1305",\n\t\t\t&ds1305_ops, THIS_MODULE);\n\tif (IS_ERR(ds1305->rtc)) {\n\t\tstatus = PTR_ERR(ds1305->rtc);\n\t\tdev_dbg(&spi->dev, "register rtc --> %d\\n", status);\n\t\treturn status;\n\t}\n\n\t/* Maybe set up alarm IRQ; be ready to handle it triggering right\n\t * away.  NOTE that we don\'t share this.  The signal is active low,\n\t * and we can\'t ack it before a SPI message delay.  We temporarily\n\t * disable the IRQ until it\'s acked, which lets us work with more\n\t * IRQ trigger modes (not all IRQ controllers can do falling edge).\n\t */\n\tif (spi->irq) {\n\t\tINIT_WORK(&ds1305->work, ds1305_work);\n\t\tstatus = devm_request_irq(&spi->dev, spi->irq, ds1305_irq,\n\t\t\t\t0, dev_name(&ds1305->rtc->dev), ds1305);\n\t\tif (status < 0) {\n\t\t\tdev_dbg(&spi->dev, "request_irq %d --> %d\\n",\n\t\t\t\t\tspi->irq, status);\n\t\t\treturn status;\n\t\t}\n\n\t\tdevice_set_wakeup_capable(&spi->dev, 1);\n\t}\n\n\t/* export NVRAM */\n\tstatus = sysfs_create_bin_file(&spi->dev.kobj, &nvram);\n\tif (status < 0) {\n\t\tdev_dbg(&spi->dev, "register nvram --> %d\\n", status);\n\t\treturn status;\n\t}\n\n\treturn 0;\n}\n\nstatic int ds1305_remove(struct spi_device *spi)\n{\n\tstruct ds1305 *ds1305 = spi_get_drvdata(spi);\n\n\tsysfs_remove_bin_file(&spi->dev.kobj, &nvram);\n\n\t/* carefully shut down irq and workqueue, if present */\n\tif (spi->irq) {\n\t\tset_bit(FLAG_EXITING, &ds1305->flags);\n\t\tdevm_free_irq(&spi->dev, spi->irq, ds1305);\n\t\tcancel_work_sync(&ds1305->work);\n\t}\n\n\treturn 0;\n}\n\nstatic struct spi_driver ds1305_driver = {\n\t.driver.name\t= "rtc-ds1305",\n\t.driver.owner\t= THIS_MODULE,\n\t.probe\t\t= ds1305_probe,\n\t.remove\t\t= ds1305_remove,\n\t/* REVISIT add suspend/resume */\n};\n\nmodule_spi_driver(ds1305_driver);\n\nMODULE_DESCRIPTION("RTC driver for DS1305 and DS1306 chips");\nMODULE_LICENSE("GPL");\nMODULE_ALIAS("spi:rtc-ds1305");\n', 'binary': False, 'copies': 256, 'sample_repo_name': 'wandboard-org/linux', 'sample_ref': 'refs/heads/master', 'sample_path': 'drivers/rtc/rtc-ds1305.c', 'sample_mode': 33188, 'sample_symlink_target': None}, {'id': '816b2d7412b432d86a4a36147255ec664f760193', 'size': 3974, 'content': '/*\n *  linux/drivers/devfreq/governor_simpleondemand.c\n *\n *  Copyright (C) 2011 Samsung Electronics\n *\tMyungJoo Ham <myungjoo.ham@samsung.com>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation.\n */\n\n#include <linux/errno.h>\n#include <linux/module.h>\n#include <linux/devfreq.h>\n#include <linux/math64.h>\n#include "governor.h"\n\n/* Default constants for DevFreq-Simple-Ondemand (DFSO) */\n#define DFSO_UPTHRESHOLD\t(90)\n#define DFSO_DOWNDIFFERENCTIAL\t(10)\nstatic int devfreq_simple_ondemand_func(struct devfreq *df,\n\t\t\t\t\tunsigned long *freq,\n\t\t\t\t\tu32 *flag)\n{\n\tstruct devfreq_dev_status stat;\n\tint err;\n\tunsigned long long a, b;\n\tunsigned int dfso_upthreshold = DFSO_UPTHRESHOLD;\n\tunsigned int dfso_downdifferential = DFSO_DOWNDIFFERENCTIAL;\n\tstruct devfreq_simple_ondemand_data *data = df->data;\n\tunsigned long max = (df->max_freq) ? df->max_freq : UINT_MAX;\n\tunsigned long min = (df->min_freq) ? df->min_freq : 0;\n\n\tstat.private_data = NULL;\n\n\terr = df->profile->get_dev_status(df->dev.parent, &stat);\n\tif (err)\n\t\treturn err;\n\n\tif (data) {\n\t\tif (data->upthreshold)\n\t\t\tdfso_upthreshold = data->upthreshold;\n\t\tif (data->downdifferential)\n\t\t\tdfso_downdifferential = data->downdifferential;\n\t}\n\tif (dfso_upthreshold > 100 ||\n\t    dfso_upthreshold < dfso_downdifferential)\n\t\treturn -EINVAL;\n\n\t/* Prevent overflow */\n\tif (stat.busy_time >= (1 << 24) || stat.total_time >= (1 << 24)) {\n\t\tstat.busy_time >>= 7;\n\t\tstat.total_time >>= 7;\n\t}\n\n\tif (data && data->simple_scaling) {\n\t\tif (stat.busy_time * 100 >\n\t\t    stat.total_time * dfso_upthreshold)\n\t\t\t*freq = max;\n\t\telse if (stat.busy_time * 100 <\n\t\t\t stat.total_time *\n\t\t\t (dfso_upthreshold - dfso_downdifferential))\n\t\t\t*freq = min;\n\t\telse\n\t\t\t*freq = df->previous_freq;\n\t\treturn 0;\n\t}\n\n\t/* Assume MAX if it is going to be divided by zero */\n\tif (stat.total_time == 0) {\n\t\t*freq = max;\n\t\treturn 0;\n\t}\n\n\t/* Set MAX if it\'s busy enough */\n\tif (stat.busy_time * 100 >\n\t    stat.total_time * dfso_upthreshold) {\n\t\t*freq = max;\n\t\treturn 0;\n\t}\n\n\t/* Set MAX if we do not know the initial frequency */\n\tif (stat.current_frequency == 0) {\n\t\t*freq = max;\n\t\treturn 0;\n\t}\n\n\t/* Keep the current frequency */\n\tif (stat.busy_time * 100 >\n\t    stat.total_time * (dfso_upthreshold - dfso_downdifferential)) {\n\t\t*freq = stat.current_frequency;\n\t\treturn 0;\n\t}\n\n\t/* Set the desired frequency based on the load */\n\ta = stat.busy_time;\n\ta *= stat.current_frequency;\n\tb = div_u64(a, stat.total_time);\n\tb *= 100;\n\tb = div_u64(b, (dfso_upthreshold - dfso_downdifferential / 2));\n\t*freq = (unsigned long) b;\n\n\tif (df->min_freq && *freq < df->min_freq)\n\t\t*freq = df->min_freq;\n\tif (df->max_freq && *freq > df->max_freq)\n\t\t*freq = df->max_freq;\n\n\treturn 0;\n}\n\nstatic int devfreq_simple_ondemand_handler(struct devfreq *devfreq,\n\t\t\t\tunsigned int event, void *data)\n{\n\tswitch (event) {\n\tcase DEVFREQ_GOV_START:\n\t\tdevfreq_monitor_start(devfreq);\n\t\tbreak;\n\n\tcase DEVFREQ_GOV_STOP:\n\t\tdevfreq_monitor_stop(devfreq);\n\t\tbreak;\n\n\tcase DEVFREQ_GOV_INTERVAL:\n\t\tdevfreq_interval_update(devfreq, (unsigned int *)data);\n\t\tbreak;\n\n\tcase DEVFREQ_GOV_SUSPEND:\n\t\tdevfreq_monitor_suspend(devfreq);\n\t\tbreak;\n\n\tcase DEVFREQ_GOV_RESUME:\n\t\tdevfreq_monitor_resume(devfreq);\n\t\tbreak;\n\n\tdefault:\n\t\tbreak;\n\t}\n\n\treturn 0;\n}\n\nstatic struct devfreq_governor devfreq_simple_ondemand = {\n\t.name = "simple_ondemand",\n\t.get_target_freq = devfreq_simple_ondemand_func,\n\t.event_handler = devfreq_simple_ondemand_handler,\n};\n\nstatic int __init devfreq_simple_ondemand_init(void)\n{\n\treturn devfreq_add_governor(&devfreq_simple_ondemand);\n}\nsubsys_initcall(devfreq_simple_ondemand_init);\n\nstatic void __exit devfreq_simple_ondemand_exit(void)\n{\n\tint ret;\n\n\tret = devfreq_remove_governor(&devfreq_simple_ondemand);\n\tif (ret)\n\t\tpr_err("%s: failed remove governor %d\\n", __func__, ret);\n\n\treturn;\n}\nmodule_exit(devfreq_simple_ondemand_exit);\nMODULE_LICENSE("GPL");\n', 'binary': False, 'copies': 1, 'sample_repo_name': 'garwedgess/android_kernel_lge_g4', 'sample_ref': 'refs/heads/M', 'sample_path': 'drivers/devfreq/governor_simpleondemand.c', 'sample_mode': 33188, 'sample_symlink_target': None}, {'id': 'f50a76cff9f42438026c7cf8bba687bcd2d491ea', 'size': 7866, 'content': '/*\n  Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation; version 2 of the License.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#include "gtest/gtest.h"\n#include "gmock/gmock.h"\n\n#include <exception>\n\n#define private public\n#include "mysqlrouter/uri.h"\n\nusing std::get;\nusing ::testing::StrEq;\nusing ::testing::ContainerEq;\nusing ::testing::IsEmpty;\nusing mysqlrouter::URI;\nusing mysqlrouter::URIError;\nusing mysqlrouter::URIQuery;\nusing mysqlrouter::URIAuthority;\nusing mysqlrouter::URIPath;\nusing mysqlrouter::URIQuery;\n\nusing mysqlrouter::URI;\nusing mysqlrouter::URIError;\nusing mysqlrouter::URIQuery;\nusing mysqlrouter::URIAuthority;\nusing mysqlrouter::URIPath;\nusing mysqlrouter::t_parse_scheme;\nusing mysqlrouter::t_parse_authority;\nusing mysqlrouter::t_parse_path;\nusing mysqlrouter::t_parse_query;\nusing mysqlrouter::t_parse_fragment;\n\nclass URITests: public ::testing::Test {\nprotected:\n  virtual void SetUp() {\n  }\n};\n\nTEST_F(URITests, Constructor)\n{\n  URI u;\n  ASSERT_TRUE(u.scheme.empty());\n  ASSERT_TRUE(u.host.empty());\n  ASSERT_EQ(u.port, 0);\n  ASSERT_TRUE(u.username.empty());\n  ASSERT_TRUE(u.password.empty());\n  ASSERT_TRUE(u.path.empty());\n  ASSERT_TRUE(u.query.empty());\n  ASSERT_TRUE(u.fragment.empty());\n}\n\nTEST_F(URITests, ParseScheme)\n{\n  URI u;\n  ASSERT_THAT(mysqlrouter::t_parse_scheme("ham:"), StrEq("ham"));\n  ASSERT_THAT(mysqlrouter::t_parse_scheme("HAM:"), StrEq("ham"));\n  ASSERT_THAT(mysqlrouter::t_parse_scheme("MySQL+Fabric:"), StrEq("mysql+fabric"));\n  ASSERT_THAT(mysqlrouter::t_parse_scheme("MySQL.Fabric:"), StrEq("mysql.fabric"));\n  ASSERT_THAT(mysqlrouter::t_parse_scheme("MySQL-Fabric:"), StrEq("mysql-fabric"));\n}\n\nTEST_F(URITests, ParseSchemeFail)\n{\n  ASSERT_THROW(mysqlrouter::t_parse_scheme("ham"), URIError);\n  ASSERT_THROW(mysqlrouter::t_parse_scheme("ham$$:"), URIError);\n}\n\nTEST_F(URITests, ParseAuthority)\n{\n  URIAuthority auth;\n\n  auth = mysqlrouter::t_parse_authority("ham://spam.example.com");\n  ASSERT_THAT(get<0>(auth), StrEq("spam.example.com"));\n  ASSERT_EQ(get<1>(auth), 0);\n  ASSERT_TRUE(get<2>(auth).empty());\n  ASSERT_TRUE(get<3>(auth).empty());\n\n  auth = mysqlrouter::t_parse_authority("ham://spam.example.com");\n  ASSERT_THAT(get<0>(auth), StrEq("spam.example.com"));\n\n  auth = mysqlrouter::t_parse_authority("ham://scott@spam.example.com/");\n  ASSERT_THAT(get<0>(auth), StrEq("spam.example.com"));\n  ASSERT_THAT(get<2>(auth), StrEq("scott"));\n  ASSERT_TRUE(get<3>(auth).empty());\n\n  auth = mysqlrouter::t_parse_authority("ham://scott:@spam.example.com/");\n  ASSERT_THAT(get<0>(auth), StrEq("spam.example.com"));\n  ASSERT_THAT(get<2>(auth), StrEq("scott"));\n  ASSERT_TRUE(get<3>(auth).empty());\n\n  auth = mysqlrouter::t_parse_authority("ham://:@spam.example.com");\n  ASSERT_THAT(get<0>(auth), StrEq("spam.example.com"));\n  ASSERT_TRUE(get<2>(auth).empty());\n  ASSERT_TRUE(get<3>(auth).empty());\n\n  auth = mysqlrouter::t_parse_authority("ham://scott:tiger@spam.example.com:3306/");\n  ASSERT_THAT(get<0>(auth), StrEq("spam.example.com"));\n  ASSERT_EQ(get<1>(auth), 3306);\n  ASSERT_THAT(get<2>(auth), StrEq("scott"));\n  ASSERT_THAT(get<3>(auth), StrEq("tiger"));\n\n  auth = mysqlrouter::t_parse_authority("ham://spam.example.com:/");\n  ASSERT_EQ(get<1>(auth), 0);\n  auth = mysqlrouter::t_parse_authority("ham://spam.example.com:3306/");\n  ASSERT_EQ(get<1>(auth), 3306);\n}\n\nTEST_F(URITests, ParseAuthorityFail)\n{\n  ASSERT_THROW(mysqlrouter::t_parse_authority("ham"), URIError);\n  ASSERT_THROW(mysqlrouter::t_parse_authority("ham://spam.example.com:999999/"), URIError);\n  ASSERT_THROW(mysqlrouter::t_parse_authority("ham://:3306/"), URIError);\n}\n\nTEST_F(URITests, ParseAuthorityEmpty)\n{\n  URIAuthority a = mysqlrouter::t_parse_authority("ham://");\n  ASSERT_THAT(get<0>(a), StrEq(""));\n  a = mysqlrouter::t_parse_authority("ham:///");\n  ASSERT_THAT(get<0>(a), StrEq(""));\n}\n\nTEST_F(URITests, ParsePath)\n{\n  URIPath p;\n  p = mysqlrouter::t_parse_path("ham://scott:tiger@spam.example.com:3306/the/way/to/go");\n  ASSERT_THAT(p.at(0), StrEq("the"));\n  ASSERT_THAT(p.at(1), StrEq("way"));\n  ASSERT_THAT(p.at(2), StrEq("to"));\n  ASSERT_THAT(p.at(3), StrEq("go"));\n  ASSERT_THROW(p.at(4), std::out_of_range);\n  p.clear();\n  \n  p = mysqlrouter::t_parse_path("ham://scott:tiger@spam.example.com:3306/withslashatend/");\n  ASSERT_THAT(p.at(0), StrEq("withslashatend"));\n  ASSERT_THROW(p.at(1), std::out_of_range);\n  p.clear();\n  \n  p = mysqlrouter::t_parse_path("ham://scott:tiger@spam.example.com:3306/double//slash/");\n  ASSERT_THAT(p.at(0), StrEq("double"));\n  ASSERT_THAT(p.at(1), StrEq("slash"));\n  ASSERT_THROW(p.at(2), std::out_of_range);\n  p.clear();\n  \n  p = mysqlrouter::t_parse_path("file:///path/to/file");\n  ASSERT_THAT(p.at(2), StrEq("file"));\n  p.clear();\n  p = mysqlrouter::t_parse_path("ham://example.com");\n  ASSERT_THROW(p.at(0), std::out_of_range);\n  p.clear();\n  \n  p = mysqlrouter::t_parse_path("ham://example.com/path/to/?key1=val2");\n  ASSERT_THAT(p.at(0), StrEq("path"));\n  ASSERT_THAT(p.at(1), StrEq("to"));\n  ASSERT_THROW(p.at(2), std::out_of_range);\n  p.clear();\n}\n\nTEST_F(URITests, ParsePathFail)\n{\n  ASSERT_THROW(mysqlrouter::t_parse_path("ham"), URIError);\n}\n\nTEST_F(URITests, ParseQuery)\n{\n  URIQuery q;\n\n  q = mysqlrouter::t_parse_query("ham://example.com?key1=val1&key2=val2", URI::query_delimiter);\n  ASSERT_THAT(q["key1"], StrEq("val1"));\n  ASSERT_THAT(q["key2"], StrEq("val2"));\n  \n  q = mysqlrouter::t_parse_query("ham://example.com/path/to/?key1=val1&key2=", \'&\');\n  ASSERT_THAT(q["key1"], StrEq("val1"));\n  ASSERT_THAT(q["key2"], StrEq(""));\n  \n  q = mysqlrouter::t_parse_query("ham://example.com?key1=val1#foo");\n  ASSERT_THAT(q["key1"], StrEq("val1"));\n}\n\nTEST_F(URITests, ParseQueryFail)\n{\n  std::string f;\n  \n  f = mysqlrouter::t_parse_fragment("ham://example.com?key1=val1#foo");\n  ASSERT_THAT(f, StrEq("foo"));\n  \n  f = mysqlrouter::t_parse_fragment("ham://example.com#foo");\n  ASSERT_THAT(f, StrEq("foo"));\n  \n  f = mysqlrouter::t_parse_fragment("ham://example.com#");\n  ASSERT_TRUE(f.empty());\n  \n  f = mysqlrouter::t_parse_fragment("ham://example.com");\n  ASSERT_TRUE(f.empty());\n}\n\nTEST_F(URITests, ParseFragmentFail)\n{\n  ASSERT_THROW(mysqlrouter::t_parse_fragment("ham"), URIError);\n}\n\nTEST_F(URITests, ConstructorWithURI)\n{\n  URI u("ham://scott:tiger@host.example.com:3306/path/to/sys?key1=val1");\n  ASSERT_THAT(u.scheme, StrEq("ham"));\n  ASSERT_THAT(u.username, StrEq("scott"));\n  ASSERT_THAT(u.password, StrEq("tiger"));\n  ASSERT_THAT(u.host, StrEq("host.example.com"));\n  ASSERT_EQ(u.port, 3306);\n  ASSERT_THAT(u.path.at(0), StrEq("path"));\n  ASSERT_THAT(u.path.at(1), StrEq("to"));\n  ASSERT_THAT(u.path.at(2), StrEq("sys"));\n  ASSERT_THAT(u.query["key1"], StrEq("val1"));\n}\n\nTEST_F(URITests, ConstructorWithURIFail)\n{\n  ASSERT_THROW(new URI("ham$$://scott:tiger@host.example.com:3306/path/to/sys?key1=val1"), URIError);\n}\n\nTEST_F(URITests, SetURI)\n{\n  URI u("ham://scott:tiger@host.example.com:3306/path/to/sys?key1=val1");\n  u.set_uri("spam://spamhost.example.com");\n  ASSERT_EQ(u.scheme, string("spam"));\n  ASSERT_EQ(u.host, string("spamhost.example.com"));\n  ASSERT_EQ(u.port, 0);\n  ASSERT_EQ(u.username, string());\n  ASSERT_EQ(u.password, string());\n  ASSERT_THAT(u.path, IsEmpty());\n  ASSERT_THAT(u.query, IsEmpty());\n  ASSERT_EQ(u.fragment, string());\n}\n', 'binary': False, 'copies': 1, 'sample_repo_name': 'mysql/mysql-router', 'sample_ref': 'refs/heads/2.0', 'sample_path': 'src/router/tests/test_uri.cc', 'sample_mode': 33188, 'sample_symlink_target': None}, {'id': '8e0ab7a402ed401e4a92a0933d211dada21b4508', 'size': 903, 'content': '<?php\n/**\n * Licensed under The GPL-3.0 License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @since    2.0.0\n * @author   Christopher Castro <chris@quickapps.es>\n * @link     http://www.quickappscms.org\n * @license  http://opensource.org/licenses/gpl-3.0.html GPL-3.0 License\n */\nnamespace User\\Notification\\Message;\n\nuse User\\Model\\Entity\\User;\nuse User\\Notification\\Message\\BaseMessage;\n\n/**\n * Sends instructions for the "password recovery" process.\n *\n */\nclass PasswordRequestMessage extends BaseMessage\n{\n\n    /**\n     * {@inheritDoc}\n     */\n    public function send()\n    {\n        $this\n            ->subject(plugin(\'User\')->settings[\'message_password_recovery_subject\'])\n            ->body(plugin(\'User\')->settings[\'message_password_recovery_body\']);\n        return parent::send();\n    }\n}\n', 'binary': False, 'copies': 1, 'sample_repo_name': 'quickapps/cms', 'sample_ref': 'refs/heads/2.0', 'sample_path': 'plugins/User/src/Notification/Message/PasswordRequestMessage.php', 'sample_mode': 33188, 'sample_symlink_target': None}, {'id': '9281ba3801cf1a02af6ea13bebdc19a41d48b463', 'size': 1444, 'content': "<?php\n/**\n * Licensed under The GPL-3.0 License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @since    2.0.0\n * @author   Christopher Castro <chris@quickapps.es>\n * @link     http://www.quickappscms.org\n * @license  http://opensource.org/licenses/gpl-3.0.html GPL-3.0 License\n */\n\n$skins = [\n    'black' => 'Black',\n    'black-light' => 'Black Light',\n    'blue' => 'Blue',\n    'blue-light' => 'Blue Light',\n    'green' => 'Green',\n    'green-light' => 'Green Light',\n    'purple' => 'Purple',\n    'purple-light' => 'Purple Light',\n    'red' => 'Red',\n    'red-light' => 'Red Light',\n    'yellow' => 'Yellow',\n    'yellow-light' => 'Yellow Light',\n];\n?>\n\n<fieldset>\n    <legend><?php echo __d('backend_theme', 'Layout Options'); ?></legend>\n    <?php echo $this->Form->input('fixed_layout', ['type' => 'checkbox', 'label' => __d('backend_theme', 'Fixed Layout')]); ?>\n    <?php echo $this->Form->input('boxed_layout', ['type' => 'checkbox', 'label' => __d('backend_theme', 'Boxed Layout')]); ?>\n    <?php echo $this->Form->input('collapsed_sidebar', ['type' => 'checkbox', 'label' => __d('backend_theme', 'Collapsed Sidebar')]); ?>\n</fieldset>\n\n<fieldset>\n    <legend><?php echo __d('backend_theme', 'Skins'); ?></legend>\n    <?php echo $this->Form->input('skin', ['type' => 'select', 'options' => $skins, 'label' => false]); ?>\n</fieldset>\n", 'binary': False, 'copies': 1, 'sample_repo_name': 'quickapps/cms', 'sample_ref': 'refs/heads/2.0', 'sample_path': 'plugins/BackendTheme/src/Template/Element/settings.ctp', 'sample_mode': 33188, 'sample_symlink_target': None}]

--------------------------------------------------
Table full name: GITHUB_REPOS.GITHUB_REPOS.SAMPLE_REPOS
Column name: watch_count Type: NUMBER
Column name: repo_name Type: TEXT
Sample rows:
[{'repo_name': 'kbandla/APTnotes', 'watch_count': 256}, {'repo_name': 'bigcompany/hook.io', 'watch_count': 256}, {'repo_name': 'krisk/Fuse', 'watch_count': 256}, {'repo_name': 'brigade/react-waypoint', 'watch_count': 256}, {'repo_name': 'Quartz/mapquery', 'watch_count': 256}]

--------------------------------------------------
External knowledge that might be helpful: 
None
The table structure information is ({database name: {schema name: [table name]}}): 
{'GITHUB_REPOS': {'GITHUB_REPOS': ['SAMPLE_FILES', 'LANGUAGES', 'LICENSES', 'SAMPLE_COMMITS', 'SAMPLE_CONTENTS', 'SAMPLE_REPOS']}}

Some few-shot examples after column exploration may be helpful:
Query:
--Description: Sample 20 python-source files that exist in the repo snapshot  
SELECT  f."repo_name",
        f."path",
        f."id"
FROM    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"  f
WHERE   f."path" ILIKE '%.py'
LIMIT 20;
Answer:
repo_name,path,id
jleclanche/django-push-notifications,push_notifications/migrations/0002_auto_20160106_0850.py,d7b9d759d537697e9fd55279b5026aed022d23d3
kennyledet/Algorithm-Implementations,Maximum_Subarray/Python/shivam5992/kadane.py,9716963c79b32a474c1df22dfd68bb67ba51d334
kennyledet/Algorithm-Implementations,Caesar_Cipher/Python/kennyledet/caesar_cipher.py,13188c551074329980a22d255b09fb6ff14241bd
orcasgit/django-pgcrypto-expressions,setup.py,1db8490c8f06c13a1b0b5090f1646e229937c68f
Query:
--Description: Sample 20 R-source files that exist in the repo snapshot  
SELECT  f."repo_name",
        f."path",
        f."id"
FROM    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"  f
WHERE   f."path" ILIKE '%.r'
LIMIT 20;
Answer:
repo_name,path,id
mercicle/Deep-Learning-with-h2o-in-R,data-prep/split-train-test.r,ca95c2cef7356097cdd5fddefd85b68b2e22a5a9
SchlossLab/Schloss_Cluster_PeerJ_2015,code/summarize_mcc.R,4abf1ec7e785029c6e4eba44692acd063f16ad35
richarddmorey/ConfidenceIntervalsFallacy,Rmd_files/figureCode/figure6_invertTest.R,f53e14ea7d92635592461b669a3f1623a3d830ee
soarlab/maline,data_analysis/crossvalidation/randomForest.R,a0cfbf6f0ddc9a79eb0281729108d8977ceb2c51
jasdumas/shinyGEO,series/process-series.R,392
Query:
--Description: Show 20 raw lines that contain Python import-statements  
SELECT  f."path",
        l.value::STRING  AS "line"
FROM    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"      f
JOIN    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"   c
          ON f."id" = c."id"
,       LATERAL FLATTEN(input => SPLIT(c."content", '\n')) l
WHERE   f."path" ILIKE '%.py'
  AND   l.value::STRING ILIKE '%import %'
LIMIT 20;
Answer:
path,line
maec/utils/merge.py,from copy import deepcopy
maec/utils/merge.py,import itertools
maec/utils/merge.py,from mixbox import idgen
maec/utils/merge.py,from mixbox.namespaces import Namespace
maec/utils/merge.py,from cybox.core import Object
maec/utils/merge.py,from cybox.common import HashList
maec/utils/merge.py,import maec
maec/utils/merge.py,"from maec.package import (Package, MalwareSubject, MalwareConfigurationDetails,"
rekall-core/rekall/plugins/linux/iomem.py,from rekall.p
Query:
--Description: Count occurrences of every Python module mentioned in import lines (top 20)  
SELECT  REGEXP_SUBSTR(
            l.value::STRING,
            '^\\s*(from|import)\\s+([A-Za-z0-9_\\.]+)',
            1, 1, 'ie', 2)        AS "python_module",
        COUNT(*)                  AS "occurrences"
FROM    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_FILES"     f
JOIN    "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"  c
          ON f."id" = c."id",
        LATERAL FLATTEN(input => SPLIT(c."content", '\n')) l
WHERE   f."path" ILIKE '%.py'
  AND   l.value::STRING ILIKE '%import %'
  AND   REGEXP_SUBSTR(
            l.value::STRING,
            '^\\s*(from|import)\\s+([A-Za-z0-9_\\.]+)',
            1, 1, 'ie', 2) IS NOT NULL
GROUP BY 1
ORDER BY 2 DESC
LIMIT 20
Answer:
python_module,occurrences
corehq.sql_db.operations,1
maec,1
django.db,1
mixbox,1
django.conf,1
maec.package,1
__future__,1
itertools,1
diesel,1
copy,1
rekall.plugins.linux,1
cybox.common,1
time,1
mixbox.namespaces,1
diesel.protocols.zeromq,1
cybox.core,1
Task: Can you analyze the joined data from github repos files and github_repos contents, focusing only on files ending with '.py' or '.r', then extract Python modules from 'import' or 'from ... import' lines and R libraries from 'library(...)' lines, count their occurrences, and finally list the results sorted by language and by the number of occurrences in descending order?

Please think step by step and answer only one complete SQL in snowflake dialect in ```sql``` format.
SQL usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: The table structure information is ({database name: {schema name: [table name]}}): 
{'GITHUB_REPOS': {'GITHUB_REPOS': ['SAMPLE_FILES', 'LANGUAGES', 'LICENSES', 'SAMPLE_COMMITS', 'SAMPLE_CONTENTS', 'SAMPLE_REPOS']}}

When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
If the task description does not specify the number of decimal places, retain all decimals to four places.

[Self-refine]
2025-05-07 01:49:53 - Thread-95 (execute) - INFO - [Try to run SQL in self-refine]
```sql
/* Extract imported Python modules and R libraries, count how many
   times each one appears, then list results per language ordered
   by descending number of occurrences                                         */

WITH python_lines AS (     ---------------------------------------------------
    SELECT  l.value::STRING  AS line
    FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES      f
    JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS   c
              ON f.id = c.id,
            LATERAL FLATTEN( input => SPLIT(c.content, '\n') ) l
    WHERE   f.path ILIKE '%.py'                         -- only Python files
),
python_modules AS (
    /* grab the first identifier that follows "import" or "from"  */
    SELECT  REGEXP_SUBSTR(
                line,
                '^\\s*(?:from|import)\\s+([A-Za-z0-9_\\.]+)',   -- group 1
                1, 1, 'ie', 1)         AS module
    FROM    python_lines
    WHERE   REGEXP_SUBSTR(
                line,
                '^\\s*(?:from|import)\\s+([A-Za-z0-9_\\.]+)',
                1, 1, 'ie', 1) IS NOT NULL
),

r_lines AS (                ---------------------------------------------------
    SELECT  l.value::STRING  AS line
    FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES      f
    JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS   c
              ON f.id = c.id,
            LATERAL FLATTEN( input => SPLIT(c.content, '\n') ) l
    WHERE   f.path ILIKE '%.r'                          -- only R files
),
r_modules AS (
    /* capture package name inside library(...)  (quotes optional)             */
    SELECT  REGEXP_SUBSTR(
                line,
                'library\\s*\\(\\s*["'']?([A-Za-z0-9_\\.]+)',  -- group 1
                1, 1, 'ie', 1)         AS module
    FROM    r_lines
    WHERE   REGEXP_SUBSTR(
                line,
                'library\\s*\\(\\s*["'']?([A-Za-z0-9_\\.]+)',
                1, 1, 'ie', 1) IS NOT NULL
)

SELECT  'Python'               AS "language",
        module                 AS "package_or_module",
        COUNT(*)               AS "occurrences"
FROM    python_modules
GROUP BY module

UNION ALL

SELECT  'R'                    AS "language",
        module                 AS "package_or_module",
        COUNT(*)               AS "occurrences"
FROM    r_modules
GROUP BY module

ORDER BY "language",
         "occurrences" DESC NULLS LAST;
```
[Try to run SQL in self-refine]
2025-05-07 01:49:54 - Thread-95 (execute) - INFO - itercount: 1
2025-05-07 01:49:54 - Thread-95 (execute) - INFO - [Self-refine]
Input sql:
/* Extract imported Python modules and R libraries, count how many
   times each one appears, then list results per language ordered
   by descending number of occurrences                                         */

WITH python_lines AS (     ---------------------------------------------------
    SELECT  l.value::STRING  AS line
    FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES      f
    JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS   c
              ON f.id = c.id,
            LATERAL FLATTEN( input => SPLIT(c.content, '\n') ) l
    WHERE   f.path ILIKE '%.py'                         -- only Python files
),
python_modules AS (
    /* grab the first identifier that follows "import" or "from"  */
    SELECT  REGEXP_SUBSTR(
                line,
                '^\\s*(?:from|import)\\s+([A-Za-z0-9_\\.]+)',   -- group 1
                1, 1, 'ie', 1)         AS module
    FROM    python_lines
    WHERE   REGEXP_SUBSTR(
                line,
                '^\\s*(?:from|import)\\s+([A-Za-z0-9_\\.]+)',
                1, 1, 'ie', 1) IS NOT NULL
),

r_lines AS (                ---------------------------------------------------
    SELECT  l.value::STRING  AS line
    FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES      f
    JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS   c
              ON f.id = c.id,
            LATERAL FLATTEN( input => SPLIT(c.content, '\n') ) l
    WHERE   f.path ILIKE '%.r'                          -- only R files
),
r_modules AS (
    /* capture package name inside library(...)  (quotes optional)             */
    SELECT  REGEXP_SUBSTR(
                line,
                'library\\s*\\(\\s*["'']?([A-Za-z0-9_\\.]+)',  -- group 1
                1, 1, 'ie', 1)         AS module
    FROM    r_lines
    WHERE   REGEXP_SUBSTR(
                line,
                'library\\s*\\(\\s*["'']?([A-Za-z0-9_\\.]+)',
                1, 1, 'ie', 1) IS NOT NULL
)

SELECT  'Python'               AS "language",
        module                 AS "package_or_module",
        COUNT(*)               AS "occurrences"
FROM    python_modules
GROUP BY module

UNION ALL

SELECT  'R'                    AS "language",
        module                 AS "package_or_module",
        COUNT(*)               AS "occurrences"
FROM    r_modules
GROUP BY module

ORDER BY "language",
         "occurrences" DESC NULLS LAST;
The error information is:
{'status': 'error', 'error_msg': "##ERROR##000904 (42000): SQL compilation error: error line 5 at position 17\ninvalid identifier 'F.ID'"}
Please correct it and output only 1 complete SQL query.
[Self-refine]
2025-05-07 01:51:31 - Thread-95 (execute) - INFO - [Try to run SQL in self-refine]
```sql
WITH python_lines AS (
    SELECT  l.value::STRING AS line
    FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES        f
    JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS     c
              ON f."id" = c."id"
    CROSS JOIN LATERAL FLATTEN( input => SPLIT(c."content", '\n') ) l
    WHERE   f."path" ILIKE '%.py'
),
python_modules AS (
    SELECT  REGEXP_SUBSTR(
                line,
                '^\\s*(?:from|import)\\s+([A-Za-z0-9_\\.]+)',
                1, 1, 'ie', 1)         AS module
    FROM    python_lines
    WHERE   REGEXP_SUBSTR(
                line,
                '^\\s*(?:from|import)\\s+([A-Za-z0-9_\\.]+)',
                1, 1, 'ie', 1) IS NOT NULL
),

r_lines AS (
    SELECT  l.value::STRING AS line
    FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES        f
    JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS     c
              ON f."id" = c."id"
    CROSS JOIN LATERAL FLATTEN( input => SPLIT(c."content", '\n') ) l
    WHERE   f."path" ILIKE '%.r'
),
r_modules AS (
    SELECT  REGEXP_SUBSTR(
                line,
                'library\\s*\\(\\s*([A-Za-z0-9_\\.]+)',
                1, 1, 'ie', 1)         AS module
    FROM    r_lines
    WHERE   REGEXP_SUBSTR(
                line,
                'library\\s*\\(\\s*([A-Za-z0-9_\\.]+)',
                1, 1, 'ie', 1) IS NOT NULL
)

SELECT  'Python'               AS "language",
        module                 AS "package_or_module",
        COUNT(*)               AS "occurrences"
FROM    python_modules
GROUP BY module

UNION ALL

SELECT  'R'                    AS "language",
        module                 AS "package_or_module",
        COUNT(*)               AS "occurrences"
FROM    r_modules
GROUP BY module

ORDER BY "language", "occurrences" DESC NULLS LAST;
```
[Try to run SQL in self-refine]
2025-05-07 01:51:36 - Thread-95 (execute) - INFO - itercount: 2
2025-05-07 01:51:36 - Thread-95 (execute) - INFO - [Self-refine]
Input sql:
WITH python_lines AS (
    SELECT  l.value::STRING AS line
    FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES        f
    JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS     c
              ON f."id" = c."id"
    CROSS JOIN LATERAL FLATTEN( input => SPLIT(c."content", '\n') ) l
    WHERE   f."path" ILIKE '%.py'
),
python_modules AS (
    SELECT  REGEXP_SUBSTR(
                line,
                '^\\s*(?:from|import)\\s+([A-Za-z0-9_\\.]+)',
                1, 1, 'ie', 1)         AS module
    FROM    python_lines
    WHERE   REGEXP_SUBSTR(
                line,
                '^\\s*(?:from|import)\\s+([A-Za-z0-9_\\.]+)',
                1, 1, 'ie', 1) IS NOT NULL
),

r_lines AS (
    SELECT  l.value::STRING AS line
    FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES        f
    JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS     c
              ON f."id" = c."id"
    CROSS JOIN LATERAL FLATTEN( input => SPLIT(c."content", '\n') ) l
    WHERE   f."path" ILIKE '%.r'
),
r_modules AS (
    SELECT  REGEXP_SUBSTR(
                line,
                'library\\s*\\(\\s*([A-Za-z0-9_\\.]+)',
                1, 1, 'ie', 1)         AS module
    FROM    r_lines
    WHERE   REGEXP_SUBSTR(
                line,
                'library\\s*\\(\\s*([A-Za-z0-9_\\.]+)',
                1, 1, 'ie', 1) IS NOT NULL
)

SELECT  'Python'               AS "language",
        module                 AS "package_or_module",
        COUNT(*)               AS "occurrences"
FROM    python_modules
GROUP BY module

UNION ALL

SELECT  'R'                    AS "language",
        module                 AS "package_or_module",
        COUNT(*)               AS "occurrences"
FROM    r_modules
GROUP BY module

ORDER BY "language", "occurrences" DESC NULLS LAST;
The error information is:
{'status': 'error', 'error_msg': "##ERROR##100048 (2201B): Invalid regular expression: '^\\s*(?:from|import)\\s+([A-Za-z0-9_\\.]+)', no argument for repetition operator: ?"}
Please correct it and output only 1 complete SQL query.
[Self-refine]
2025-05-07 01:54:55 - Thread-95 (execute) - INFO - [Try to run SQL in self-refine]
```sql
WITH python_lines AS (
    SELECT  l.value::STRING AS line
    FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES    f
    JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
              ON f."id" = c."id"
    CROSS JOIN LATERAL FLATTEN( INPUT => SPLIT(c."content", '\n') ) l
    WHERE   f."path" ILIKE '%.py'
),
python_modules AS (
    SELECT  REGEXP_SUBSTR(
                line,
                '^\\s*(from|import)\\s+([A-Za-z0-9_.]+)',
                1, 1, 'ie', 2)         AS module
    FROM    python_lines
    WHERE   REGEXP_SUBSTR(
                line,
                '^\\s*(from|import)\\s+([A-Za-z0-9_.]+)',
                1, 1, 'ie') IS NOT NULL
),

r_lines AS (
    SELECT  l.value::STRING AS line
    FROM    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES    f
    JOIN    GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
              ON f."id" = c."id"
    CROSS JOIN LATERAL FLATTEN( INPUT => SPLIT(c."content", '\n') ) l
    WHERE   f."path" ILIKE '%.r'
),
r_modules AS (
    SELECT  REGEXP_SUBSTR(
                line,
                'library\\s*\\(\\s*([A-Za-z0-9_.]+)',
                1, 1, 'ie', 1)         AS module
    FROM    r_lines
    WHERE   REGEXP_SUBSTR(
                line,
                'library\\s*\\(\\s*([A-Za-z0-9_.]+)',
                1, 1, 'ie') IS NOT NULL
)

SELECT  'Python'               AS "language",
        module                 AS "package_or_module",
        COUNT(*)               AS "occurrences"
FROM    python_modules
GROUP BY module

UNION ALL

SELECT  'R'                    AS "language",
        module                 AS "package_or_module",
        COUNT(*)               AS "occurrences"
FROM    r_modules
GROUP BY module

ORDER BY "language",
         "occurrences" DESC NULLS LAST;
```
[Try to run SQL in self-refine]
2025-05-07 01:54:59 - Thread-95 (execute) - INFO - Total iteration counts: 2
