WITH film_revenue AS (      -- total revenue generated by each film
    SELECT 
        inv."film_id",
        SUM(pay."amount") AS film_revenue
    FROM SQLITE_SAKILA.SQLITE_SAKILA.PAYMENT    AS pay
    JOIN SQLITE_SAKILA.SQLITE_SAKILA.RENTAL     AS ren  ON pay."rental_id"   = ren."rental_id"
    JOIN SQLITE_SAKILA.SQLITE_SAKILA.INVENTORY  AS inv  ON ren."inventory_id" = inv."inventory_id"
    GROUP BY inv."film_id"
),
actor_count AS (            -- number of actors appearing in every film
    SELECT 
        fa."film_id",
        COUNT(*) AS actor_cnt
    FROM SQLITE_SAKILA.SQLITE_SAKILA.FILM_ACTOR AS fa
    GROUP BY fa."film_id"
),
actor_film_share AS (       -- each actor’s equal share of a film’s revenue
    SELECT
        fa."actor_id",
        fa."film_id",
        COALESCE(fr.film_revenue, 0)               AS film_revenue,
        ac.actor_cnt,
        COALESCE(fr.film_revenue, 0) / ac.actor_cnt AS actor_revenue
    FROM SQLITE_SAKILA.SQLITE_SAKILA.FILM_ACTOR   AS fa
    LEFT JOIN film_revenue                         AS fr ON fa."film_id" = fr."film_id"
    JOIN actor_count                               AS ac ON fa."film_id" = ac."film_id"
),
top_three_per_actor AS (     -- keep only the three highest-grossing films per actor
    SELECT
        afs.*,
        ROW_NUMBER() OVER (PARTITION BY afs."actor_id"
                           ORDER BY afs.actor_revenue DESC NULLS LAST) AS rn
    FROM actor_film_share AS afs
)
SELECT
    act."actor_id",
    act."first_name",
    act."last_name",
    f."film_id",
    f."title",
    ROUND(tp.actor_revenue,4) AS actor_revenue        -- retain up to four decimals
FROM top_three_per_actor            AS tp
JOIN SQLITE_SAKILA.SQLITE_SAKILA.ACTOR AS act ON tp."actor_id" = act."actor_id"
JOIN SQLITE_SAKILA.SQLITE_SAKILA.FILM  AS f   ON tp."film_id"  = f."film_id"
WHERE tp.rn <= 3
ORDER BY act."actor_id",
         tp.actor_revenue DESC NULLS LAST,
         f."title";